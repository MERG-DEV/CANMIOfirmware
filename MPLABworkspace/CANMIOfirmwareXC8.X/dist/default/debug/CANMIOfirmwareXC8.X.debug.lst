

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Sat Apr 09 19:17:48 2022

Microchip MPLAB XC8 C Compiler v2.36 (Free license) build 20220127204148 Og9 
     1                           	processor	18F26K80
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	vectors,global,abs,reloc=2,class=MYVECTS,delta=1
     6                           	psect	eeprom_data,global,class=EEDATA,delta=1
     7                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     8                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     9                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
    10                           	psect	_moduleNvDefs_text,global,ovrld,reloc=2,class=CODE,delta=1,noexec
    11                           	psect	_FCUparams_text,global,ovrld,reloc=2,class=CODE,delta=1,noexec
    12                           	psect	_FLiMparams_text,global,ovrld,reloc=2,class=CODE,delta=1,noexec
    13                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    16                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    17                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    18                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    19                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    20                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    21                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    22                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    23                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1,lowdata,noexec
    24                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1,lowdata,noexec
    25                           	psect	bssBANK6,global,class=BANK6,space=1,delta=1,lowdata,noexec
    26                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,noexec
    27                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    28                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    29                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    30                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    31                           	psect	text0,global,reloc=2,class=CODE,delta=1
    32                           	psect	text1,global,reloc=2,class=CODE,delta=1
    33                           	psect	text2,global,reloc=2,class=CODE,delta=1
    34                           	psect	text3,global,reloc=2,class=CODE,delta=1
    35                           	psect	text4,global,reloc=2,class=CODE,delta=1
    36                           	psect	text5,global,reloc=2,class=CODE,delta=1
    37                           	psect	text6,global,reloc=2,class=CODE,delta=1
    38                           	psect	text7,global,reloc=2,class=CODE,delta=1
    39                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    40                           	psect	text9,global,reloc=2,class=CODE,delta=1
    41                           	psect	text10,global,reloc=2,class=CODE,delta=1
    42                           	psect	text11,global,reloc=2,class=CODE,delta=1
    43                           	psect	text12,global,reloc=2,class=CODE,delta=1
    44                           	psect	text13,global,reloc=2,class=CODE,delta=1
    45                           	psect	text14,global,reloc=2,class=CODE,delta=1
    46                           	psect	text15,global,reloc=2,class=CODE,delta=1
    47                           	psect	text16,global,reloc=2,class=CODE,delta=1
    48                           	psect	text17,global,reloc=2,class=CODE,delta=1
    49                           	psect	text18,global,reloc=2,class=CODE,delta=1
    50                           	psect	text19,global,reloc=2,class=CODE,delta=1
    51                           	psect	text20,global,reloc=2,class=CODE,delta=1
    52                           	psect	text21,global,reloc=2,class=CODE,delta=1
    53                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    54                           	psect	text23,global,reloc=2,class=CODE,delta=1
    55                           	psect	text24,global,reloc=2,class=CODE,delta=1
    56                           	psect	text25,global,reloc=2,class=CODE,delta=1
    57                           	psect	text26,global,reloc=2,class=CODE,delta=1
    58                           	psect	text27,global,reloc=2,class=CODE,delta=1
    59                           	psect	text28,global,reloc=2,class=CODE,delta=1
    60                           	psect	text29,global,reloc=2,class=CODE,delta=1
    61                           	psect	text30,global,reloc=2,class=CODE,delta=1
    62                           	psect	text31,global,reloc=2,class=CODE,delta=1
    63                           	psect	text32,global,reloc=2,class=CODE,delta=1
    64                           	psect	text33,global,reloc=2,class=CODE,delta=1
    65                           	psect	text34,global,reloc=2,class=CODE,delta=1
    66                           	psect	text35,global,reloc=2,class=CODE,delta=1
    67                           	psect	text36,global,reloc=2,class=CODE,delta=1
    68                           	psect	text37,global,reloc=2,class=CODE,delta=1
    69                           	psect	text38,global,reloc=2,class=CODE,delta=1
    70                           	psect	text39,global,reloc=2,class=CODE,delta=1
    71                           	psect	text40,global,reloc=2,class=CODE,delta=1
    72                           	psect	text41,global,reloc=2,class=CODE,delta=1
    73                           	psect	text42,global,reloc=2,class=CODE,delta=1
    74                           	psect	text43,global,reloc=2,class=CODE,delta=1
    75                           	psect	text44,global,reloc=2,class=CODE,delta=1
    76                           	psect	text45,global,reloc=2,class=CODE,delta=1
    77                           	psect	text46,global,reloc=2,class=CODE,delta=1
    78                           	psect	text47,global,reloc=2,class=CODE,delta=1
    79                           	psect	text48,global,reloc=2,class=CODE,delta=1
    80                           	psect	text49,global,reloc=2,class=CODE,delta=1
    81                           	psect	text50,global,reloc=2,class=CODE,delta=1
    82                           	psect	text51,global,reloc=2,class=CODE,delta=1
    83                           	psect	text52,global,reloc=2,class=CODE,delta=1
    84                           	psect	text53,global,reloc=2,class=CODE,delta=1
    85                           	psect	text54,global,reloc=2,class=CODE,delta=1
    86                           	psect	text55,global,reloc=2,class=CODE,delta=1
    87                           	psect	text56,global,reloc=2,class=CODE,delta=1
    88                           	psect	text57,global,reloc=2,class=CODE,delta=1
    89                           	psect	text58,global,reloc=2,class=CODE,delta=1
    90                           	psect	text59,global,reloc=2,class=CODE,delta=1
    91                           	psect	text60,global,reloc=2,class=CODE,delta=1
    92                           	psect	text61,global,reloc=2,class=CODE,delta=1
    93                           	psect	text62,global,reloc=2,class=CODE,delta=1
    94                           	psect	text63,global,reloc=2,class=CODE,delta=1
    95                           	psect	text64,global,reloc=2,class=CODE,delta=1
    96                           	psect	text65,global,reloc=2,class=CODE,delta=1
    97                           	psect	text66,global,reloc=2,class=CODE,delta=1
    98                           	psect	text67,global,reloc=2,class=CODE,delta=1
    99                           	psect	text68,global,reloc=2,class=CODE,delta=1
   100                           	psect	text69,global,reloc=2,class=CODE,delta=1
   101                           	psect	text70,global,reloc=2,class=CODE,delta=1
   102                           	psect	text71,global,reloc=2,class=CODE,delta=1
   103                           	psect	text72,global,reloc=2,class=CODE,delta=1
   104                           	psect	text73,global,reloc=2,class=CODE,delta=1
   105                           	psect	text74,global,reloc=2,class=CODE,delta=1
   106                           	psect	text75,global,reloc=2,class=CODE,delta=1
   107                           	psect	text76,global,reloc=2,class=CODE,delta=1
   108                           	psect	text77,global,reloc=2,class=CODE,delta=1
   109                           	psect	text78,global,reloc=2,class=CODE,delta=1
   110                           	psect	text79,global,reloc=2,class=CODE,delta=1
   111                           	psect	text80,global,reloc=2,class=CODE,delta=1
   112                           	psect	text81,global,reloc=2,class=CODE,delta=1
   113                           	psect	text82,global,reloc=2,class=CODE,delta=1
   114                           	psect	text83,global,reloc=2,class=CODE,delta=1
   115                           	psect	text84,global,reloc=2,class=CODE,delta=1
   116                           	psect	text85,global,reloc=2,class=CODE,delta=1
   117                           	psect	text86,global,reloc=2,class=CODE,delta=1
   118                           	psect	text87,global,reloc=2,class=CODE,delta=1,group=1
   119                           	psect	text88,global,reloc=2,class=CODE,delta=1
   120                           	psect	text89,global,reloc=2,class=CODE,delta=1
   121                           	psect	text90,global,reloc=2,class=CODE,delta=1
   122                           	psect	text91,global,reloc=2,class=CODE,delta=1
   123                           	psect	text92,global,reloc=2,class=CODE,delta=1
   124                           	psect	text93,global,reloc=2,class=CODE,delta=1
   125                           	psect	text94,global,reloc=2,class=CODE,delta=1
   126                           	psect	text95,global,reloc=2,class=CODE,delta=1
   127                           	psect	text96,global,reloc=2,class=CODE,delta=1
   128                           	psect	text97,global,reloc=2,class=CODE,delta=1
   129                           	psect	text98,global,reloc=2,class=CODE,delta=1
   130                           	psect	text99,global,reloc=2,class=CODE,delta=1
   131                           	psect	text100,global,reloc=2,class=CODE,delta=1
   132                           	psect	text101,global,reloc=2,class=CODE,delta=1
   133                           	psect	text102,global,reloc=2,class=CODE,delta=1
   134                           	psect	text103,global,reloc=2,class=CODE,delta=1
   135                           	psect	text104,global,reloc=2,class=CODE,delta=1
   136                           	psect	text105,global,reloc=2,class=CODE,delta=1
   137                           	psect	text106,global,reloc=2,class=CODE,delta=1
   138                           	psect	text107,global,reloc=2,class=CODE,delta=1,group=1
   139                           	psect	text108,global,reloc=2,class=CODE,delta=1,group=1
   140                           	psect	text109,global,reloc=2,class=CODE,delta=1
   141                           	psect	text110,global,reloc=2,class=CODE,delta=1
   142                           	psect	text111,global,reloc=2,class=CODE,delta=1
   143                           	psect	text112,global,reloc=2,class=CODE,delta=1
   144                           	psect	text113,global,reloc=2,class=CODE,delta=1
   145                           	psect	text114,global,reloc=2,class=CODE,delta=1
   146                           	psect	text115,global,reloc=2,class=CODE,delta=1,group=1
   147                           	psect	text116,global,reloc=2,class=CODE,delta=1
   148                           	psect	text117,global,reloc=2,class=CODE,delta=1
   149                           	psect	text118,global,reloc=2,class=CODE,delta=1
   150                           	psect	text119,global,reloc=2,class=CODE,delta=1
   151                           	psect	text120,global,reloc=2,class=CODE,delta=1
   152                           	psect	text121,global,reloc=2,class=CODE,delta=1
   153                           	psect	text122,global,reloc=2,class=CODE,delta=1
   154                           	psect	text123,global,reloc=2,class=CODE,delta=1
   155                           	psect	text124,global,reloc=2,class=CODE,delta=1
   156                           	psect	text125,global,reloc=2,class=CODE,delta=1
   157                           	psect	text126,global,reloc=2,class=CODE,delta=1
   158                           	psect	text127,global,reloc=2,class=CODE,delta=1
   159                           	psect	text128,global,reloc=2,class=CODE,delta=1
   160                           	psect	text129,global,reloc=2,class=CODE,delta=1
   161                           	psect	text130,global,reloc=2,class=CODE,delta=1
   162                           	psect	text131,global,reloc=2,class=CODE,delta=1
   163                           	psect	text132,global,reloc=2,class=CODE,delta=1
   164                           	psect	text133,global,reloc=2,class=CODE,delta=1
   165                           	psect	text134,global,reloc=2,class=CODE,delta=1
   166                           	psect	text135,global,reloc=2,class=CODE,delta=1
   167                           	psect	text136,global,reloc=2,class=CODE,delta=1
   168                           	psect	text137,global,reloc=2,class=CODE,delta=1
   169                           	psect	text138,global,reloc=2,class=CODE,delta=1
   170                           	psect	text139,global,reloc=2,class=CODE,delta=1
   171                           	psect	text140,global,reloc=2,class=CODE,delta=1
   172                           	psect	text141,global,reloc=2,class=CODE,delta=1
   173                           	psect	text142,global,reloc=2,class=CODE,delta=1
   174                           	psect	text143,global,reloc=2,class=CODE,delta=1
   175                           	psect	text144,global,reloc=2,class=CODE,delta=1
   176                           	psect	text145,global,reloc=2,class=CODE,delta=1
   177                           	psect	text146,global,reloc=2,class=CODE,delta=1
   178                           	psect	text147,global,reloc=2,class=CODE,delta=1
   179                           	psect	text148,global,reloc=2,class=CODE,delta=1
   180                           	psect	text149,global,reloc=2,class=CODE,delta=1
   181                           	psect	text150,global,reloc=2,class=CODE,delta=1
   182                           	psect	text151,global,reloc=2,class=CODE,delta=1
   183                           	psect	text152,global,reloc=2,class=CODE,delta=1
   184                           	psect	text153,global,reloc=2,class=CODE,delta=1
   185                           	psect	text154,global,reloc=2,class=CODE,delta=1
   186                           	psect	text155,global,reloc=2,class=CODE,delta=1
   187                           	psect	text156,global,reloc=2,class=CODE,delta=1
   188                           	psect	text157,global,reloc=2,class=CODE,delta=1
   189                           	psect	text158,global,reloc=2,class=CODE,delta=1
   190                           	psect	text159,global,reloc=2,class=CODE,delta=1
   191                           	psect	text160,global,reloc=2,class=CODE,delta=1
   192                           	psect	text161,global,reloc=2,class=CODE,delta=1
   193                           	psect	text162,global,reloc=2,class=CODE,delta=1
   194                           	psect	text163,global,reloc=2,class=CODE,delta=1
   195                           	psect	text164,global,reloc=2,class=CODE,delta=1
   196                           	psect	text165,global,reloc=2,class=CODE,delta=1
   197                           	psect	text166,global,reloc=2,class=CODE,delta=1
   198                           	psect	text167,global,reloc=2,class=CODE,delta=1
   199                           	psect	text168,global,reloc=2,class=CODE,delta=1
   200                           	psect	text169,global,reloc=2,class=CODE,delta=1
   201                           	psect	text170,global,reloc=2,class=CODE,delta=1
   202                           	psect	text171,global,reloc=2,class=CODE,delta=1
   203                           	psect	text172,global,reloc=2,class=CODE,delta=1
   204                           	psect	text173,global,reloc=2,class=CODE,delta=1
   205                           	psect	text174,global,reloc=2,class=CODE,delta=1
   206                           	psect	text175,global,reloc=2,class=CODE,delta=1
   207                           	psect	text176,global,reloc=2,class=CODE,delta=1
   208                           	psect	text177,global,reloc=2,class=CODE,delta=1,group=2
   209                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
   210                           	psect	text179,global,reloc=2,class=CODE,delta=1
   211                           	psect	text180,global,reloc=2,class=CODE,delta=1
   212                           	psect	text181,global,reloc=2,class=CODE,delta=1
   213                           	psect	text182,global,reloc=2,class=CODE,delta=1
   214                           	psect	text183,global,reloc=2,class=CODE,delta=1
   215                           	psect	text184,global,reloc=2,class=CODE,delta=1
   216                           	psect	text185,global,reloc=2,class=CODE,delta=1
   217                           	psect	text186,global,reloc=2,class=CODE,delta=1
   218                           	psect	text187,global,reloc=2,class=CODE,delta=1
   219                           	psect	text188,global,reloc=2,class=CODE,delta=1
   220                           	psect	text189,global,reloc=2,class=CODE,delta=1
   221                           	psect	text190,global,reloc=2,class=CODE,delta=1
   222                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   223                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
   224                           	psect	text192,global,reloc=2,class=CODE,delta=1
   225                           	psect	text193,global,reloc=2,class=CODE,delta=1
   226                           	psect	text194,global,reloc=2,class=CODE,delta=1
   227                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   228                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   229                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   230                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
   231                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
   232  0000                     
   233                           ; Version 2.35
   234                           ; Generated 05/05/2021 GMT
   235                           ; 
   236                           ; Copyright © 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
   237                           ; All rights reserved.
   238                           ; 
   239                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   240                           ; 
   241                           ; Redistribution and use in source and binary forms, with or without modification, are
   242                           ; permitted provided that the following conditions are met:
   243                           ; 
   244                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   245                           ;        conditions and the following disclaimer.
   246                           ; 
   247                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   248                           ;        of conditions and the following disclaimer in the documentation and/or other
   249                           ;        materials provided with the distribution. Publication is not required when
   250                           ;        this file is used in an embedded application.
   251                           ; 
   252                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   253                           ;        software without specific prior written permission.
   254                           ; 
   255                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   256                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   257                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   258                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   259                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   260                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   261                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   262                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   263                           ; 
   264                           ; 
   265                           ; Code-generator required, PIC18F26K80 Definitions
   266                           ; 
   267                           ; SFR Addresses
   268  0000                     
   269                           	psect	vectors
   270  000800                     	org	2048	;# 
   271  000800  EF20 F004          	goto	2112	;# 
   272  000808                     	org	2056	;# 
   273  000808  EF24 F004          	goto	2120	;# 
   274  000818                     	org	2072	;# 
   275  000818  EF2C F004          	goto	2136	;# 
   276                           
   277                           	psect	eeprom_data
   278  F003FF                     	org	1023	;# 
   279  F003FF  00                 	db	0	;# 
   280  0000                     
   281                           	psect	idataBANK0
   282  00A722                     __pidataBANK0:
   283                           	callstack 0
   284                           
   285                           ;initializer for _eventTable
   286  00A722  80                 	db	128
   287  00A723  EF                 	db	239
   288  00A724  00                 	db	0
   289                           
   290                           	psect	idataBANK1
   291  00A725                     __pidataBANK1:
   292                           	callstack 0
   293                           
   294                           ;initializer for _NvBytePtr
   295  00A725  80                 	db	128
   296  00A726  FF                 	db	255
   297  00A727  00                 	db	0
   298  0000                     _moduleNvDefs_absaddr	set	65408
   299                           
   300                           	psect	smallconst
   301  000F00                     __psmallconst:
   302                           	callstack 0
   303  000F00  00                 	db	0
   304  000F01                     _configs:
   305                           	callstack 0
   306  000F01  0B                 	db	11
   307  000F02  43                 	db	67
   308  000F03  00                 	db	0
   309  000F04  FF                 	db	255
   310  000F05  0C                 	db	12
   311  000F06  43                 	db	67
   312  000F07  01                 	db	1
   313  000F08  FF                 	db	255
   314  000F09  0D                 	db	13
   315  000F0A  43                 	db	67
   316  000F0B  02                 	db	2
   317  000F0C  FF                 	db	255
   318  000F0D  0E                 	db	14
   319  000F0E  43                 	db	67
   320  000F0F  03                 	db	3
   321  000F10  FF                 	db	255
   322  000F11  0F                 	db	15
   323  000F12  43                 	db	67
   324  000F13  04                 	db	4
   325  000F14  FF                 	db	255
   326  000F15  10                 	db	16
   327  000F16  43                 	db	67
   328  000F17  05                 	db	5
   329  000F18  FF                 	db	255
   330  000F19  11                 	db	17
   331  000F1A  43                 	db	67
   332  000F1B  06                 	db	6
   333  000F1C  FF                 	db	255
   334  000F1D  12                 	db	18
   335  000F1E  43                 	db	67
   336  000F1F  07                 	db	7
   337  000F20  FF                 	db	255
   338  000F21  15                 	db	21
   339  000F22  42                 	db	66
   340  000F23  00                 	db	0
   341  000F24  0A                 	db	10
   342  000F25  16                 	db	22
   343  000F26  42                 	db	66
   344  000F27  01                 	db	1
   345  000F28  08                 	db	8
   346  000F29  19                 	db	25
   347  000F2A  42                 	db	66
   348  000F2B  04                 	db	4
   349  000F2C  09                 	db	9
   350  000F2D  1A                 	db	26
   351  000F2E  42                 	db	66
   352  000F2F  05                 	db	5
   353  000F30  FF                 	db	255
   354  000F31  03                 	db	3
   355  000F32  41                 	db	65
   356  000F33  01                 	db	1
   357  000F34  01                 	db	1
   358  000F35  02                 	db	2
   359  000F36  41                 	db	65
   360  000F37  00                 	db	0
   361  000F38  00                 	db	0
   362  000F39  05                 	db	5
   363  000F3A  41                 	db	65
   364  000F3B  03                 	db	3
   365  000F3C  03                 	db	3
   366  000F3D  07                 	db	7
   367  000F3E  41                 	db	65
   368  000F3F  05                 	db	5
   369  000F40  04                 	db	4
   370  000F41                     __end_of_configs:
   371                           	callstack 0
   372  0000                     _FCUparams_absaddr	set	2104
   373  000F41                     _spareparams:
   374                           	callstack 0
   375  000F41  00                 	db	0
   376  000F42  00                 	db	0
   377  000F43  00                 	db	0
   378  000F44  00                 	db	0
   379  000F45                     __end_of_spareparams:
   380                           	callstack 0
   381  0000                     _devId	set	4194302
   382  0000                     _nodeVarTable	set	65408
   383  0000                     _FLiMparams_absaddr	set	2080
   384  000F45                     _module_type:
   385  000F45  4D                 	db	77
   386  000F46  49                 	db	73
   387  000F47  4F                 	db	79
   388  000F48  20                 	db	32
   389  000F49  20                 	db	32
   390  000F4A  20                 	db	32
   391  000F4B  20                 	db	32
   392  000F4C  00                 	db	0
   393  000F4D                     __end_of_module_type:
   394                           	callstack 0
   395  0000                     _moduleNvDefs_absaddr	set	65408
   396  000F4D  00                 	db	0	; dummy byte at the end
   397  0000                     
   398                           	psect	_moduleNvDefs_text
   399  00FF80                     __p_moduleNvDefs_text:
   400                           	callstack 0
   401  00FF80                     _moduleNvDefs:
   402                           	callstack 0
   403  00FF80  00                 	db	0
   404  00FF81  00                 	db	0
   405  00FF82  00                 	db	0
   406  00FF83  00                 	db	0
   407  00FF84  00                 	db	0
   408  00FF85  00                 	db	0
   409  00FF86  00                 	db	0
   410  00FF87  00                 	db	0
   411  00FF88  00                 	db	0
   412  00FF89  00                 	db	0
   413  00FF8A  00                 	db	0
   414  00FF8B  00                 	db	0
   415  00FF8C  00                 	db	0
   416  00FF8D  00                 	db	0
   417  00FF8E  00                 	db	0
   418  00FF8F  00                 	db	0
   419  00FF90  00                 	db	0
   420  00FF91  00                 	db	0
   421  00FF92  00                 	db	0
   422  00FF93  00                 	db	0
   423  00FF94  00                 	db	0
   424  00FF95  00                 	db	0
   425  00FF96  00                 	db	0
   426  00FF97  00                 	db	0
   427  00FF98  00                 	db	0
   428  00FF99  00                 	db	0
   429  00FF9A  00                 	db	0
   430  00FF9B  00                 	db	0
   431  00FF9C  00                 	db	0
   432  00FF9D  00                 	db	0
   433  00FF9E  00                 	db	0
   434  00FF9F  00                 	db	0
   435  00FFA0  00                 	db	0
   436  00FFA1  00                 	db	0
   437  00FFA2  00                 	db	0
   438  00FFA3  00                 	db	0
   439  00FFA4  00                 	db	0
   440  00FFA5  00                 	db	0
   441  00FFA6  00                 	db	0
   442  00FFA7  00                 	db	0
   443  00FFA8  00                 	db	0
   444  00FFA9  00                 	db	0
   445  00FFAA  00                 	db	0
   446  00FFAB  00                 	db	0
   447  00FFAC  00                 	db	0
   448  00FFAD  00                 	db	0
   449  00FFAE  00                 	db	0
   450  00FFAF  00                 	db	0
   451  00FFB0  00                 	db	0
   452  00FFB1  00                 	db	0
   453  00FFB2  00                 	db	0
   454  00FFB3  00                 	db	0
   455  00FFB4  00                 	db	0
   456  00FFB5  00                 	db	0
   457  00FFB6  00                 	db	0
   458  00FFB7  00                 	db	0
   459  00FFB8  00                 	db	0
   460  00FFB9  00                 	db	0
   461  00FFBA  00                 	db	0
   462  00FFBB  00                 	db	0
   463  00FFBC  00                 	db	0
   464  00FFBD  00                 	db	0
   465  00FFBE  00                 	db	0
   466  00FFBF  00                 	db	0
   467  00FFC0  00                 	db	0
   468  00FFC1  00                 	db	0
   469  00FFC2  00                 	db	0
   470  00FFC3  00                 	db	0
   471  00FFC4  00                 	db	0
   472  00FFC5  00                 	db	0
   473  00FFC6  00                 	db	0
   474  00FFC7  00                 	db	0
   475  00FFC8  00                 	db	0
   476  00FFC9  00                 	db	0
   477  00FFCA  00                 	db	0
   478  00FFCB  00                 	db	0
   479  00FFCC  00                 	db	0
   480  00FFCD  00                 	db	0
   481  00FFCE  00                 	db	0
   482  00FFCF  00                 	db	0
   483  00FFD0  00                 	db	0
   484  00FFD1  00                 	db	0
   485  00FFD2  00                 	db	0
   486  00FFD3  00                 	db	0
   487  00FFD4  00                 	db	0
   488  00FFD5  00                 	db	0
   489  00FFD6  00                 	db	0
   490  00FFD7  00                 	db	0
   491  00FFD8  00                 	db	0
   492  00FFD9  00                 	db	0
   493  00FFDA  00                 	db	0
   494  00FFDB  00                 	db	0
   495  00FFDC  00                 	db	0
   496  00FFDD  00                 	db	0
   497  00FFDE  00                 	db	0
   498  00FFDF  00                 	db	0
   499  00FFE0  00                 	db	0
   500  00FFE1  00                 	db	0
   501  00FFE2  00                 	db	0
   502  00FFE3  00                 	db	0
   503  00FFE4  00                 	db	0
   504  00FFE5  00                 	db	0
   505  00FFE6  00                 	db	0
   506  00FFE7  00                 	db	0
   507  00FFE8  00                 	db	0
   508  00FFE9  00                 	db	0
   509  00FFEA  00                 	db	0
   510  00FFEB  00                 	db	0
   511  00FFEC  00                 	db	0
   512  00FFED  00                 	db	0
   513  00FFEE  00                 	db	0
   514  00FFEF  00                 	db	0
   515  00FFF0  00                 	db	0
   516  00FFF1  00                 	db	0
   517  00FFF2  00                 	db	0
   518  00FFF3  00                 	db	0
   519  00FFF4  00                 	db	0
   520  00FFF5  00                 	db	0
   521  00FFF6  00                 	db	0
   522  00FFF7  00                 	db	0
   523  00FFF8  00                 	db	0
   524  00FFF9  00                 	db	0
   525  00FFFA  00                 	db	0
   526  00FFFB  00                 	db	0
   527  00FFFC  00                 	db	0
   528  00FFFD  00                 	db	0
   529  00FFFE  00                 	db	0
   530  00FFFF  00                 	db	0
   531  010000                     __end_of_moduleNvDefs:
   532                           	callstack 0
   533  0000                     _FCUparams_absaddr	set	2104
   534                           
   535                           	psect	_FCUparams_text
   536  000838                     __p_FCUparams_text:
   537                           	callstack 0
   538  000838                     _FCUparams:
   539                           	callstack 0
   540  000838  0014               	dw	20
   541  00083A  0F45               	dw	_module_type& (0+65535)
   542  00083C  0000               	dw	_module_type shr (0+16)
   543  00083E  034E               	dw	846
   544  000840                     __end_of_FCUparams:
   545                           	callstack 0
   546  0000                     _devId	set	4194302
   547  0000                     _nodeVarTable	set	65408
   548  0000                     _FLiMparams_absaddr	set	2080
   549                           
   550                           	psect	_FLiMparams_text
   551  000820                     __p_FLiMparams_text:
   552                           	callstack 0
   553  000820                     _FLiMparams:
   554                           	callstack 0
   555  000820  A5                 	db	165
   556  000821  63                 	db	99
   557  000822  20                 	db	32
   558  000823  FF                 	db	255
   559  000824  14                 	db	20
   560  000825  7F                 	db	127
   561  000826  03                 	db	3
   562  000827  1B                 	db	27
   563  000828  0F                 	db	15
   564  000829  01                 	db	1
   565  00082A  0800               	dw	2048
   566  00082C  0000               	dw	0
   567  00082E  0000               	dw	0
   568  000830  0000               	dw	0
   569  000832  01                 	db	1
   570  000833  01                 	db	1
   571  000834                     __end_of_FLiMparams:
   572                           	callstack 0
   573  0000                     _TMR1	set	4046
   574  0000                     _EEDATA	set	3955
   575  0000                     _EEADR	set	3956
   576  0000                     _EEADRH	set	3957
   577  0000                     _COMSTATbits	set	3953
   578  0000                     _PIR5bits	set	3959
   579  0000                     _PIE5bits	set	3958
   580  0000                     _TXBIEbits	set	3711
   581  0000                     _BIE0	set	3710
   582  0000                     _MSEL3	set	3708
   583  0000                     _MSEL2	set	3707
   584  0000                     _MSEL1	set	3706
   585  0000                     _MSEL0	set	3705
   586  0000                     _RXFBCON7	set	3704
   587  0000                     _RXFBCON6	set	3703
   588  0000                     _RXFBCON5	set	3702
   589  0000                     _RXFBCON4	set	3701
   590  0000                     _RXFBCON3	set	3700
   591  0000                     _RXFBCON2	set	3699
   592  0000                     _RXFBCON1	set	3698
   593  0000                     _RXF0SIDL	set	3809
   594  0000                     _RXM0SIDH	set	3832
   595  0000                     _CIOCON	set	3952
   596  0000                     _ECANCON	set	3954
   597  0000                     _ANCON1	set	3932
   598  0000                     _ANCON0	set	3933
   599  0000                     _ADRESL	set	4035
   600  0000                     _ADRESH	set	4036
   601  0000                     _ADCON0bits	set	4034
   602  0000                     _B0CON	set	3712
   603                           
   604                           	psect	nvBANK0
   605  0000EC                     __pnvBANK0:
   606                           	callstack 0
   607  0000EC                     _NV:
   608                           	callstack 0
   609  0000EC                     	ds	2
   610                           
   611                           	psect	nvBANK1
   612  0001F6                     __pnvBANK1:
   613                           	callstack 0
   614  0001F6                     _flashblock:
   615                           	callstack 0
   616  0001F6                     	ds	2
   617  0000                     _TXB2CONbits	set	3840
   618  0000                     _TXB1CONbits	set	3856
   619  0000                     _TXB0CONbits	set	3872
   620  0000                     _T0CONbits	set	4053
   621  0000                     _LATBbits	set	3978
   622  0000                     _TRISBbits	set	3987
   623  0000                     _EECON1	set	3967
   624  0000                     _TBLPTRU	set	4088
   625  0000                     _PORTAbits	set	3968
   626  0000                     _BRGCON1	set	3651
   627  0000                     _BSEL0	set	3709
   628  0000                     _WPUB	set	3931
   629  0000                     _PORTA	set	3968
   630  0000                     _LATA	set	3977
   631  0000                     _ADCON2bits	set	4032
   632  0000                     _ADCON1bits	set	4033
   633  0000                     _T1CONbits	set	4045
   634  0000                     _RCONbits	set	4048
   635  0000                     _TRISA	set	3986
   636  0000                     _OSCTUNEbits	set	3995
   637  0000                     _LATC	set	3979
   638  0000                     _LATB	set	3978
   639  0000                     _PORTC	set	3970
   640  0000                     _PORTB	set	3969
   641  0000                     _PIE1bits	set	3997
   642  0000                     _PIR1bits	set	3998
   643  0000                     _T0CON	set	4053
   644  0000                     _INTCON2bits	set	4081
   645  0000                     _TBLPTR	set	4086
   646  0000                     _TABLAT	set	4085
   647  0000                     _INTCONbits	set	4082
   648  0000                     _CANSTATbits	set	3950
   649  0000                     _CANCON	set	3951
   650  0000                     _IPR5	set	3960
   651  0000                     _RXB0CON	set	3936
   652  0000                     _TRISC	set	3988
   653  0000                     _TRISB	set	3987
   654  0000                     _PIE2bits	set	4000
   655  0000                     _PIR2bits	set	4001
   656  0000                     _T1GCONbits	set	4010
   657  0000                     _T3GCONbits	set	4016
   658  0000                     _TMR3	set	4018
   659  0000                     _PIR4bits	set	4023
   660  0000                     _T3CONbits	set	4017
   661  0000                     _EECON2	set	3966
   662  0000                     _EECON1bits	set	3967
   663  0000                     _RXFBCON0	set	3697
   664  0000                     _BRGCON3	set	3653
   665  0000                     _BRGCON2	set	3652
   666  0000                     _TXB2SIDL	set	3842
   667  0000                     _TXB2SIDH	set	3841
   668  0000                     _TXB2DLC	set	3845
   669  0000                     _TXB2CON	set	3840
   670  0000                     _TXB1CON	set	3856
   671  0000                     _RXM1EIDL	set	3839
   672  0000                     _RXM1EIDH	set	3838
   673  0000                     _RXM1SIDL	set	3837
   674  0000                     _RXM1SIDH	set	3836
   675  0000                     _RXM0EIDL	set	3835
   676  0000                     _RXM0EIDH	set	3834
   677  0000                     _RXM0SIDL	set	3833
   678  0000                     _TXB0CON	set	3872
   679  0000                     _RXB1CON	set	3888
   680  0000                     _B1CON	set	3728
   681  0000                     _B2CON	set	3744
   682  0000                     _B3CON	set	3760
   683  0000                     _B4CON	set	3776
   684  0000                     _B5CON	set	3792
   685  0000                     _TXB0SIDL	set	3874
   686  0000                     _TXB0SIDH	set	3873
   687  0000                     _TXB0DLC	set	3877
   688  0000                     _TXB1SIDL	set	3858
   689  0000                     _TXB1SIDH	set	3857
   690  0000                     _TXB1DLC	set	3861
   691  0000                     _TMR0H	set	4055
   692  0000                     _TMR0L	set	4054
   693                           
   694                           ; #config settings
   695                           
   696                           	psect	cinit
   697  007A54                     __pcinit:
   698                           	callstack 0
   699  007A54                     start_initialization:
   700                           	callstack 0
   701  007A54                     __initialization:
   702                           	callstack 0
   703                           
   704                           ; Initialize objects allocated to BANK1 (3 bytes)
   705                           ; load TBLPTR registers with __pidataBANK1
   706  007A54  0E25               	movlw	low __pidataBANK1
   707  007A56  6EF6               	movwf	tblptrl,c
   708  007A58  0EA7               	movlw	high __pidataBANK1
   709  007A5A  6EF7               	movwf	tblptrh,c
   710  007A5C  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   711  007A5E  6EF8               	movwf	tblptru,c
   712  007A60  0009               	tblrd		*+	;fetch initializer
   713  007A62  CFF5 F1F3          	movff	tablat,__pdataBANK1
   714  007A66  0009               	tblrd		*+	;fetch initializer
   715  007A68  CFF5 F1F4          	movff	tablat,__pdataBANK1+1
   716  007A6C  0009               	tblrd		*+	;fetch initializer
   717  007A6E  CFF5 F1F5          	movff	tablat,__pdataBANK1+2
   718                           
   719                           ; Initialize objects allocated to BANK0 (3 bytes)
   720                           ; load TBLPTR registers with __pidataBANK0
   721  007A72  0E22               	movlw	low __pidataBANK0
   722  007A74  6EF6               	movwf	tblptrl,c
   723  007A76  0EA7               	movlw	high __pidataBANK0
   724  007A78  6EF7               	movwf	tblptrh,c
   725  007A7A  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   726  007A7C  6EF8               	movwf	tblptru,c
   727  007A7E  0009               	tblrd		*+	;fetch initializer
   728  007A80  CFF5 F0E9          	movff	tablat,__pdataBANK0
   729  007A84  0009               	tblrd		*+	;fetch initializer
   730  007A86  CFF5 F0EA          	movff	tablat,__pdataBANK0+1
   731  007A8A  0009               	tblrd		*+	;fetch initializer
   732  007A8C  CFF5 F0EB          	movff	tablat,__pdataBANK0+2
   733                           
   734                           ; Clear objects allocated to BIGRAM (640 bytes)
   735  007A90  EE07  F000         	lfsr	0,__pbssBIGRAM
   736  007A94  EE12 F080          	lfsr	1,640
   737  007A98                     clear_0:
   738  007A98  6AEE               	clrf	postinc0,c
   739  007A9A  50E5               	movf	postdec1,w,c
   740  007A9C  50E1               	movf	fsr1l,w,c
   741  007A9E  E1FC               	bnz	clear_0
   742  007AA0  50E2               	movf	fsr1h,w,c
   743  007AA2  E1FA               	bnz	clear_0
   744                           
   745                           ; Clear objects allocated to BANK6 (256 bytes)
   746  007AA4  EE06  F000         	lfsr	0,__pbssBANK6
   747  007AA8  EE11 F000          	lfsr	1,256
   748  007AAC                     clear_1:
   749  007AAC  6AEE               	clrf	postinc0,c
   750  007AAE  50E5               	movf	postdec1,w,c
   751  007AB0  50E1               	movf	fsr1l,w,c
   752  007AB2  E1FC               	bnz	clear_1
   753  007AB4  50E2               	movf	fsr1h,w,c
   754  007AB6  E1FA               	bnz	clear_1
   755                           
   756                           ; Clear objects allocated to BANK5 (256 bytes)
   757  007AB8  EE05  F000         	lfsr	0,__pbssBANK5
   758  007ABC  EE11 F000          	lfsr	1,256
   759  007AC0                     clear_2:
   760  007AC0  6AEE               	clrf	postinc0,c
   761  007AC2  50E5               	movf	postdec1,w,c
   762  007AC4  50E1               	movf	fsr1l,w,c
   763  007AC6  E1FC               	bnz	clear_2
   764  007AC8  50E2               	movf	fsr1h,w,c
   765  007ACA  E1FA               	bnz	clear_2
   766                           
   767                           ; Clear objects allocated to BANK4 (128 bytes)
   768  007ACC  EE04  F000         	lfsr	0,__pbssBANK4
   769  007AD0  0E80               	movlw	128
   770  007AD2                     clear_3:
   771  007AD2  6AEE               	clrf	postinc0,c
   772  007AD4  06E8               	decf	wreg,f,c
   773  007AD6  E1FD               	bnz	clear_3
   774                           
   775                           ; Clear objects allocated to BANK3 (200 bytes)
   776  007AD8  EE03  F000         	lfsr	0,__pbssBANK3
   777  007ADC  0EC8               	movlw	200
   778  007ADE                     clear_4:
   779  007ADE  6AEE               	clrf	postinc0,c
   780  007AE0  06E8               	decf	wreg,f,c
   781  007AE2  E1FD               	bnz	clear_4
   782                           
   783                           ; Clear objects allocated to BANK2 (204 bytes)
   784  007AE4  EE02  F000         	lfsr	0,__pbssBANK2
   785  007AE8  0ECC               	movlw	204
   786  007AEA                     clear_5:
   787  007AEA  6AEE               	clrf	postinc0,c
   788  007AEC  06E8               	decf	wreg,f,c
   789  007AEE  E1FD               	bnz	clear_5
   790                           
   791                           ; Clear objects allocated to BANK1 (237 bytes)
   792  007AF0  EE01  F000         	lfsr	0,__pbssBANK1
   793  007AF4  0EED               	movlw	237
   794  007AF6                     clear_6:
   795  007AF6  6AEE               	clrf	postinc0,c
   796  007AF8  06E8               	decf	wreg,f,c
   797  007AFA  E1FD               	bnz	clear_6
   798                           
   799                           ; Clear objects allocated to BANK0 (3 bytes)
   800  007AFC  0100               	movlb	0
   801  007AFE  6BE8               	clrf	(__pbssBANK0+2)& (0+255),b
   802  007B00  6BE7               	clrf	(__pbssBANK0+1)& (0+255),b
   803  007B02  6BE6               	clrf	__pbssBANK0& (0+255),b
   804                           
   805                           ; Clear objects allocated to COMRAM (44 bytes)
   806  007B04  EE00  F001         	lfsr	0,__pbssCOMRAM
   807  007B08  0E2C               	movlw	44
   808  007B0A                     clear_7:
   809  007B0A  6AEE               	clrf	postinc0,c
   810  007B0C  06E8               	decf	wreg,f,c
   811  007B0E  E1FD               	bnz	clear_7
   812  007B10                     end_of_initialization:
   813                           	callstack 0
   814  007B10                     __end_of__initialization:
   815                           	callstack 0
   816  007B10  904F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   817  007B12  924F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   818  007B14  0100               	movlb	0
   819  007B16  EFD9  F023         	goto	_main	;jump to C main() function
   820                           
   821                           	psect	bssCOMRAM
   822  000001                     __pbssCOMRAM:
   823                           	callstack 0
   824  000001                     _nodeID:
   825                           	callstack 0
   826  000001                     	ds	2
   827  000003                     _timerExtension2:
   828                           	callstack 0
   829  000003                     	ds	1
   830  000004                     _timerExtension1:
   831                           	callstack 0
   832  000004                     	ds	1
   833  000005                     _flashFlags:
   834                           	callstack 0
   835  000005                     	ds	1
   836  000006                     _prevFlimState:
   837                           	callstack 0
   838  000006                     	ds	1
   839  000007                     _enumerationInProgress:
   840                           	callstack 0
   841  000007                     	ds	1
   842  000008                     _resultRequired:
   843                           	callstack 0
   844  000008                     	ds	1
   845  000009                     _enumerationRequired:
   846                           	callstack 0
   847  000009                     	ds	1
   848  00000A                     _maxCanRxFifo:
   849                           	callstack 0
   850  00000A                     	ds	1
   851  00000B                     _maxCanTxFifo:
   852                           	callstack 0
   853  00000B                     	ds	1
   854  00000C                     _canTransmitFailed:
   855                           	callstack 0
   856  00000C                     	ds	1
   857  00000D                     _larbRetryCount:
   858                           	callstack 0
   859  00000D                     	ds	1
   860  00000E                     _rxIndexNextUsed:
   861                           	callstack 0
   862  00000E                     	ds	1
   863  00000F                     _rxIndexNextFree:
   864                           	callstack 0
   865  00000F                     	ds	1
   866  000010                     _txIndexNextUsed:
   867                           	callstack 0
   868  000010                     	ds	1
   869  000011                     _txIndexNextFree:
   870                           	callstack 0
   871  000011                     	ds	1
   872  000012                     _servoInBlock:
   873                           	callstack 0
   874  000012                     	ds	1
   875  000013                     _timedResponseStep:
   876                           	callstack 0
   877  000013                     	ds	1
   878  000014                     _timedResponse:
   879                           	callstack 0
   880  000014                     	ds	1
   881  000015                     _started:
   882                           	callstack 0
   883  000015                     	ds	1
   884  000016                     _flimState:
   885                           	callstack 0
   886  000016                     	ds	1
   887  000017                     _clkMHz:
   888                           	callstack 0
   889  000017                     	ds	1
   890  000018                     _haveRequestedAdc:
   891                           	callstack 0
   892  000018                     	ds	1
   893  000019                     _setupState:
   894                           	callstack 0
   895  000019                     	ds	1
   896  00001A                     _setupIo:
   897                           	callstack 0
   898  00001A                     	ds	1
   899  00001B                     _expedited:
   900                           	callstack 0
   901  00001B                     	ds	1
   902  00001C                     _cbusMsg:
   903                           	callstack 0
   904  00001C                     	ds	16
   905  00002C                     _canID:
   906                           	callstack 0
   907  00002C                     	ds	1
   908                           
   909                           	psect	bssBANK0
   910  0000E6                     __pbssBANK0:
   911                           	callstack 0
   912  0000E6                     _io@main$F1444:
   913                           	callstack 0
   914  0000E6                     	ds	1
   915  0000E7                     _io:
   916                           	callstack 0
   917  0000E7                     	ds	1
   918  0000E8                     _portInProgress:
   919                           	callstack 0
   920  0000E8                     	ds	1
   921                           
   922                           	psect	dataBANK0
   923  0000E9                     __pdataBANK0:
   924                           	callstack 0
   925  0000E9                     _eventTable:
   926                           	callstack 0
   927  0000E9                     	ds	3
   928                           
   929                           	psect	bssBANK1
   930  000100                     __pbssBANK1:
   931                           	callstack 0
   932  000100                     _speed:
   933                           	callstack 0
   934  000100                     	ds	32
   935  000120                     _pollCount:
   936                           	callstack 0
   937  000120                     	ds	16
   938  000130                     _stepsPerPollSpeed:
   939                           	callstack 0
   940  000130                     	ds	16
   941  000140                     _servoState:
   942                           	callstack 0
   943  000140                     	ds	16
   944  000150                     _outputState:
   945                           	callstack 0
   946  000150                     	ds	16
   947  000160                     _flashDelays:
   948                           	callstack 0
   949  000160                     	ds	16
   950  000170                     _targetPos:
   951                           	callstack 0
   952  000170                     	ds	16
   953  000180                     _currentPos:
   954                           	callstack 0
   955  000180                     	ds	16
   956  000190                     _analogueState:
   957                           	callstack 0
   958  000190                     	ds	16
   959  0001A0                     _flickerTime:
   960                           	callstack 0
   961  0001A0                     	ds	4
   962  0001A4                     _flashTime:
   963                           	callstack 0
   964  0001A4                     	ds	4
   965  0001A8                     _producedEvent:
   966                           	callstack 0
   967  0001A8                     	ds	4
   968  0001AC                     _switchTime:
   969                           	callstack 0
   970  0001AC                     	ds	4
   971  0001B0                     _enumerationStartTime:
   972                           	callstack 0
   973  0001B0                     	ds	4
   974  0001B4                     _canTransmitTimeout:
   975                           	callstack 0
   976  0001B4                     	ds	4
   977  0001B8                     _startWait:
   978                           	callstack 0
   979  0001B8                     	ds	4
   980  0001BC                     _lastTimedResponseTime:
   981                           	callstack 0
   982  0001BC                     	ds	4
   983  0001C0                     _lastActionPollTime:
   984                           	callstack 0
   985  0001C0                     	ds	4
   986  0001C4                     _lastInputScanTime:
   987                           	callstack 0
   988  0001C4                     	ds	4
   989  0001C8                     _lastServoStartTime:
   990                           	callstack 0
   991  0001C8                     	ds	4
   992  0001CC                     _startTime:
   993                           	callstack 0
   994  0001CC                     	ds	4
   995  0001D0                     _deviceid:
   996                           	callstack 0
   997  0001D0                     	ds	2
   998  0001D2                     _flickerState:
   999                           	callstack 0
  1000  0001D2                     	ds	1
  1001  0001D3                     _flashState:
  1002                           	callstack 0
  1003  0001D3                     	ds	1
  1004  0001D4                     _flashidx:
  1005                           	callstack 0
  1006  0001D4                     	ds	1
  1007  0001D5                     _NV_changed:
  1008                           	callstack 0
  1009  0001D5                     	ds	1
  1010  0001D6                     _FlashStatus:
  1011                           	callstack 0
  1012  0001D6                     	ds	1
  1013  0001D7                     _FLiMFlash:
  1014                           	callstack 0
  1015  0001D7                     	ds	1
  1016  0001D8                     _rxFifoUsage:
  1017                           	callstack 0
  1018  0001D8                     	ds	1
  1019  0001D9                     _txFifoUsage:
  1020                           	callstack 0
  1021  0001D9                     	ds	1
  1022  0001DA                     _rxOflowCount:
  1023                           	callstack 0
  1024  0001DA                     	ds	1
  1025  0001DB                     _txOflowCount:
  1026                           	callstack 0
  1027  0001DB                     	ds	1
  1028  0001DC                     _txTimeoutCount:
  1029                           	callstack 0
  1030  0001DC                     	ds	1
  1031  0001DD                     _txErrCount:
  1032                           	callstack 0
  1033  0001DD                     	ds	1
  1034  0001DE                     _larbCount:
  1035                           	callstack 0
  1036  0001DE                     	ds	1
  1037  0001DF                     _expeditedWriteIdx:
  1038                           	callstack 0
  1039  0001DF                     	ds	1
  1040  0001E0                     _expeditedReadIdx:
  1041                           	callstack 0
  1042  0001E0                     	ds	1
  1043  0001E1                     _normalWriteIdx:
  1044                           	callstack 0
  1045  0001E1                     	ds	1
  1046  0001E2                     _normalReadIdx:
  1047                           	callstack 0
  1048  0001E2                     	ds	1
  1049  0001E3                     _expeditedQueue:
  1050                           	callstack 0
  1051  0001E3                     	ds	5
  1052  0001E8                     _normalQueue:
  1053                           	callstack 0
  1054  0001E8                     	ds	5
  1055                           
  1056                           	psect	dataBANK1
  1057  0001F3                     __pdataBANK1:
  1058                           	callstack 0
  1059  0001F3                     _NvBytePtr:
  1060                           	callstack 0
  1061  0001F3                     	ds	3
  1062                           
  1063                           	psect	bssBANK2
  1064  000200                     __pbssBANK2:
  1065                           	callstack 0
  1066  000200                     _ticksWhenStopped:
  1067                           	callstack 0
  1068  000200                     	ds	64
  1069  000240                     _evs:
  1070                           	callstack 0
  1071  000240                     	ds	20
  1072  000254                     _enumerationResults:
  1073                           	callstack 0
  1074  000254                     	ds	16
  1075  000264                     _loopCount:
  1076                           	callstack 0
  1077  000264                     	ds	16
  1078  000274                     _pollsPerStepSpeed:
  1079                           	callstack 0
  1080  000274                     	ds	16
  1081  000284                     _delayCount:
  1082                           	callstack 0
  1083  000284                     	ds	16
  1084  000294                     _inputState:
  1085                           	callstack 0
  1086  000294                     	ds	16
  1087  0002A4                     _pulseDelays:
  1088                           	callstack 0
  1089  0002A4                     	ds	16
  1090  0002B4                     _bounceState:
  1091                           	callstack 0
  1092  0002B4                     	ds	16
  1093  0002C4                     _expeditedQueueBuf:
  1094                           	callstack 0
  1095  0002C4                     	ds	8
  1096                           
  1097                           	psect	bssBANK3
  1098  000300                     __pbssBANK3:
  1099                           	callstack 0
  1100  000300                     _happening2Event:
  1101                           	callstack 0
  1102  000300                     	ds	72
  1103  000348                     _flashbuf:
  1104                           	callstack 0
  1105  000348                     	ds	64
  1106  000388                     _normalQueueBuf:
  1107                           	callstack 0
  1108  000388                     	ds	64
  1109                           
  1110                           	psect	bssBANK4
  1111  000400                     __pbssBANK4:
  1112                           	callstack 0
  1113  000400                     _nvCache:
  1114                           	callstack 0
  1115  000400                     	ds	128
  1116                           
  1117                           	psect	bssBANK5
  1118  000500                     __pbssBANK5:
  1119                           	callstack 0
  1120  000500                     _canRxFifo:
  1121                           	callstack 0
  1122  000500                     	ds	256
  1123                           
  1124                           	psect	bssBANK6
  1125  000600                     __pbssBANK6:
  1126                           	callstack 0
  1127  000600                     _canTxFifo:
  1128                           	callstack 0
  1129  000600                     	ds	256
  1130                           
  1131                           	psect	bssBIGRAM
  1132  000700                     __pbssBIGRAM:
  1133                           	callstack 0
  1134  000700                     _eventChains:
  1135                           	callstack 0
  1136  000700                     	ds	640
  1137                           
  1138                           	psect	cstackBANK2
  1139  0002CC                     __pcstackBANK2:
  1140                           	callstack 0
  1141  0002CC                     checkCBUS@msg:
  1142                           	callstack 0
  1143                           
  1144                           ; 20 bytes @ 0x0
  1145  0002CC                     	ds	20
  1146  0002E0                     ??_main:
  1147                           
  1148                           ; 1 bytes @ 0x14
  1149  0002E0                     	ds	9
  1150                           
  1151                           	psect	cstackBANK1
  1152  0001ED                     __pcstackBANK1:
  1153                           	callstack 0
  1154  0001ED                     ??_parseFLiMCmd:
  1155                           
  1156                           ; 1 bytes @ 0x0
  1157  0001ED                     	ds	6
  1158                           
  1159                           	psect	cstackBANK0
  1160  000060                     __pcstackBANK0:
  1161                           	callstack 0
  1162  000060                     ??_canFillRxFifo:
  1163                           
  1164                           ; 1 bytes @ 0x0
  1165  000060                     	ds	5
  1166  000065                     _canFillRxFifo$3500:
  1167                           	callstack 0
  1168                           
  1169                           ; 2 bytes @ 0x5
  1170  000065                     	ds	2
  1171  000067                     canFillRxFifo@hiIndex:
  1172                           	callstack 0
  1173                           
  1174                           ; 1 bytes @ 0x7
  1175  000067                     	ds	1
  1176  000068                     canFillRxFifo@ptr:
  1177                           	callstack 0
  1178                           
  1179                           ; 2 bytes @ 0x8
  1180  000068                     	ds	2
  1181  00006A                     ??_low_isr:
  1182                           
  1183                           ; 1 bytes @ 0xA
  1184  00006A                     	ds	7
  1185  000071                     ??_readInput:
  1186  000071                     ??_bounceUp:
  1187  000071                     ??_writeFlashShort:
  1188  000071                     ?__PointBuffer:
  1189                           	callstack 0
  1190  000071                     ?_readCPUType:
  1191                           	callstack 0
  1192  000071                     ?___wmul:
  1193                           	callstack 0
  1194  000071                     ?___lwdiv:
  1195                           	callstack 0
  1196  000071                     ?___lwmod:
  1197                           	callstack 0
  1198  000071                     ?_tickGet:
  1199                           	callstack 0
  1200  000071                     ?___lmul:
  1201                           	callstack 0
  1202  000071                     initAnaloguePort@io:
  1203                           	callstack 0
  1204  000071                     initBounce@io:
  1205                           	callstack 0
  1206  000071                     initOutputs@io:
  1207                           	callstack 0
  1208  000071                     setOutputPin@state:
  1209                           	callstack 0
  1210  000071                     needsStarting@action:
  1211                           	callstack 0
  1212  000071                     completed@action:
  1213                           	callstack 0
  1214  000071                     startServoOutput@action:
  1215                           	callstack 0
  1216  000071                     startBounceOutput@action:
  1217                           	callstack 0
  1218  000071                     startMultiOutput@action:
  1219                           	callstack 0
  1220  000071                     setServoState@action:
  1221                           	callstack 0
  1222  000071                     setBounceState@action:
  1223                           	callstack 0
  1224  000071                     setMultiState@action:
  1225                           	callstack 0
  1226  000071                     setServoPosition@pos:
  1227                           	callstack 0
  1228  000071                     doEnum@sendResult:
  1229                           	callstack 0
  1230  000071                     evtIdxToTableIndex@evtIdx:
  1231                           	callstack 0
  1232  000071                     tableIndexToEvtIdx@tableIndex:
  1233                           	callstack 0
  1234  000071                     setStatusLed@FLiMLED:
  1235                           	callstack 0
  1236  000071                     initTicker@priority:
  1237                           	callstack 0
  1238  000071                     ___lbdiv@divisor:
  1239                           	callstack 0
  1240  000071                     push@q:
  1241                           	callstack 0
  1242  000071                     pop@q:
  1243                           	callstack 0
  1244  000071                     peek@q:
  1245                           	callstack 0
  1246  000071                     quantity@q:
  1247                           	callstack 0
  1248  000071                     delete@q:
  1249                           	callstack 0
  1250  000071                     thisNN@rx_ptr:
  1251                           	callstack 0
  1252  000071                     ee_read@addr:
  1253                           	callstack 0
  1254  000071                     ___wmul@multiplier:
  1255                           	callstack 0
  1256  000071                     ___lwdiv@dividend:
  1257                           	callstack 0
  1258  000071                     ___lwmod@dividend:
  1259                           	callstack 0
  1260  000071                     memcpy@d1:
  1261                           	callstack 0
  1262  000071                     getParFlags@paramptr:
  1263                           	callstack 0
  1264  000071                     ___lmul@multiplier:
  1265                           	callstack 0
  1266                           
  1267                           ; 4 bytes @ 0x11
  1268  000071                     	ds	1
  1269  000072                     ??_setOutputPin:
  1270  000072                     ??_setServoState:
  1271  000072                     ??_startServoOutput:
  1272  000072                     ??_setBounceState:
  1273  000072                     ??_setMultiState:
  1274  000072                     ??_startMultiOutput:
  1275  000072                     needsStarting@type:
  1276                           	callstack 0
  1277  000072                     completed@type:
  1278                           	callstack 0
  1279  000072                     startBounceOutput@io:
  1280                           	callstack 0
  1281  000072                     setServoPosition@io:
  1282                           	callstack 0
  1283  000072                     initTicker@divider:
  1284                           	callstack 0
  1285  000072                     ___lbdiv@dividend:
  1286                           	callstack 0
  1287                           
  1288                           ; 1 bytes @ 0x12
  1289  000072                     	ds	1
  1290  000073                     ??_pop:
  1291  000073                     ??_quantity:
  1292  000073                     ??_thisNN:
  1293  000073                     ?_ee_read_short:
  1294                           	callstack 0
  1295  000073                     push@a:
  1296                           	callstack 0
  1297  000073                     peek@index:
  1298                           	callstack 0
  1299  000073                     delete@index:
  1300                           	callstack 0
  1301  000073                     startMultiOutput@io:
  1302                           	callstack 0
  1303  000073                     __PointBuffer@b:
  1304                           	callstack 0
  1305  000073                     initTicker@i:
  1306                           	callstack 0
  1307  000073                     ___lbdiv@counter:
  1308                           	callstack 0
  1309  000073                     ee_write@addr:
  1310                           	callstack 0
  1311  000073                     ee_read_short@addr:
  1312                           	callstack 0
  1313  000073                     ___wmul@multiplicand:
  1314                           	callstack 0
  1315  000073                     ___lwdiv@divisor:
  1316                           	callstack 0
  1317  000073                     ___lwmod@divisor:
  1318                           	callstack 0
  1319  000073                     memcpy@s1:
  1320                           	callstack 0
  1321                           
  1322                           ; 2 bytes @ 0x13
  1323  000073                     	ds	1
  1324  000074                     ??_push:
  1325  000074                     ??_peek:
  1326  000074                     ??_delete:
  1327  000074                     startServoOutput@io:
  1328                           	callstack 0
  1329  000074                     setServoState@io:
  1330                           	callstack 0
  1331  000074                     setBounceState@io:
  1332                           	callstack 0
  1333  000074                     ___lbdiv@quotient:
  1334                           	callstack 0
  1335  000074                     __PointBuffer@pt:
  1336                           	callstack 0
  1337                           
  1338                           ; 2 bytes @ 0x14
  1339  000074                     	ds	1
  1340  000075                     ??_ee_read_short:
  1341  000075                     readInput@io:
  1342                           	callstack 0
  1343  000075                     needsStarting@io:
  1344                           	callstack 0
  1345  000075                     _completed$2368:
  1346                           	callstack 0
  1347  000075                     setMultiState@io:
  1348                           	callstack 0
  1349  000075                     writeFlashShort@i:
  1350                           	callstack 0
  1351  000075                     ee_write@data:
  1352                           	callstack 0
  1353  000075                     tickGet@IntFlag2:
  1354                           	callstack 0
  1355  000075                     ___lwdiv@counter:
  1356                           	callstack 0
  1357  000075                     ___lwmod@counter:
  1358                           	callstack 0
  1359  000075                     ___wmul@product:
  1360                           	callstack 0
  1361  000075                     memcpy@n:
  1362                           	callstack 0
  1363  000075                     ___lmul@multiplicand:
  1364                           	callstack 0
  1365                           
  1366                           ; 4 bytes @ 0x15
  1367  000075                     	ds	1
  1368  000076                     ??_initInputScan:
  1369  000076                     setOutputPin@io:
  1370                           	callstack 0
  1371  000076                     setOutputState@action:
  1372                           	callstack 0
  1373  000076                     completed@io:
  1374                           	callstack 0
  1375  000076                     pop@ret:
  1376                           	callstack 0
  1377  000076                     ee_write@interruptEnabled:
  1378                           	callstack 0
  1379  000076                     tickGet@IntFlag1:
  1380                           	callstack 0
  1381  000076                     readFlashBlock@flashAddr:
  1382                           	callstack 0
  1383  000076                     ___lwdiv@quotient:
  1384                           	callstack 0
  1385                           
  1386                           ; 2 bytes @ 0x16
  1387  000076                     	ds	1
  1388  000077                     ??_setupTimer1:
  1389  000077                     ??_setupTimer3:
  1390  000077                     ??_deleteActionQueue:
  1391  000077                     ??_setNewCanId:
  1392  000077                     ?___awdiv:
  1393                           	callstack 0
  1394  000077                     popAction@ret:
  1395                           	callstack 0
  1396  000077                     peekActionQueue@index:
  1397                           	callstack 0
  1398  000077                     setDigitalOutput@state:
  1399                           	callstack 0
  1400  000077                     setOutputState@type:
  1401                           	callstack 0
  1402  000077                     memcpy@tmp:
  1403                           	callstack 0
  1404  000077                     ee_write_short@addr:
  1405                           	callstack 0
  1406  000077                     ___awdiv@dividend:
  1407                           	callstack 0
  1408  000077                     tickGet@currentTime:
  1409                           	callstack 0
  1410                           
  1411                           ; 4 bytes @ 0x17
  1412  000077                     	ds	1
  1413  000078                     ??_readFlashBlock:
  1414  000078                     ??_setDigitalOutput:
  1415  000078                     deleteActionQueue@index:
  1416                           	callstack 0
  1417  000078                     bounceUp@reversed:
  1418                           	callstack 0
  1419  000078                     initInputScan@input:
  1420                           	callstack 0
  1421  000078                     validateNV@oldValue:
  1422                           	callstack 0
  1423  000078                     setOutputState@io:
  1424                           	callstack 0
  1425  000078                     ee_read_short@ee_addr:
  1426                           	callstack 0
  1427  000078                     memcpy@d:
  1428                           	callstack 0
  1429                           
  1430                           ; 2 bytes @ 0x18
  1431  000078                     	ds	1
  1432  000079                     bounceUp@midway:
  1433                           	callstack 0
  1434  000079                     validateNV@value:
  1435                           	callstack 0
  1436  000079                     setNewCanId@newCanId:
  1437                           	callstack 0
  1438  000079                     ee_write_short@data:
  1439                           	callstack 0
  1440  000079                     ___awdiv@divisor:
  1441                           	callstack 0
  1442  000079                     ___lmul@product:
  1443                           	callstack 0
  1444                           
  1445                           ; 4 bytes @ 0x19
  1446  000079                     	ds	1
  1447  00007A                     ??_validateNV:
  1448  00007A                     bounceUp@io:
  1449                           	callstack 0
  1450  00007A                     setDigitalOutput@pinState:
  1451                           	callstack 0
  1452  00007A                     ee_read_short@ret:
  1453                           	callstack 0
  1454  00007A                     memcpy@s:
  1455                           	callstack 0
  1456                           
  1457                           ; 2 bytes @ 0x1A
  1458  00007A                     	ds	1
  1459  00007B                     ??_shortFlicker:
  1460  00007B                     ??_doFLiMFlash:
  1461  00007B                     setDigitalOutput@io:
  1462                           	callstack 0
  1463  00007B                     canInit@initCanID:
  1464                           	callstack 0
  1465  00007B                     ___awdiv@counter:
  1466                           	callstack 0
  1467  00007B                     checkIncomingPacket@ptr:
  1468                           	callstack 0
  1469  00007B                     ee_write_short@ee_addr:
  1470                           	callstack 0
  1471                           
  1472                           ; 2 bytes @ 0x1B
  1473  00007B                     	ds	1
  1474  00007C                     ??_checkFlashing:
  1475  00007C                     ??_configIO:
  1476  00007C                     ??_canInit:
  1477  00007C                     pushAction@a:
  1478                           	callstack 0
  1479  00007C                     validateNV@io:
  1480                           	callstack 0
  1481  00007C                     setOutputPosition@pos:
  1482                           	callstack 0
  1483  00007C                     setupTimer1@io:
  1484                           	callstack 0
  1485  00007C                     setupTimer3@io:
  1486                           	callstack 0
  1487  00007C                     canTX@msg:
  1488                           	callstack 0
  1489  00007C                     readFlashBlock@i:
  1490                           	callstack 0
  1491  00007C                     startFLiMFlash@fast:
  1492                           	callstack 0
  1493  00007C                     ___awdiv@sign:
  1494                           	callstack 0
  1495  00007C                     insertIntoRxFifo@ptr:
  1496                           	callstack 0
  1497                           
  1498                           ; 2 bytes @ 0x1C
  1499  00007C                     	ds	1
  1500  00007D                     ??_canTX:
  1501  00007D                     ??_checkIncomingPacket:
  1502  00007D                     ??_validStart:
  1503  00007D                     ?_loadNvCache:
  1504                           	callstack 0
  1505  00007D                     ?_getNN:
  1506                           	callstack 0
  1507  00007D                     ?_getEN:
  1508                           	callstack 0
  1509  00007D                     validateNV@index:
  1510                           	callstack 0
  1511  00007D                     setOutputPosition@type:
  1512                           	callstack 0
  1513  00007D                     doWait@duration:
  1514                           	callstack 0
  1515  00007D                     _startFLiMFlash$4937:
  1516                           	callstack 0
  1517  00007D                     ___awdiv@quotient:
  1518                           	callstack 0
  1519  00007D                     writeFlashImage@addr:
  1520                           	callstack 0
  1521                           
  1522                           ; 3 bytes @ 0x1D
  1523  00007D                     	ds	1
  1524  00007E                     ??_insertIntoRxFifo:
  1525  00007E                     ??_setOutputPosition:
  1526  00007E                     cbusInit@initNodeID:
  1527                           	callstack 0
  1528                           
  1529                           ; 2 bytes @ 0x1E
  1530  00007E                     	ds	1
  1531  00007F                     ??_loadNvCache:
  1532  00007F                     ??_doWait:
  1533  00007F                     ??_getNN:
  1534  00007F                     ??_getEN:
  1535  00007F                     ??_bounceDown:
  1536  00007F                     canQueueRx@msg:
  1537                           	callstack 0
  1538  00007F                     validStart@tableIndex:
  1539                           	callstack 0
  1540                           
  1541                           ; 1 bytes @ 0x1F
  1542  00007F                     	ds	1
  1543  000080                     setOutputPosition@io:
  1544                           	callstack 0
  1545  000080                     validStart@f:
  1546                           	callstack 0
  1547  000080                     writeFlashImage@data:
  1548                           	callstack 0
  1549  000080                     _configIO$1531:
  1550                           	callstack 0
  1551  000080                     loadNvCache@np:
  1552                           	callstack 0
  1553                           
  1554                           ; 2 bytes @ 0x20
  1555  000080                     	ds	1
  1556  000081                     ??_initServos:
  1557  000081                     ??_getEVs:
  1558  000081                     ??_numEv:
  1559  000081                     ??_writeFlashImage:
  1560  000081                     ?_getEv:
  1561                           	callstack 0
  1562  000081                     checkIncomingPacket@msgFound:
  1563                           	callstack 0
  1564  000081                     getEv@evNum:
  1565                           	callstack 0
  1566                           
  1567                           ; 1 bytes @ 0x21
  1568  000081                     	ds	1
  1569  000082                     configIO@action:
  1570                           	callstack 0
  1571  000082                     loadNvCache@i:
  1572                           	callstack 0
  1573  000082                     checkIncomingPacket@incomingCanId:
  1574                           	callstack 0
  1575  000082                     canTX@ptr:
  1576                           	callstack 0
  1577  000082                     getNN@hi:
  1578                           	callstack 0
  1579  000082                     getEN@hi:
  1580                           	callstack 0
  1581                           
  1582                           ; 2 bytes @ 0x22
  1583  000082                     	ds	1
  1584  000083                     ??_getEv:
  1585  000083                     configIO@i:
  1586                           	callstack 0
  1587  000083                     numEv@num:
  1588                           	callstack 0
  1589                           
  1590                           ; 1 bytes @ 0x23
  1591  000083                     	ds	1
  1592  000084                     numEv@f:
  1593                           	callstack 0
  1594  000084                     getEVs@f:
  1595                           	callstack 0
  1596  000084                     _canTX$3447:
  1597                           	callstack 0
  1598  000084                     getNN@lo:
  1599                           	callstack 0
  1600  000084                     getEN@lo:
  1601                           	callstack 0
  1602                           
  1603                           ; 2 bytes @ 0x24
  1604  000084                     	ds	1
  1605  000085                     initServos@io:
  1606                           	callstack 0
  1607  000085                     numEv@tableIndex:
  1608                           	callstack 0
  1609  000085                     getEVs@evIdx:
  1610                           	callstack 0
  1611  000085                     writeFlashImage@offset:
  1612                           	callstack 0
  1613                           
  1614                           ; 2 bytes @ 0x25
  1615  000085                     	ds	1
  1616  000086                     bounceDown@reversed:
  1617                           	callstack 0
  1618  000086                     canTX@fullUp:
  1619                           	callstack 0
  1620  000086                     getEVs@tableIndex:
  1621                           	callstack 0
  1622  000086                     getNN@f:
  1623                           	callstack 0
  1624  000086                     getEN@tableIndex:
  1625                           	callstack 0
  1626                           
  1627                           ; 1 bytes @ 0x26
  1628  000086                     	ds	1
  1629  000087                     canTX@hiIndex:
  1630                           	callstack 0
  1631  000087                     getEVs@evNum:
  1632                           	callstack 0
  1633  000087                     getNN@tableIndex:
  1634                           	callstack 0
  1635  000087                     bounceDown@tmp:
  1636                           	callstack 0
  1637  000087                     writeFlashByte@flashAddr:
  1638                           	callstack 0
  1639  000087                     setFlashWord@flashAddr:
  1640                           	callstack 0
  1641                           
  1642                           ; 3 bytes @ 0x27
  1643  000087                     	ds	1
  1644  000088                     canSend@msg:
  1645                           	callstack 0
  1646  000088                     getEv@f:
  1647                           	callstack 0
  1648  000088                     processEvent@msg:
  1649                           	callstack 0
  1650  000088                     getHash@nn:
  1651                           	callstack 0
  1652                           
  1653                           ; 2 bytes @ 0x28
  1654  000088                     	ds	1
  1655  000089                     bounceDown@io:
  1656                           	callstack 0
  1657  000089                     canSend@msgLen:
  1658                           	callstack 0
  1659  000089                     getEv@tableIndex:
  1660                           	callstack 0
  1661  000089                     getProducedEvent@happening:
  1662                           	callstack 0
  1663                           
  1664                           ; 1 bytes @ 0x29
  1665  000089                     	ds	1
  1666  00008A                     ??_processEvent:
  1667  00008A                     canSend@success:
  1668                           	callstack 0
  1669  00008A                     writeFlashByte@flashData:
  1670                           	callstack 0
  1671  00008A                     getHash@en:
  1672                           	callstack 0
  1673  00008A                     setFlashWord@flashData:
  1674                           	callstack 0
  1675                           
  1676                           ; 2 bytes @ 0x2A
  1677  00008A                     	ds	1
  1678  00008B                     defaultNVs@type:
  1679                           	callstack 0
  1680  00008B                     cbusSendMsg@msg:
  1681                           	callstack 0
  1682                           
  1683                           ; 1 bytes @ 0x2B
  1684  00008B                     	ds	1
  1685  00008C                     ??_defaultNVs:
  1686  00008C                     ??_cbusSendMsg:
  1687  00008C                     ??_setFlashWord:
  1688  00008C                     ??_getHash:
  1689  00008C                     processEvent@tableIndex:
  1690                           	callstack 0
  1691                           
  1692                           ; 1 bytes @ 0x2C
  1693  00008C                     	ds	1
  1694  00008D                     processEvent@opc:
  1695                           	callstack 0
  1696  00008D                     getHash@hash:
  1697                           	callstack 0
  1698                           
  1699                           ; 1 bytes @ 0x2D
  1700  00008D                     	ds	1
  1701  00008E                     ??_rebuildHashtable:
  1702  00008E                     defaultNVs@i:
  1703                           	callstack 0
  1704  00008E                     cbusSendMsg@cbusNum:
  1705                           	callstack 0
  1706  00008E                     processEvent@nextAction:
  1707                           	callstack 0
  1708  00008E                     findEvent@nodeNumber:
  1709                           	callstack 0
  1710                           
  1711                           ; 2 bytes @ 0x2E
  1712  00008E                     	ds	1
  1713  00008F                     ??_doRqnp:
  1714  00008F                     cbusSendMsgMyNN@msg:
  1715                           	callstack 0
  1716  00008F                     cbusSendMsgNN@eventNode:
  1717                           	callstack 0
  1718  00008F                     doRqmn@namadr:
  1719                           	callstack 0
  1720                           
  1721                           ; 4 bytes @ 0x2F
  1722  00008F                     	ds	1
  1723  000090                     processEvent@nextSimultaneous:
  1724                           	callstack 0
  1725  000090                     cbusSendMsgMyNN@cbusNum:
  1726                           	callstack 0
  1727  000090                     findEvent@eventNumber:
  1728                           	callstack 0
  1729                           
  1730                           ; 2 bytes @ 0x30
  1731  000090                     	ds	1
  1732  000091                     processEvent@io:
  1733                           	callstack 0
  1734  000091                     cbusSendOpcMyNN@opc:
  1735                           	callstack 0
  1736  000091                     cbusSendMsgNN@msg:
  1737                           	callstack 0
  1738                           
  1739                           ; 1 bytes @ 0x31
  1740  000091                     	ds	1
  1741  000092                     ??_findEvent:
  1742  000092                     processEvent@masked_action:
  1743                           	callstack 0
  1744  000092                     cbusSendOpcMyNN@msg:
  1745                           	callstack 0
  1746  000092                     cbusSendMsgNN@cbusNum:
  1747                           	callstack 0
  1748  000092                     rebuildHashtable@a:
  1749                           	callstack 0
  1750                           
  1751                           ; 2 bytes @ 0x32
  1752  000092                     	ds	1
  1753  000093                     processEvent@ca:
  1754                           	callstack 0
  1755  000093                     cbusSendOpcMyNN@cbusNum:
  1756                           	callstack 0
  1757  000093                     cbusSendOpcNN@opc:
  1758                           	callstack 0
  1759  000093                     doError@code:
  1760                           	callstack 0
  1761  000093                     cbusSendEventWithData@eventNode:
  1762                           	callstack 0
  1763  000093                     QNNrespond@paramptr:
  1764                           	callstack 0
  1765  000093                     doRqmn@namptr:
  1766                           	callstack 0
  1767                           
  1768                           ; 3 bytes @ 0x33
  1769  000093                     	ds	1
  1770  000094                     ??_processEnumeration:
  1771  000094                     ??_doRqnpn:
  1772  000094                     ??_doNnevn:
  1773  000094                     processEvent@e:
  1774                           	callstack 0
  1775  000094                     doNenrd@index:
  1776                           	callstack 0
  1777  000094                     doRqevn@count:
  1778                           	callstack 0
  1779  000094                     rebuildHashtable@hash:
  1780                           	callstack 0
  1781  000094                     doReval@evNum:
  1782                           	callstack 0
  1783  000094                     cbusSendOpcNN@nodeID:
  1784                           	callstack 0
  1785  000094                     findEvent@nn:
  1786                           	callstack 0
  1787  000094                     doNvrd@flashIndex:
  1788                           	callstack 0
  1789                           
  1790                           ; 2 bytes @ 0x34
  1791  000094                     	ds	1
  1792  000095                     ??_doReval:
  1793  000095                     doNenrd@tableIndex:
  1794                           	callstack 0
  1795  000095                     doRqevn@i:
  1796                           	callstack 0
  1797  000095                     rebuildHashtable@happening:
  1798                           	callstack 0
  1799  000095                     processEvent@action:
  1800                           	callstack 0
  1801  000095                     cbusSendEventWithData@eventNum:
  1802                           	callstack 0
  1803  000095                     doRqnp@paramptr:
  1804                           	callstack 0
  1805                           
  1806                           ; 3 bytes @ 0x35
  1807  000095                     	ds	1
  1808  000096                     cbusSendOpcNN@msg:
  1809                           	callstack 0
  1810  000096                     doNnevn@f:
  1811                           	callstack 0
  1812  000096                     rebuildHashtable@chainIdx:
  1813                           	callstack 0
  1814  000096                     doNvrd@NVindex:
  1815                           	callstack 0
  1816  000096                     doRqmn@copyCounter:
  1817                           	callstack 0
  1818  000096                     doReval@evIndex:
  1819                           	callstack 0
  1820  000096                     doNenrd@n:
  1821                           	callstack 0
  1822  000096                     findEvent@en:
  1823                           	callstack 0
  1824                           
  1825                           ; 2 bytes @ 0x36
  1826  000096                     	ds	1
  1827  000097                     cbusSendOpcNN@cbusNum:
  1828                           	callstack 0
  1829  000097                     cbusSendEventWithData@onEvent:
  1830                           	callstack 0
  1831  000097                     doNnevn@count:
  1832                           	callstack 0
  1833  000097                     rebuildHashtable@tableIndex:
  1834                           	callstack 0
  1835  000097                     doReval@enNum:
  1836                           	callstack 0
  1837                           
  1838                           ; 1 bytes @ 0x37
  1839  000097                     	ds	1
  1840  000098                     ??_clearAllEvents:
  1841  000098                     ??_removeTableEntry:
  1842  000098                     processEnumeration@enumResult:
  1843                           	callstack 0
  1844  000098                     cbusSendEventWithData@msg:
  1845                           	callstack 0
  1846  000098                     doNnevn@i:
  1847                           	callstack 0
  1848  000098                     findEvent@hash:
  1849                           	callstack 0
  1850  000098                     doRqnp@copyCounter:
  1851                           	callstack 0
  1852  000098                     SaveNodeDetails@nodeID:
  1853                           	callstack 0
  1854  000098                     doReval@evVal:
  1855                           	callstack 0
  1856  000098                     requestNodeNumber@local_cbusMsg:
  1857                           	callstack 0
  1858                           
  1859                           ; 9 bytes @ 0x38
  1860  000098                     	ds	1
  1861  000099                     processEnumeration@newCanId:
  1862                           	callstack 0
  1863  000099                     cbusSendEventWithData@datalen:
  1864                           	callstack 0
  1865  000099                     findEvent@chainIdx:
  1866                           	callstack 0
  1867                           
  1868                           ; 1 bytes @ 0x39
  1869  000099                     	ds	1
  1870  00009A                     ??_cbusSendEventWithData:
  1871  00009A                     processEnumeration@i:
  1872                           	callstack 0
  1873  00009A                     findEvent@tableIndex:
  1874                           	callstack 0
  1875  00009A                     SaveNodeDetails@flimState:
  1876                           	callstack 0
  1877  00009A                     doReval@tableIndex:
  1878                           	callstack 0
  1879                           
  1880                           ; 1 bytes @ 0x3A
  1881  00009A                     	ds	1
  1882  00009B                     canbusRecv@msg:
  1883                           	callstack 0
  1884  00009B                     parseCbusEvent@msg:
  1885                           	callstack 0
  1886  00009B                     doSnn@rx_ptr:
  1887                           	callstack 0
  1888  00009B                     doReqev@nodeNumber:
  1889                           	callstack 0
  1890  00009B                     doAreq@nodeNumber:
  1891                           	callstack 0
  1892  00009B                     doRqnpn@paramptr:
  1893                           	callstack 0
  1894                           
  1895                           ; 3 bytes @ 0x3B
  1896  00009B                     	ds	1
  1897  00009C                     cbusSendEventWithData@ret:
  1898                           	callstack 0
  1899                           
  1900                           ; 1 bytes @ 0x3C
  1901  00009C                     	ds	1
  1902  00009D                     ??_doSnn:
  1903  00009D                     ??_canbusRecv:
  1904  00009D                     ??_parseCbusEvent:
  1905  00009D                     cbusSendEventWithData@cbusNum:
  1906                           	callstack 0
  1907  00009D                     clearAllEvents@tableIndex:
  1908                           	callstack 0
  1909  00009D                     removeTableEntry@f:
  1910                           	callstack 0
  1911  00009D                     doReqev@eventNumber:
  1912                           	callstack 0
  1913  00009D                     doAreq@eventNumber:
  1914                           	callstack 0
  1915                           
  1916                           ; 2 bytes @ 0x3D
  1917  00009D                     	ds	1
  1918  00009E                     canbusRecv@msgFound:
  1919                           	callstack 0
  1920  00009E                     removeTableEntry@tableIndex:
  1921                           	callstack 0
  1922  00009E                     parseCbusEvent@tableIndex:
  1923                           	callstack 0
  1924  00009E                     doRqnpn@idx:
  1925                           	callstack 0
  1926  00009E                     cbusSendEvent@eventNode:
  1927                           	callstack 0
  1928                           
  1929                           ; 2 bytes @ 0x3E
  1930  00009E                     	ds	1
  1931  00009F                     ??_doAreq:
  1932  00009F                     checkRemoveTableEntry@tableIndex:
  1933                           	callstack 0
  1934  00009F                     doReqev@evNum:
  1935                           	callstack 0
  1936  00009F                     canbusRecv@ptr:
  1937                           	callstack 0
  1938  00009F                     removeEvent@nodeNumber:
  1939                           	callstack 0
  1940  00009F                     parseCbusEvent@eventNumber:
  1941                           	callstack 0
  1942                           
  1943                           ; 2 bytes @ 0x3F
  1944  00009F                     	ds	1
  1945  0000A0                     ??_doReqev:
  1946  0000A0                     checkRemoveTableEntry@e:
  1947                           	callstack 0
  1948  0000A0                     cbusSendEvent@eventNum:
  1949                           	callstack 0
  1950                           
  1951                           ; 2 bytes @ 0x40
  1952  0000A0                     	ds	1
  1953  0000A1                     ??_FLiMSWCheck:
  1954  0000A1                     writeEv@evNum:
  1955                           	callstack 0
  1956  0000A1                     doReqev@tableIndex:
  1957                           	callstack 0
  1958  0000A1                     cbusMsgReceived@msg:
  1959                           	callstack 0
  1960  0000A1                     removeEvent@eventNumber:
  1961                           	callstack 0
  1962  0000A1                     parseCbusEvent@nodeNumber:
  1963                           	callstack 0
  1964                           
  1965                           ; 2 bytes @ 0x41
  1966  0000A1                     	ds	1
  1967  0000A2                     cbusSendEvent@onEvent:
  1968                           	callstack 0
  1969  0000A2                     writeEv@evVal:
  1970                           	callstack 0
  1971  0000A2                     doReqev@evVal:
  1972                           	callstack 0
  1973                           
  1974                           ; 2 bytes @ 0x42
  1975  0000A2                     	ds	1
  1976  0000A3                     ??_writeEv:
  1977  0000A3                     cbusMsgReceived@cbusNum:
  1978                           	callstack 0
  1979  0000A3                     removeEvent@tableIndex:
  1980                           	callstack 0
  1981  0000A3                     doAreq@thisBit:
  1982                           	callstack 0
  1983  0000A3                     cbusSendEvent@msg:
  1984                           	callstack 0
  1985                           
  1986                           ; 10 bytes @ 0x43
  1987  0000A3                     	ds	1
  1988  0000A4                     doAreq@thisByte:
  1989                           	callstack 0
  1990  0000A4                     doEvuln@nodeNumber:
  1991                           	callstack 0
  1992                           
  1993                           ; 2 bytes @ 0x44
  1994  0000A4                     	ds	1
  1995  0000A5                     doAreq@status:
  1996                           	callstack 0
  1997                           
  1998                           ; 1 bytes @ 0x45
  1999  0000A5                     	ds	1
  2000  0000A6                     doEvuln@eventNumber:
  2001                           	callstack 0
  2002  0000A6                     _doAreq$4582:
  2003                           	callstack 0
  2004                           
  2005                           ; 2 bytes @ 0x46
  2006  0000A6                     	ds	2
  2007  0000A8                     _doAreq$4583:
  2008                           	callstack 0
  2009                           
  2010                           ; 2 bytes @ 0x48
  2011  0000A8                     	ds	2
  2012  0000AA                     doAreq@tableIndex:
  2013                           	callstack 0
  2014                           
  2015                           ; 1 bytes @ 0x4A
  2016  0000AA                     	ds	1
  2017  0000AB                     doAreq@ev0:
  2018                           	callstack 0
  2019                           
  2020                           ; 2 bytes @ 0x4B
  2021  0000AB                     	ds	2
  2022  0000AD                     cbusSendEvent@cbusNum:
  2023                           	callstack 0
  2024  0000AD                     writeEv@startIndex:
  2025                           	callstack 0
  2026  0000AD                     doAreq@happening:
  2027                           	callstack 0
  2028                           
  2029                           ; 1 bytes @ 0x4D
  2030  0000AD                     	ds	1
  2031  0000AE                     writeEv@nextF:
  2032                           	callstack 0
  2033  0000AE                     sendProducedEvent@on:
  2034                           	callstack 0
  2035                           
  2036                           ; 1 bytes @ 0x4E
  2037  0000AE                     	ds	1
  2038  0000AF                     ??_sendProducedEvent:
  2039  0000AF                     writeEv@e:
  2040                           	callstack 0
  2041                           
  2042                           ; 1 bytes @ 0x4F
  2043  0000AF                     	ds	1
  2044  0000B0                     writeEv@f:
  2045                           	callstack 0
  2046                           
  2047                           ; 1 bytes @ 0x50
  2048  0000B0                     	ds	1
  2049  0000B1                     writeEv@tableIndex:
  2050                           	callstack 0
  2051  0000B1                     sendProducedEvent@status:
  2052                           	callstack 0
  2053                           
  2054                           ; 1 bytes @ 0x51
  2055  0000B1                     	ds	1
  2056  0000B2                     writeEv@nextIdx:
  2057                           	callstack 0
  2058  0000B2                     sendProducedEvent@thisBit:
  2059                           	callstack 0
  2060                           
  2061                           ; 1 bytes @ 0x52
  2062  0000B2                     	ds	1
  2063  0000B3                     sendProducedEvent@thisByte:
  2064                           	callstack 0
  2065  0000B3                     deleteHappeningRange@number:
  2066                           	callstack 0
  2067  0000B3                     deleteActionRange@number:
  2068                           	callstack 0
  2069  0000B3                     addEvent@nodeNumber:
  2070                           	callstack 0
  2071                           
  2072                           ; 2 bytes @ 0x53
  2073  0000B3                     	ds	1
  2074  0000B4                     ??_deleteActionRange:
  2075  0000B4                     ??_deleteHappeningRange:
  2076  0000B4                     sendProducedEvent@happening:
  2077                           	callstack 0
  2078                           
  2079                           ; 1 bytes @ 0x54
  2080  0000B4                     	ds	1
  2081  0000B5                     ??_pollServos:
  2082  0000B5                     ??_pollAnalogue:
  2083  0000B5                     ??_processOutputs:
  2084  0000B5                     ??_inputScan:
  2085  0000B5                     sendInvertedProducedEvent@state:
  2086                           	callstack 0
  2087  0000B5                     addEvent@eventNumber:
  2088                           	callstack 0
  2089                           
  2090                           ; 2 bytes @ 0x55
  2091  0000B5                     	ds	1
  2092  0000B6                     sendInvertedProducedEvent@invert:
  2093                           	callstack 0
  2094                           
  2095                           ; 1 bytes @ 0x56
  2096  0000B6                     	ds	1
  2097  0000B7                     sendInvertedProducedEvent@can_send_on:
  2098                           	callstack 0
  2099  0000B7                     addEvent@evNum:
  2100                           	callstack 0
  2101                           
  2102                           ; 1 bytes @ 0x57
  2103  0000B7                     	ds	1
  2104  0000B8                     processOutputs@io:
  2105                           	callstack 0
  2106  0000B8                     sendInvertedProducedEvent@can_send_off:
  2107                           	callstack 0
  2108  0000B8                     addEvent@evVal:
  2109                           	callstack 0
  2110  0000B8                     pollAnalogue@hhysteresis:
  2111                           	callstack 0
  2112                           
  2113                           ; 2 bytes @ 0x58
  2114  0000B8                     	ds	1
  2115  0000B9                     inputScan@change:
  2116                           	callstack 0
  2117  0000B9                     sendInvertedProducedEvent@happening:
  2118                           	callstack 0
  2119  0000B9                     addEvent@forceOwnNN:
  2120                           	callstack 0
  2121  0000B9                     deleteHappeningRange@action:
  2122                           	callstack 0
  2123  0000B9                     deleteActionRange@updated:
  2124                           	callstack 0
  2125                           
  2126                           ; 1 bytes @ 0x59
  2127  0000B9                     	ds	1
  2128  0000BA                     ??_addEvent:
  2129  0000BA                     inputScan@input:
  2130                           	callstack 0
  2131  0000BA                     deleteHappeningRange@pa:
  2132                           	callstack 0
  2133  0000BA                     deleteActionRange@action:
  2134                           	callstack 0
  2135  0000BA                     pollAnalogue@lhysteresis:
  2136                           	callstack 0
  2137  0000BA                     _sendInvertedProducedEvent$1832:
  2138                           	callstack 0
  2139                           
  2140                           ; 2 bytes @ 0x5A
  2141  0000BA                     	ds	1
  2142  0000BB                     deleteHappeningRange@tableIndex:
  2143                           	callstack 0
  2144  0000BB                     deleteActionRange@e:
  2145                           	callstack 0
  2146                           
  2147                           ; 1 bytes @ 0x5B
  2148  0000BB                     	ds	1
  2149  0000BC                     sendInvertedProducedEvent@state_to_send:
  2150                           	callstack 0
  2151  0000BC                     deleteActionRange@tableIndex:
  2152                           	callstack 0
  2153  0000BC                     pollAnalogue@hthreshold:
  2154                           	callstack 0
  2155                           
  2156                           ; 2 bytes @ 0x5C
  2157  0000BC                     	ds	1
  2158  0000BD                     ??_APP_doSOD:
  2159  0000BD                     startDigitalOutput@state:
  2160                           	callstack 0
  2161  0000BD                     clearEvents@io:
  2162                           	callstack 0
  2163  0000BD                     pollServos@target:
  2164                           	callstack 0
  2165                           
  2166                           ; 1 bytes @ 0x5D
  2167  0000BD                     	ds	1
  2168  0000BE                     ??_startDigitalOutput:
  2169  0000BE                     pollServos@beforeMidway:
  2170                           	callstack 0
  2171  0000BE                     pollAnalogue@lthreshold:
  2172                           	callstack 0
  2173                           
  2174                           ; 2 bytes @ 0x5E
  2175  0000BE                     	ds	1
  2176  0000BF                     pollServos@midway:
  2177                           	callstack 0
  2178                           
  2179                           ; 1 bytes @ 0x5F
  2180  0000BF                     	ds	1
  2181  0000C0                     pollServos@io:
  2182                           	callstack 0
  2183  0000C0                     pollAnalogue@adc:
  2184                           	callstack 0
  2185  0000C0                     _startDigitalOutput$680:
  2186                           	callstack 0
  2187                           
  2188                           ; 2 bytes @ 0x60
  2189  0000C0                     	ds	1
  2190  0000C1                     ??_startServos:
  2191                           
  2192                           ; 1 bytes @ 0x61
  2193  0000C1                     	ds	1
  2194  0000C2                     startDigitalOutput@pinState:
  2195                           	callstack 0
  2196                           
  2197                           ; 1 bytes @ 0x62
  2198  0000C2                     	ds	1
  2199  0000C3                     startDigitalOutput@actionState:
  2200                           	callstack 0
  2201  0000C3                     startServos@type:
  2202                           	callstack 0
  2203                           
  2204                           ; 1 bytes @ 0x63
  2205  0000C3                     	ds	1
  2206  0000C4                     startDigitalOutput@io:
  2207                           	callstack 0
  2208  0000C4                     addEvent@error:
  2209                           	callstack 0
  2210                           
  2211                           ; 1 bytes @ 0x64
  2212  0000C4                     	ds	1
  2213  0000C5                     startOutput@action:
  2214                           	callstack 0
  2215  0000C5                     addEvent@f:
  2216                           	callstack 0
  2217                           
  2218                           ; 1 bytes @ 0x65
  2219  0000C5                     	ds	1
  2220  0000C6                     startOutput@type:
  2221                           	callstack 0
  2222  0000C6                     addEvent@e:
  2223                           	callstack 0
  2224                           
  2225                           ; 1 bytes @ 0x66
  2226  0000C6                     	ds	1
  2227  0000C7                     _APP_doSOD$1818:
  2228                           	callstack 0
  2229  0000C7                     startOutput@io:
  2230                           	callstack 0
  2231  0000C7                     addEvent@tableIndex:
  2232                           	callstack 0
  2233                           
  2234                           ; 1 bytes @ 0x67
  2235  0000C7                     	ds	1
  2236  0000C8                     ??_processActions:
  2237  0000C8                     defaultEvents@type:
  2238                           	callstack 0
  2239  0000C8                     _APP_doSOD$1819:
  2240                           	callstack 0
  2241  0000C8                     APP_addEvent@nodeNumber:
  2242                           	callstack 0
  2243                           
  2244                           ; 2 bytes @ 0x68
  2245  0000C8                     	ds	1
  2246  0000C9                     APP_doSOD@step:
  2247                           	callstack 0
  2248  0000C9                     defaultEvents@en:
  2249                           	callstack 0
  2250                           
  2251                           ; 2 bytes @ 0x69
  2252  0000C9                     	ds	1
  2253  0000CA                     processActions@simultaneous:
  2254                           	callstack 0
  2255  0000CA                     APP_doSOD@send_on_ok:
  2256                           	callstack 0
  2257  0000CA                     APP_addEvent@eventNumber:
  2258                           	callstack 0
  2259                           
  2260                           ; 2 bytes @ 0x6A
  2261  0000CA                     	ds	1
  2262  0000CB                     defaultEvents@io:
  2263                           	callstack 0
  2264  0000CB                     processActions@peekItem:
  2265                           	callstack 0
  2266  0000CB                     APP_doSOD@send_off_ok:
  2267                           	callstack 0
  2268                           
  2269                           ; 1 bytes @ 0x6B
  2270  0000CB                     	ds	1
  2271  0000CC                     setType@type:
  2272                           	callstack 0
  2273  0000CC                     APP_addEvent@evNum:
  2274                           	callstack 0
  2275  0000CC                     processActions@type:
  2276                           	callstack 0
  2277  0000CC                     APP_doSOD@disable_SOD_response:
  2278                           	callstack 0
  2279                           
  2280                           ; 1 bytes @ 0x6C
  2281  0000CC                     	ds	1
  2282  0000CD                     ??_setType:
  2283  0000CD                     APP_addEvent@evVal:
  2284                           	callstack 0
  2285  0000CD                     processActions@nextType:
  2286                           	callstack 0
  2287  0000CD                     APP_doSOD@disable_off:
  2288                           	callstack 0
  2289                           
  2290                           ; 1 bytes @ 0x6D
  2291  0000CD                     	ds	1
  2292  0000CE                     APP_addEvent@forceOwnNN:
  2293                           	callstack 0
  2294  0000CE                     processActions@io:
  2295                           	callstack 0
  2296  0000CE                     APP_doSOD@event_inverted:
  2297                           	callstack 0
  2298                           
  2299                           ; 1 bytes @ 0x6E
  2300  0000CE                     	ds	1
  2301  0000CF                     APP_addEvent@tableIndex:
  2302                           	callstack 0
  2303  0000CF                     processActions@nextIo:
  2304                           	callstack 0
  2305  0000CF                     APP_doSOD@flags:
  2306                           	callstack 0
  2307  0000CF                     setType@addr:
  2308                           	callstack 0
  2309                           
  2310                           ; 2 bytes @ 0x6F
  2311  0000CF                     	ds	1
  2312  0000D0                     processActions@action:
  2313                           	callstack 0
  2314  0000D0                     APP_doSOD@value:
  2315                           	callstack 0
  2316  0000D0                     doEvlrn@nodeNumber:
  2317                           	callstack 0
  2318                           
  2319                           ; 2 bytes @ 0x70
  2320  0000D0                     	ds	1
  2321  0000D1                     setType@io:
  2322                           	callstack 0
  2323  0000D1                     processActions@ioAction:
  2324                           	callstack 0
  2325  0000D1                     APP_doSOD@happeningIndex:
  2326                           	callstack 0
  2327                           
  2328                           ; 1 bytes @ 0x71
  2329  0000D1                     	ds	1
  2330  0000D2                     ??_initialise:
  2331  0000D2                     processActions@nextAction:
  2332                           	callstack 0
  2333  0000D2                     APP_doSOD@io:
  2334                           	callstack 0
  2335  0000D2                     actUponNVchange@oldValue:
  2336                           	callstack 0
  2337  0000D2                     doEvlrn@eventNumber:
  2338                           	callstack 0
  2339                           
  2340                           ; 2 bytes @ 0x72
  2341  0000D2                     	ds	1
  2342  0000D3                     actUponNVchange@value:
  2343                           	callstack 0
  2344  0000D3                     doTimedResponse@n:
  2345                           	callstack 0
  2346                           
  2347                           ; 2 bytes @ 0x73
  2348  0000D3                     	ds	1
  2349  0000D4                     ??_actUponNVchange:
  2350  0000D4                     doEvlrn@evNum:
  2351                           	callstack 0
  2352                           
  2353                           ; 1 bytes @ 0x74
  2354  0000D4                     	ds	1
  2355  0000D5                     doEvlrn@evVal:
  2356                           	callstack 0
  2357                           
  2358                           ; 1 bytes @ 0x75
  2359  0000D5                     	ds	1
  2360  0000D6                     initialise@action:
  2361                           	callstack 0
  2362  0000D6                     doEvlrn@error:
  2363                           	callstack 0
  2364  0000D6                     _actUponNVchange$2139:
  2365                           	callstack 0
  2366                           
  2367                           ; 2 bytes @ 0x76
  2368  0000D6                     	ds	1
  2369  0000D7                     initialise@simultaneous:
  2370                           	callstack 0
  2371                           
  2372                           ; 1 bytes @ 0x77
  2373  0000D7                     	ds	1
  2374  0000D8                     initialise@i:
  2375                           	callstack 0
  2376  0000D8                     actUponNVchange@index:
  2377                           	callstack 0
  2378                           
  2379                           ; 1 bytes @ 0x78
  2380  0000D8                     	ds	1
  2381  0000D9                     initialise@evIndex:
  2382                           	callstack 0
  2383  0000D9                     actUponNVchange@io:
  2384                           	callstack 0
  2385                           
  2386                           ; 1 bytes @ 0x79
  2387  0000D9                     	ds	1
  2388  0000DA                     doNvset@NVvalue:
  2389                           	callstack 0
  2390  0000DA                     initialise@ev:
  2391                           	callstack 0
  2392                           
  2393                           ; 2 bytes @ 0x7A
  2394  0000DA                     	ds	1
  2395  0000DB                     ??_doNvset:
  2396                           
  2397                           ; 1 bytes @ 0x7B
  2398  0000DB                     	ds	1
  2399  0000DC                     initialise@en:
  2400                           	callstack 0
  2401                           
  2402                           ; 2 bytes @ 0x7C
  2403  0000DC                     	ds	1
  2404  0000DD                     doNvset@flashIndex:
  2405                           	callstack 0
  2406                           
  2407                           ; 2 bytes @ 0x7D
  2408  0000DD                     	ds	1
  2409  0000DE                     initialise@paction:
  2410                           	callstack 0
  2411                           
  2412                           ; 1 bytes @ 0x7E
  2413  0000DE                     	ds	1
  2414  0000DF                     doNvset@oldValue:
  2415                           	callstack 0
  2416                           
  2417                           ; 1 bytes @ 0x7F
  2418  0000DF                     	ds	1
  2419  0000E0                     doNvset@NVindex:
  2420                           	callstack 0
  2421                           
  2422                           ; 1 bytes @ 0x80
  2423  0000E0                     	ds	1
  2424  0000E1                     parseFLiMCmd@rx_ptr:
  2425                           	callstack 0
  2426                           
  2427                           ; 2 bytes @ 0x81
  2428  0000E1                     	ds	2
  2429  0000E3                     parseFLiMCmd@cmdProcessed:
  2430                           	callstack 0
  2431                           
  2432                           ; 1 bytes @ 0x83
  2433  0000E3                     	ds	1
  2434  0000E4                     parseCBUSMsg@msg:
  2435                           	callstack 0
  2436                           
  2437                           ; 2 bytes @ 0x84
  2438  0000E4                     	ds	2
  2439  0000E6                     
  2440                           ; 1 bytes @ 0x86
  2441                           
  2442                           	psect	cstackCOMRAM
  2443  00002D                     __pcstackCOMRAM:
  2444                           	callstack 0
  2445  00002D                     i2setOutputPin@state:
  2446                           	callstack 0
  2447                           
  2448                           ; 1 bytes @ 0x0
  2449  00002D                     	ds	1
  2450  00002E                     ??i2_setOutputPin:
  2451                           
  2452                           ; 1 bytes @ 0x1
  2453  00002E                     	ds	4
  2454  000032                     i2setOutputPin@io:
  2455                           	callstack 0
  2456                           
  2457                           ; 1 bytes @ 0x5
  2458  000032                     	ds	1
  2459  000033                     ??_timer1DoneInterruptHandler:
  2460  000033                     ??_timer3DoneInterruptHandler:
  2461                           
  2462                           ; 1 bytes @ 0x6
  2463  000033                     	ds	2
  2464  000035                     ??_high_isr:
  2465                           
  2466                           ; 1 bytes @ 0x8
  2467  000035                     	ds	8
  2468  00003D                     ?i1__PointBuffer:
  2469                           	callstack 0
  2470  00003D                     ?i1_tickGet:
  2471                           	callstack 0
  2472  00003D                     i1doEnum@sendResult:
  2473                           	callstack 0
  2474  00003D                     i1memcpy@d1:
  2475                           	callstack 0
  2476                           
  2477                           ; 2 bytes @ 0x10
  2478  00003D                     	ds	2
  2479  00003F                     i1__PointBuffer@b:
  2480                           	callstack 0
  2481  00003F                     i1memcpy@s1:
  2482                           	callstack 0
  2483                           
  2484                           ; 2 bytes @ 0x12
  2485  00003F                     	ds	1
  2486  000040                     i1__PointBuffer@pt:
  2487                           	callstack 0
  2488                           
  2489                           ; 2 bytes @ 0x13
  2490  000040                     	ds	1
  2491  000041                     i1tickGet@IntFlag2:
  2492                           	callstack 0
  2493  000041                     i1memcpy@n:
  2494                           	callstack 0
  2495                           
  2496                           ; 2 bytes @ 0x14
  2497  000041                     	ds	1
  2498  000042                     i1tickGet@IntFlag1:
  2499                           	callstack 0
  2500                           
  2501                           ; 1 bytes @ 0x15
  2502  000042                     	ds	1
  2503  000043                     i1memcpy@tmp:
  2504                           	callstack 0
  2505  000043                     i1tickGet@currentTime:
  2506                           	callstack 0
  2507                           
  2508                           ; 4 bytes @ 0x16
  2509  000043                     	ds	1
  2510  000044                     i1memcpy@d:
  2511                           	callstack 0
  2512                           
  2513                           ; 2 bytes @ 0x17
  2514  000044                     	ds	2
  2515  000046                     i1memcpy@s:
  2516                           	callstack 0
  2517                           
  2518                           ; 2 bytes @ 0x19
  2519  000046                     	ds	1
  2520  000047                     i1checkIncomingPacket@ptr:
  2521                           	callstack 0
  2522                           
  2523                           ; 2 bytes @ 0x1A
  2524  000047                     	ds	1
  2525  000048                     ??_checkTxFifo:
  2526  000048                     i1insertIntoRxFifo@ptr:
  2527                           	callstack 0
  2528                           
  2529                           ; 2 bytes @ 0x1B
  2530  000048                     	ds	1
  2531  000049                     ??i1_checkIncomingPacket:
  2532  000049                     checkTxFifo@ptr:
  2533                           	callstack 0
  2534                           
  2535                           ; 2 bytes @ 0x1C
  2536  000049                     	ds	1
  2537  00004A                     ??i1_insertIntoRxFifo:
  2538                           
  2539                           ; 1 bytes @ 0x1D
  2540  00004A                     	ds	1
  2541  00004B                     ??_checkCANTimeout:
  2542  00004B                     
  2543                           ; 1 bytes @ 0x1E
  2544  00004B                     	ds	2
  2545  00004D                     i1checkIncomingPacket@msgFound:
  2546                           	callstack 0
  2547                           
  2548                           ; 1 bytes @ 0x20
  2549  00004D                     	ds	1
  2550  00004E                     i1checkIncomingPacket@incomingCanId:
  2551                           	callstack 0
  2552                           
  2553                           ; 1 bytes @ 0x21
  2554  00004E                     	ds	1
  2555  00004F                     
  2556                           ; 1 bytes @ 0x22
  2557 ;;
  2558 ;;Main: autosize = 0, tempsize = 9, incstack = 0, save=0
  2559 ;;
  2560 ;; *************** function _main *****************
  2561 ;; Defined at:
  2562 ;;		line 311 in file "../../github/CANMIOfirmware/main.c"
  2563 ;; Parameters:    Size  Location     Type
  2564 ;;		None
  2565 ;; Auto vars:     Size  Location     Type
  2566 ;;		None
  2567 ;; Return value:  Size  Location     Type
  2568 ;;                  2  511[None  ] int 
  2569 ;; Registers used:
  2570 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2571 ;; Tracked objects:
  2572 ;;		On entry : 0/0
  2573 ;;		On exit  : 3E/0
  2574 ;;		Unchanged: 0/0
  2575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2576 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2577 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2578 ;;      Temps:          0       0       0       9       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2579 ;;      Totals:         0       0       0       9       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2580 ;;Total ram usage:        9 bytes
  2581 ;; Hardware stack levels required when called: 28
  2582 ;; This function calls:
  2583 ;;		_FLiMSWCheck
  2584 ;;		___lmul
  2585 ;;		_checkCBUS
  2586 ;;		_checkFlashing
  2587 ;;		_doTimedResponse
  2588 ;;		_initRomOps
  2589 ;;		_initStatusLeds
  2590 ;;		_initialise
  2591 ;;		_inputScan
  2592 ;;		_loadNvCache
  2593 ;;		_pollAnalogue
  2594 ;;		_processActions
  2595 ;;		_processOutputs
  2596 ;;		_sendProducedEvent
  2597 ;;		_startServos
  2598 ;;		_tickGet
  2599 ;; This function is called by:
  2600 ;;		Startup code after reset
  2601 ;; This function uses a non-reentrant model
  2602 ;;
  2603                           
  2604                           	psect	text0
  2605  0047B2                     __ptext0:
  2606                           	callstack 0
  2607  0047B2                     _main:
  2608                           	callstack 3
  2609                           
  2610                           ;main.c: 319: eventTable = (const EventTable *)0xEF80U;
  2611                           
  2612                           ;incstack = 0
  2613  0047B2  0E80               	movlw	128
  2614  0047B4  0100               	movlb	0	; () banked
  2615  0047B6  6FE9               	movwf	_eventTable& (0+255),b
  2616  0047B8  0EEF               	movlw	239
  2617  0047BA  6FEA               	movwf	(_eventTable+1)& (0+255),b
  2618  0047BC  0E00               	movlw	0
  2619  0047BE  6FEB               	movwf	(_eventTable+2)& (0+255),b
  2620                           
  2621                           ; BSR set to: 0
  2622                           ;main.c: 323: initRomOps();
  2623  0047C0  EC48  F053         	call	_initRomOps	;wreg free
  2624                           
  2625                           ; BSR set to: 1
  2626                           ;main.c: 326: NV = loadNvCache();
  2627  0047C4  EC12  F04F         	call	_loadNvCache	;wreg free
  2628  0047C8  C07D  F0EC         	movff	?_loadNvCache,_NV
  2629  0047CC  C07E  F0ED         	movff	?_loadNvCache+1,_NV+1
  2630                           
  2631                           ; BSR set to: 0
  2632                           ;main.c: 329: initStatusLeds();
  2633  0047D0  EC4C  F052         	call	_initStatusLeds	;wreg free
  2634                           
  2635                           ; BSR set to: 1
  2636                           ;main.c: 330: initialise();
  2637  0047D4  ECF9  F01C         	call	_initialise	;wreg free
  2638                           
  2639                           ; BSR set to: 0
  2640                           ;main.c: 332: startTime.Val = tickGet();
  2641  0047D8  ECA3  F04B         	call	_tickGet	;wreg free
  2642  0047DC  C071  F1CC         	movff	?_tickGet,_startTime
  2643  0047E0  C072  F1CD         	movff	?_tickGet+1,_startTime+1
  2644  0047E4  C073  F1CE         	movff	?_tickGet+2,_startTime+2
  2645  0047E8  C074  F1CF         	movff	?_tickGet+3,_startTime+3
  2646                           
  2647                           ; BSR set to: 0
  2648                           ;main.c: 333: lastServoStartTime.Val = startTime.Val;
  2649  0047EC  C1CC  F1C8         	movff	_startTime,_lastServoStartTime
  2650  0047F0  C1CD  F1C9         	movff	_startTime+1,_lastServoStartTime+1
  2651  0047F4  C1CE  F1CA         	movff	_startTime+2,_lastServoStartTime+2
  2652  0047F8  C1CF  F1CB         	movff	_startTime+3,_lastServoStartTime+3
  2653                           
  2654                           ; BSR set to: 0
  2655                           ;main.c: 334: lastInputScanTime.Val = startTime.Val;
  2656  0047FC  C1CC  F1C4         	movff	_startTime,_lastInputScanTime
  2657  004800  C1CD  F1C5         	movff	_startTime+1,_lastInputScanTime+1
  2658  004804  C1CE  F1C6         	movff	_startTime+2,_lastInputScanTime+2
  2659  004808  C1CF  F1C7         	movff	_startTime+3,_lastInputScanTime+3
  2660                           
  2661                           ; BSR set to: 0
  2662                           ;main.c: 335: lastActionPollTime.Val = startTime.Val;
  2663  00480C  C1CC  F1C0         	movff	_startTime,_lastActionPollTime
  2664  004810  C1CD  F1C1         	movff	_startTime+1,_lastActionPollTime+1
  2665  004814  C1CE  F1C2         	movff	_startTime+2,_lastActionPollTime+2
  2666  004818  C1CF  F1C3         	movff	_startTime+3,_lastActionPollTime+3
  2667                           
  2668                           ; BSR set to: 0
  2669                           ;main.c: 337: lastTimedResponseTime.Val = startTime.Val;
  2670  00481C  C1CC  F1BC         	movff	_startTime,_lastTimedResponseTime
  2671  004820  C1CD  F1BD         	movff	_startTime+1,_lastTimedResponseTime+1
  2672  004824  C1CE  F1BE         	movff	_startTime+2,_lastTimedResponseTime+2
  2673  004828  C1CF  F1BF         	movff	_startTime+3,_lastTimedResponseTime+3
  2674                           
  2675                           ; BSR set to: 0
  2676                           ;main.c: 339: started = 0;
  2677  00482C  0E00               	movlw	0
  2678  00482E  6E15               	movwf	_started^0,c
  2679  004830                     l21675:
  2680                           
  2681                           ;main.c: 343: if (!started && (unsigned char)((tickGet() - startTime.Val) > (unsigned lo
      +                          ng)((NV->sendSodDelay * (62500/10)) + (62500*2)))) {
  2682  004830  5015               	movf	_started^0,w,c
  2683  004832  A4D8               	btfss	status,2,c
  2684  004834  D059               	goto	l21683
  2685  004836  ECA3  F04B         	call	_tickGet	;wreg free
  2686  00483A  0101               	movlb	1	; () banked
  2687  00483C  51CC               	movf	_startTime& (0+255),w,b
  2688  00483E  0100               	movlb	0	; () banked
  2689  004840  5D71               	subwf	?_tickGet& (0+255),w,b
  2690  004842  0102               	movlb	2	; () banked
  2691  004844  6FE0               	movwf	??_main& (0+255),b
  2692  004846  0101               	movlb	1	; () banked
  2693  004848  51CD               	movf	(_startTime+1)& (0+255),w,b
  2694  00484A  0100               	movlb	0	; () banked
  2695  00484C  5972               	subwfb	(?_tickGet+1)& (0+255),w,b
  2696  00484E  0102               	movlb	2	; () banked
  2697  004850  6FE1               	movwf	(??_main+1)& (0+255),b
  2698  004852  0101               	movlb	1	; () banked
  2699  004854  51CE               	movf	(_startTime+2)& (0+255),w,b
  2700  004856  0100               	movlb	0	; () banked
  2701  004858  5973               	subwfb	(?_tickGet+2)& (0+255),w,b
  2702  00485A  0102               	movlb	2	; () banked
  2703  00485C  6FE2               	movwf	(??_main+2)& (0+255),b
  2704  00485E  0101               	movlb	1	; () banked
  2705  004860  51CF               	movf	(_startTime+3)& (0+255),w,b
  2706  004862  0100               	movlb	0	; () banked
  2707  004864  5974               	subwfb	(?_tickGet+3)& (0+255),w,b
  2708  004866  0102               	movlb	2	; () banked
  2709  004868  6FE3               	movwf	(??_main+3)& (0+255),b
  2710  00486A  0100               	movlb	0	; () banked
  2711  00486C  EE20 F001          	lfsr	2,1
  2712  004870  51EC               	movf	_NV& (0+255),w,b
  2713  004872  26D9               	addwf	fsr2l,f,c
  2714  004874  51ED               	movf	(_NV+1)& (0+255),w,b
  2715  004876  22DA               	addwfc	fsr2h,f,c
  2716  004878  50DF               	movf	indf2,w,c
  2717  00487A  0102               	movlb	2	; () banked
  2718  00487C  6FE4               	movwf	(??_main+4)& (0+255),b
  2719  00487E  51E4               	movf	(??_main+4)& (0+255),w,b
  2720  004880  0100               	movlb	0	; () banked
  2721  004882  6F71               	movwf	___lmul@multiplier& (0+255),b
  2722  004884  6B72               	clrf	(___lmul@multiplier+1)& (0+255),b
  2723  004886  6B73               	clrf	(___lmul@multiplier+2)& (0+255),b
  2724  004888  6B74               	clrf	(___lmul@multiplier+3)& (0+255),b
  2725  00488A  0E6A               	movlw	106
  2726  00488C  6F75               	movwf	___lmul@multiplicand& (0+255),b
  2727  00488E  0E18               	movlw	24
  2728  004890  6F76               	movwf	(___lmul@multiplicand+1)& (0+255),b
  2729  004892  0E00               	movlw	0
  2730  004894  6F77               	movwf	(___lmul@multiplicand+2)& (0+255),b
  2731  004896  0E00               	movlw	0
  2732  004898  6F78               	movwf	(___lmul@multiplicand+3)& (0+255),b
  2733  00489A  ECFB  F04B         	call	___lmul	;wreg free
  2734  00489E  0E48               	movlw	72
  2735  0048A0  2571               	addwf	?___lmul& (0+255),w,b
  2736  0048A2  0102               	movlb	2	; () banked
  2737  0048A4  6FE5               	movwf	(??_main+5)& (0+255),b
  2738  0048A6  0EE8               	movlw	232
  2739  0048A8  0100               	movlb	0	; () banked
  2740  0048AA  2172               	addwfc	(?___lmul+1)& (0+255),w,b
  2741  0048AC  0102               	movlb	2	; () banked
  2742  0048AE  6FE6               	movwf	(??_main+6)& (0+255),b
  2743  0048B0  0E01               	movlw	1
  2744  0048B2  0100               	movlb	0	; () banked
  2745  0048B4  2173               	addwfc	(?___lmul+2)& (0+255),w,b
  2746  0048B6  0102               	movlb	2	; () banked
  2747  0048B8  6FE7               	movwf	(??_main+7)& (0+255),b
  2748  0048BA  0E00               	movlw	0
  2749  0048BC  0100               	movlb	0	; () banked
  2750  0048BE  2174               	addwfc	(?___lmul+3)& (0+255),w,b
  2751  0048C0  0102               	movlb	2	; () banked
  2752  0048C2  6FE8               	movwf	(??_main+8)& (0+255),b
  2753  0048C4  51E0               	movf	??_main& (0+255),w,b
  2754  0048C6  5DE5               	subwf	(??_main+5)& (0+255),w,b
  2755  0048C8  51E1               	movf	(??_main+1)& (0+255),w,b
  2756  0048CA  59E6               	subwfb	(??_main+6)& (0+255),w,b
  2757  0048CC  51E2               	movf	(??_main+2)& (0+255),w,b
  2758  0048CE  59E7               	subwfb	(??_main+7)& (0+255),w,b
  2759  0048D0  51E3               	movf	(??_main+3)& (0+255),w,b
  2760  0048D2  59E8               	subwfb	(??_main+8)& (0+255),w,b
  2761  0048D4  B0D8               	btfsc	status,0,c
  2762  0048D6  D008               	goto	l21683
  2763                           
  2764                           ; BSR set to: 2
  2765                           ;main.c: 344: started = 1;
  2766  0048D8  0E01               	movlw	1
  2767  0048DA  6E15               	movwf	_started^0,c
  2768                           
  2769                           ; BSR set to: 2
  2770                           ;main.c: 346: sendProducedEvent(1U, 1);
  2771  0048DC  0E01               	movlw	1
  2772  0048DE  0100               	movlb	0	; () banked
  2773  0048E0  6FAE               	movwf	sendProducedEvent@on& (0+255),b
  2774  0048E2  0E01               	movlw	1
  2775  0048E4  EC54  F03C         	call	_sendProducedEvent
  2776  0048E8                     l21683:
  2777                           
  2778                           ;main.c: 348: };main.c: 349: checkCBUS();
  2779  0048E8  ECB4  F046         	call	_checkCBUS	;wreg free
  2780                           
  2781                           ;main.c: 350: FLiMSWCheck();
  2782  0048EC  EC37  F033         	call	_FLiMSWCheck	;wreg free
  2783                           
  2784                           ;main.c: 354: if ((tickGet() - lastServoStartTime.Val) > 5*(62500/2000)) {
  2785  0048F0  ECA3  F04B         	call	_tickGet	;wreg free
  2786  0048F4  0101               	movlb	1	; () banked
  2787  0048F6  51C8               	movf	_lastServoStartTime& (0+255),w,b
  2788  0048F8  0100               	movlb	0	; () banked
  2789  0048FA  5D71               	subwf	?_tickGet& (0+255),w,b
  2790  0048FC  0102               	movlb	2	; () banked
  2791  0048FE  6FE0               	movwf	??_main& (0+255),b
  2792  004900  0101               	movlb	1	; () banked
  2793  004902  51C9               	movf	(_lastServoStartTime+1)& (0+255),w,b
  2794  004904  0100               	movlb	0	; () banked
  2795  004906  5972               	subwfb	(?_tickGet+1)& (0+255),w,b
  2796  004908  0102               	movlb	2	; () banked
  2797  00490A  6FE1               	movwf	(??_main+1)& (0+255),b
  2798  00490C  0101               	movlb	1	; () banked
  2799  00490E  51CA               	movf	(_lastServoStartTime+2)& (0+255),w,b
  2800  004910  0100               	movlb	0	; () banked
  2801  004912  5973               	subwfb	(?_tickGet+2)& (0+255),w,b
  2802  004914  0102               	movlb	2	; () banked
  2803  004916  6FE2               	movwf	(??_main+2)& (0+255),b
  2804  004918  0101               	movlb	1	; () banked
  2805  00491A  51CB               	movf	(_lastServoStartTime+3)& (0+255),w,b
  2806  00491C  0100               	movlb	0	; () banked
  2807  00491E  5974               	subwfb	(?_tickGet+3)& (0+255),w,b
  2808  004920  0102               	movlb	2	; () banked
  2809  004922  6FE3               	movwf	(??_main+3)& (0+255),b
  2810  004924  51E3               	movf	(??_main+3)& (0+255),w,b
  2811  004926  11E2               	iorwf	(??_main+2)& (0+255),w,b
  2812  004928  11E1               	iorwf	(??_main+1)& (0+255),w,b
  2813  00492A  E104               	bnz	u27900
  2814  00492C  0E9C               	movlw	156
  2815  00492E  5DE0               	subwf	??_main& (0+255),w,b
  2816  004930  A0D8               	btfss	status,0,c
  2817  004932  D00C               	goto	l21693
  2818  004934                     u27900:
  2819                           
  2820                           ; BSR set to: 2
  2821                           ;main.c: 355: startServos();
  2822  004934  ECED  F03D         	call	_startServos	;wreg free
  2823                           
  2824                           ; BSR set to: 0
  2825                           ;main.c: 356: lastServoStartTime.Val = tickGet();
  2826  004938  ECA3  F04B         	call	_tickGet	;wreg free
  2827  00493C  C071  F1C8         	movff	?_tickGet,_lastServoStartTime
  2828  004940  C072  F1C9         	movff	?_tickGet+1,_lastServoStartTime+1
  2829  004944  C073  F1CA         	movff	?_tickGet+2,_lastServoStartTime+2
  2830  004948  C074  F1CB         	movff	?_tickGet+3,_lastServoStartTime+3
  2831  00494C                     l21693:
  2832                           
  2833                           ;main.c: 357: };main.c: 359: if (started) {
  2834  00494C  5015               	movf	_started^0,w,c
  2835  00494E  B4D8               	btfsc	status,2,c
  2836  004950  D0B4               	goto	l21715
  2837                           
  2838                           ;main.c: 360: if ((tickGet() - lastInputScanTime.Val) > 5*(62500/1000)) {
  2839  004952  ECA3  F04B         	call	_tickGet	;wreg free
  2840  004956  0101               	movlb	1	; () banked
  2841  004958  51C4               	movf	_lastInputScanTime& (0+255),w,b
  2842  00495A  0100               	movlb	0	; () banked
  2843  00495C  5D71               	subwf	?_tickGet& (0+255),w,b
  2844  00495E  0102               	movlb	2	; () banked
  2845  004960  6FE0               	movwf	??_main& (0+255),b
  2846  004962  0101               	movlb	1	; () banked
  2847  004964  51C5               	movf	(_lastInputScanTime+1)& (0+255),w,b
  2848  004966  0100               	movlb	0	; () banked
  2849  004968  5972               	subwfb	(?_tickGet+1)& (0+255),w,b
  2850  00496A  0102               	movlb	2	; () banked
  2851  00496C  6FE1               	movwf	(??_main+1)& (0+255),b
  2852  00496E  0101               	movlb	1	; () banked
  2853  004970  51C6               	movf	(_lastInputScanTime+2)& (0+255),w,b
  2854  004972  0100               	movlb	0	; () banked
  2855  004974  5973               	subwfb	(?_tickGet+2)& (0+255),w,b
  2856  004976  0102               	movlb	2	; () banked
  2857  004978  6FE2               	movwf	(??_main+2)& (0+255),b
  2858  00497A  0101               	movlb	1	; () banked
  2859  00497C  51C7               	movf	(_lastInputScanTime+3)& (0+255),w,b
  2860  00497E  0100               	movlb	0	; () banked
  2861  004980  5974               	subwfb	(?_tickGet+3)& (0+255),w,b
  2862  004982  0102               	movlb	2	; () banked
  2863  004984  6FE3               	movwf	(??_main+3)& (0+255),b
  2864  004986  51E3               	movf	(??_main+3)& (0+255),w,b
  2865  004988  11E2               	iorwf	(??_main+2)& (0+255),w,b
  2866  00498A  E106               	bnz	u27920
  2867  00498C  0E37               	movlw	55
  2868  00498E  5DE0               	subwf	??_main& (0+255),w,b
  2869  004990  0E01               	movlw	1
  2870  004992  59E1               	subwfb	(??_main+1)& (0+255),w,b
  2871  004994  A0D8               	btfss	status,0,c
  2872  004996  D00C               	goto	l21701
  2873  004998                     u27920:
  2874                           
  2875                           ; BSR set to: 2
  2876                           ;main.c: 361: inputScan();
  2877  004998  EC4D  F022         	call	_inputScan	;wreg free
  2878                           
  2879                           ; BSR set to: 0
  2880                           ;main.c: 362: lastInputScanTime.Val = tickGet();
  2881  00499C  ECA3  F04B         	call	_tickGet	;wreg free
  2882  0049A0  C071  F1C4         	movff	?_tickGet,_lastInputScanTime
  2883  0049A4  C072  F1C5         	movff	?_tickGet+1,_lastInputScanTime+1
  2884  0049A8  C073  F1C6         	movff	?_tickGet+2,_lastInputScanTime+2
  2885  0049AC  C074  F1C7         	movff	?_tickGet+3,_lastInputScanTime+3
  2886  0049B0                     l21701:
  2887                           
  2888                           ;main.c: 363: };main.c: 364: if ((tickGet() - lastActionPollTime.Val) > 100*(62500/1000)
      +                          ) {
  2889  0049B0  ECA3  F04B         	call	_tickGet	;wreg free
  2890  0049B4  0101               	movlb	1	; () banked
  2891  0049B6  51C0               	movf	_lastActionPollTime& (0+255),w,b
  2892  0049B8  0100               	movlb	0	; () banked
  2893  0049BA  5D71               	subwf	?_tickGet& (0+255),w,b
  2894  0049BC  0102               	movlb	2	; () banked
  2895  0049BE  6FE0               	movwf	??_main& (0+255),b
  2896  0049C0  0101               	movlb	1	; () banked
  2897  0049C2  51C1               	movf	(_lastActionPollTime+1)& (0+255),w,b
  2898  0049C4  0100               	movlb	0	; () banked
  2899  0049C6  5972               	subwfb	(?_tickGet+1)& (0+255),w,b
  2900  0049C8  0102               	movlb	2	; () banked
  2901  0049CA  6FE1               	movwf	(??_main+1)& (0+255),b
  2902  0049CC  0101               	movlb	1	; () banked
  2903  0049CE  51C2               	movf	(_lastActionPollTime+2)& (0+255),w,b
  2904  0049D0  0100               	movlb	0	; () banked
  2905  0049D2  5973               	subwfb	(?_tickGet+2)& (0+255),w,b
  2906  0049D4  0102               	movlb	2	; () banked
  2907  0049D6  6FE2               	movwf	(??_main+2)& (0+255),b
  2908  0049D8  0101               	movlb	1	; () banked
  2909  0049DA  51C3               	movf	(_lastActionPollTime+3)& (0+255),w,b
  2910  0049DC  0100               	movlb	0	; () banked
  2911  0049DE  5974               	subwfb	(?_tickGet+3)& (0+255),w,b
  2912  0049E0  0102               	movlb	2	; () banked
  2913  0049E2  6FE3               	movwf	(??_main+3)& (0+255),b
  2914  0049E4  51E3               	movf	(??_main+3)& (0+255),w,b
  2915  0049E6  11E2               	iorwf	(??_main+2)& (0+255),w,b
  2916  0049E8  E106               	bnz	u27930
  2917  0049EA  0E39               	movlw	57
  2918  0049EC  5DE0               	subwf	??_main& (0+255),w,b
  2919  0049EE  0E18               	movlw	24
  2920  0049F0  59E1               	subwfb	(??_main+1)& (0+255),w,b
  2921  0049F2  A0D8               	btfss	status,0,c
  2922  0049F4  D00E               	goto	l21707
  2923  0049F6                     u27930:
  2924                           
  2925                           ; BSR set to: 2
  2926                           ;main.c: 365: processActions();
  2927  0049F6  EC1D  F02C         	call	_processActions	;wreg free
  2928                           
  2929                           ;main.c: 366: processOutputs();
  2930  0049FA  ECF7  F02A         	call	_processOutputs	;wreg free
  2931                           
  2932                           ; BSR set to: 0
  2933                           ;main.c: 367: lastActionPollTime.Val = tickGet();
  2934  0049FE  ECA3  F04B         	call	_tickGet	;wreg free
  2935  004A02  C071  F1C0         	movff	?_tickGet,_lastActionPollTime
  2936  004A06  C072  F1C1         	movff	?_tickGet+1,_lastActionPollTime+1
  2937  004A0A  C073  F1C2         	movff	?_tickGet+2,_lastActionPollTime+2
  2938  004A0E  C074  F1C3         	movff	?_tickGet+3,_lastActionPollTime+3
  2939  004A12                     l21707:
  2940                           
  2941                           ;main.c: 368: };main.c: 370: if ((tickGet() - lastTimedResponseTime.Val) > (unsigned lon
      +                          g)((NV->responseDelay) * (62500/1000))) {
  2942  004A12  ECA3  F04B         	call	_tickGet	;wreg free
  2943  004A16  0101               	movlb	1	; () banked
  2944  004A18  51BC               	movf	_lastTimedResponseTime& (0+255),w,b
  2945  004A1A  0100               	movlb	0	; () banked
  2946  004A1C  5D71               	subwf	?_tickGet& (0+255),w,b
  2947  004A1E  0102               	movlb	2	; () banked
  2948  004A20  6FE0               	movwf	??_main& (0+255),b
  2949  004A22  0101               	movlb	1	; () banked
  2950  004A24  51BD               	movf	(_lastTimedResponseTime+1)& (0+255),w,b
  2951  004A26  0100               	movlb	0	; () banked
  2952  004A28  5972               	subwfb	(?_tickGet+1)& (0+255),w,b
  2953  004A2A  0102               	movlb	2	; () banked
  2954  004A2C  6FE1               	movwf	(??_main+1)& (0+255),b
  2955  004A2E  0101               	movlb	1	; () banked
  2956  004A30  51BE               	movf	(_lastTimedResponseTime+2)& (0+255),w,b
  2957  004A32  0100               	movlb	0	; () banked
  2958  004A34  5973               	subwfb	(?_tickGet+2)& (0+255),w,b
  2959  004A36  0102               	movlb	2	; () banked
  2960  004A38  6FE2               	movwf	(??_main+2)& (0+255),b
  2961  004A3A  0101               	movlb	1	; () banked
  2962  004A3C  51BF               	movf	(_lastTimedResponseTime+3)& (0+255),w,b
  2963  004A3E  0100               	movlb	0	; () banked
  2964  004A40  5974               	subwfb	(?_tickGet+3)& (0+255),w,b
  2965  004A42  0102               	movlb	2	; () banked
  2966  004A44  6FE3               	movwf	(??_main+3)& (0+255),b
  2967  004A46  0100               	movlb	0	; () banked
  2968  004A48  EE20 F005          	lfsr	2,5
  2969  004A4C  51EC               	movf	_NV& (0+255),w,b
  2970  004A4E  26D9               	addwf	fsr2l,f,c
  2971  004A50  51ED               	movf	(_NV+1)& (0+255),w,b
  2972  004A52  22DA               	addwfc	fsr2h,f,c
  2973  004A54  50DF               	movf	indf2,w,c
  2974  004A56  0102               	movlb	2	; () banked
  2975  004A58  6FE4               	movwf	(??_main+4)& (0+255),b
  2976  004A5A  51E4               	movf	(??_main+4)& (0+255),w,b
  2977  004A5C  0100               	movlb	0	; () banked
  2978  004A5E  6F71               	movwf	___lmul@multiplier& (0+255),b
  2979  004A60  6B72               	clrf	(___lmul@multiplier+1)& (0+255),b
  2980  004A62  6B73               	clrf	(___lmul@multiplier+2)& (0+255),b
  2981  004A64  6B74               	clrf	(___lmul@multiplier+3)& (0+255),b
  2982  004A66  0E3E               	movlw	62
  2983  004A68  6F75               	movwf	___lmul@multiplicand& (0+255),b
  2984  004A6A  0E00               	movlw	0
  2985  004A6C  6F76               	movwf	(___lmul@multiplicand+1)& (0+255),b
  2986  004A6E  0E00               	movlw	0
  2987  004A70  6F77               	movwf	(___lmul@multiplicand+2)& (0+255),b
  2988  004A72  0E00               	movlw	0
  2989  004A74  6F78               	movwf	(___lmul@multiplicand+3)& (0+255),b
  2990  004A76  ECFB  F04B         	call	___lmul	;wreg free
  2991  004A7A  0102               	movlb	2	; () banked
  2992  004A7C  51E0               	movf	??_main& (0+255),w,b
  2993  004A7E  0100               	movlb	0	; () banked
  2994  004A80  5D71               	subwf	?___lmul& (0+255),w,b
  2995  004A82  0102               	movlb	2	; () banked
  2996  004A84  51E1               	movf	(??_main+1)& (0+255),w,b
  2997  004A86  0100               	movlb	0	; () banked
  2998  004A88  5972               	subwfb	(?___lmul+1)& (0+255),w,b
  2999  004A8A  0102               	movlb	2	; () banked
  3000  004A8C  51E2               	movf	(??_main+2)& (0+255),w,b
  3001  004A8E  0100               	movlb	0	; () banked
  3002  004A90  5973               	subwfb	(?___lmul+2)& (0+255),w,b
  3003  004A92  0102               	movlb	2	; () banked
  3004  004A94  51E3               	movf	(??_main+3)& (0+255),w,b
  3005  004A96  0100               	movlb	0	; () banked
  3006  004A98  5974               	subwfb	(?___lmul+3)& (0+255),w,b
  3007  004A9A  B0D8               	btfsc	status,0,c
  3008  004A9C  D00C               	goto	l21713
  3009                           
  3010                           ; BSR set to: 0
  3011                           ;main.c: 371: doTimedResponse();
  3012  004A9E  EC1D  F045         	call	_doTimedResponse	;wreg free
  3013                           
  3014                           ;main.c: 372: lastTimedResponseTime.Val = tickGet();
  3015  004AA2  ECA3  F04B         	call	_tickGet	;wreg free
  3016  004AA6  C071  F1BC         	movff	?_tickGet,_lastTimedResponseTime
  3017  004AAA  C072  F1BD         	movff	?_tickGet+1,_lastTimedResponseTime+1
  3018  004AAE  C073  F1BE         	movff	?_tickGet+2,_lastTimedResponseTime+2
  3019  004AB2  C074  F1BF         	movff	?_tickGet+3,_lastTimedResponseTime+3
  3020  004AB6                     l21713:
  3021                           
  3022                           ; BSR set to: 0
  3023                           ;main.c: 373: };main.c: 376: pollAnalogue();
  3024  004AB6  EC38  F012         	call	_pollAnalogue	;wreg free
  3025  004ABA                     l21715:
  3026                           
  3027                           ;main.c: 378: };main.c: 380: checkFlashing();
  3028  004ABA  ECA5  F039         	call	_checkFlashing	;wreg free
  3029  004ABE  D6B8               	goto	l21675
  3030  004AC0                     __end_of_main:
  3031                           	callstack 0
  3032                           
  3033 ;; *************** function _startServos *****************
  3034 ;; Defined at:
  3035 ;;		line 159 in file "../../github/CANMIOfirmware/servo.c"
  3036 ;; Parameters:    Size  Location     Type
  3037 ;;		None
  3038 ;; Auto vars:     Size  Location     Type
  3039 ;;  type            1   99[BANK0 ] unsigned char 
  3040 ;; Return value:  Size  Location     Type
  3041 ;;                  1    wreg      void 
  3042 ;; Registers used:
  3043 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3044 ;; Tracked objects:
  3045 ;;		On entry : 3F/2
  3046 ;;		On exit  : 3F/0
  3047 ;;		Unchanged: 0/0
  3048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3049 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3050 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3051 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3052 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3053 ;;Total ram usage:        3 bytes
  3054 ;; Hardware stack levels used: 1
  3055 ;; Hardware stack levels required when called: 17
  3056 ;; This function calls:
  3057 ;;		_pollServos
  3058 ;;		_setupTimer1
  3059 ;;		_setupTimer3
  3060 ;; This function is called by:
  3061 ;;		_main
  3062 ;; This function uses a non-reentrant model
  3063 ;;
  3064                           
  3065                           	psect	text1
  3066  007BDA                     __ptext1:
  3067                           	callstack 0
  3068  007BDA                     _startServos:
  3069                           	callstack 13
  3070                           
  3071                           ; BSR set to: 2
  3072                           ;servo.c: 160: unsigned char type;;servo.c: 163: servoInBlock++;
  3073                           
  3074                           ;incstack = 0
  3075  007BDA  2A12               	incf	_servoInBlock^0,f,c
  3076                           
  3077                           ; BSR set to: 2
  3078                           ;servo.c: 164: if (servoInBlock >= 8U) {
  3079  007BDC  0E07               	movlw	7
  3080  007BDE  6412               	cpfsgt	_servoInBlock^0,c
  3081  007BE0  D004               	goto	l21449
  3082                           
  3083                           ; BSR set to: 2
  3084                           ;servo.c: 165: servoInBlock = 0;
  3085  007BE2  0E00               	movlw	0
  3086  007BE4  6E12               	movwf	_servoInBlock^0,c
  3087                           
  3088                           ; BSR set to: 2
  3089                           ;servo.c: 166: pollServos();
  3090  007BE6  ECA7  F007         	call	_pollServos	;wreg free
  3091  007BEA                     l21449:
  3092                           
  3093                           ;servo.c: 167: };servo.c: 168: type = NV->io[servoInBlock].type;
  3094  007BEA  5012               	movf	_servoInBlock^0,w,c
  3095  007BEC  0D07               	mullw	7
  3096  007BEE  C0EC  F0C1         	movff	_NV,??_startServos
  3097  007BF2  C0ED  F0C2         	movff	_NV+1,??_startServos+1
  3098  007BF6  50F3               	movf	243,w,c
  3099  007BF8  0100               	movlb	0	; () banked
  3100  007BFA  27C1               	addwf	??_startServos& (0+255),f,b
  3101  007BFC  50F4               	movf	244,w,c
  3102  007BFE  23C2               	addwfc	(??_startServos+1)& (0+255),f,b
  3103  007C00  0E10               	movlw	16
  3104  007C02  25C1               	addwf	??_startServos& (0+255),w,b
  3105  007C04  6ED9               	movwf	fsr2l,c
  3106  007C06  0E00               	movlw	0
  3107  007C08  21C2               	addwfc	(??_startServos+1)& (0+255),w,b
  3108  007C0A  6EDA               	movwf	fsr2h,c
  3109  007C0C  50DF               	movf	indf2,w,c
  3110  007C0E  6FC3               	movwf	startServos@type& (0+255),b
  3111                           
  3112                           ; BSR set to: 0
  3113                           ;servo.c: 169: if ((type == 2U) || (type == 3U) || (type == 4U)) {
  3114  007C10  0E02               	movlw	2
  3115  007C12  19C3               	xorwf	startServos@type& (0+255),w,b
  3116  007C14  B4D8               	btfsc	status,2,c
  3117  007C16  D008               	goto	u27560
  3118                           
  3119                           ; BSR set to: 0
  3120  007C18  0E03               	movlw	3
  3121  007C1A  19C3               	xorwf	startServos@type& (0+255),w,b
  3122  007C1C  B4D8               	btfsc	status,2,c
  3123  007C1E  D004               	goto	u27560
  3124                           
  3125                           ; BSR set to: 0
  3126  007C20  0E04               	movlw	4
  3127  007C22  19C3               	xorwf	startServos@type& (0+255),w,b
  3128  007C24  A4D8               	btfss	status,2,c
  3129  007C26  D00C               	goto	l21461
  3130  007C28                     u27560:
  3131                           
  3132                           ; BSR set to: 0
  3133                           ;servo.c: 170: if (servoState[servoInBlock] != OFF) setupTimer1(servoInBlock);
  3134  007C28  0E40               	movlw	low _servoState
  3135  007C2A  2412               	addwf	_servoInBlock^0,w,c
  3136  007C2C  6ED9               	movwf	fsr2l,c
  3137  007C2E  6ADA               	clrf	fsr2h,c
  3138  007C30  0E01               	movlw	high _servoState
  3139  007C32  22DA               	addwfc	fsr2h,f,c
  3140  007C34  50DF               	movf	indf2,w,c
  3141  007C36  B4D8               	btfsc	status,2,c
  3142  007C38  D003               	goto	l21461
  3143                           
  3144                           ; BSR set to: 0
  3145  007C3A  5012               	movf	_servoInBlock^0,w,c
  3146  007C3C  EC71  F047         	call	_setupTimer1
  3147  007C40                     l21461:
  3148                           
  3149                           ; BSR set to: 0
  3150                           ;servo.c: 171: };servo.c: 172: type = NV->io[servoInBlock+8U].type;
  3151  007C40  5012               	movf	_servoInBlock^0,w,c
  3152  007C42  0D07               	mullw	7
  3153  007C44  C0EC  F0C1         	movff	_NV,??_startServos
  3154  007C48  C0ED  F0C2         	movff	_NV+1,??_startServos+1
  3155  007C4C  50F3               	movf	243,w,c
  3156  007C4E  27C1               	addwf	??_startServos& (0+255),f,b
  3157  007C50  50F4               	movf	244,w,c
  3158  007C52  23C2               	addwfc	(??_startServos+1)& (0+255),f,b
  3159  007C54  0E48               	movlw	72
  3160  007C56  25C1               	addwf	??_startServos& (0+255),w,b
  3161  007C58  6ED9               	movwf	fsr2l,c
  3162  007C5A  0E00               	movlw	0
  3163  007C5C  21C2               	addwfc	(??_startServos+1)& (0+255),w,b
  3164  007C5E  6EDA               	movwf	fsr2h,c
  3165  007C60  50DF               	movf	indf2,w,c
  3166  007C62  6FC3               	movwf	startServos@type& (0+255),b
  3167                           
  3168                           ; BSR set to: 0
  3169                           ;servo.c: 173: if ((type == 2U) || (type == 3U) || (type == 4U)) {
  3170  007C64  0E02               	movlw	2
  3171  007C66  19C3               	xorwf	startServos@type& (0+255),w,b
  3172  007C68  B4D8               	btfsc	status,2,c
  3173  007C6A  D008               	goto	u27600
  3174                           
  3175                           ; BSR set to: 0
  3176  007C6C  0E03               	movlw	3
  3177  007C6E  19C3               	xorwf	startServos@type& (0+255),w,b
  3178  007C70  B4D8               	btfsc	status,2,c
  3179  007C72  D004               	goto	u27600
  3180                           
  3181                           ; BSR set to: 0
  3182  007C74  0E04               	movlw	4
  3183  007C76  19C3               	xorwf	startServos@type& (0+255),w,b
  3184  007C78  A4D8               	btfss	status,2,c
  3185  007C7A  0012               	return	
  3186  007C7C                     u27600:
  3187                           
  3188                           ; BSR set to: 0
  3189                           ;servo.c: 174: if (servoState[servoInBlock+8U] != OFF) setupTimer3(servoInBlock+8U);
  3190  007C7C  0E48               	movlw	low (_servoState+8)
  3191  007C7E  2412               	addwf	_servoInBlock^0,w,c
  3192  007C80  6ED9               	movwf	fsr2l,c
  3193  007C82  6ADA               	clrf	fsr2h,c
  3194  007C84  0E01               	movlw	high (_servoState+8)
  3195  007C86  22DA               	addwfc	fsr2h,f,c
  3196  007C88  50DF               	movf	indf2,w,c
  3197  007C8A  B4D8               	btfsc	status,2,c
  3198  007C8C  0012               	return	
  3199                           
  3200                           ; BSR set to: 0
  3201  007C8E  5012               	movf	_servoInBlock^0,w,c
  3202  007C90  0F08               	addlw	8
  3203  007C92  EC36  F047         	call	_setupTimer3
  3204                           
  3205                           ; BSR set to: 0
  3206  007C96  0012               	return		;funcret
  3207  007C98                     __end_of_startServos:
  3208                           	callstack 0
  3209                           
  3210 ;; *************** function _setupTimer3 *****************
  3211 ;; Defined at:
  3212 ;;		line 196 in file "../../github/CANMIOfirmware/servo.c"
  3213 ;; Parameters:    Size  Location     Type
  3214 ;;  io              1    wreg     unsigned char 
  3215 ;; Auto vars:     Size  Location     Type
  3216 ;;  io              1   28[BANK0 ] unsigned char 
  3217 ;; Return value:  Size  Location     Type
  3218 ;;                  1    wreg      void 
  3219 ;; Registers used:
  3220 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3221 ;; Tracked objects:
  3222 ;;		On entry : 3F/0
  3223 ;;		On exit  : 3F/0
  3224 ;;		Unchanged: 0/0
  3225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3226 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3227 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3228 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3229 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3230 ;;Total ram usage:        6 bytes
  3231 ;; Hardware stack levels used: 1
  3232 ;; Hardware stack levels required when called: 9
  3233 ;; This function calls:
  3234 ;;		_setOutputPin
  3235 ;; This function is called by:
  3236 ;;		_startServos
  3237 ;; This function uses a non-reentrant model
  3238 ;;
  3239                           
  3240                           	psect	text2
  3241  008E6C                     __ptext2:
  3242                           	callstack 0
  3243  008E6C                     _setupTimer3:
  3244                           	callstack 20
  3245                           
  3246                           ; BSR set to: 0
  3247                           ;incstack = 0
  3248                           ;setupTimer3@io stored from wreg
  3249  008E6C  6F7C               	movwf	setupTimer3@io& (0+255),b
  3250                           
  3251                           ;servo.c: 199: TMR3 = -(3600U + (WORD)19U * currentPos[io]);
  3252  008E6E  0E10               	movlw	16
  3253  008E70  0100               	movlb	0	; () banked
  3254  008E72  6F77               	movwf	??_setupTimer3& (0+255),b
  3255  008E74  0E0E               	movlw	14
  3256  008E76  6F78               	movwf	(??_setupTimer3+1)& (0+255),b
  3257  008E78  0E80               	movlw	low _currentPos
  3258  008E7A  257C               	addwf	setupTimer3@io& (0+255),w,b
  3259  008E7C  6ED9               	movwf	fsr2l,c
  3260  008E7E  6ADA               	clrf	fsr2h,c
  3261  008E80  0E01               	movlw	high _currentPos
  3262  008E82  22DA               	addwfc	fsr2h,f,c
  3263  008E84  50DF               	movf	indf2,w,c
  3264  008E86  6F79               	movwf	(??_setupTimer3+2)& (0+255),b
  3265  008E88  5179               	movf	(??_setupTimer3+2)& (0+255),w,b
  3266  008E8A  0D13               	mullw	19
  3267  008E8C  CFF3 F07A          	movff	prodl,??_setupTimer3+3
  3268  008E90  CFF4 F07B          	movff	prodh,??_setupTimer3+4
  3269  008E94  5177               	movf	??_setupTimer3& (0+255),w,b
  3270  008E96  277A               	addwf	(??_setupTimer3+3)& (0+255),f,b
  3271  008E98  5178               	movf	(??_setupTimer3+1)& (0+255),w,b
  3272  008E9A  237B               	addwfc	(??_setupTimer3+4)& (0+255),f,b
  3273  008E9C  1F7A               	comf	(??_setupTimer3+3)& (0+255),f,b
  3274  008E9E  1F7B               	comf	(??_setupTimer3+4)& (0+255),f,b
  3275  008EA0  4B7A               	infsnz	(??_setupTimer3+3)& (0+255),f,b
  3276  008EA2  2B7B               	incf	(??_setupTimer3+4)& (0+255),f,b
  3277  008EA4  C07A  FFB2         	movff	??_setupTimer3+3,4018	;volatile
  3278  008EA8  C07B  FFB3         	movff	??_setupTimer3+4,4019	;volatile
  3279                           
  3280                           ; BSR set to: 0
  3281                           ;servo.c: 206: setOutputPin(io, (unsigned char)( ! (NV->io[io].flags & 0x20U)));
  3282  008EAC  517C               	movf	setupTimer3@io& (0+255),w,b
  3283  008EAE  0D07               	mullw	7
  3284  008EB0  C0EC  F077         	movff	_NV,??_setupTimer3
  3285  008EB4  C0ED  F078         	movff	_NV+1,??_setupTimer3+1
  3286  008EB8  50F3               	movf	243,w,c
  3287  008EBA  2777               	addwf	??_setupTimer3& (0+255),f,b
  3288  008EBC  50F4               	movf	244,w,c
  3289  008EBE  2378               	addwfc	(??_setupTimer3+1)& (0+255),f,b
  3290  008EC0  0E11               	movlw	17
  3291  008EC2  2577               	addwf	??_setupTimer3& (0+255),w,b
  3292  008EC4  6ED9               	movwf	fsr2l,c
  3293  008EC6  0E00               	movlw	0
  3294  008EC8  2178               	addwfc	(??_setupTimer3+1)& (0+255),w,b
  3295  008ECA  6EDA               	movwf	fsr2h,c
  3296  008ECC  BADF               	btfsc	indf2,5,c
  3297  008ECE  D002               	goto	u26380
  3298  008ED0  0E01               	movlw	1
  3299  008ED2  D001               	goto	u26390
  3300  008ED4                     u26380:
  3301  008ED4  0E00               	movlw	0
  3302  008ED6                     u26390:
  3303  008ED6  6F71               	movwf	setOutputPin@state& (0+255),b
  3304  008ED8  517C               	movf	setupTimer3@io& (0+255),w,b
  3305  008EDA  EC90  F031         	call	_setOutputPin
  3306                           
  3307                           ; BSR set to: 0
  3308                           ;servo.c: 207: T3CONbits.TMR3ON = 1;
  3309  008EDE  80B1               	bsf	177,0,c	;volatile
  3310                           
  3311                           ; BSR set to: 0
  3312  008EE0  0012               	return		;funcret
  3313  008EE2                     __end_of_setupTimer3:
  3314                           	callstack 0
  3315                           
  3316 ;; *************** function _setupTimer1 *****************
  3317 ;; Defined at:
  3318 ;;		line 183 in file "../../github/CANMIOfirmware/servo.c"
  3319 ;; Parameters:    Size  Location     Type
  3320 ;;  io              1    wreg     unsigned char 
  3321 ;; Auto vars:     Size  Location     Type
  3322 ;;  io              1   28[BANK0 ] unsigned char 
  3323 ;; Return value:  Size  Location     Type
  3324 ;;                  1    wreg      void 
  3325 ;; Registers used:
  3326 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3327 ;; Tracked objects:
  3328 ;;		On entry : 3F/0
  3329 ;;		On exit  : 3F/0
  3330 ;;		Unchanged: 0/0
  3331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3332 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3333 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3334 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3335 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3336 ;;Total ram usage:        6 bytes
  3337 ;; Hardware stack levels used: 1
  3338 ;; Hardware stack levels required when called: 9
  3339 ;; This function calls:
  3340 ;;		_setOutputPin
  3341 ;; This function is called by:
  3342 ;;		_startServos
  3343 ;; This function uses a non-reentrant model
  3344 ;;
  3345                           
  3346                           	psect	text3
  3347  008EE2                     __ptext3:
  3348                           	callstack 0
  3349  008EE2                     _setupTimer1:
  3350                           	callstack 20
  3351                           
  3352                           ; BSR set to: 0
  3353                           ;incstack = 0
  3354                           ;setupTimer1@io stored from wreg
  3355  008EE2  6F7C               	movwf	setupTimer1@io& (0+255),b
  3356                           
  3357                           ;servo.c: 186: TMR1 = -(3600U + (WORD)19U * currentPos[io]);
  3358  008EE4  0E10               	movlw	16
  3359  008EE6  0100               	movlb	0	; () banked
  3360  008EE8  6F77               	movwf	??_setupTimer1& (0+255),b
  3361  008EEA  0E0E               	movlw	14
  3362  008EEC  6F78               	movwf	(??_setupTimer1+1)& (0+255),b
  3363  008EEE  0E80               	movlw	low _currentPos
  3364  008EF0  257C               	addwf	setupTimer1@io& (0+255),w,b
  3365  008EF2  6ED9               	movwf	fsr2l,c
  3366  008EF4  6ADA               	clrf	fsr2h,c
  3367  008EF6  0E01               	movlw	high _currentPos
  3368  008EF8  22DA               	addwfc	fsr2h,f,c
  3369  008EFA  50DF               	movf	indf2,w,c
  3370  008EFC  6F79               	movwf	(??_setupTimer1+2)& (0+255),b
  3371  008EFE  5179               	movf	(??_setupTimer1+2)& (0+255),w,b
  3372  008F00  0D13               	mullw	19
  3373  008F02  CFF3 F07A          	movff	prodl,??_setupTimer1+3
  3374  008F06  CFF4 F07B          	movff	prodh,??_setupTimer1+4
  3375  008F0A  5177               	movf	??_setupTimer1& (0+255),w,b
  3376  008F0C  277A               	addwf	(??_setupTimer1+3)& (0+255),f,b
  3377  008F0E  5178               	movf	(??_setupTimer1+1)& (0+255),w,b
  3378  008F10  237B               	addwfc	(??_setupTimer1+4)& (0+255),f,b
  3379  008F12  1F7A               	comf	(??_setupTimer1+3)& (0+255),f,b
  3380  008F14  1F7B               	comf	(??_setupTimer1+4)& (0+255),f,b
  3381  008F16  4B7A               	infsnz	(??_setupTimer1+3)& (0+255),f,b
  3382  008F18  2B7B               	incf	(??_setupTimer1+4)& (0+255),f,b
  3383  008F1A  C07A  FFCE         	movff	??_setupTimer1+3,4046	;volatile
  3384  008F1E  C07B  FFCF         	movff	??_setupTimer1+4,4047	;volatile
  3385                           
  3386                           ; BSR set to: 0
  3387                           ;servo.c: 193: setOutputPin(io, (unsigned char)( ! (NV->io[io].flags & 0x20U)));
  3388  008F22  517C               	movf	setupTimer1@io& (0+255),w,b
  3389  008F24  0D07               	mullw	7
  3390  008F26  C0EC  F077         	movff	_NV,??_setupTimer1
  3391  008F2A  C0ED  F078         	movff	_NV+1,??_setupTimer1+1
  3392  008F2E  50F3               	movf	243,w,c
  3393  008F30  2777               	addwf	??_setupTimer1& (0+255),f,b
  3394  008F32  50F4               	movf	244,w,c
  3395  008F34  2378               	addwfc	(??_setupTimer1+1)& (0+255),f,b
  3396  008F36  0E11               	movlw	17
  3397  008F38  2577               	addwf	??_setupTimer1& (0+255),w,b
  3398  008F3A  6ED9               	movwf	fsr2l,c
  3399  008F3C  0E00               	movlw	0
  3400  008F3E  2178               	addwfc	(??_setupTimer1+1)& (0+255),w,b
  3401  008F40  6EDA               	movwf	fsr2h,c
  3402  008F42  BADF               	btfsc	indf2,5,c
  3403  008F44  D002               	goto	u26360
  3404  008F46  0E01               	movlw	1
  3405  008F48  D001               	goto	u26370
  3406  008F4A                     u26360:
  3407  008F4A  0E00               	movlw	0
  3408  008F4C                     u26370:
  3409  008F4C  6F71               	movwf	setOutputPin@state& (0+255),b
  3410  008F4E  517C               	movf	setupTimer1@io& (0+255),w,b
  3411  008F50  EC90  F031         	call	_setOutputPin
  3412                           
  3413                           ; BSR set to: 0
  3414                           ;servo.c: 194: T1CONbits.TMR1ON = 1;
  3415  008F54  80CD               	bsf	205,0,c	;volatile
  3416                           
  3417                           ; BSR set to: 0
  3418  008F56  0012               	return		;funcret
  3419  008F58                     __end_of_setupTimer1:
  3420                           	callstack 0
  3421                           
  3422 ;; *************** function _pollServos *****************
  3423 ;; Defined at:
  3424 ;;		line 235 in file "../../github/CANMIOfirmware/servo.c"
  3425 ;; Parameters:    Size  Location     Type
  3426 ;;		None
  3427 ;; Auto vars:     Size  Location     Type
  3428 ;;  io              1   96[BANK0 ] unsigned char 
  3429 ;;  midway          1   95[BANK0 ] unsigned char 
  3430 ;;  beforeMidway    1   94[BANK0 ] unsigned char 
  3431 ;;  target          1   93[BANK0 ] unsigned char 
  3432 ;; Return value:  Size  Location     Type
  3433 ;;                  1    wreg      void 
  3434 ;; Registers used:
  3435 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3436 ;; Tracked objects:
  3437 ;;		On entry : 3F/2
  3438 ;;		On exit  : 3F/0
  3439 ;;		Unchanged: 0/0
  3440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3441 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3442 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3443 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3444 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3445 ;;Total ram usage:       12 bytes
  3446 ;; Hardware stack levels used: 1
  3447 ;; Hardware stack levels required when called: 16
  3448 ;; This function calls:
  3449 ;;		_bounceDown
  3450 ;;		_bounceUp
  3451 ;;		_ee_write
  3452 ;;		_initBounce
  3453 ;;		_sendProducedEvent
  3454 ;;		_tickGet
  3455 ;; This function is called by:
  3456 ;;		_startServos
  3457 ;; This function uses a non-reentrant model
  3458 ;;
  3459                           
  3460                           	psect	text4
  3461  000F4E                     __ptext4:
  3462                           	callstack 0
  3463  000F4E                     _pollServos:
  3464                           	callstack 13
  3465                           
  3466                           ; BSR set to: 2
  3467                           ;servo.c: 236: unsigned char midway;;servo.c: 237: BOOL beforeMidway;;servo.c: 238: unsi
      +                          gned char io;;servo.c: 239: unsigned char target;;servo.c: 241: for (io=0; io<16U; io++)
      +                           {
  3468                           
  3469                           ; BSR set to: 0
  3470                           ;incstack = 0
  3471  000F4E  0E00               	movlw	0
  3472  000F50  0100               	movlb	0	; () banked
  3473  000F52  6FC0               	movwf	pollServos@io& (0+255),b
  3474  000F54  EFB7  F00E         	goto	l20829
  3475  000F58                     l20601:
  3476                           
  3477                           ; BSR set to: 0
  3478                           ;servo.c: 244: midway = (unsigned char)(NV->io[io].nv_io.nv_servo.servo_end_pos)/2U +;se
      +                          rvo.c: 245: (NV->io[io].nv_io.nv_servo.servo_start_pos)/2U;
  3479  000F58  51C0               	movf	pollServos@io& (0+255),w,b
  3480  000F5A  0D07               	mullw	7
  3481  000F5C  C0EC  F0B5         	movff	_NV,??_pollServos
  3482  000F60  C0ED  F0B6         	movff	_NV+1,??_pollServos+1
  3483  000F64  50F3               	movf	243,w,c
  3484  000F66  27B5               	addwf	??_pollServos& (0+255),f,b
  3485  000F68  50F4               	movf	244,w,c
  3486  000F6A  23B6               	addwfc	(??_pollServos+1)& (0+255),f,b
  3487  000F6C  0E12               	movlw	18
  3488  000F6E  25B5               	addwf	??_pollServos& (0+255),w,b
  3489  000F70  6ED9               	movwf	fsr2l,c
  3490  000F72  0E00               	movlw	0
  3491  000F74  21B6               	addwfc	(??_pollServos+1)& (0+255),w,b
  3492  000F76  6EDA               	movwf	fsr2h,c
  3493  000F78  50DF               	movf	indf2,w,c
  3494  000F7A  6FB7               	movwf	(??_pollServos+2)& (0+255),b
  3495  000F7C  90D8               	bcf	status,0,c
  3496  000F7E  33B7               	rrcf	(??_pollServos+2)& (0+255),f,b
  3497  000F80  51C0               	movf	pollServos@io& (0+255),w,b
  3498  000F82  0D07               	mullw	7
  3499  000F84  C0EC  F0B8         	movff	_NV,??_pollServos+3
  3500  000F88  C0ED  F0B9         	movff	_NV+1,??_pollServos+4
  3501  000F8C  50F3               	movf	243,w,c
  3502  000F8E  27B8               	addwf	(??_pollServos+3)& (0+255),f,b
  3503  000F90  50F4               	movf	244,w,c
  3504  000F92  23B9               	addwfc	(??_pollServos+4)& (0+255),f,b
  3505  000F94  0E13               	movlw	19
  3506  000F96  25B8               	addwf	(??_pollServos+3)& (0+255),w,b
  3507  000F98  6ED9               	movwf	fsr2l,c
  3508  000F9A  0E00               	movlw	0
  3509  000F9C  21B9               	addwfc	(??_pollServos+4)& (0+255),w,b
  3510  000F9E  6EDA               	movwf	fsr2h,c
  3511  000FA0  50DF               	movf	indf2,w,c
  3512  000FA2  6FBA               	movwf	(??_pollServos+5)& (0+255),b
  3513  000FA4  90D8               	bcf	status,0,c
  3514  000FA6  31BA               	rrcf	(??_pollServos+5)& (0+255),w,b
  3515  000FA8  25B7               	addwf	(??_pollServos+2)& (0+255),w,b
  3516  000FAA  6FBF               	movwf	pollServos@midway& (0+255),b
  3517                           
  3518                           ; BSR set to: 0
  3519                           ;servo.c: 246: beforeMidway=0;
  3520  000FAC  0E00               	movlw	0
  3521  000FAE  6FBE               	movwf	pollServos@beforeMidway& (0+255),b
  3522                           
  3523                           ;servo.c: 247: switch (servoState[io]) {
  3524  000FB0  D28C               	goto	l20689
  3525  000FB2                     l20605:
  3526                           
  3527                           ; BSR set to: 0
  3528                           ;servo.c: 249: if (currentPos[io]==NV->io[io].nv_io.nv_servo.servo_start_pos) {
  3529  000FB2  51C0               	movf	pollServos@io& (0+255),w,b
  3530  000FB4  0D07               	mullw	7
  3531  000FB6  C0EC  F0B5         	movff	_NV,??_pollServos
  3532  000FBA  C0ED  F0B6         	movff	_NV+1,??_pollServos+1
  3533  000FBE  50F3               	movf	243,w,c
  3534  000FC0  27B5               	addwf	??_pollServos& (0+255),f,b
  3535  000FC2  50F4               	movf	244,w,c
  3536  000FC4  23B6               	addwfc	(??_pollServos+1)& (0+255),f,b
  3537  000FC6  0E12               	movlw	18
  3538  000FC8  25B5               	addwf	??_pollServos& (0+255),w,b
  3539  000FCA  6ED9               	movwf	fsr2l,c
  3540  000FCC  0E00               	movlw	0
  3541  000FCE  21B6               	addwfc	(??_pollServos+1)& (0+255),w,b
  3542  000FD0  6EDA               	movwf	fsr2h,c
  3543  000FD2  0E80               	movlw	low _currentPos
  3544  000FD4  25C0               	addwf	pollServos@io& (0+255),w,b
  3545  000FD6  6EE1               	movwf	fsr1l,c
  3546  000FD8  6AE2               	clrf	fsr1h,c
  3547  000FDA  0E01               	movlw	high _currentPos
  3548  000FDC  22E2               	addwfc	fsr1h,f,c
  3549  000FDE  50DE               	movf	postinc2,w,c
  3550  000FE0  18E6               	xorwf	postinc1,w,c
  3551  000FE2  A4D8               	btfss	status,2,c
  3552  000FE4  D01A               	goto	l20609
  3553                           
  3554                           ; BSR set to: 0
  3555                           ;servo.c: 250: sendProducedEvent(((8U + 4U*(io))+0U), NV->io[io].flags & 0x40U);
  3556  000FE6  51C0               	movf	pollServos@io& (0+255),w,b
  3557  000FE8  0D07               	mullw	7
  3558  000FEA  C0EC  F0B5         	movff	_NV,??_pollServos
  3559  000FEE  C0ED  F0B6         	movff	_NV+1,??_pollServos+1
  3560  000FF2  50F3               	movf	243,w,c
  3561  000FF4  27B5               	addwf	??_pollServos& (0+255),f,b
  3562  000FF6  50F4               	movf	244,w,c
  3563  000FF8  23B6               	addwfc	(??_pollServos+1)& (0+255),f,b
  3564  000FFA  0E11               	movlw	17
  3565  000FFC  25B5               	addwf	??_pollServos& (0+255),w,b
  3566  000FFE  6ED9               	movwf	fsr2l,c
  3567  001000  0E00               	movlw	0
  3568  001002  21B6               	addwfc	(??_pollServos+1)& (0+255),w,b
  3569  001004  6EDA               	movwf	fsr2h,c
  3570  001006  50DF               	movf	indf2,w,c
  3571  001008  0B40               	andlw	64
  3572  00100A  6FAE               	movwf	sendProducedEvent@on& (0+255),b
  3573  00100C  51C0               	movf	pollServos@io& (0+255),w,b
  3574  00100E  0D04               	mullw	4
  3575  001010  50F3               	movf	243,w,c
  3576  001012  0F08               	addlw	8
  3577  001014  EC54  F03C         	call	_sendProducedEvent
  3578                           
  3579                           ;servo.c: 251: } else {
  3580  001018  D019               	goto	l20611
  3581  00101A                     l20609:
  3582                           
  3583                           ; BSR set to: 0
  3584                           ;servo.c: 252: sendProducedEvent(((8U + 4U*(io))+2U), NV->io[io].flags & 0x40U);
  3585  00101A  51C0               	movf	pollServos@io& (0+255),w,b
  3586  00101C  0D07               	mullw	7
  3587  00101E  C0EC  F0B5         	movff	_NV,??_pollServos
  3588  001022  C0ED  F0B6         	movff	_NV+1,??_pollServos+1
  3589  001026  50F3               	movf	243,w,c
  3590  001028  27B5               	addwf	??_pollServos& (0+255),f,b
  3591  00102A  50F4               	movf	244,w,c
  3592  00102C  23B6               	addwfc	(??_pollServos+1)& (0+255),f,b
  3593  00102E  0E11               	movlw	17
  3594  001030  25B5               	addwf	??_pollServos& (0+255),w,b
  3595  001032  6ED9               	movwf	fsr2l,c
  3596  001034  0E00               	movlw	0
  3597  001036  21B6               	addwfc	(??_pollServos+1)& (0+255),w,b
  3598  001038  6EDA               	movwf	fsr2h,c
  3599  00103A  50DF               	movf	indf2,w,c
  3600  00103C  0B40               	andlw	64
  3601  00103E  6FAE               	movwf	sendProducedEvent@on& (0+255),b
  3602  001040  51C0               	movf	pollServos@io& (0+255),w,b
  3603  001042  0D04               	mullw	4
  3604  001044  50F3               	movf	243,w,c
  3605  001046  0F0A               	addlw	10
  3606  001048  EC54  F03C         	call	_sendProducedEvent
  3607  00104C                     l20611:
  3608                           
  3609                           ;servo.c: 253: };servo.c: 254: servoState[io] = MOVING;
  3610  00104C  0E40               	movlw	low _servoState
  3611  00104E  0100               	movlb	0	; () banked
  3612  001050  25C0               	addwf	pollServos@io& (0+255),w,b
  3613  001052  6ED9               	movwf	fsr2l,c
  3614  001054  6ADA               	clrf	fsr2h,c
  3615  001056  0E01               	movlw	high _servoState
  3616  001058  22DA               	addwfc	fsr2h,f,c
  3617  00105A  0E02               	movlw	2
  3618  00105C  6EDF               	movwf	indf2,c
  3619  00105E                     l20613:
  3620                           
  3621                           ; BSR set to: 0
  3622                           ;servo.c: 257: if (targetPos[io] > currentPos[io]) {
  3623  00105E  0E70               	movlw	low _targetPos
  3624  001060  25C0               	addwf	pollServos@io& (0+255),w,b
  3625  001062  6ED9               	movwf	fsr2l,c
  3626  001064  6ADA               	clrf	fsr2h,c
  3627  001066  0E01               	movlw	high _targetPos
  3628  001068  22DA               	addwfc	fsr2h,f,c
  3629  00106A  0E80               	movlw	low _currentPos
  3630  00106C  25C0               	addwf	pollServos@io& (0+255),w,b
  3631  00106E  6EE1               	movwf	fsr1l,c
  3632  001070  6AE2               	clrf	fsr1h,c
  3633  001072  0E01               	movlw	high _currentPos
  3634  001074  22E2               	addwfc	fsr1h,f,c
  3635  001076  50DE               	movf	postinc2,w,c
  3636  001078  5CE6               	subwf	postinc1,w,c
  3637  00107A  B0D8               	btfsc	status,0,c
  3638  00107C  D0C4               	goto	l20643
  3639                           
  3640                           ; BSR set to: 0
  3641                           ;servo.c: 258: if (currentPos[io] < midway) {
  3642  00107E  0E80               	movlw	low _currentPos
  3643  001080  25C0               	addwf	pollServos@io& (0+255),w,b
  3644  001082  6ED9               	movwf	fsr2l,c
  3645  001084  6ADA               	clrf	fsr2h,c
  3646  001086  0E01               	movlw	high _currentPos
  3647  001088  22DA               	addwfc	fsr2h,f,c
  3648  00108A  51BF               	movf	pollServos@midway& (0+255),w,b
  3649  00108C  5CDE               	subwf	postinc2,w,c
  3650  00108E  B0D8               	btfsc	status,0,c
  3651  001090  D002               	goto	l20619
  3652                           
  3653                           ; BSR set to: 0
  3654                           ;servo.c: 259: beforeMidway = 1;
  3655  001092  0E01               	movlw	1
  3656  001094  6FBE               	movwf	pollServos@beforeMidway& (0+255),b
  3657  001096                     l20619:
  3658                           
  3659                           ; BSR set to: 0
  3660                           ;servo.c: 260: };servo.c: 262: if (stepsPerPollSpeed[io]) {
  3661  001096  0E30               	movlw	low _stepsPerPollSpeed
  3662  001098  25C0               	addwf	pollServos@io& (0+255),w,b
  3663  00109A  6ED9               	movwf	fsr2l,c
  3664  00109C  6ADA               	clrf	fsr2h,c
  3665  00109E  0E01               	movlw	high _stepsPerPollSpeed
  3666  0010A0  22DA               	addwfc	fsr2h,f,c
  3667  0010A2  50DF               	movf	indf2,w,c
  3668  0010A4  B4D8               	btfsc	status,2,c
  3669  0010A6  D042               	goto	l20627
  3670                           
  3671                           ; BSR set to: 0
  3672                           ;servo.c: 263: if (currentPos[io] + stepsPerPollSpeed[io] < currentPos[io]) {
  3673  0010A8  0E80               	movlw	low _currentPos
  3674  0010AA  25C0               	addwf	pollServos@io& (0+255),w,b
  3675  0010AC  6ED9               	movwf	fsr2l,c
  3676  0010AE  6ADA               	clrf	fsr2h,c
  3677  0010B0  0E01               	movlw	high _currentPos
  3678  0010B2  22DA               	addwfc	fsr2h,f,c
  3679  0010B4  50DF               	movf	indf2,w,c
  3680  0010B6  6FB5               	movwf	??_pollServos& (0+255),b
  3681  0010B8  6BB6               	clrf	(??_pollServos+1)& (0+255),b
  3682  0010BA  0E80               	movlw	low _currentPos
  3683  0010BC  25C0               	addwf	pollServos@io& (0+255),w,b
  3684  0010BE  6ED9               	movwf	fsr2l,c
  3685  0010C0  6ADA               	clrf	fsr2h,c
  3686  0010C2  0E01               	movlw	high _currentPos
  3687  0010C4  22DA               	addwfc	fsr2h,f,c
  3688  0010C6  50DF               	movf	indf2,w,c
  3689  0010C8  6FB7               	movwf	(??_pollServos+2)& (0+255),b
  3690  0010CA  6BB8               	clrf	(??_pollServos+3)& (0+255),b
  3691  0010CC  0E30               	movlw	low _stepsPerPollSpeed
  3692  0010CE  25C0               	addwf	pollServos@io& (0+255),w,b
  3693  0010D0  6ED9               	movwf	fsr2l,c
  3694  0010D2  6ADA               	clrf	fsr2h,c
  3695  0010D4  0E01               	movlw	high _stepsPerPollSpeed
  3696  0010D6  22DA               	addwfc	fsr2h,f,c
  3697  0010D8  50DF               	movf	indf2,w,c
  3698  0010DA  6FB9               	movwf	(??_pollServos+4)& (0+255),b
  3699  0010DC  51B9               	movf	(??_pollServos+4)& (0+255),w,b
  3700  0010DE  27B7               	addwf	(??_pollServos+2)& (0+255),f,b
  3701  0010E0  0E00               	movlw	0
  3702  0010E2  23B8               	addwfc	(??_pollServos+3)& (0+255),f,b
  3703  0010E4  51B5               	movf	??_pollServos& (0+255),w,b
  3704  0010E6  5DB7               	subwf	(??_pollServos+2)& (0+255),w,b
  3705  0010E8  51B8               	movf	(??_pollServos+3)& (0+255),w,b
  3706  0010EA  0A80               	xorlw	128
  3707  0010EC  6FBA               	movwf	(??_pollServos+5)& (0+255),b
  3708  0010EE  51B6               	movf	(??_pollServos+1)& (0+255),w,b
  3709  0010F0  0A80               	xorlw	128
  3710  0010F2  59BA               	subwfb	(??_pollServos+5)& (0+255),w,b
  3711  0010F4  B0D8               	btfsc	status,0,c
  3712  0010F6  D009               	goto	l20625
  3713                           
  3714                           ; BSR set to: 0
  3715                           ;servo.c: 265: currentPos[io] =255;
  3716  0010F8  0E80               	movlw	low _currentPos
  3717  0010FA  25C0               	addwf	pollServos@io& (0+255),w,b
  3718  0010FC  6ED9               	movwf	fsr2l,c
  3719  0010FE  6ADA               	clrf	fsr2h,c
  3720  001100  0E01               	movlw	high _currentPos
  3721  001102  22DA               	addwfc	fsr2h,f,c
  3722  001104  0EFF               	movlw	255
  3723  001106  6EDF               	movwf	indf2,c
  3724                           
  3725                           ;servo.c: 266: } else {
  3726  001108  D036               	goto	l20633
  3727  00110A                     l20625:
  3728                           
  3729                           ; BSR set to: 0
  3730                           ;servo.c: 267: currentPos[io] += stepsPerPollSpeed[io];
  3731  00110A  0E30               	movlw	low _stepsPerPollSpeed
  3732  00110C  25C0               	addwf	pollServos@io& (0+255),w,b
  3733  00110E  6ED9               	movwf	fsr2l,c
  3734  001110  6ADA               	clrf	fsr2h,c
  3735  001112  0E01               	movlw	high _stepsPerPollSpeed
  3736  001114  22DA               	addwfc	fsr2h,f,c
  3737  001116  50DF               	movf	indf2,w,c
  3738  001118  6FB5               	movwf	??_pollServos& (0+255),b
  3739  00111A  0E80               	movlw	low _currentPos
  3740  00111C  25C0               	addwf	pollServos@io& (0+255),w,b
  3741  00111E  6ED9               	movwf	fsr2l,c
  3742  001120  6ADA               	clrf	fsr2h,c
  3743  001122  0E01               	movlw	high _currentPos
  3744  001124  22DA               	addwfc	fsr2h,f,c
  3745  001126  51B5               	movf	??_pollServos& (0+255),w,b
  3746  001128  26DF               	addwf	indf2,f,c
  3747  00112A  D025               	goto	l20633
  3748  00112C                     l20627:
  3749                           
  3750                           ; BSR set to: 0
  3751                           ;servo.c: 270: pollCount[io]--;
  3752  00112C  0E20               	movlw	low _pollCount
  3753  00112E  25C0               	addwf	pollServos@io& (0+255),w,b
  3754  001130  6ED9               	movwf	fsr2l,c
  3755  001132  6ADA               	clrf	fsr2h,c
  3756  001134  0E01               	movlw	high _pollCount
  3757  001136  22DA               	addwfc	fsr2h,f,c
  3758  001138  06DF               	decf	indf2,f,c
  3759                           
  3760                           ;servo.c: 271: if (pollCount[io] == 0) {
  3761  00113A  0E20               	movlw	low _pollCount
  3762  00113C  25C0               	addwf	pollServos@io& (0+255),w,b
  3763  00113E  6ED9               	movwf	fsr2l,c
  3764  001140  6ADA               	clrf	fsr2h,c
  3765  001142  0E01               	movlw	high _pollCount
  3766  001144  22DA               	addwfc	fsr2h,f,c
  3767  001146  50DF               	movf	indf2,w,c
  3768  001148  A4D8               	btfss	status,2,c
  3769  00114A  D015               	goto	l20633
  3770                           
  3771                           ; BSR set to: 0
  3772                           ;servo.c: 272: currentPos[io]++;
  3773  00114C  0E80               	movlw	low _currentPos
  3774  00114E  25C0               	addwf	pollServos@io& (0+255),w,b
  3775  001150  6ED9               	movwf	fsr2l,c
  3776  001152  6ADA               	clrf	fsr2h,c
  3777  001154  0E01               	movlw	high _currentPos
  3778  001156  22DA               	addwfc	fsr2h,f,c
  3779  001158  2ADF               	incf	indf2,f,c
  3780                           
  3781                           ; BSR set to: 0
  3782                           ;servo.c: 273: pollCount[io] = pollsPerStepSpeed[io];
  3783  00115A  0E74               	movlw	low _pollsPerStepSpeed
  3784  00115C  25C0               	addwf	pollServos@io& (0+255),w,b
  3785  00115E  6ED9               	movwf	fsr2l,c
  3786  001160  6ADA               	clrf	fsr2h,c
  3787  001162  0E02               	movlw	high _pollsPerStepSpeed
  3788  001164  22DA               	addwfc	fsr2h,f,c
  3789  001166  0E20               	movlw	low _pollCount
  3790  001168  25C0               	addwf	pollServos@io& (0+255),w,b
  3791  00116A  6EE1               	movwf	fsr1l,c
  3792  00116C  6AE2               	clrf	fsr1h,c
  3793  00116E  0E01               	movlw	high _pollCount
  3794  001170  22E2               	addwfc	fsr1h,f,c
  3795  001172  CFDF FFE7          	movff	indf2,indf1
  3796  001176                     l20633:
  3797                           
  3798                           ; BSR set to: 0
  3799                           ;servo.c: 274: };servo.c: 275: };servo.c: 277: if (currentPos[io] > targetPos[io]) {
  3800  001176  0E80               	movlw	low _currentPos
  3801  001178  25C0               	addwf	pollServos@io& (0+255),w,b
  3802  00117A  6ED9               	movwf	fsr2l,c
  3803  00117C  6ADA               	clrf	fsr2h,c
  3804  00117E  0E01               	movlw	high _currentPos
  3805  001180  22DA               	addwfc	fsr2h,f,c
  3806  001182  0E70               	movlw	low _targetPos
  3807  001184  25C0               	addwf	pollServos@io& (0+255),w,b
  3808  001186  6EE1               	movwf	fsr1l,c
  3809  001188  6AE2               	clrf	fsr1h,c
  3810  00118A  0E01               	movlw	high _targetPos
  3811  00118C  22E2               	addwfc	fsr1h,f,c
  3812  00118E  50DE               	movf	postinc2,w,c
  3813  001190  5CE6               	subwf	postinc1,w,c
  3814  001192  B0D8               	btfsc	status,0,c
  3815  001194  D00E               	goto	l20637
  3816                           
  3817                           ; BSR set to: 0
  3818                           ;servo.c: 278: currentPos[io] = targetPos[io];
  3819  001196  0E70               	movlw	low _targetPos
  3820  001198  25C0               	addwf	pollServos@io& (0+255),w,b
  3821  00119A  6ED9               	movwf	fsr2l,c
  3822  00119C  6ADA               	clrf	fsr2h,c
  3823  00119E  0E01               	movlw	high _targetPos
  3824  0011A0  22DA               	addwfc	fsr2h,f,c
  3825  0011A2  0E80               	movlw	low _currentPos
  3826  0011A4  25C0               	addwf	pollServos@io& (0+255),w,b
  3827  0011A6  6EE1               	movwf	fsr1l,c
  3828  0011A8  6AE2               	clrf	fsr1h,c
  3829  0011AA  0E01               	movlw	high _currentPos
  3830  0011AC  22E2               	addwfc	fsr1h,f,c
  3831  0011AE  CFDF FFE7          	movff	indf2,indf1
  3832  0011B2                     l20637:
  3833                           
  3834                           ; BSR set to: 0
  3835                           ;servo.c: 279: };servo.c: 280: if ((currentPos[io] >= midway) && beforeMidway) {
  3836  0011B2  0E80               	movlw	low _currentPos
  3837  0011B4  25C0               	addwf	pollServos@io& (0+255),w,b
  3838  0011B6  6ED9               	movwf	fsr2l,c
  3839  0011B8  6ADA               	clrf	fsr2h,c
  3840  0011BA  0E01               	movlw	high _currentPos
  3841  0011BC  22DA               	addwfc	fsr2h,f,c
  3842  0011BE  51BF               	movf	pollServos@midway& (0+255),w,b
  3843  0011C0  5CDE               	subwf	postinc2,w,c
  3844  0011C2  A0D8               	btfss	status,0,c
  3845  0011C4  D0F0               	goto	l20673
  3846                           
  3847                           ; BSR set to: 0
  3848  0011C6  51BE               	movf	pollServos@beforeMidway& (0+255),w,b
  3849  0011C8  B4D8               	btfsc	status,2,c
  3850  0011CA  D0ED               	goto	l20673
  3851                           
  3852                           ; BSR set to: 0
  3853                           ;servo.c: 284: sendProducedEvent(((8U + 4U*(io))+1U), (unsigned char)( ! (NV->io[io].fla
      +                          gs & 0x40U)));
  3854  0011CC  51C0               	movf	pollServos@io& (0+255),w,b
  3855  0011CE  0D07               	mullw	7
  3856  0011D0  C0EC  F0B5         	movff	_NV,??_pollServos
  3857  0011D4  C0ED  F0B6         	movff	_NV+1,??_pollServos+1
  3858  0011D8  50F3               	movf	243,w,c
  3859  0011DA  27B5               	addwf	??_pollServos& (0+255),f,b
  3860  0011DC  50F4               	movf	244,w,c
  3861  0011DE  23B6               	addwfc	(??_pollServos+1)& (0+255),f,b
  3862  0011E0  0E11               	movlw	17
  3863  0011E2  25B5               	addwf	??_pollServos& (0+255),w,b
  3864  0011E4  6ED9               	movwf	fsr2l,c
  3865  0011E6  0E00               	movlw	0
  3866  0011E8  21B6               	addwfc	(??_pollServos+1)& (0+255),w,b
  3867  0011EA  6EDA               	movwf	fsr2h,c
  3868  0011EC  BCDF               	btfsc	indf2,6,c
  3869  0011EE  D002               	goto	u25820
  3870  0011F0  0E01               	movlw	1
  3871  0011F2  D001               	goto	u25830
  3872  0011F4                     u25820:
  3873  0011F4  0E00               	movlw	0
  3874  0011F6                     u25830:
  3875  0011F6  6FAE               	movwf	sendProducedEvent@on& (0+255),b
  3876  0011F8  51C0               	movf	pollServos@io& (0+255),w,b
  3877  0011FA  0D04               	mullw	4
  3878  0011FC  50F3               	movf	243,w,c
  3879  0011FE  0F09               	addlw	9
  3880  001200  EC54  F03C         	call	_sendProducedEvent
  3881  001204  D0D0               	goto	l20673
  3882  001206                     l20643:
  3883                           
  3884                           ; BSR set to: 0
  3885  001206  0E80               	movlw	low _currentPos
  3886  001208  25C0               	addwf	pollServos@io& (0+255),w,b
  3887  00120A  6ED9               	movwf	fsr2l,c
  3888  00120C  6ADA               	clrf	fsr2h,c
  3889  00120E  0E01               	movlw	high _currentPos
  3890  001210  22DA               	addwfc	fsr2h,f,c
  3891  001212  0E70               	movlw	low _targetPos
  3892  001214  25C0               	addwf	pollServos@io& (0+255),w,b
  3893  001216  6EE1               	movwf	fsr1l,c
  3894  001218  6AE2               	clrf	fsr1h,c
  3895  00121A  0E01               	movlw	high _targetPos
  3896  00121C  22E2               	addwfc	fsr1h,f,c
  3897  00121E  50DE               	movf	postinc2,w,c
  3898  001220  5CE6               	subwf	postinc1,w,c
  3899  001222  B0D8               	btfsc	status,0,c
  3900  001224  D0C0               	goto	l20673
  3901                           
  3902                           ; BSR set to: 0
  3903                           ;servo.c: 287: if (currentPos[io] > midway) {
  3904  001226  0E80               	movlw	low _currentPos
  3905  001228  25C0               	addwf	pollServos@io& (0+255),w,b
  3906  00122A  6ED9               	movwf	fsr2l,c
  3907  00122C  6ADA               	clrf	fsr2h,c
  3908  00122E  0E01               	movlw	high _currentPos
  3909  001230  22DA               	addwfc	fsr2h,f,c
  3910  001232  50DE               	movf	postinc2,w,c
  3911  001234  5DBF               	subwf	pollServos@midway& (0+255),w,b
  3912  001236  B0D8               	btfsc	status,0,c
  3913  001238  D002               	goto	l20649
  3914                           
  3915                           ; BSR set to: 0
  3916                           ;servo.c: 288: beforeMidway = 1;
  3917  00123A  0E01               	movlw	1
  3918  00123C  6FBE               	movwf	pollServos@beforeMidway& (0+255),b
  3919  00123E                     l20649:
  3920                           
  3921                           ; BSR set to: 0
  3922                           ;servo.c: 289: };servo.c: 291: if (stepsPerPollSpeed[io]) {
  3923  00123E  0E30               	movlw	low _stepsPerPollSpeed
  3924  001240  25C0               	addwf	pollServos@io& (0+255),w,b
  3925  001242  6ED9               	movwf	fsr2l,c
  3926  001244  6ADA               	clrf	fsr2h,c
  3927  001246  0E01               	movlw	high _stepsPerPollSpeed
  3928  001248  22DA               	addwfc	fsr2h,f,c
  3929  00124A  50DF               	movf	indf2,w,c
  3930  00124C  B4D8               	btfsc	status,2,c
  3931  00124E  D042               	goto	l20657
  3932                           
  3933                           ; BSR set to: 0
  3934                           ;servo.c: 292: if (currentPos[io] - stepsPerPollSpeed[io] > currentPos[io]) {
  3935  001250  0E80               	movlw	low _currentPos
  3936  001252  25C0               	addwf	pollServos@io& (0+255),w,b
  3937  001254  6ED9               	movwf	fsr2l,c
  3938  001256  6ADA               	clrf	fsr2h,c
  3939  001258  0E01               	movlw	high _currentPos
  3940  00125A  22DA               	addwfc	fsr2h,f,c
  3941  00125C  50DF               	movf	indf2,w,c
  3942  00125E  6FB5               	movwf	??_pollServos& (0+255),b
  3943  001260  6BB6               	clrf	(??_pollServos+1)& (0+255),b
  3944  001262  0E30               	movlw	low _stepsPerPollSpeed
  3945  001264  25C0               	addwf	pollServos@io& (0+255),w,b
  3946  001266  6ED9               	movwf	fsr2l,c
  3947  001268  6ADA               	clrf	fsr2h,c
  3948  00126A  0E01               	movlw	high _stepsPerPollSpeed
  3949  00126C  22DA               	addwfc	fsr2h,f,c
  3950  00126E  50DF               	movf	indf2,w,c
  3951  001270  6FB7               	movwf	(??_pollServos+2)& (0+255),b
  3952  001272  51B7               	movf	(??_pollServos+2)& (0+255),w,b
  3953  001274  5FB5               	subwf	??_pollServos& (0+255),f,b
  3954  001276  0E00               	movlw	0
  3955  001278  5BB6               	subwfb	(??_pollServos+1)& (0+255),f,b
  3956  00127A  0E80               	movlw	low _currentPos
  3957  00127C  25C0               	addwf	pollServos@io& (0+255),w,b
  3958  00127E  6ED9               	movwf	fsr2l,c
  3959  001280  6ADA               	clrf	fsr2h,c
  3960  001282  0E01               	movlw	high _currentPos
  3961  001284  22DA               	addwfc	fsr2h,f,c
  3962  001286  50DF               	movf	indf2,w,c
  3963  001288  6FB8               	movwf	(??_pollServos+3)& (0+255),b
  3964  00128A  6BB9               	clrf	(??_pollServos+4)& (0+255),b
  3965  00128C  51B5               	movf	??_pollServos& (0+255),w,b
  3966  00128E  5DB8               	subwf	(??_pollServos+3)& (0+255),w,b
  3967  001290  51B9               	movf	(??_pollServos+4)& (0+255),w,b
  3968  001292  0A80               	xorlw	128
  3969  001294  6FBA               	movwf	(??_pollServos+5)& (0+255),b
  3970  001296  51B6               	movf	(??_pollServos+1)& (0+255),w,b
  3971  001298  0A80               	xorlw	128
  3972  00129A  59BA               	subwfb	(??_pollServos+5)& (0+255),w,b
  3973  00129C  B0D8               	btfsc	status,0,c
  3974  00129E  D009               	goto	l20655
  3975                           
  3976                           ; BSR set to: 0
  3977                           ;servo.c: 294: currentPos[io] = 0;
  3978  0012A0  0E80               	movlw	low _currentPos
  3979  0012A2  25C0               	addwf	pollServos@io& (0+255),w,b
  3980  0012A4  6ED9               	movwf	fsr2l,c
  3981  0012A6  6ADA               	clrf	fsr2h,c
  3982  0012A8  0E01               	movlw	high _currentPos
  3983  0012AA  22DA               	addwfc	fsr2h,f,c
  3984  0012AC  0E00               	movlw	0
  3985  0012AE  6EDF               	movwf	indf2,c
  3986                           
  3987                           ;servo.c: 295: } else {
  3988  0012B0  D036               	goto	l20663
  3989  0012B2                     l20655:
  3990                           
  3991                           ; BSR set to: 0
  3992                           ;servo.c: 296: currentPos[io] -= stepsPerPollSpeed[io];
  3993  0012B2  0E30               	movlw	low _stepsPerPollSpeed
  3994  0012B4  25C0               	addwf	pollServos@io& (0+255),w,b
  3995  0012B6  6ED9               	movwf	fsr2l,c
  3996  0012B8  6ADA               	clrf	fsr2h,c
  3997  0012BA  0E01               	movlw	high _stepsPerPollSpeed
  3998  0012BC  22DA               	addwfc	fsr2h,f,c
  3999  0012BE  50DF               	movf	indf2,w,c
  4000  0012C0  6FB5               	movwf	??_pollServos& (0+255),b
  4001  0012C2  0E80               	movlw	low _currentPos
  4002  0012C4  25C0               	addwf	pollServos@io& (0+255),w,b
  4003  0012C6  6ED9               	movwf	fsr2l,c
  4004  0012C8  6ADA               	clrf	fsr2h,c
  4005  0012CA  0E01               	movlw	high _currentPos
  4006  0012CC  22DA               	addwfc	fsr2h,f,c
  4007  0012CE  51B5               	movf	??_pollServos& (0+255),w,b
  4008  0012D0  5EDF               	subwf	indf2,f,c
  4009  0012D2  D025               	goto	l20663
  4010  0012D4                     l20657:
  4011                           
  4012                           ; BSR set to: 0
  4013                           ;servo.c: 299: pollCount[io]--;
  4014  0012D4  0E20               	movlw	low _pollCount
  4015  0012D6  25C0               	addwf	pollServos@io& (0+255),w,b
  4016  0012D8  6ED9               	movwf	fsr2l,c
  4017  0012DA  6ADA               	clrf	fsr2h,c
  4018  0012DC  0E01               	movlw	high _pollCount
  4019  0012DE  22DA               	addwfc	fsr2h,f,c
  4020  0012E0  06DF               	decf	indf2,f,c
  4021                           
  4022                           ;servo.c: 300: if (pollCount[io] == 0) {
  4023  0012E2  0E20               	movlw	low _pollCount
  4024  0012E4  25C0               	addwf	pollServos@io& (0+255),w,b
  4025  0012E6  6ED9               	movwf	fsr2l,c
  4026  0012E8  6ADA               	clrf	fsr2h,c
  4027  0012EA  0E01               	movlw	high _pollCount
  4028  0012EC  22DA               	addwfc	fsr2h,f,c
  4029  0012EE  50DF               	movf	indf2,w,c
  4030  0012F0  A4D8               	btfss	status,2,c
  4031  0012F2  D015               	goto	l20663
  4032                           
  4033                           ; BSR set to: 0
  4034                           ;servo.c: 301: currentPos[io]--;
  4035  0012F4  0E80               	movlw	low _currentPos
  4036  0012F6  25C0               	addwf	pollServos@io& (0+255),w,b
  4037  0012F8  6ED9               	movwf	fsr2l,c
  4038  0012FA  6ADA               	clrf	fsr2h,c
  4039  0012FC  0E01               	movlw	high _currentPos
  4040  0012FE  22DA               	addwfc	fsr2h,f,c
  4041  001300  06DF               	decf	indf2,f,c
  4042                           
  4043                           ; BSR set to: 0
  4044                           ;servo.c: 302: pollCount[io] = pollsPerStepSpeed[io];
  4045  001302  0E74               	movlw	low _pollsPerStepSpeed
  4046  001304  25C0               	addwf	pollServos@io& (0+255),w,b
  4047  001306  6ED9               	movwf	fsr2l,c
  4048  001308  6ADA               	clrf	fsr2h,c
  4049  00130A  0E02               	movlw	high _pollsPerStepSpeed
  4050  00130C  22DA               	addwfc	fsr2h,f,c
  4051  00130E  0E20               	movlw	low _pollCount
  4052  001310  25C0               	addwf	pollServos@io& (0+255),w,b
  4053  001312  6EE1               	movwf	fsr1l,c
  4054  001314  6AE2               	clrf	fsr1h,c
  4055  001316  0E01               	movlw	high _pollCount
  4056  001318  22E2               	addwfc	fsr1h,f,c
  4057  00131A  CFDF FFE7          	movff	indf2,indf1
  4058  00131E                     l20663:
  4059                           
  4060                           ; BSR set to: 0
  4061                           ;servo.c: 303: };servo.c: 304: };servo.c: 306: if (currentPos[io] < targetPos[io]) {
  4062  00131E  0E70               	movlw	low _targetPos
  4063  001320  25C0               	addwf	pollServos@io& (0+255),w,b
  4064  001322  6ED9               	movwf	fsr2l,c
  4065  001324  6ADA               	clrf	fsr2h,c
  4066  001326  0E01               	movlw	high _targetPos
  4067  001328  22DA               	addwfc	fsr2h,f,c
  4068  00132A  0E80               	movlw	low _currentPos
  4069  00132C  25C0               	addwf	pollServos@io& (0+255),w,b
  4070  00132E  6EE1               	movwf	fsr1l,c
  4071  001330  6AE2               	clrf	fsr1h,c
  4072  001332  0E01               	movlw	high _currentPos
  4073  001334  22E2               	addwfc	fsr1h,f,c
  4074  001336  50DE               	movf	postinc2,w,c
  4075  001338  5CE6               	subwf	postinc1,w,c
  4076  00133A  B0D8               	btfsc	status,0,c
  4077  00133C  D00E               	goto	l20667
  4078                           
  4079                           ; BSR set to: 0
  4080                           ;servo.c: 307: currentPos[io] = targetPos[io];
  4081  00133E  0E70               	movlw	low _targetPos
  4082  001340  25C0               	addwf	pollServos@io& (0+255),w,b
  4083  001342  6ED9               	movwf	fsr2l,c
  4084  001344  6ADA               	clrf	fsr2h,c
  4085  001346  0E01               	movlw	high _targetPos
  4086  001348  22DA               	addwfc	fsr2h,f,c
  4087  00134A  0E80               	movlw	low _currentPos
  4088  00134C  25C0               	addwf	pollServos@io& (0+255),w,b
  4089  00134E  6EE1               	movwf	fsr1l,c
  4090  001350  6AE2               	clrf	fsr1h,c
  4091  001352  0E01               	movlw	high _currentPos
  4092  001354  22E2               	addwfc	fsr1h,f,c
  4093  001356  CFDF FFE7          	movff	indf2,indf1
  4094  00135A                     l20667:
  4095                           
  4096                           ; BSR set to: 0
  4097                           ;servo.c: 308: };servo.c: 309: if ((currentPos[io] <= midway) && beforeMidway) {
  4098  00135A  0E80               	movlw	low _currentPos
  4099  00135C  25C0               	addwf	pollServos@io& (0+255),w,b
  4100  00135E  6ED9               	movwf	fsr2l,c
  4101  001360  6ADA               	clrf	fsr2h,c
  4102  001362  0E01               	movlw	high _currentPos
  4103  001364  22DA               	addwfc	fsr2h,f,c
  4104  001366  50DE               	movf	postinc2,w,c
  4105  001368  5DBF               	subwf	pollServos@midway& (0+255),w,b
  4106  00136A  A0D8               	btfss	status,0,c
  4107  00136C  D01C               	goto	l20673
  4108                           
  4109                           ; BSR set to: 0
  4110  00136E  51BE               	movf	pollServos@beforeMidway& (0+255),w,b
  4111  001370  B4D8               	btfsc	status,2,c
  4112  001372  D019               	goto	l20673
  4113                           
  4114                           ; BSR set to: 0
  4115                           ;servo.c: 311: sendProducedEvent(((8U + 4U*(io))+1U), NV->io[io].flags & 0x40U);
  4116  001374  51C0               	movf	pollServos@io& (0+255),w,b
  4117  001376  0D07               	mullw	7
  4118  001378  C0EC  F0B5         	movff	_NV,??_pollServos
  4119  00137C  C0ED  F0B6         	movff	_NV+1,??_pollServos+1
  4120  001380  50F3               	movf	243,w,c
  4121  001382  27B5               	addwf	??_pollServos& (0+255),f,b
  4122  001384  50F4               	movf	244,w,c
  4123  001386  23B6               	addwfc	(??_pollServos+1)& (0+255),f,b
  4124  001388  0E11               	movlw	17
  4125  00138A  25B5               	addwf	??_pollServos& (0+255),w,b
  4126  00138C  6ED9               	movwf	fsr2l,c
  4127  00138E  0E00               	movlw	0
  4128  001390  21B6               	addwfc	(??_pollServos+1)& (0+255),w,b
  4129  001392  6EDA               	movwf	fsr2h,c
  4130  001394  50DF               	movf	indf2,w,c
  4131  001396  0B40               	andlw	64
  4132  001398  6FAE               	movwf	sendProducedEvent@on& (0+255),b
  4133  00139A  51C0               	movf	pollServos@io& (0+255),w,b
  4134  00139C  0D04               	mullw	4
  4135  00139E  50F3               	movf	243,w,c
  4136  0013A0  0F09               	addlw	9
  4137  0013A2  EC54  F03C         	call	_sendProducedEvent
  4138  0013A6                     l20673:
  4139                           
  4140                           ;servo.c: 312: };servo.c: 313: };servo.c: 314: if (targetPos[io] == currentPos[io]) {
  4141  0013A6  0E80               	movlw	low _currentPos
  4142  0013A8  0100               	movlb	0	; () banked
  4143  0013AA  25C0               	addwf	pollServos@io& (0+255),w,b
  4144  0013AC  6ED9               	movwf	fsr2l,c
  4145  0013AE  6ADA               	clrf	fsr2h,c
  4146  0013B0  0E01               	movlw	high _currentPos
  4147  0013B2  22DA               	addwfc	fsr2h,f,c
  4148  0013B4  0E70               	movlw	low _targetPos
  4149  0013B6  25C0               	addwf	pollServos@io& (0+255),w,b
  4150  0013B8  6EE1               	movwf	fsr1l,c
  4151  0013BA  6AE2               	clrf	fsr1h,c
  4152  0013BC  0E01               	movlw	high _targetPos
  4153  0013BE  22E2               	addwfc	fsr1h,f,c
  4154  0013C0  50DE               	movf	postinc2,w,c
  4155  0013C2  18E6               	xorwf	postinc1,w,c
  4156  0013C4  A4D8               	btfss	status,2,c
  4157  0013C6  EF15  F00F         	goto	l20839
  4158                           
  4159                           ; BSR set to: 0
  4160                           ;servo.c: 315: servoState[io] = STOPPED;
  4161  0013CA  0E40               	movlw	low _servoState
  4162  0013CC  25C0               	addwf	pollServos@io& (0+255),w,b
  4163  0013CE  6ED9               	movwf	fsr2l,c
  4164  0013D0  6ADA               	clrf	fsr2h,c
  4165  0013D2  0E01               	movlw	high _servoState
  4166  0013D4  22DA               	addwfc	fsr2h,f,c
  4167  0013D6  0E01               	movlw	1
  4168  0013D8  6EDF               	movwf	indf2,c
  4169                           
  4170                           ; BSR set to: 0
  4171                           ;servo.c: 316: ticksWhenStopped[io].Val = tickGet();
  4172  0013DA  ECA3  F04B         	call	_tickGet	;wreg free
  4173  0013DE  51C0               	movf	pollServos@io& (0+255),w,b
  4174  0013E0  0D04               	mullw	4
  4175  0013E2  0E00               	movlw	low _ticksWhenStopped
  4176  0013E4  24F3               	addwf	243,w,c
  4177  0013E6  6ED9               	movwf	fsr2l,c
  4178  0013E8  0E02               	movlw	high _ticksWhenStopped
  4179  0013EA  20F4               	addwfc	prodh,w,c
  4180  0013EC  6EDA               	movwf	fsr2h,c
  4181  0013EE  C071  FFDE         	movff	?_tickGet,postinc2
  4182  0013F2  C072  FFDE         	movff	?_tickGet+1,postinc2
  4183  0013F6  C073  FFDE         	movff	?_tickGet+2,postinc2
  4184  0013FA  C074  FFDE         	movff	?_tickGet+3,postinc2
  4185                           
  4186                           ; BSR set to: 0
  4187                           ;servo.c: 318: if (currentPos[io] == NV->io[io].nv_io.nv_servo.servo_start_pos) {
  4188  0013FE  51C0               	movf	pollServos@io& (0+255),w,b
  4189  001400  0D07               	mullw	7
  4190  001402  C0EC  F0B5         	movff	_NV,??_pollServos
  4191  001406  C0ED  F0B6         	movff	_NV+1,??_pollServos+1
  4192  00140A  50F3               	movf	243,w,c
  4193  00140C  27B5               	addwf	??_pollServos& (0+255),f,b
  4194  00140E  50F4               	movf	244,w,c
  4195  001410  23B6               	addwfc	(??_pollServos+1)& (0+255),f,b
  4196  001412  0E12               	movlw	18
  4197  001414  25B5               	addwf	??_pollServos& (0+255),w,b
  4198  001416  6ED9               	movwf	fsr2l,c
  4199  001418  0E00               	movlw	0
  4200  00141A  21B6               	addwfc	(??_pollServos+1)& (0+255),w,b
  4201  00141C  6EDA               	movwf	fsr2h,c
  4202  00141E  0E80               	movlw	low _currentPos
  4203  001420  25C0               	addwf	pollServos@io& (0+255),w,b
  4204  001422  6EE1               	movwf	fsr1l,c
  4205  001424  6AE2               	clrf	fsr1h,c
  4206  001426  0E01               	movlw	high _currentPos
  4207  001428  22E2               	addwfc	fsr1h,f,c
  4208  00142A  50DE               	movf	postinc2,w,c
  4209  00142C  18E6               	xorwf	postinc1,w,c
  4210  00142E  A4D8               	btfss	status,2,c
  4211  001430  D01D               	goto	l20683
  4212                           
  4213                           ; BSR set to: 0
  4214                           ;servo.c: 319: sendProducedEvent(((8U + 4U*(io))+0U), (unsigned char)( ! (NV->io[io].fla
      +                          gs & 0x40U)));
  4215  001432  51C0               	movf	pollServos@io& (0+255),w,b
  4216  001434  0D07               	mullw	7
  4217  001436  C0EC  F0B5         	movff	_NV,??_pollServos
  4218  00143A  C0ED  F0B6         	movff	_NV+1,??_pollServos+1
  4219  00143E  50F3               	movf	243,w,c
  4220  001440  27B5               	addwf	??_pollServos& (0+255),f,b
  4221  001442  50F4               	movf	244,w,c
  4222  001444  23B6               	addwfc	(??_pollServos+1)& (0+255),f,b
  4223  001446  0E11               	movlw	17
  4224  001448  25B5               	addwf	??_pollServos& (0+255),w,b
  4225  00144A  6ED9               	movwf	fsr2l,c
  4226  00144C  0E00               	movlw	0
  4227  00144E  21B6               	addwfc	(??_pollServos+1)& (0+255),w,b
  4228  001450  6EDA               	movwf	fsr2h,c
  4229  001452  BCDF               	btfsc	indf2,6,c
  4230  001454  D002               	goto	u25940
  4231  001456  0E01               	movlw	1
  4232  001458  D001               	goto	u25950
  4233  00145A                     u25940:
  4234  00145A  0E00               	movlw	0
  4235  00145C                     u25950:
  4236  00145C  6FAE               	movwf	sendProducedEvent@on& (0+255),b
  4237  00145E  51C0               	movf	pollServos@io& (0+255),w,b
  4238  001460  0D04               	mullw	4
  4239  001462  50F3               	movf	243,w,c
  4240  001464  0F08               	addlw	8
  4241  001466  EC54  F03C         	call	_sendProducedEvent
  4242                           
  4243                           ;servo.c: 320: } else {
  4244  00146A  D01C               	goto	l20685
  4245  00146C                     l20683:
  4246                           
  4247                           ; BSR set to: 0
  4248                           ;servo.c: 321: sendProducedEvent(((8U + 4U*(io))+2U), (unsigned char)( ! (NV->io[io].fla
      +                          gs & 0x40U)));
  4249  00146C  51C0               	movf	pollServos@io& (0+255),w,b
  4250  00146E  0D07               	mullw	7
  4251  001470  C0EC  F0B5         	movff	_NV,??_pollServos
  4252  001474  C0ED  F0B6         	movff	_NV+1,??_pollServos+1
  4253  001478  50F3               	movf	243,w,c
  4254  00147A  27B5               	addwf	??_pollServos& (0+255),f,b
  4255  00147C  50F4               	movf	244,w,c
  4256  00147E  23B6               	addwfc	(??_pollServos+1)& (0+255),f,b
  4257  001480  0E11               	movlw	17
  4258  001482  25B5               	addwf	??_pollServos& (0+255),w,b
  4259  001484  6ED9               	movwf	fsr2l,c
  4260  001486  0E00               	movlw	0
  4261  001488  21B6               	addwfc	(??_pollServos+1)& (0+255),w,b
  4262  00148A  6EDA               	movwf	fsr2h,c
  4263  00148C  BCDF               	btfsc	indf2,6,c
  4264  00148E  D002               	goto	u25960
  4265  001490  0E01               	movlw	1
  4266  001492  D001               	goto	u25970
  4267  001494                     u25960:
  4268  001494  0E00               	movlw	0
  4269  001496                     u25970:
  4270  001496  6FAE               	movwf	sendProducedEvent@on& (0+255),b
  4271  001498  51C0               	movf	pollServos@io& (0+255),w,b
  4272  00149A  0D04               	mullw	4
  4273  00149C  50F3               	movf	243,w,c
  4274  00149E  0F0A               	addlw	10
  4275  0014A0  EC54  F03C         	call	_sendProducedEvent
  4276  0014A4                     l20685:
  4277                           
  4278                           ;servo.c: 322: };servo.c: 323: ee_write(((WORD)(((BYTE*)(0x3FF-40)))-17)+io, currentPos[
      +                          io]);
  4279  0014A4  0EC6               	movlw	198
  4280  0014A6  0100               	movlb	0	; () banked
  4281  0014A8  25C0               	addwf	pollServos@io& (0+255),w,b
  4282  0014AA  6F73               	movwf	ee_write@addr& (0+255),b
  4283  0014AC  6B74               	clrf	(ee_write@addr+1)& (0+255),b
  4284  0014AE  0E03               	movlw	3
  4285  0014B0  2374               	addwfc	(ee_write@addr+1)& (0+255),f,b
  4286  0014B2  0E80               	movlw	low _currentPos
  4287  0014B4  25C0               	addwf	pollServos@io& (0+255),w,b
  4288  0014B6  6ED9               	movwf	fsr2l,c
  4289  0014B8  6ADA               	clrf	fsr2h,c
  4290  0014BA  0E01               	movlw	high _currentPos
  4291  0014BC  22DA               	addwfc	fsr2h,f,c
  4292  0014BE  50DF               	movf	indf2,w,c
  4293  0014C0  6F75               	movwf	ee_write@data& (0+255),b
  4294  0014C2  EC1D  F04D         	call	_ee_write	;wreg free
  4295  0014C6  EF15  F00F         	goto	l20839
  4296  0014CA                     l20689:
  4297                           
  4298                           ; BSR set to: 0
  4299  0014CA  0E40               	movlw	low _servoState
  4300  0014CC  25C0               	addwf	pollServos@io& (0+255),w,b
  4301  0014CE  6ED9               	movwf	fsr2l,c
  4302  0014D0  6ADA               	clrf	fsr2h,c
  4303  0014D2  0E01               	movlw	high _servoState
  4304  0014D4  22DA               	addwfc	fsr2h,f,c
  4305  0014D6  50DF               	movf	indf2,w,c
  4306                           
  4307                           ; Switch size 1, requested type "simple"
  4308                           ; Number of cases is 2, Range of values is 2 to 3
  4309                           ; switch strategies available:
  4310                           ; Name         Instructions Cycles
  4311                           ; simple_byte            7     4 (average)
  4312                           ;	Chosen strategy is simple_byte
  4313  0014D8  0A02               	xorlw	2	; case 2
  4314  0014DA  B4D8               	btfsc	status,2,c
  4315  0014DC  D5C0               	goto	l20613
  4316  0014DE  0A01               	xorlw	1	; case 3
  4317  0014E0  B4D8               	btfsc	status,2,c
  4318  0014E2  D567               	goto	l20605
  4319  0014E4  EF15  F00F         	goto	l20839
  4320  0014E8                     l20691:
  4321                           
  4322                           ; BSR set to: 0
  4323                           ;servo.c: 331: initBounce(io);
  4324  0014E8  51C0               	movf	pollServos@io& (0+255),w,b
  4325  0014EA  EC2E  F051         	call	_initBounce
  4326                           
  4327                           ; BSR set to: 0
  4328                           ;servo.c: 332: servoState[io] = MOVING;
  4329  0014EE  0E40               	movlw	low _servoState
  4330  0014F0  25C0               	addwf	pollServos@io& (0+255),w,b
  4331  0014F2  6ED9               	movwf	fsr2l,c
  4332  0014F4  6ADA               	clrf	fsr2h,c
  4333  0014F6  0E01               	movlw	high _servoState
  4334  0014F8  22DA               	addwfc	fsr2h,f,c
  4335  0014FA  0E02               	movlw	2
  4336  0014FC  6EDF               	movwf	indf2,c
  4337                           
  4338                           ; BSR set to: 0
  4339                           ;servo.c: 333: loopCount[io] = 0;
  4340  0014FE  0E64               	movlw	low _loopCount
  4341  001500  25C0               	addwf	pollServos@io& (0+255),w,b
  4342  001502  6ED9               	movwf	fsr2l,c
  4343  001504  6ADA               	clrf	fsr2h,c
  4344  001506  0E02               	movlw	high _loopCount
  4345  001508  22DA               	addwfc	fsr2h,f,c
  4346  00150A  0E00               	movlw	0
  4347  00150C  6EDF               	movwf	indf2,c
  4348  00150E                     l20697:
  4349                           
  4350                           ; BSR set to: 0
  4351                           ;servo.c: 337: loopCount[io]++;
  4352  00150E  0E64               	movlw	low _loopCount
  4353  001510  25C0               	addwf	pollServos@io& (0+255),w,b
  4354  001512  6ED9               	movwf	fsr2l,c
  4355  001514  6ADA               	clrf	fsr2h,c
  4356  001516  0E02               	movlw	high _loopCount
  4357  001518  22DA               	addwfc	fsr2h,f,c
  4358  00151A  2ADF               	incf	indf2,f,c
  4359                           
  4360                           ; BSR set to: 0
  4361                           ;servo.c: 338: if (loopCount[io] >= 255U) {
  4362  00151C  0E64               	movlw	low _loopCount
  4363  00151E  25C0               	addwf	pollServos@io& (0+255),w,b
  4364  001520  6ED9               	movwf	fsr2l,c
  4365  001522  6ADA               	clrf	fsr2h,c
  4366  001524  0E02               	movlw	high _loopCount
  4367  001526  22DA               	addwfc	fsr2h,f,c
  4368  001528  28DE               	incf	postinc2,w,c
  4369  00152A  A4D8               	btfss	status,2,c
  4370  00152C  D045               	goto	l20711
  4371                           
  4372                           ; BSR set to: 0
  4373                           ;servo.c: 339: servoState[io] = STOPPED;
  4374  00152E  0E40               	movlw	low _servoState
  4375  001530  25C0               	addwf	pollServos@io& (0+255),w,b
  4376  001532  6ED9               	movwf	fsr2l,c
  4377  001534  6ADA               	clrf	fsr2h,c
  4378  001536  0E01               	movlw	high _servoState
  4379  001538  22DA               	addwfc	fsr2h,f,c
  4380  00153A  0E01               	movlw	1
  4381  00153C  6EDF               	movwf	indf2,c
  4382                           
  4383                           ; BSR set to: 0
  4384                           ;servo.c: 340: ticksWhenStopped[io].Val = tickGet();
  4385  00153E  ECA3  F04B         	call	_tickGet	;wreg free
  4386  001542  51C0               	movf	pollServos@io& (0+255),w,b
  4387  001544  0D04               	mullw	4
  4388  001546  0E00               	movlw	low _ticksWhenStopped
  4389  001548  24F3               	addwf	243,w,c
  4390  00154A  6ED9               	movwf	fsr2l,c
  4391  00154C  0E02               	movlw	high _ticksWhenStopped
  4392  00154E  20F4               	addwfc	prodh,w,c
  4393  001550  6EDA               	movwf	fsr2h,c
  4394  001552  C071  FFDE         	movff	?_tickGet,postinc2
  4395  001556  C072  FFDE         	movff	?_tickGet+1,postinc2
  4396  00155A  C073  FFDE         	movff	?_tickGet+2,postinc2
  4397  00155E  C074  FFDE         	movff	?_tickGet+3,postinc2
  4398                           
  4399                           ; BSR set to: 0
  4400                           ;servo.c: 341: currentPos[io] = targetPos[io];
  4401  001562  0E70               	movlw	low _targetPos
  4402  001564  25C0               	addwf	pollServos@io& (0+255),w,b
  4403  001566  6ED9               	movwf	fsr2l,c
  4404  001568  6ADA               	clrf	fsr2h,c
  4405  00156A  0E01               	movlw	high _targetPos
  4406  00156C  22DA               	addwfc	fsr2h,f,c
  4407  00156E  0E80               	movlw	low _currentPos
  4408  001570  25C0               	addwf	pollServos@io& (0+255),w,b
  4409  001572  6EE1               	movwf	fsr1l,c
  4410  001574  6AE2               	clrf	fsr1h,c
  4411  001576  0E01               	movlw	high _currentPos
  4412  001578  22E2               	addwfc	fsr1h,f,c
  4413  00157A  CFDF FFE7          	movff	indf2,indf1
  4414                           
  4415                           ; BSR set to: 0
  4416                           ;servo.c: 342: sendProducedEvent(((8U + 4U*(io))+0U), (unsigned char)( ! (NV->io[io].fla
      +                          gs & 0x40U)));
  4417  00157E  51C0               	movf	pollServos@io& (0+255),w,b
  4418  001580  0D07               	mullw	7
  4419  001582  C0EC  F0B5         	movff	_NV,??_pollServos
  4420  001586  C0ED  F0B6         	movff	_NV+1,??_pollServos+1
  4421  00158A  50F3               	movf	243,w,c
  4422  00158C  27B5               	addwf	??_pollServos& (0+255),f,b
  4423  00158E  50F4               	movf	244,w,c
  4424  001590  23B6               	addwfc	(??_pollServos+1)& (0+255),f,b
  4425  001592  0E11               	movlw	17
  4426  001594  25B5               	addwf	??_pollServos& (0+255),w,b
  4427  001596  6ED9               	movwf	fsr2l,c
  4428  001598  0E00               	movlw	0
  4429  00159A  21B6               	addwfc	(??_pollServos+1)& (0+255),w,b
  4430  00159C  6EDA               	movwf	fsr2h,c
  4431  00159E  BCDF               	btfsc	indf2,6,c
  4432  0015A0  D002               	goto	u25990
  4433  0015A2  0E01               	movlw	1
  4434  0015A4  D001               	goto	u26000
  4435  0015A6                     u25990:
  4436  0015A6  0E00               	movlw	0
  4437  0015A8                     u26000:
  4438  0015A8  6FAE               	movwf	sendProducedEvent@on& (0+255),b
  4439  0015AA  51C0               	movf	pollServos@io& (0+255),w,b
  4440  0015AC  0D04               	mullw	4
  4441  0015AE  50F3               	movf	243,w,c
  4442  0015B0  0F08               	addlw	8
  4443  0015B2  EC54  F03C         	call	_sendProducedEvent
  4444  0015B6  D776               	goto	l20685
  4445  0015B8                     l20711:
  4446                           
  4447                           ; BSR set to: 0
  4448                           ;servo.c: 345: };servo.c: 347: target = NV->io[io].nv_io.nv_bounce.bounce_upper_pos;
  4449  0015B8  51C0               	movf	pollServos@io& (0+255),w,b
  4450  0015BA  0D07               	mullw	7
  4451  0015BC  C0EC  F0B5         	movff	_NV,??_pollServos
  4452  0015C0  C0ED  F0B6         	movff	_NV+1,??_pollServos+1
  4453  0015C4  50F3               	movf	243,w,c
  4454  0015C6  27B5               	addwf	??_pollServos& (0+255),f,b
  4455  0015C8  50F4               	movf	244,w,c
  4456  0015CA  23B6               	addwfc	(??_pollServos+1)& (0+255),f,b
  4457  0015CC  0E12               	movlw	18
  4458  0015CE  25B5               	addwf	??_pollServos& (0+255),w,b
  4459  0015D0  6ED9               	movwf	fsr2l,c
  4460  0015D2  0E00               	movlw	0
  4461  0015D4  21B6               	addwfc	(??_pollServos+1)& (0+255),w,b
  4462  0015D6  6EDA               	movwf	fsr2h,c
  4463  0015D8  50DF               	movf	indf2,w,c
  4464  0015DA  6FBD               	movwf	pollServos@target& (0+255),b
  4465                           
  4466                           ; BSR set to: 0
  4467                           ;servo.c: 351: if (targetPos[io] == target) {
  4468  0015DC  0E70               	movlw	low _targetPos
  4469  0015DE  25C0               	addwf	pollServos@io& (0+255),w,b
  4470  0015E0  6ED9               	movwf	fsr2l,c
  4471  0015E2  6ADA               	clrf	fsr2h,c
  4472  0015E4  0E01               	movlw	high _targetPos
  4473  0015E6  22DA               	addwfc	fsr2h,f,c
  4474  0015E8  51BD               	movf	pollServos@target& (0+255),w,b
  4475  0015EA  18DE               	xorwf	postinc2,w,c
  4476  0015EC  A4D8               	btfss	status,2,c
  4477  0015EE  D04C               	goto	l20727
  4478                           
  4479                           ; BSR set to: 0
  4480                           ;servo.c: 352: if (bounceUp(io)) {
  4481  0015F0  51C0               	movf	pollServos@io& (0+255),w,b
  4482  0015F2  EC60  F025         	call	_bounceUp
  4483  0015F6  0900               	iorlw	0
  4484  0015F8  B4D8               	btfsc	status,2,c
  4485  0015FA  EF15  F00F         	goto	l20839
  4486                           
  4487                           ; BSR set to: 0
  4488                           ;servo.c: 353: servoState[io] = STOPPED;
  4489  0015FE  0E40               	movlw	low _servoState
  4490  001600  25C0               	addwf	pollServos@io& (0+255),w,b
  4491  001602  6ED9               	movwf	fsr2l,c
  4492  001604  6ADA               	clrf	fsr2h,c
  4493  001606  0E01               	movlw	high _servoState
  4494  001608  22DA               	addwfc	fsr2h,f,c
  4495  00160A  0E01               	movlw	1
  4496  00160C  6EDF               	movwf	indf2,c
  4497                           
  4498                           ; BSR set to: 0
  4499                           ;servo.c: 354: ticksWhenStopped[io].Val = tickGet();
  4500  00160E  ECA3  F04B         	call	_tickGet	;wreg free
  4501  001612  51C0               	movf	pollServos@io& (0+255),w,b
  4502  001614  0D04               	mullw	4
  4503  001616  0E00               	movlw	low _ticksWhenStopped
  4504  001618  24F3               	addwf	243,w,c
  4505  00161A  6ED9               	movwf	fsr2l,c
  4506  00161C  0E02               	movlw	high _ticksWhenStopped
  4507  00161E  20F4               	addwfc	prodh,w,c
  4508  001620  6EDA               	movwf	fsr2h,c
  4509  001622  C071  FFDE         	movff	?_tickGet,postinc2
  4510  001626  C072  FFDE         	movff	?_tickGet+1,postinc2
  4511  00162A  C073  FFDE         	movff	?_tickGet+2,postinc2
  4512  00162E  C074  FFDE         	movff	?_tickGet+3,postinc2
  4513                           
  4514                           ; BSR set to: 0
  4515                           ;servo.c: 355: currentPos[io] = targetPos[io];
  4516  001632  0E70               	movlw	low _targetPos
  4517  001634  25C0               	addwf	pollServos@io& (0+255),w,b
  4518  001636  6ED9               	movwf	fsr2l,c
  4519  001638  6ADA               	clrf	fsr2h,c
  4520  00163A  0E01               	movlw	high _targetPos
  4521  00163C  22DA               	addwfc	fsr2h,f,c
  4522  00163E  0E80               	movlw	low _currentPos
  4523  001640  25C0               	addwf	pollServos@io& (0+255),w,b
  4524  001642  6EE1               	movwf	fsr1l,c
  4525  001644  6AE2               	clrf	fsr1h,c
  4526  001646  0E01               	movlw	high _currentPos
  4527  001648  22E2               	addwfc	fsr1h,f,c
  4528  00164A  CFDF FFE7          	movff	indf2,indf1
  4529                           
  4530                           ; BSR set to: 0
  4531                           ;servo.c: 356: sendProducedEvent(((8U + 4U*(io))+0U), (unsigned char)( ! (NV->io[io].fla
      +                          gs & 0x40U)));
  4532  00164E  51C0               	movf	pollServos@io& (0+255),w,b
  4533  001650  0D07               	mullw	7
  4534  001652  C0EC  F0B5         	movff	_NV,??_pollServos
  4535  001656  C0ED  F0B6         	movff	_NV+1,??_pollServos+1
  4536  00165A  50F3               	movf	243,w,c
  4537  00165C  27B5               	addwf	??_pollServos& (0+255),f,b
  4538  00165E  50F4               	movf	244,w,c
  4539  001660  23B6               	addwfc	(??_pollServos+1)& (0+255),f,b
  4540  001662  0E11               	movlw	17
  4541  001664  25B5               	addwf	??_pollServos& (0+255),w,b
  4542  001666  6ED9               	movwf	fsr2l,c
  4543  001668  0E00               	movlw	0
  4544  00166A  21B6               	addwfc	(??_pollServos+1)& (0+255),w,b
  4545  00166C  6EDA               	movwf	fsr2h,c
  4546  00166E  BCDF               	btfsc	indf2,6,c
  4547  001670  D002               	goto	u26030
  4548  001672  0E01               	movlw	1
  4549  001674  D001               	goto	u26040
  4550  001676                     u26030:
  4551  001676  0E00               	movlw	0
  4552  001678                     u26040:
  4553  001678  6FAE               	movwf	sendProducedEvent@on& (0+255),b
  4554  00167A  51C0               	movf	pollServos@io& (0+255),w,b
  4555  00167C  0D04               	mullw	4
  4556  00167E  50F3               	movf	243,w,c
  4557  001680  0F08               	addlw	8
  4558  001682  EC54  F03C         	call	_sendProducedEvent
  4559  001686  D70E               	goto	l20685
  4560  001688                     l20727:
  4561                           
  4562                           ; BSR set to: 0
  4563                           ;servo.c: 360: if (bounceDown(io)) {
  4564  001688  51C0               	movf	pollServos@io& (0+255),w,b
  4565  00168A  EC91  F01A         	call	_bounceDown
  4566  00168E  0900               	iorlw	0
  4567  001690  B4D8               	btfsc	status,2,c
  4568  001692  D3CB               	goto	l20839
  4569                           
  4570                           ; BSR set to: 0
  4571                           ;servo.c: 361: servoState[io] = STOPPED;
  4572  001694  0E40               	movlw	low _servoState
  4573  001696  25C0               	addwf	pollServos@io& (0+255),w,b
  4574  001698  6ED9               	movwf	fsr2l,c
  4575  00169A  6ADA               	clrf	fsr2h,c
  4576  00169C  0E01               	movlw	high _servoState
  4577  00169E  22DA               	addwfc	fsr2h,f,c
  4578  0016A0  0E01               	movlw	1
  4579  0016A2  6EDF               	movwf	indf2,c
  4580                           
  4581                           ; BSR set to: 0
  4582                           ;servo.c: 362: ticksWhenStopped[io].Val = tickGet();
  4583  0016A4  ECA3  F04B         	call	_tickGet	;wreg free
  4584  0016A8  51C0               	movf	pollServos@io& (0+255),w,b
  4585  0016AA  0D04               	mullw	4
  4586  0016AC  0E00               	movlw	low _ticksWhenStopped
  4587  0016AE  24F3               	addwf	243,w,c
  4588  0016B0  6ED9               	movwf	fsr2l,c
  4589  0016B2  0E02               	movlw	high _ticksWhenStopped
  4590  0016B4  20F4               	addwfc	prodh,w,c
  4591  0016B6  6EDA               	movwf	fsr2h,c
  4592  0016B8  C071  FFDE         	movff	?_tickGet,postinc2
  4593  0016BC  C072  FFDE         	movff	?_tickGet+1,postinc2
  4594  0016C0  C073  FFDE         	movff	?_tickGet+2,postinc2
  4595  0016C4  C074  FFDE         	movff	?_tickGet+3,postinc2
  4596                           
  4597                           ; BSR set to: 0
  4598                           ;servo.c: 363: currentPos[io] = targetPos[io];
  4599  0016C8  0E70               	movlw	low _targetPos
  4600  0016CA  25C0               	addwf	pollServos@io& (0+255),w,b
  4601  0016CC  6ED9               	movwf	fsr2l,c
  4602  0016CE  6ADA               	clrf	fsr2h,c
  4603  0016D0  0E01               	movlw	high _targetPos
  4604  0016D2  22DA               	addwfc	fsr2h,f,c
  4605  0016D4  0E80               	movlw	low _currentPos
  4606  0016D6  25C0               	addwf	pollServos@io& (0+255),w,b
  4607  0016D8  6EE1               	movwf	fsr1l,c
  4608  0016DA  6AE2               	clrf	fsr1h,c
  4609  0016DC  0E01               	movlw	high _currentPos
  4610  0016DE  22E2               	addwfc	fsr1h,f,c
  4611  0016E0  CFDF FFE7          	movff	indf2,indf1
  4612                           
  4613                           ; BSR set to: 0
  4614                           ;servo.c: 364: sendProducedEvent(((8U + 4U*(io))+0U), NV->io[io].flags & 0x40U);
  4615  0016E4  51C0               	movf	pollServos@io& (0+255),w,b
  4616  0016E6  0D07               	mullw	7
  4617  0016E8  C0EC  F0B5         	movff	_NV,??_pollServos
  4618  0016EC  C0ED  F0B6         	movff	_NV+1,??_pollServos+1
  4619  0016F0  50F3               	movf	243,w,c
  4620  0016F2  27B5               	addwf	??_pollServos& (0+255),f,b
  4621  0016F4  50F4               	movf	244,w,c
  4622  0016F6  23B6               	addwfc	(??_pollServos+1)& (0+255),f,b
  4623  0016F8  0E11               	movlw	17
  4624  0016FA  25B5               	addwf	??_pollServos& (0+255),w,b
  4625  0016FC  6ED9               	movwf	fsr2l,c
  4626  0016FE  0E00               	movlw	0
  4627  001700  21B6               	addwfc	(??_pollServos+1)& (0+255),w,b
  4628  001702  6EDA               	movwf	fsr2h,c
  4629  001704  50DF               	movf	indf2,w,c
  4630  001706  0B40               	andlw	64
  4631  001708  6FAE               	movwf	sendProducedEvent@on& (0+255),b
  4632  00170A  51C0               	movf	pollServos@io& (0+255),w,b
  4633  00170C  0D04               	mullw	4
  4634  00170E  50F3               	movf	243,w,c
  4635  001710  0F08               	addlw	8
  4636  001712  EC54  F03C         	call	_sendProducedEvent
  4637  001716  D6C6               	goto	l20685
  4638  001718                     l20741:
  4639                           
  4640                           ; BSR set to: 0
  4641  001718  0E40               	movlw	low _servoState
  4642  00171A  25C0               	addwf	pollServos@io& (0+255),w,b
  4643  00171C  6ED9               	movwf	fsr2l,c
  4644  00171E  6ADA               	clrf	fsr2h,c
  4645  001720  0E01               	movlw	high _servoState
  4646  001722  22DA               	addwfc	fsr2h,f,c
  4647  001724  50DF               	movf	indf2,w,c
  4648                           
  4649                           ; Switch size 1, requested type "simple"
  4650                           ; Number of cases is 2, Range of values is 2 to 3
  4651                           ; switch strategies available:
  4652                           ; Name         Instructions Cycles
  4653                           ; simple_byte            7     4 (average)
  4654                           ;	Chosen strategy is simple_byte
  4655  001726  0A02               	xorlw	2	; case 2
  4656  001728  B4D8               	btfsc	status,2,c
  4657  00172A  D6F1               	goto	l20697
  4658  00172C  0A01               	xorlw	1	; case 3
  4659  00172E  B4D8               	btfsc	status,2,c
  4660  001730  D6DB               	goto	l20691
  4661  001732  D37B               	goto	l20839
  4662  001734                     l20743:
  4663                           
  4664                           ; BSR set to: 0
  4665                           ;servo.c: 374: if (currentPos[io] == NV->io[io].nv_io.nv_multi.multi_pos1) {
  4666  001734  51C0               	movf	pollServos@io& (0+255),w,b
  4667  001736  0D07               	mullw	7
  4668  001738  C0EC  F0B5         	movff	_NV,??_pollServos
  4669  00173C  C0ED  F0B6         	movff	_NV+1,??_pollServos+1
  4670  001740  50F3               	movf	243,w,c
  4671  001742  27B5               	addwf	??_pollServos& (0+255),f,b
  4672  001744  50F4               	movf	244,w,c
  4673  001746  23B6               	addwfc	(??_pollServos+1)& (0+255),f,b
  4674  001748  0E13               	movlw	19
  4675  00174A  25B5               	addwf	??_pollServos& (0+255),w,b
  4676  00174C  6ED9               	movwf	fsr2l,c
  4677  00174E  0E00               	movlw	0
  4678  001750  21B6               	addwfc	(??_pollServos+1)& (0+255),w,b
  4679  001752  6EDA               	movwf	fsr2h,c
  4680  001754  0E80               	movlw	low _currentPos
  4681  001756  25C0               	addwf	pollServos@io& (0+255),w,b
  4682  001758  6EE1               	movwf	fsr1l,c
  4683  00175A  6AE2               	clrf	fsr1h,c
  4684  00175C  0E01               	movlw	high _currentPos
  4685  00175E  22E2               	addwfc	fsr1h,f,c
  4686  001760  50DE               	movf	postinc2,w,c
  4687  001762  18E6               	xorwf	postinc1,w,c
  4688  001764  A4D8               	btfss	status,2,c
  4689  001766  D019               	goto	l20747
  4690                           
  4691                           ; BSR set to: 0
  4692                           ;servo.c: 375: sendProducedEvent(((8U + 4U*(io))+0U), NV->io[io].flags & 0x40U);
  4693  001768  51C0               	movf	pollServos@io& (0+255),w,b
  4694  00176A  0D07               	mullw	7
  4695  00176C  C0EC  F0B5         	movff	_NV,??_pollServos
  4696  001770  C0ED  F0B6         	movff	_NV+1,??_pollServos+1
  4697  001774  50F3               	movf	243,w,c
  4698  001776  27B5               	addwf	??_pollServos& (0+255),f,b
  4699  001778  50F4               	movf	244,w,c
  4700  00177A  23B6               	addwfc	(??_pollServos+1)& (0+255),f,b
  4701  00177C  0E11               	movlw	17
  4702  00177E  25B5               	addwf	??_pollServos& (0+255),w,b
  4703  001780  6ED9               	movwf	fsr2l,c
  4704  001782  0E00               	movlw	0
  4705  001784  21B6               	addwfc	(??_pollServos+1)& (0+255),w,b
  4706  001786  6EDA               	movwf	fsr2h,c
  4707  001788  50DF               	movf	indf2,w,c
  4708  00178A  0B40               	andlw	64
  4709  00178C  6FAE               	movwf	sendProducedEvent@on& (0+255),b
  4710  00178E  51C0               	movf	pollServos@io& (0+255),w,b
  4711  001790  0D04               	mullw	4
  4712  001792  50F3               	movf	243,w,c
  4713  001794  0F08               	addlw	8
  4714  001796  EC54  F03C         	call	_sendProducedEvent
  4715  00179A                     l20747:
  4716                           
  4717                           ;servo.c: 376: };servo.c: 377: if (currentPos[io] == NV->io[io].nv_io.nv_multi.multi_pos
      +                          2) {
  4718  00179A  0100               	movlb	0	; () banked
  4719  00179C  51C0               	movf	pollServos@io& (0+255),w,b
  4720  00179E  0D07               	mullw	7
  4721  0017A0  C0EC  F0B5         	movff	_NV,??_pollServos
  4722  0017A4  C0ED  F0B6         	movff	_NV+1,??_pollServos+1
  4723  0017A8  50F3               	movf	243,w,c
  4724  0017AA  27B5               	addwf	??_pollServos& (0+255),f,b
  4725  0017AC  50F4               	movf	244,w,c
  4726  0017AE  23B6               	addwfc	(??_pollServos+1)& (0+255),f,b
  4727  0017B0  0E14               	movlw	20
  4728  0017B2  25B5               	addwf	??_pollServos& (0+255),w,b
  4729  0017B4  6ED9               	movwf	fsr2l,c
  4730  0017B6  0E00               	movlw	0
  4731  0017B8  21B6               	addwfc	(??_pollServos+1)& (0+255),w,b
  4732  0017BA  6EDA               	movwf	fsr2h,c
  4733  0017BC  0E80               	movlw	low _currentPos
  4734  0017BE  25C0               	addwf	pollServos@io& (0+255),w,b
  4735  0017C0  6EE1               	movwf	fsr1l,c
  4736  0017C2  6AE2               	clrf	fsr1h,c
  4737  0017C4  0E01               	movlw	high _currentPos
  4738  0017C6  22E2               	addwfc	fsr1h,f,c
  4739  0017C8  50DE               	movf	postinc2,w,c
  4740  0017CA  18E6               	xorwf	postinc1,w,c
  4741  0017CC  A4D8               	btfss	status,2,c
  4742  0017CE  D019               	goto	l20751
  4743                           
  4744                           ; BSR set to: 0
  4745                           ;servo.c: 378: sendProducedEvent(((8U + 4U*(io))+1U), NV->io[io].flags & 0x40U);
  4746  0017D0  51C0               	movf	pollServos@io& (0+255),w,b
  4747  0017D2  0D07               	mullw	7
  4748  0017D4  C0EC  F0B5         	movff	_NV,??_pollServos
  4749  0017D8  C0ED  F0B6         	movff	_NV+1,??_pollServos+1
  4750  0017DC  50F3               	movf	243,w,c
  4751  0017DE  27B5               	addwf	??_pollServos& (0+255),f,b
  4752  0017E0  50F4               	movf	244,w,c
  4753  0017E2  23B6               	addwfc	(??_pollServos+1)& (0+255),f,b
  4754  0017E4  0E11               	movlw	17
  4755  0017E6  25B5               	addwf	??_pollServos& (0+255),w,b
  4756  0017E8  6ED9               	movwf	fsr2l,c
  4757  0017EA  0E00               	movlw	0
  4758  0017EC  21B6               	addwfc	(??_pollServos+1)& (0+255),w,b
  4759  0017EE  6EDA               	movwf	fsr2h,c
  4760  0017F0  50DF               	movf	indf2,w,c
  4761  0017F2  0B40               	andlw	64
  4762  0017F4  6FAE               	movwf	sendProducedEvent@on& (0+255),b
  4763  0017F6  51C0               	movf	pollServos@io& (0+255),w,b
  4764  0017F8  0D04               	mullw	4
  4765  0017FA  50F3               	movf	243,w,c
  4766  0017FC  0F09               	addlw	9
  4767  0017FE  EC54  F03C         	call	_sendProducedEvent
  4768  001802                     l20751:
  4769                           
  4770                           ;servo.c: 379: };servo.c: 380: if (currentPos[io] == NV->io[io].nv_io.nv_multi.multi_pos
      +                          3) {
  4771  001802  0100               	movlb	0	; () banked
  4772  001804  51C0               	movf	pollServos@io& (0+255),w,b
  4773  001806  0D07               	mullw	7
  4774  001808  C0EC  F0B5         	movff	_NV,??_pollServos
  4775  00180C  C0ED  F0B6         	movff	_NV+1,??_pollServos+1
  4776  001810  50F3               	movf	243,w,c
  4777  001812  27B5               	addwf	??_pollServos& (0+255),f,b
  4778  001814  50F4               	movf	244,w,c
  4779  001816  23B6               	addwfc	(??_pollServos+1)& (0+255),f,b
  4780  001818  0E15               	movlw	21
  4781  00181A  25B5               	addwf	??_pollServos& (0+255),w,b
  4782  00181C  6ED9               	movwf	fsr2l,c
  4783  00181E  0E00               	movlw	0
  4784  001820  21B6               	addwfc	(??_pollServos+1)& (0+255),w,b
  4785  001822  6EDA               	movwf	fsr2h,c
  4786  001824  0E80               	movlw	low _currentPos
  4787  001826  25C0               	addwf	pollServos@io& (0+255),w,b
  4788  001828  6EE1               	movwf	fsr1l,c
  4789  00182A  6AE2               	clrf	fsr1h,c
  4790  00182C  0E01               	movlw	high _currentPos
  4791  00182E  22E2               	addwfc	fsr1h,f,c
  4792  001830  50DE               	movf	postinc2,w,c
  4793  001832  18E6               	xorwf	postinc1,w,c
  4794  001834  A4D8               	btfss	status,2,c
  4795  001836  D019               	goto	l20755
  4796                           
  4797                           ; BSR set to: 0
  4798                           ;servo.c: 381: sendProducedEvent(((8U + 4U*(io))+2U), NV->io[io].flags & 0x40U);
  4799  001838  51C0               	movf	pollServos@io& (0+255),w,b
  4800  00183A  0D07               	mullw	7
  4801  00183C  C0EC  F0B5         	movff	_NV,??_pollServos
  4802  001840  C0ED  F0B6         	movff	_NV+1,??_pollServos+1
  4803  001844  50F3               	movf	243,w,c
  4804  001846  27B5               	addwf	??_pollServos& (0+255),f,b
  4805  001848  50F4               	movf	244,w,c
  4806  00184A  23B6               	addwfc	(??_pollServos+1)& (0+255),f,b
  4807  00184C  0E11               	movlw	17
  4808  00184E  25B5               	addwf	??_pollServos& (0+255),w,b
  4809  001850  6ED9               	movwf	fsr2l,c
  4810  001852  0E00               	movlw	0
  4811  001854  21B6               	addwfc	(??_pollServos+1)& (0+255),w,b
  4812  001856  6EDA               	movwf	fsr2h,c
  4813  001858  50DF               	movf	indf2,w,c
  4814  00185A  0B40               	andlw	64
  4815  00185C  6FAE               	movwf	sendProducedEvent@on& (0+255),b
  4816  00185E  51C0               	movf	pollServos@io& (0+255),w,b
  4817  001860  0D04               	mullw	4
  4818  001862  50F3               	movf	243,w,c
  4819  001864  0F0A               	addlw	10
  4820  001866  EC54  F03C         	call	_sendProducedEvent
  4821  00186A                     l20755:
  4822                           
  4823                           ;servo.c: 382: };servo.c: 383: if (currentPos[io] == NV->io[io].nv_io.nv_multi.multi_pos
      +                          4) {
  4824  00186A  0100               	movlb	0	; () banked
  4825  00186C  51C0               	movf	pollServos@io& (0+255),w,b
  4826  00186E  0D07               	mullw	7
  4827  001870  C0EC  F0B5         	movff	_NV,??_pollServos
  4828  001874  C0ED  F0B6         	movff	_NV+1,??_pollServos+1
  4829  001878  50F3               	movf	243,w,c
  4830  00187A  27B5               	addwf	??_pollServos& (0+255),f,b
  4831  00187C  50F4               	movf	244,w,c
  4832  00187E  23B6               	addwfc	(??_pollServos+1)& (0+255),f,b
  4833  001880  0E16               	movlw	22
  4834  001882  25B5               	addwf	??_pollServos& (0+255),w,b
  4835  001884  6ED9               	movwf	fsr2l,c
  4836  001886  0E00               	movlw	0
  4837  001888  21B6               	addwfc	(??_pollServos+1)& (0+255),w,b
  4838  00188A  6EDA               	movwf	fsr2h,c
  4839  00188C  0E80               	movlw	low _currentPos
  4840  00188E  25C0               	addwf	pollServos@io& (0+255),w,b
  4841  001890  6EE1               	movwf	fsr1l,c
  4842  001892  6AE2               	clrf	fsr1h,c
  4843  001894  0E01               	movlw	high _currentPos
  4844  001896  22E2               	addwfc	fsr1h,f,c
  4845  001898  50DE               	movf	postinc2,w,c
  4846  00189A  18E6               	xorwf	postinc1,w,c
  4847  00189C  A4D8               	btfss	status,2,c
  4848  00189E  D019               	goto	l20759
  4849                           
  4850                           ; BSR set to: 0
  4851                           ;servo.c: 384: sendProducedEvent(((8U + 4U*(io))+3U), NV->io[io].flags & 0x40U);
  4852  0018A0  51C0               	movf	pollServos@io& (0+255),w,b
  4853  0018A2  0D07               	mullw	7
  4854  0018A4  C0EC  F0B5         	movff	_NV,??_pollServos
  4855  0018A8  C0ED  F0B6         	movff	_NV+1,??_pollServos+1
  4856  0018AC  50F3               	movf	243,w,c
  4857  0018AE  27B5               	addwf	??_pollServos& (0+255),f,b
  4858  0018B0  50F4               	movf	244,w,c
  4859  0018B2  23B6               	addwfc	(??_pollServos+1)& (0+255),f,b
  4860  0018B4  0E11               	movlw	17
  4861  0018B6  25B5               	addwf	??_pollServos& (0+255),w,b
  4862  0018B8  6ED9               	movwf	fsr2l,c
  4863  0018BA  0E00               	movlw	0
  4864  0018BC  21B6               	addwfc	(??_pollServos+1)& (0+255),w,b
  4865  0018BE  6EDA               	movwf	fsr2h,c
  4866  0018C0  50DF               	movf	indf2,w,c
  4867  0018C2  0B40               	andlw	64
  4868  0018C4  6FAE               	movwf	sendProducedEvent@on& (0+255),b
  4869  0018C6  51C0               	movf	pollServos@io& (0+255),w,b
  4870  0018C8  0D04               	mullw	4
  4871  0018CA  50F3               	movf	243,w,c
  4872  0018CC  0F0B               	addlw	11
  4873  0018CE  EC54  F03C         	call	_sendProducedEvent
  4874  0018D2                     l20759:
  4875                           
  4876                           ;servo.c: 385: };servo.c: 386: servoState[io] = MOVING;
  4877  0018D2  0E40               	movlw	low _servoState
  4878  0018D4  0100               	movlb	0	; () banked
  4879  0018D6  25C0               	addwf	pollServos@io& (0+255),w,b
  4880  0018D8  6ED9               	movwf	fsr2l,c
  4881  0018DA  6ADA               	clrf	fsr2h,c
  4882  0018DC  0E01               	movlw	high _servoState
  4883  0018DE  22DA               	addwfc	fsr2h,f,c
  4884  0018E0  0E02               	movlw	2
  4885  0018E2  6EDF               	movwf	indf2,c
  4886  0018E4                     l20761:
  4887                           
  4888                           ; BSR set to: 0
  4889                           ;servo.c: 389: if (targetPos[io] > currentPos[io]) {
  4890  0018E4  0E70               	movlw	low _targetPos
  4891  0018E6  25C0               	addwf	pollServos@io& (0+255),w,b
  4892  0018E8  6ED9               	movwf	fsr2l,c
  4893  0018EA  6ADA               	clrf	fsr2h,c
  4894  0018EC  0E01               	movlw	high _targetPos
  4895  0018EE  22DA               	addwfc	fsr2h,f,c
  4896  0018F0  0E80               	movlw	low _currentPos
  4897  0018F2  25C0               	addwf	pollServos@io& (0+255),w,b
  4898  0018F4  6EE1               	movwf	fsr1l,c
  4899  0018F6  6AE2               	clrf	fsr1h,c
  4900  0018F8  0E01               	movlw	high _currentPos
  4901  0018FA  22E2               	addwfc	fsr1h,f,c
  4902  0018FC  50DE               	movf	postinc2,w,c
  4903  0018FE  5CE6               	subwf	postinc1,w,c
  4904  001900  B0D8               	btfsc	status,0,c
  4905  001902  D08F               	goto	l20781
  4906                           
  4907                           ; BSR set to: 0
  4908                           ;servo.c: 390: if (stepsPerPollSpeed[io]) {
  4909  001904  0E30               	movlw	low _stepsPerPollSpeed
  4910  001906  25C0               	addwf	pollServos@io& (0+255),w,b
  4911  001908  6ED9               	movwf	fsr2l,c
  4912  00190A  6ADA               	clrf	fsr2h,c
  4913  00190C  0E01               	movlw	high _stepsPerPollSpeed
  4914  00190E  22DA               	addwfc	fsr2h,f,c
  4915  001910  50DF               	movf	indf2,w,c
  4916  001912  B4D8               	btfsc	status,2,c
  4917  001914  D042               	goto	l20771
  4918                           
  4919                           ; BSR set to: 0
  4920                           ;servo.c: 391: if (currentPos[io] + stepsPerPollSpeed[io] < currentPos[io]) {
  4921  001916  0E80               	movlw	low _currentPos
  4922  001918  25C0               	addwf	pollServos@io& (0+255),w,b
  4923  00191A  6ED9               	movwf	fsr2l,c
  4924  00191C  6ADA               	clrf	fsr2h,c
  4925  00191E  0E01               	movlw	high _currentPos
  4926  001920  22DA               	addwfc	fsr2h,f,c
  4927  001922  50DF               	movf	indf2,w,c
  4928  001924  6FB5               	movwf	??_pollServos& (0+255),b
  4929  001926  6BB6               	clrf	(??_pollServos+1)& (0+255),b
  4930  001928  0E80               	movlw	low _currentPos
  4931  00192A  25C0               	addwf	pollServos@io& (0+255),w,b
  4932  00192C  6ED9               	movwf	fsr2l,c
  4933  00192E  6ADA               	clrf	fsr2h,c
  4934  001930  0E01               	movlw	high _currentPos
  4935  001932  22DA               	addwfc	fsr2h,f,c
  4936  001934  50DF               	movf	indf2,w,c
  4937  001936  6FB7               	movwf	(??_pollServos+2)& (0+255),b
  4938  001938  6BB8               	clrf	(??_pollServos+3)& (0+255),b
  4939  00193A  0E30               	movlw	low _stepsPerPollSpeed
  4940  00193C  25C0               	addwf	pollServos@io& (0+255),w,b
  4941  00193E  6ED9               	movwf	fsr2l,c
  4942  001940  6ADA               	clrf	fsr2h,c
  4943  001942  0E01               	movlw	high _stepsPerPollSpeed
  4944  001944  22DA               	addwfc	fsr2h,f,c
  4945  001946  50DF               	movf	indf2,w,c
  4946  001948  6FB9               	movwf	(??_pollServos+4)& (0+255),b
  4947  00194A  51B9               	movf	(??_pollServos+4)& (0+255),w,b
  4948  00194C  27B7               	addwf	(??_pollServos+2)& (0+255),f,b
  4949  00194E  0E00               	movlw	0
  4950  001950  23B8               	addwfc	(??_pollServos+3)& (0+255),f,b
  4951  001952  51B5               	movf	??_pollServos& (0+255),w,b
  4952  001954  5DB7               	subwf	(??_pollServos+2)& (0+255),w,b
  4953  001956  51B8               	movf	(??_pollServos+3)& (0+255),w,b
  4954  001958  0A80               	xorlw	128
  4955  00195A  6FBA               	movwf	(??_pollServos+5)& (0+255),b
  4956  00195C  51B6               	movf	(??_pollServos+1)& (0+255),w,b
  4957  00195E  0A80               	xorlw	128
  4958  001960  59BA               	subwfb	(??_pollServos+5)& (0+255),w,b
  4959  001962  B0D8               	btfsc	status,0,c
  4960  001964  D009               	goto	l20769
  4961                           
  4962                           ; BSR set to: 0
  4963                           ;servo.c: 393: currentPos[io] =255;
  4964  001966  0E80               	movlw	low _currentPos
  4965  001968  25C0               	addwf	pollServos@io& (0+255),w,b
  4966  00196A  6ED9               	movwf	fsr2l,c
  4967  00196C  6ADA               	clrf	fsr2h,c
  4968  00196E  0E01               	movlw	high _currentPos
  4969  001970  22DA               	addwfc	fsr2h,f,c
  4970  001972  0EFF               	movlw	255
  4971  001974  6EDF               	movwf	indf2,c
  4972                           
  4973                           ;servo.c: 394: } else {
  4974  001976  D036               	goto	l20777
  4975  001978                     l20769:
  4976                           
  4977                           ; BSR set to: 0
  4978                           ;servo.c: 395: currentPos[io] += stepsPerPollSpeed[io];
  4979  001978  0E30               	movlw	low _stepsPerPollSpeed
  4980  00197A  25C0               	addwf	pollServos@io& (0+255),w,b
  4981  00197C  6ED9               	movwf	fsr2l,c
  4982  00197E  6ADA               	clrf	fsr2h,c
  4983  001980  0E01               	movlw	high _stepsPerPollSpeed
  4984  001982  22DA               	addwfc	fsr2h,f,c
  4985  001984  50DF               	movf	indf2,w,c
  4986  001986  6FB5               	movwf	??_pollServos& (0+255),b
  4987  001988  0E80               	movlw	low _currentPos
  4988  00198A  25C0               	addwf	pollServos@io& (0+255),w,b
  4989  00198C  6ED9               	movwf	fsr2l,c
  4990  00198E  6ADA               	clrf	fsr2h,c
  4991  001990  0E01               	movlw	high _currentPos
  4992  001992  22DA               	addwfc	fsr2h,f,c
  4993  001994  51B5               	movf	??_pollServos& (0+255),w,b
  4994  001996  26DF               	addwf	indf2,f,c
  4995  001998  D025               	goto	l20777
  4996  00199A                     l20771:
  4997                           
  4998                           ; BSR set to: 0
  4999                           ;servo.c: 398: pollCount[io]--;
  5000  00199A  0E20               	movlw	low _pollCount
  5001  00199C  25C0               	addwf	pollServos@io& (0+255),w,b
  5002  00199E  6ED9               	movwf	fsr2l,c
  5003  0019A0  6ADA               	clrf	fsr2h,c
  5004  0019A2  0E01               	movlw	high _pollCount
  5005  0019A4  22DA               	addwfc	fsr2h,f,c
  5006  0019A6  06DF               	decf	indf2,f,c
  5007                           
  5008                           ;servo.c: 399: if (pollCount[io] == 0) {
  5009  0019A8  0E20               	movlw	low _pollCount
  5010  0019AA  25C0               	addwf	pollServos@io& (0+255),w,b
  5011  0019AC  6ED9               	movwf	fsr2l,c
  5012  0019AE  6ADA               	clrf	fsr2h,c
  5013  0019B0  0E01               	movlw	high _pollCount
  5014  0019B2  22DA               	addwfc	fsr2h,f,c
  5015  0019B4  50DF               	movf	indf2,w,c
  5016  0019B6  A4D8               	btfss	status,2,c
  5017  0019B8  D015               	goto	l20777
  5018                           
  5019                           ; BSR set to: 0
  5020                           ;servo.c: 400: currentPos[io]++;
  5021  0019BA  0E80               	movlw	low _currentPos
  5022  0019BC  25C0               	addwf	pollServos@io& (0+255),w,b
  5023  0019BE  6ED9               	movwf	fsr2l,c
  5024  0019C0  6ADA               	clrf	fsr2h,c
  5025  0019C2  0E01               	movlw	high _currentPos
  5026  0019C4  22DA               	addwfc	fsr2h,f,c
  5027  0019C6  2ADF               	incf	indf2,f,c
  5028                           
  5029                           ; BSR set to: 0
  5030                           ;servo.c: 401: pollCount[io] = pollsPerStepSpeed[io];
  5031  0019C8  0E74               	movlw	low _pollsPerStepSpeed
  5032  0019CA  25C0               	addwf	pollServos@io& (0+255),w,b
  5033  0019CC  6ED9               	movwf	fsr2l,c
  5034  0019CE  6ADA               	clrf	fsr2h,c
  5035  0019D0  0E02               	movlw	high _pollsPerStepSpeed
  5036  0019D2  22DA               	addwfc	fsr2h,f,c
  5037  0019D4  0E20               	movlw	low _pollCount
  5038  0019D6  25C0               	addwf	pollServos@io& (0+255),w,b
  5039  0019D8  6EE1               	movwf	fsr1l,c
  5040  0019DA  6AE2               	clrf	fsr1h,c
  5041  0019DC  0E01               	movlw	high _pollCount
  5042  0019DE  22E2               	addwfc	fsr1h,f,c
  5043  0019E0  CFDF FFE7          	movff	indf2,indf1
  5044  0019E4                     l20777:
  5045                           
  5046                           ; BSR set to: 0
  5047                           ;servo.c: 402: };servo.c: 403: };servo.c: 404: if (currentPos[io] > targetPos[io]) {
  5048  0019E4  0E80               	movlw	low _currentPos
  5049  0019E6  25C0               	addwf	pollServos@io& (0+255),w,b
  5050  0019E8  6ED9               	movwf	fsr2l,c
  5051  0019EA  6ADA               	clrf	fsr2h,c
  5052  0019EC  0E01               	movlw	high _currentPos
  5053  0019EE  22DA               	addwfc	fsr2h,f,c
  5054  0019F0  0E70               	movlw	low _targetPos
  5055  0019F2  25C0               	addwf	pollServos@io& (0+255),w,b
  5056  0019F4  6EE1               	movwf	fsr1l,c
  5057  0019F6  6AE2               	clrf	fsr1h,c
  5058  0019F8  0E01               	movlw	high _targetPos
  5059  0019FA  22E2               	addwfc	fsr1h,f,c
  5060  0019FC  50DE               	movf	postinc2,w,c
  5061  0019FE  5CE6               	subwf	postinc1,w,c
  5062  001A00  B0D8               	btfsc	status,0,c
  5063  001A02  D09F               	goto	l1288
  5064  001A04                     u26140:
  5065                           
  5066                           ; BSR set to: 0
  5067                           ;servo.c: 405: currentPos[io] = targetPos[io];
  5068  001A04  0E70               	movlw	low _targetPos
  5069  001A06  25C0               	addwf	pollServos@io& (0+255),w,b
  5070  001A08  6ED9               	movwf	fsr2l,c
  5071  001A0A  6ADA               	clrf	fsr2h,c
  5072  001A0C  0E01               	movlw	high _targetPos
  5073  001A0E  22DA               	addwfc	fsr2h,f,c
  5074  001A10  0E80               	movlw	low _currentPos
  5075  001A12  25C0               	addwf	pollServos@io& (0+255),w,b
  5076  001A14  6EE1               	movwf	fsr1l,c
  5077  001A16  6AE2               	clrf	fsr1h,c
  5078  001A18  0E01               	movlw	high _currentPos
  5079  001A1A  22E2               	addwfc	fsr1h,f,c
  5080  001A1C  CFDF FFE7          	movff	indf2,indf1
  5081  001A20  D090               	goto	l1288
  5082  001A22                     l20781:
  5083                           
  5084                           ; BSR set to: 0
  5085  001A22  0E80               	movlw	low _currentPos
  5086  001A24  25C0               	addwf	pollServos@io& (0+255),w,b
  5087  001A26  6ED9               	movwf	fsr2l,c
  5088  001A28  6ADA               	clrf	fsr2h,c
  5089  001A2A  0E01               	movlw	high _currentPos
  5090  001A2C  22DA               	addwfc	fsr2h,f,c
  5091  001A2E  0E70               	movlw	low _targetPos
  5092  001A30  25C0               	addwf	pollServos@io& (0+255),w,b
  5093  001A32  6EE1               	movwf	fsr1l,c
  5094  001A34  6AE2               	clrf	fsr1h,c
  5095  001A36  0E01               	movlw	high _targetPos
  5096  001A38  22E2               	addwfc	fsr1h,f,c
  5097  001A3A  50DE               	movf	postinc2,w,c
  5098  001A3C  5CE6               	subwf	postinc1,w,c
  5099  001A3E  B0D8               	btfsc	status,0,c
  5100  001A40  D080               	goto	l1288
  5101                           
  5102                           ; BSR set to: 0
  5103                           ;servo.c: 409: if (stepsPerPollSpeed[io]) {
  5104  001A42  0E30               	movlw	low _stepsPerPollSpeed
  5105  001A44  25C0               	addwf	pollServos@io& (0+255),w,b
  5106  001A46  6ED9               	movwf	fsr2l,c
  5107  001A48  6ADA               	clrf	fsr2h,c
  5108  001A4A  0E01               	movlw	high _stepsPerPollSpeed
  5109  001A4C  22DA               	addwfc	fsr2h,f,c
  5110  001A4E  50DF               	movf	indf2,w,c
  5111  001A50  B4D8               	btfsc	status,2,c
  5112  001A52  D042               	goto	l20791
  5113                           
  5114                           ; BSR set to: 0
  5115                           ;servo.c: 410: if (currentPos[io] - stepsPerPollSpeed[io] > currentPos[io]) {
  5116  001A54  0E80               	movlw	low _currentPos
  5117  001A56  25C0               	addwf	pollServos@io& (0+255),w,b
  5118  001A58  6ED9               	movwf	fsr2l,c
  5119  001A5A  6ADA               	clrf	fsr2h,c
  5120  001A5C  0E01               	movlw	high _currentPos
  5121  001A5E  22DA               	addwfc	fsr2h,f,c
  5122  001A60  50DF               	movf	indf2,w,c
  5123  001A62  6FB5               	movwf	??_pollServos& (0+255),b
  5124  001A64  6BB6               	clrf	(??_pollServos+1)& (0+255),b
  5125  001A66  0E30               	movlw	low _stepsPerPollSpeed
  5126  001A68  25C0               	addwf	pollServos@io& (0+255),w,b
  5127  001A6A  6ED9               	movwf	fsr2l,c
  5128  001A6C  6ADA               	clrf	fsr2h,c
  5129  001A6E  0E01               	movlw	high _stepsPerPollSpeed
  5130  001A70  22DA               	addwfc	fsr2h,f,c
  5131  001A72  50DF               	movf	indf2,w,c
  5132  001A74  6FB7               	movwf	(??_pollServos+2)& (0+255),b
  5133  001A76  51B7               	movf	(??_pollServos+2)& (0+255),w,b
  5134  001A78  5FB5               	subwf	??_pollServos& (0+255),f,b
  5135  001A7A  0E00               	movlw	0
  5136  001A7C  5BB6               	subwfb	(??_pollServos+1)& (0+255),f,b
  5137  001A7E  0E80               	movlw	low _currentPos
  5138  001A80  25C0               	addwf	pollServos@io& (0+255),w,b
  5139  001A82  6ED9               	movwf	fsr2l,c
  5140  001A84  6ADA               	clrf	fsr2h,c
  5141  001A86  0E01               	movlw	high _currentPos
  5142  001A88  22DA               	addwfc	fsr2h,f,c
  5143  001A8A  50DF               	movf	indf2,w,c
  5144  001A8C  6FB8               	movwf	(??_pollServos+3)& (0+255),b
  5145  001A8E  6BB9               	clrf	(??_pollServos+4)& (0+255),b
  5146  001A90  51B5               	movf	??_pollServos& (0+255),w,b
  5147  001A92  5DB8               	subwf	(??_pollServos+3)& (0+255),w,b
  5148  001A94  51B9               	movf	(??_pollServos+4)& (0+255),w,b
  5149  001A96  0A80               	xorlw	128
  5150  001A98  6FBA               	movwf	(??_pollServos+5)& (0+255),b
  5151  001A9A  51B6               	movf	(??_pollServos+1)& (0+255),w,b
  5152  001A9C  0A80               	xorlw	128
  5153  001A9E  59BA               	subwfb	(??_pollServos+5)& (0+255),w,b
  5154  001AA0  B0D8               	btfsc	status,0,c
  5155  001AA2  D009               	goto	l20789
  5156                           
  5157                           ; BSR set to: 0
  5158                           ;servo.c: 412: currentPos[io] = 0;
  5159  001AA4  0E80               	movlw	low _currentPos
  5160  001AA6  25C0               	addwf	pollServos@io& (0+255),w,b
  5161  001AA8  6ED9               	movwf	fsr2l,c
  5162  001AAA  6ADA               	clrf	fsr2h,c
  5163  001AAC  0E01               	movlw	high _currentPos
  5164  001AAE  22DA               	addwfc	fsr2h,f,c
  5165  001AB0  0E00               	movlw	0
  5166  001AB2  6EDF               	movwf	indf2,c
  5167                           
  5168                           ;servo.c: 413: } else {
  5169  001AB4  D036               	goto	l20797
  5170  001AB6                     l20789:
  5171                           
  5172                           ; BSR set to: 0
  5173                           ;servo.c: 414: currentPos[io] -= stepsPerPollSpeed[io];
  5174  001AB6  0E30               	movlw	low _stepsPerPollSpeed
  5175  001AB8  25C0               	addwf	pollServos@io& (0+255),w,b
  5176  001ABA  6ED9               	movwf	fsr2l,c
  5177  001ABC  6ADA               	clrf	fsr2h,c
  5178  001ABE  0E01               	movlw	high _stepsPerPollSpeed
  5179  001AC0  22DA               	addwfc	fsr2h,f,c
  5180  001AC2  50DF               	movf	indf2,w,c
  5181  001AC4  6FB5               	movwf	??_pollServos& (0+255),b
  5182  001AC6  0E80               	movlw	low _currentPos
  5183  001AC8  25C0               	addwf	pollServos@io& (0+255),w,b
  5184  001ACA  6ED9               	movwf	fsr2l,c
  5185  001ACC  6ADA               	clrf	fsr2h,c
  5186  001ACE  0E01               	movlw	high _currentPos
  5187  001AD0  22DA               	addwfc	fsr2h,f,c
  5188  001AD2  51B5               	movf	??_pollServos& (0+255),w,b
  5189  001AD4  5EDF               	subwf	indf2,f,c
  5190  001AD6  D025               	goto	l20797
  5191  001AD8                     l20791:
  5192                           
  5193                           ; BSR set to: 0
  5194                           ;servo.c: 417: pollCount[io]--;
  5195  001AD8  0E20               	movlw	low _pollCount
  5196  001ADA  25C0               	addwf	pollServos@io& (0+255),w,b
  5197  001ADC  6ED9               	movwf	fsr2l,c
  5198  001ADE  6ADA               	clrf	fsr2h,c
  5199  001AE0  0E01               	movlw	high _pollCount
  5200  001AE2  22DA               	addwfc	fsr2h,f,c
  5201  001AE4  06DF               	decf	indf2,f,c
  5202                           
  5203                           ;servo.c: 418: if (pollCount[io] == 0) {
  5204  001AE6  0E20               	movlw	low _pollCount
  5205  001AE8  25C0               	addwf	pollServos@io& (0+255),w,b
  5206  001AEA  6ED9               	movwf	fsr2l,c
  5207  001AEC  6ADA               	clrf	fsr2h,c
  5208  001AEE  0E01               	movlw	high _pollCount
  5209  001AF0  22DA               	addwfc	fsr2h,f,c
  5210  001AF2  50DF               	movf	indf2,w,c
  5211  001AF4  A4D8               	btfss	status,2,c
  5212  001AF6  D015               	goto	l20797
  5213                           
  5214                           ; BSR set to: 0
  5215                           ;servo.c: 419: currentPos[io]--;
  5216  001AF8  0E80               	movlw	low _currentPos
  5217  001AFA  25C0               	addwf	pollServos@io& (0+255),w,b
  5218  001AFC  6ED9               	movwf	fsr2l,c
  5219  001AFE  6ADA               	clrf	fsr2h,c
  5220  001B00  0E01               	movlw	high _currentPos
  5221  001B02  22DA               	addwfc	fsr2h,f,c
  5222  001B04  06DF               	decf	indf2,f,c
  5223                           
  5224                           ; BSR set to: 0
  5225                           ;servo.c: 420: pollCount[io] = pollsPerStepSpeed[io];
  5226  001B06  0E74               	movlw	low _pollsPerStepSpeed
  5227  001B08  25C0               	addwf	pollServos@io& (0+255),w,b
  5228  001B0A  6ED9               	movwf	fsr2l,c
  5229  001B0C  6ADA               	clrf	fsr2h,c
  5230  001B0E  0E02               	movlw	high _pollsPerStepSpeed
  5231  001B10  22DA               	addwfc	fsr2h,f,c
  5232  001B12  0E20               	movlw	low _pollCount
  5233  001B14  25C0               	addwf	pollServos@io& (0+255),w,b
  5234  001B16  6EE1               	movwf	fsr1l,c
  5235  001B18  6AE2               	clrf	fsr1h,c
  5236  001B1A  0E01               	movlw	high _pollCount
  5237  001B1C  22E2               	addwfc	fsr1h,f,c
  5238  001B1E  CFDF FFE7          	movff	indf2,indf1
  5239  001B22                     l20797:
  5240                           
  5241                           ; BSR set to: 0
  5242                           ;servo.c: 421: };servo.c: 422: };servo.c: 423: if (currentPos[io] < targetPos[io]) {
  5243  001B22  0E70               	movlw	low _targetPos
  5244  001B24  25C0               	addwf	pollServos@io& (0+255),w,b
  5245  001B26  6ED9               	movwf	fsr2l,c
  5246  001B28  6ADA               	clrf	fsr2h,c
  5247  001B2A  0E01               	movlw	high _targetPos
  5248  001B2C  22DA               	addwfc	fsr2h,f,c
  5249  001B2E  0E80               	movlw	low _currentPos
  5250  001B30  25C0               	addwf	pollServos@io& (0+255),w,b
  5251  001B32  6EE1               	movwf	fsr1l,c
  5252  001B34  6AE2               	clrf	fsr1h,c
  5253  001B36  0E01               	movlw	high _currentPos
  5254  001B38  22E2               	addwfc	fsr1h,f,c
  5255  001B3A  50DE               	movf	postinc2,w,c
  5256  001B3C  5CE6               	subwf	postinc1,w,c
  5257  001B3E  A0D8               	btfss	status,0,c
  5258  001B40  D761               	goto	u26140
  5259  001B42                     l1288:
  5260                           
  5261                           ; BSR set to: 0
  5262                           ;servo.c: 425: };servo.c: 426: };servo.c: 427: if (targetPos[io] == currentPos[io]) {
  5263  001B42  0E80               	movlw	low _currentPos
  5264  001B44  25C0               	addwf	pollServos@io& (0+255),w,b
  5265  001B46  6ED9               	movwf	fsr2l,c
  5266  001B48  6ADA               	clrf	fsr2h,c
  5267  001B4A  0E01               	movlw	high _currentPos
  5268  001B4C  22DA               	addwfc	fsr2h,f,c
  5269  001B4E  0E70               	movlw	low _targetPos
  5270  001B50  25C0               	addwf	pollServos@io& (0+255),w,b
  5271  001B52  6EE1               	movwf	fsr1l,c
  5272  001B54  6AE2               	clrf	fsr1h,c
  5273  001B56  0E01               	movlw	high _targetPos
  5274  001B58  22E2               	addwfc	fsr1h,f,c
  5275  001B5A  50DE               	movf	postinc2,w,c
  5276  001B5C  18E6               	xorwf	postinc1,w,c
  5277  001B5E  A4D8               	btfss	status,2,c
  5278  001B60  D164               	goto	l20839
  5279                           
  5280                           ; BSR set to: 0
  5281                           ;servo.c: 428: servoState[io] = STOPPED;
  5282  001B62  0E40               	movlw	low _servoState
  5283  001B64  25C0               	addwf	pollServos@io& (0+255),w,b
  5284  001B66  6ED9               	movwf	fsr2l,c
  5285  001B68  6ADA               	clrf	fsr2h,c
  5286  001B6A  0E01               	movlw	high _servoState
  5287  001B6C  22DA               	addwfc	fsr2h,f,c
  5288  001B6E  0E01               	movlw	1
  5289  001B70  6EDF               	movwf	indf2,c
  5290                           
  5291                           ; BSR set to: 0
  5292                           ;servo.c: 429: ticksWhenStopped[io].Val = tickGet();
  5293  001B72  ECA3  F04B         	call	_tickGet	;wreg free
  5294  001B76  51C0               	movf	pollServos@io& (0+255),w,b
  5295  001B78  0D04               	mullw	4
  5296  001B7A  0E00               	movlw	low _ticksWhenStopped
  5297  001B7C  24F3               	addwf	243,w,c
  5298  001B7E  6ED9               	movwf	fsr2l,c
  5299  001B80  0E02               	movlw	high _ticksWhenStopped
  5300  001B82  20F4               	addwfc	prodh,w,c
  5301  001B84  6EDA               	movwf	fsr2h,c
  5302  001B86  C071  FFDE         	movff	?_tickGet,postinc2
  5303  001B8A  C072  FFDE         	movff	?_tickGet+1,postinc2
  5304  001B8E  C073  FFDE         	movff	?_tickGet+2,postinc2
  5305  001B92  C074  FFDE         	movff	?_tickGet+3,postinc2
  5306                           
  5307                           ; BSR set to: 0
  5308                           ;servo.c: 431: if (currentPos[io] == NV->io[io].nv_io.nv_multi.multi_pos1) {
  5309  001B96  51C0               	movf	pollServos@io& (0+255),w,b
  5310  001B98  0D07               	mullw	7
  5311  001B9A  C0EC  F0B5         	movff	_NV,??_pollServos
  5312  001B9E  C0ED  F0B6         	movff	_NV+1,??_pollServos+1
  5313  001BA2  50F3               	movf	243,w,c
  5314  001BA4  27B5               	addwf	??_pollServos& (0+255),f,b
  5315  001BA6  50F4               	movf	244,w,c
  5316  001BA8  23B6               	addwfc	(??_pollServos+1)& (0+255),f,b
  5317  001BAA  0E13               	movlw	19
  5318  001BAC  25B5               	addwf	??_pollServos& (0+255),w,b
  5319  001BAE  6ED9               	movwf	fsr2l,c
  5320  001BB0  0E00               	movlw	0
  5321  001BB2  21B6               	addwfc	(??_pollServos+1)& (0+255),w,b
  5322  001BB4  6EDA               	movwf	fsr2h,c
  5323  001BB6  0E80               	movlw	low _currentPos
  5324  001BB8  25C0               	addwf	pollServos@io& (0+255),w,b
  5325  001BBA  6EE1               	movwf	fsr1l,c
  5326  001BBC  6AE2               	clrf	fsr1h,c
  5327  001BBE  0E01               	movlw	high _currentPos
  5328  001BC0  22E2               	addwfc	fsr1h,f,c
  5329  001BC2  50DE               	movf	postinc2,w,c
  5330  001BC4  18E6               	xorwf	postinc1,w,c
  5331  001BC6  A4D8               	btfss	status,2,c
  5332  001BC8  D01C               	goto	l20809
  5333                           
  5334                           ; BSR set to: 0
  5335                           ;servo.c: 432: sendProducedEvent(((8U + 4U*(io))+0U), (unsigned char)( !(NV->io[io].flag
      +                          s & 0x40U)));
  5336  001BCA  51C0               	movf	pollServos@io& (0+255),w,b
  5337  001BCC  0D07               	mullw	7
  5338  001BCE  C0EC  F0B5         	movff	_NV,??_pollServos
  5339  001BD2  C0ED  F0B6         	movff	_NV+1,??_pollServos+1
  5340  001BD6  50F3               	movf	243,w,c
  5341  001BD8  27B5               	addwf	??_pollServos& (0+255),f,b
  5342  001BDA  50F4               	movf	244,w,c
  5343  001BDC  23B6               	addwfc	(??_pollServos+1)& (0+255),f,b
  5344  001BDE  0E11               	movlw	17
  5345  001BE0  25B5               	addwf	??_pollServos& (0+255),w,b
  5346  001BE2  6ED9               	movwf	fsr2l,c
  5347  001BE4  0E00               	movlw	0
  5348  001BE6  21B6               	addwfc	(??_pollServos+1)& (0+255),w,b
  5349  001BE8  6EDA               	movwf	fsr2h,c
  5350  001BEA  BCDF               	btfsc	indf2,6,c
  5351  001BEC  D002               	goto	u26220
  5352  001BEE  0E01               	movlw	1
  5353  001BF0  D001               	goto	u26230
  5354  001BF2                     u26220:
  5355  001BF2  0E00               	movlw	0
  5356  001BF4                     u26230:
  5357  001BF4  6FAE               	movwf	sendProducedEvent@on& (0+255),b
  5358  001BF6  51C0               	movf	pollServos@io& (0+255),w,b
  5359  001BF8  0D04               	mullw	4
  5360  001BFA  50F3               	movf	243,w,c
  5361  001BFC  0F08               	addlw	8
  5362  001BFE  EC54  F03C         	call	_sendProducedEvent
  5363  001C02                     l20809:
  5364                           
  5365                           ;servo.c: 433: };servo.c: 434: if (currentPos[io] == NV->io[io].nv_io.nv_multi.multi_pos
      +                          2) {
  5366  001C02  0100               	movlb	0	; () banked
  5367  001C04  51C0               	movf	pollServos@io& (0+255),w,b
  5368  001C06  0D07               	mullw	7
  5369  001C08  C0EC  F0B5         	movff	_NV,??_pollServos
  5370  001C0C  C0ED  F0B6         	movff	_NV+1,??_pollServos+1
  5371  001C10  50F3               	movf	243,w,c
  5372  001C12  27B5               	addwf	??_pollServos& (0+255),f,b
  5373  001C14  50F4               	movf	244,w,c
  5374  001C16  23B6               	addwfc	(??_pollServos+1)& (0+255),f,b
  5375  001C18  0E14               	movlw	20
  5376  001C1A  25B5               	addwf	??_pollServos& (0+255),w,b
  5377  001C1C  6ED9               	movwf	fsr2l,c
  5378  001C1E  0E00               	movlw	0
  5379  001C20  21B6               	addwfc	(??_pollServos+1)& (0+255),w,b
  5380  001C22  6EDA               	movwf	fsr2h,c
  5381  001C24  0E80               	movlw	low _currentPos
  5382  001C26  25C0               	addwf	pollServos@io& (0+255),w,b
  5383  001C28  6EE1               	movwf	fsr1l,c
  5384  001C2A  6AE2               	clrf	fsr1h,c
  5385  001C2C  0E01               	movlw	high _currentPos
  5386  001C2E  22E2               	addwfc	fsr1h,f,c
  5387  001C30  50DE               	movf	postinc2,w,c
  5388  001C32  18E6               	xorwf	postinc1,w,c
  5389  001C34  A4D8               	btfss	status,2,c
  5390  001C36  D01C               	goto	l20813
  5391                           
  5392                           ; BSR set to: 0
  5393                           ;servo.c: 435: sendProducedEvent(((8U + 4U*(io))+1U), (unsigned char)( !(NV->io[io].flag
      +                          s & 0x40U)));
  5394  001C38  51C0               	movf	pollServos@io& (0+255),w,b
  5395  001C3A  0D07               	mullw	7
  5396  001C3C  C0EC  F0B5         	movff	_NV,??_pollServos
  5397  001C40  C0ED  F0B6         	movff	_NV+1,??_pollServos+1
  5398  001C44  50F3               	movf	243,w,c
  5399  001C46  27B5               	addwf	??_pollServos& (0+255),f,b
  5400  001C48  50F4               	movf	244,w,c
  5401  001C4A  23B6               	addwfc	(??_pollServos+1)& (0+255),f,b
  5402  001C4C  0E11               	movlw	17
  5403  001C4E  25B5               	addwf	??_pollServos& (0+255),w,b
  5404  001C50  6ED9               	movwf	fsr2l,c
  5405  001C52  0E00               	movlw	0
  5406  001C54  21B6               	addwfc	(??_pollServos+1)& (0+255),w,b
  5407  001C56  6EDA               	movwf	fsr2h,c
  5408  001C58  BCDF               	btfsc	indf2,6,c
  5409  001C5A  D002               	goto	u26250
  5410  001C5C  0E01               	movlw	1
  5411  001C5E  D001               	goto	u26260
  5412  001C60                     u26250:
  5413  001C60  0E00               	movlw	0
  5414  001C62                     u26260:
  5415  001C62  6FAE               	movwf	sendProducedEvent@on& (0+255),b
  5416  001C64  51C0               	movf	pollServos@io& (0+255),w,b
  5417  001C66  0D04               	mullw	4
  5418  001C68  50F3               	movf	243,w,c
  5419  001C6A  0F09               	addlw	9
  5420  001C6C  EC54  F03C         	call	_sendProducedEvent
  5421  001C70                     l20813:
  5422                           
  5423                           ;servo.c: 436: };servo.c: 437: if (currentPos[io] == NV->io[io].nv_io.nv_multi.multi_pos
      +                          3) {
  5424  001C70  0100               	movlb	0	; () banked
  5425  001C72  51C0               	movf	pollServos@io& (0+255),w,b
  5426  001C74  0D07               	mullw	7
  5427  001C76  C0EC  F0B5         	movff	_NV,??_pollServos
  5428  001C7A  C0ED  F0B6         	movff	_NV+1,??_pollServos+1
  5429  001C7E  50F3               	movf	243,w,c
  5430  001C80  27B5               	addwf	??_pollServos& (0+255),f,b
  5431  001C82  50F4               	movf	244,w,c
  5432  001C84  23B6               	addwfc	(??_pollServos+1)& (0+255),f,b
  5433  001C86  0E15               	movlw	21
  5434  001C88  25B5               	addwf	??_pollServos& (0+255),w,b
  5435  001C8A  6ED9               	movwf	fsr2l,c
  5436  001C8C  0E00               	movlw	0
  5437  001C8E  21B6               	addwfc	(??_pollServos+1)& (0+255),w,b
  5438  001C90  6EDA               	movwf	fsr2h,c
  5439  001C92  0E80               	movlw	low _currentPos
  5440  001C94  25C0               	addwf	pollServos@io& (0+255),w,b
  5441  001C96  6EE1               	movwf	fsr1l,c
  5442  001C98  6AE2               	clrf	fsr1h,c
  5443  001C9A  0E01               	movlw	high _currentPos
  5444  001C9C  22E2               	addwfc	fsr1h,f,c
  5445  001C9E  50DE               	movf	postinc2,w,c
  5446  001CA0  18E6               	xorwf	postinc1,w,c
  5447  001CA2  A4D8               	btfss	status,2,c
  5448  001CA4  D01C               	goto	l20817
  5449                           
  5450                           ; BSR set to: 0
  5451                           ;servo.c: 438: sendProducedEvent(((8U + 4U*(io))+2U), (unsigned char)( !(NV->io[io].flag
      +                          s & 0x40U)));
  5452  001CA6  51C0               	movf	pollServos@io& (0+255),w,b
  5453  001CA8  0D07               	mullw	7
  5454  001CAA  C0EC  F0B5         	movff	_NV,??_pollServos
  5455  001CAE  C0ED  F0B6         	movff	_NV+1,??_pollServos+1
  5456  001CB2  50F3               	movf	243,w,c
  5457  001CB4  27B5               	addwf	??_pollServos& (0+255),f,b
  5458  001CB6  50F4               	movf	244,w,c
  5459  001CB8  23B6               	addwfc	(??_pollServos+1)& (0+255),f,b
  5460  001CBA  0E11               	movlw	17
  5461  001CBC  25B5               	addwf	??_pollServos& (0+255),w,b
  5462  001CBE  6ED9               	movwf	fsr2l,c
  5463  001CC0  0E00               	movlw	0
  5464  001CC2  21B6               	addwfc	(??_pollServos+1)& (0+255),w,b
  5465  001CC4  6EDA               	movwf	fsr2h,c
  5466  001CC6  BCDF               	btfsc	indf2,6,c
  5467  001CC8  D002               	goto	u26280
  5468  001CCA  0E01               	movlw	1
  5469  001CCC  D001               	goto	u26290
  5470  001CCE                     u26280:
  5471  001CCE  0E00               	movlw	0
  5472  001CD0                     u26290:
  5473  001CD0  6FAE               	movwf	sendProducedEvent@on& (0+255),b
  5474  001CD2  51C0               	movf	pollServos@io& (0+255),w,b
  5475  001CD4  0D04               	mullw	4
  5476  001CD6  50F3               	movf	243,w,c
  5477  001CD8  0F0A               	addlw	10
  5478  001CDA  EC54  F03C         	call	_sendProducedEvent
  5479  001CDE                     l20817:
  5480                           
  5481                           ;servo.c: 439: };servo.c: 440: if (currentPos[io] == NV->io[io].nv_io.nv_multi.multi_pos
      +                          4) {
  5482  001CDE  0100               	movlb	0	; () banked
  5483  001CE0  51C0               	movf	pollServos@io& (0+255),w,b
  5484  001CE2  0D07               	mullw	7
  5485  001CE4  C0EC  F0B5         	movff	_NV,??_pollServos
  5486  001CE8  C0ED  F0B6         	movff	_NV+1,??_pollServos+1
  5487  001CEC  50F3               	movf	243,w,c
  5488  001CEE  27B5               	addwf	??_pollServos& (0+255),f,b
  5489  001CF0  50F4               	movf	244,w,c
  5490  001CF2  23B6               	addwfc	(??_pollServos+1)& (0+255),f,b
  5491  001CF4  0E16               	movlw	22
  5492  001CF6  25B5               	addwf	??_pollServos& (0+255),w,b
  5493  001CF8  6ED9               	movwf	fsr2l,c
  5494  001CFA  0E00               	movlw	0
  5495  001CFC  21B6               	addwfc	(??_pollServos+1)& (0+255),w,b
  5496  001CFE  6EDA               	movwf	fsr2h,c
  5497  001D00  0E80               	movlw	low _currentPos
  5498  001D02  25C0               	addwf	pollServos@io& (0+255),w,b
  5499  001D04  6EE1               	movwf	fsr1l,c
  5500  001D06  6AE2               	clrf	fsr1h,c
  5501  001D08  0E01               	movlw	high _currentPos
  5502  001D0A  22E2               	addwfc	fsr1h,f,c
  5503  001D0C  50DE               	movf	postinc2,w,c
  5504  001D0E  18E6               	xorwf	postinc1,w,c
  5505  001D10  A4D8               	btfss	status,2,c
  5506  001D12  EF52  F00A         	goto	l20685
  5507                           
  5508                           ; BSR set to: 0
  5509                           ;servo.c: 441: sendProducedEvent(((8U + 4U*(io))+3U), (unsigned char)( !(NV->io[io].flag
      +                          s & 0x40U)));
  5510  001D16  51C0               	movf	pollServos@io& (0+255),w,b
  5511  001D18  0D07               	mullw	7
  5512  001D1A  C0EC  F0B5         	movff	_NV,??_pollServos
  5513  001D1E  C0ED  F0B6         	movff	_NV+1,??_pollServos+1
  5514  001D22  50F3               	movf	243,w,c
  5515  001D24  27B5               	addwf	??_pollServos& (0+255),f,b
  5516  001D26  50F4               	movf	244,w,c
  5517  001D28  23B6               	addwfc	(??_pollServos+1)& (0+255),f,b
  5518  001D2A  0E11               	movlw	17
  5519  001D2C  25B5               	addwf	??_pollServos& (0+255),w,b
  5520  001D2E  6ED9               	movwf	fsr2l,c
  5521  001D30  0E00               	movlw	0
  5522  001D32  21B6               	addwfc	(??_pollServos+1)& (0+255),w,b
  5523  001D34  6EDA               	movwf	fsr2h,c
  5524  001D36  BCDF               	btfsc	indf2,6,c
  5525  001D38  D002               	goto	u26310
  5526  001D3A  0E01               	movlw	1
  5527  001D3C  D001               	goto	u26320
  5528  001D3E                     u26310:
  5529  001D3E  0E00               	movlw	0
  5530  001D40                     u26320:
  5531  001D40  6FAE               	movwf	sendProducedEvent@on& (0+255),b
  5532  001D42  51C0               	movf	pollServos@io& (0+255),w,b
  5533  001D44  0D04               	mullw	4
  5534  001D46  50F3               	movf	243,w,c
  5535  001D48  0F0B               	addlw	11
  5536  001D4A  EC54  F03C         	call	_sendProducedEvent
  5537  001D4E  EF52  F00A         	goto	l20685
  5538  001D52                     l20825:
  5539                           
  5540                           ; BSR set to: 0
  5541  001D52  0E40               	movlw	low _servoState
  5542  001D54  25C0               	addwf	pollServos@io& (0+255),w,b
  5543  001D56  6ED9               	movwf	fsr2l,c
  5544  001D58  6ADA               	clrf	fsr2h,c
  5545  001D5A  0E01               	movlw	high _servoState
  5546  001D5C  22DA               	addwfc	fsr2h,f,c
  5547  001D5E  50DF               	movf	indf2,w,c
  5548                           
  5549                           ; Switch size 1, requested type "simple"
  5550                           ; Number of cases is 2, Range of values is 2 to 3
  5551                           ; switch strategies available:
  5552                           ; Name         Instructions Cycles
  5553                           ; simple_byte            7     4 (average)
  5554                           ;	Chosen strategy is simple_byte
  5555  001D60  0A02               	xorlw	2	; case 2
  5556  001D62  B4D8               	btfsc	status,2,c
  5557  001D64  D5BF               	goto	l20761
  5558  001D66  0A01               	xorlw	1	; case 3
  5559  001D68  B4D8               	btfsc	status,2,c
  5560  001D6A  D4E4               	goto	l20743
  5561  001D6C  D05E               	goto	l20839
  5562  001D6E                     l20829:
  5563                           
  5564                           ; BSR set to: 0
  5565  001D6E  51C0               	movf	pollServos@io& (0+255),w,b
  5566  001D70  0D07               	mullw	7
  5567  001D72  C0EC  F0B5         	movff	_NV,??_pollServos
  5568  001D76  C0ED  F0B6         	movff	_NV+1,??_pollServos+1
  5569  001D7A  50F3               	movf	243,w,c
  5570  001D7C  27B5               	addwf	??_pollServos& (0+255),f,b
  5571  001D7E  50F4               	movf	244,w,c
  5572  001D80  23B6               	addwfc	(??_pollServos+1)& (0+255),f,b
  5573  001D82  0E10               	movlw	16
  5574  001D84  25B5               	addwf	??_pollServos& (0+255),w,b
  5575  001D86  6ED9               	movwf	fsr2l,c
  5576  001D88  0E00               	movlw	0
  5577  001D8A  21B6               	addwfc	(??_pollServos+1)& (0+255),w,b
  5578  001D8C  6EDA               	movwf	fsr2h,c
  5579  001D8E  50DF               	movf	indf2,w,c
  5580                           
  5581                           ; Switch size 1, requested type "simple"
  5582                           ; Number of cases is 3, Range of values is 2 to 4
  5583                           ; switch strategies available:
  5584                           ; Name         Instructions Cycles
  5585                           ; simple_byte           10     6 (average)
  5586                           ;	Chosen strategy is simple_byte
  5587  001D90  0A02               	xorlw	2	; case 2
  5588  001D92  B4D8               	btfsc	status,2,c
  5589  001D94  EFAC  F007         	goto	l20601
  5590  001D98  0A01               	xorlw	1	; case 3
  5591  001D9A  B4D8               	btfsc	status,2,c
  5592  001D9C  D4BD               	goto	l20741
  5593  001D9E  0A07               	xorlw	7	; case 4
  5594  001DA0  B4D8               	btfsc	status,2,c
  5595  001DA2  D7D7               	goto	l20825
  5596  001DA4  D04F               	goto	l20841
  5597  001DA6                     l20831:
  5598                           
  5599                           ; BSR set to: 0
  5600                           ;servo.c: 455: if (NV->io[io].flags & 0x02U) {
  5601  001DA6  51C0               	movf	pollServos@io& (0+255),w,b
  5602  001DA8  0D07               	mullw	7
  5603  001DAA  C0EC  F0B5         	movff	_NV,??_pollServos
  5604  001DAE  C0ED  F0B6         	movff	_NV+1,??_pollServos+1
  5605  001DB2  50F3               	movf	243,w,c
  5606  001DB4  27B5               	addwf	??_pollServos& (0+255),f,b
  5607  001DB6  50F4               	movf	244,w,c
  5608  001DB8  23B6               	addwfc	(??_pollServos+1)& (0+255),f,b
  5609  001DBA  0E11               	movlw	17
  5610  001DBC  25B5               	addwf	??_pollServos& (0+255),w,b
  5611  001DBE  6ED9               	movwf	fsr2l,c
  5612  001DC0  0E00               	movlw	0
  5613  001DC2  21B6               	addwfc	(??_pollServos+1)& (0+255),w,b
  5614  001DC4  6EDA               	movwf	fsr2h,c
  5615  001DC6  A2DF               	btfss	indf2,1,c
  5616  001DC8  D03D               	goto	l20841
  5617                           
  5618                           ; BSR set to: 0
  5619                           ;servo.c: 456: if ((tickGet() - ticksWhenStopped[io].Val) > 62500) {
  5620  001DCA  51C0               	movf	pollServos@io& (0+255),w,b
  5621  001DCC  0D04               	mullw	4
  5622  001DCE  0E00               	movlw	low _ticksWhenStopped
  5623  001DD0  24F3               	addwf	243,w,c
  5624  001DD2  6ED9               	movwf	fsr2l,c
  5625  001DD4  0E02               	movlw	high _ticksWhenStopped
  5626  001DD6  20F4               	addwfc	prodh,w,c
  5627  001DD8  6EDA               	movwf	fsr2h,c
  5628  001DDA  CFDE F0B5          	movff	postinc2,??_pollServos
  5629  001DDE  CFDE F0B6          	movff	postinc2,??_pollServos+1
  5630  001DE2  CFDE F0B7          	movff	postinc2,??_pollServos+2
  5631  001DE6  CFDE F0B8          	movff	postinc2,??_pollServos+3
  5632  001DEA  ECA3  F04B         	call	_tickGet	;wreg free
  5633  001DEE  51B5               	movf	??_pollServos& (0+255),w,b
  5634  001DF0  5D71               	subwf	?_tickGet& (0+255),w,b
  5635  001DF2  6FB9               	movwf	(??_pollServos+4)& (0+255),b
  5636  001DF4  51B6               	movf	(??_pollServos+1)& (0+255),w,b
  5637  001DF6  5972               	subwfb	(?_tickGet+1)& (0+255),w,b
  5638  001DF8  6FBA               	movwf	(??_pollServos+5)& (0+255),b
  5639  001DFA  51B7               	movf	(??_pollServos+2)& (0+255),w,b
  5640  001DFC  5973               	subwfb	(?_tickGet+2)& (0+255),w,b
  5641  001DFE  6FBB               	movwf	(??_pollServos+6)& (0+255),b
  5642  001E00  51B8               	movf	(??_pollServos+3)& (0+255),w,b
  5643  001E02  5974               	subwfb	(?_tickGet+3)& (0+255),w,b
  5644  001E04  6FBC               	movwf	(??_pollServos+7)& (0+255),b
  5645  001E06  51BC               	movf	(??_pollServos+7)& (0+255),w,b
  5646  001E08  11BB               	iorwf	(??_pollServos+6)& (0+255),w,b
  5647  001E0A  E106               	bnz	u26340
  5648  001E0C  0E25               	movlw	37
  5649  001E0E  5DB9               	subwf	(??_pollServos+4)& (0+255),w,b
  5650  001E10  0EF4               	movlw	244
  5651  001E12  59BA               	subwfb	(??_pollServos+5)& (0+255),w,b
  5652  001E14  A0D8               	btfss	status,0,c
  5653  001E16  D016               	goto	l20841
  5654  001E18                     u26340:
  5655                           
  5656                           ; BSR set to: 0
  5657                           ;servo.c: 457: servoState[io] = OFF;
  5658  001E18  0E40               	movlw	low _servoState
  5659  001E1A  25C0               	addwf	pollServos@io& (0+255),w,b
  5660  001E1C  6ED9               	movwf	fsr2l,c
  5661  001E1E  6ADA               	clrf	fsr2h,c
  5662  001E20  0E01               	movlw	high _servoState
  5663  001E22  22DA               	addwfc	fsr2h,f,c
  5664  001E24  0E00               	movlw	0
  5665  001E26  6EDF               	movwf	indf2,c
  5666  001E28  D00D               	goto	l20841
  5667  001E2A                     l20839:
  5668                           
  5669                           ; BSR set to: 0
  5670  001E2A  0E40               	movlw	low _servoState
  5671  001E2C  25C0               	addwf	pollServos@io& (0+255),w,b
  5672  001E2E  6ED9               	movwf	fsr2l,c
  5673  001E30  6ADA               	clrf	fsr2h,c
  5674  001E32  0E01               	movlw	high _servoState
  5675  001E34  22DA               	addwfc	fsr2h,f,c
  5676  001E36  50DF               	movf	indf2,w,c
  5677                           
  5678                           ; Switch size 1, requested type "simple"
  5679                           ; Number of cases is 2, Range of values is 0 to 1
  5680                           ; switch strategies available:
  5681                           ; Name         Instructions Cycles
  5682                           ; simple_byte            7     4 (average)
  5683                           ;	Chosen strategy is simple_byte
  5684  001E38  0A00               	xorlw	0	; case 0
  5685  001E3A  B4D8               	btfsc	status,2,c
  5686  001E3C  D003               	goto	l20841
  5687  001E3E  0A01               	xorlw	1	; case 1
  5688  001E40  B4D8               	btfsc	status,2,c
  5689  001E42  D7B1               	goto	l20831
  5690  001E44                     l20841:
  5691                           
  5692                           ; BSR set to: 0
  5693  001E44  2BC0               	incf	pollServos@io& (0+255),f,b
  5694                           
  5695                           ; BSR set to: 0
  5696  001E46  0E0F               	movlw	15
  5697  001E48  65C0               	cpfsgt	pollServos@io& (0+255),b
  5698  001E4A  D791               	goto	l20829
  5699  001E4C  0012               	return	
  5700  001E4E                     __end_of_pollServos:
  5701                           	callstack 0
  5702                           
  5703 ;; *************** function _initBounce *****************
  5704 ;; Defined at:
  5705 ;;		line 91 in file "../../github/CANMIOfirmware/bounce.c"
  5706 ;; Parameters:    Size  Location     Type
  5707 ;;  io              1    wreg     unsigned char 
  5708 ;; Auto vars:     Size  Location     Type
  5709 ;;  io              1   17[BANK0 ] unsigned char 
  5710 ;; Return value:  Size  Location     Type
  5711 ;;                  1    wreg      void 
  5712 ;; Registers used:
  5713 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5714 ;; Tracked objects:
  5715 ;;		On entry : 3F/0
  5716 ;;		On exit  : 3F/0
  5717 ;;		Unchanged: 0/0
  5718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5719 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5720 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5721 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5722 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5723 ;;Total ram usage:        1 bytes
  5724 ;; Hardware stack levels used: 1
  5725 ;; Hardware stack levels required when called: 8
  5726 ;; This function calls:
  5727 ;;		Nothing
  5728 ;; This function is called by:
  5729 ;;		_pollServos
  5730 ;; This function uses a non-reentrant model
  5731 ;;
  5732                           
  5733                           	psect	text5
  5734  00A25C                     __ptext5:
  5735                           	callstack 0
  5736  00A25C                     _initBounce:
  5737                           	callstack 20
  5738                           
  5739                           ; BSR set to: 0
  5740                           ;incstack = 0
  5741                           ;initBounce@io stored from wreg
  5742  00A25C  6F71               	movwf	initBounce@io& (0+255),b
  5743                           
  5744                           ;bounce.c: 92: bounceState[io] = STATE_FIRST_PULL;
  5745  00A25E  0EB4               	movlw	low _bounceState
  5746  00A260  0100               	movlb	0	; () banked
  5747  00A262  2571               	addwf	initBounce@io& (0+255),w,b
  5748  00A264  6ED9               	movwf	fsr2l,c
  5749  00A266  6ADA               	clrf	fsr2h,c
  5750  00A268  0E02               	movlw	high _bounceState
  5751  00A26A  22DA               	addwfc	fsr2h,f,c
  5752  00A26C  0E00               	movlw	0
  5753  00A26E  6EDF               	movwf	indf2,c
  5754                           
  5755                           ; BSR set to: 0
  5756                           ;bounce.c: 93: speed[io] = 0;
  5757  00A270  5171               	movf	initBounce@io& (0+255),w,b
  5758  00A272  0D02               	mullw	2
  5759  00A274  0E00               	movlw	low _speed
  5760  00A276  24F3               	addwf	243,w,c
  5761  00A278  6ED9               	movwf	fsr2l,c
  5762  00A27A  0E01               	movlw	high _speed
  5763  00A27C  20F4               	addwfc	prodh,w,c
  5764  00A27E  6EDA               	movwf	fsr2h,c
  5765  00A280  0E00               	movlw	0
  5766  00A282  6EDE               	movwf	postinc2,c
  5767  00A284  0E00               	movlw	0
  5768  00A286  6EDD               	movwf	postdec2,c
  5769                           
  5770                           ; BSR set to: 0
  5771  00A288  0012               	return		;funcret
  5772  00A28A                     __end_of_initBounce:
  5773                           	callstack 0
  5774                           
  5775 ;; *************** function _bounceUp *****************
  5776 ;; Defined at:
  5777 ;;		line 163 in file "../../github/CANMIOfirmware/bounce.c"
  5778 ;; Parameters:    Size  Location     Type
  5779 ;;  io              1    wreg     unsigned char 
  5780 ;; Auto vars:     Size  Location     Type
  5781 ;;  io              1   26[BANK0 ] unsigned char 
  5782 ;;  midway          1   25[BANK0 ] unsigned char 
  5783 ;;  reversed        1   24[BANK0 ] unsigned char 
  5784 ;; Return value:  Size  Location     Type
  5785 ;;                  1    wreg      unsigned char 
  5786 ;; Registers used:
  5787 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5788 ;; Tracked objects:
  5789 ;;		On entry : 3F/0
  5790 ;;		On exit  : 3F/0
  5791 ;;		Unchanged: 0/0
  5792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5793 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5794 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5795 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5796 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5797 ;;Total ram usage:       10 bytes
  5798 ;; Hardware stack levels used: 1
  5799 ;; Hardware stack levels required when called: 8
  5800 ;; This function calls:
  5801 ;;		Nothing
  5802 ;; This function is called by:
  5803 ;;		_pollServos
  5804 ;; This function uses a non-reentrant model
  5805 ;;
  5806                           
  5807                           	psect	text6
  5808  004AC0                     __ptext6:
  5809                           	callstack 0
  5810  004AC0                     _bounceUp:
  5811                           	callstack 20
  5812                           
  5813                           ; BSR set to: 0
  5814                           ;incstack = 0
  5815                           ;bounceUp@io stored from wreg
  5816  004AC0  6F7A               	movwf	bounceUp@io& (0+255),b
  5817                           
  5818                           ;bounce.c: 164: BOOL reversed = (BOOL)(NV->io[io].nv_io.nv_bounce.bounce_lower_pos > NV-
      +                          >io[io].nv_io.nv_bounce.bounce_upper_pos);
  5819  004AC2  0100               	movlb	0	; () banked
  5820  004AC4  517A               	movf	bounceUp@io& (0+255),w,b
  5821  004AC6  0D07               	mullw	7
  5822  004AC8  C0EC  F071         	movff	_NV,??_bounceUp
  5823  004ACC  C0ED  F072         	movff	_NV+1,??_bounceUp+1
  5824  004AD0  50F3               	movf	243,w,c
  5825  004AD2  2771               	addwf	??_bounceUp& (0+255),f,b
  5826  004AD4  50F4               	movf	244,w,c
  5827  004AD6  2372               	addwfc	(??_bounceUp+1)& (0+255),f,b
  5828  004AD8  0E13               	movlw	19
  5829  004ADA  2571               	addwf	??_bounceUp& (0+255),w,b
  5830  004ADC  6ED9               	movwf	fsr2l,c
  5831  004ADE  0E00               	movlw	0
  5832  004AE0  2172               	addwfc	(??_bounceUp+1)& (0+255),w,b
  5833  004AE2  6EDA               	movwf	fsr2h,c
  5834  004AE4  517A               	movf	bounceUp@io& (0+255),w,b
  5835  004AE6  0D07               	mullw	7
  5836  004AE8  C0EC  F074         	movff	_NV,??_bounceUp+3
  5837  004AEC  C0ED  F075         	movff	_NV+1,??_bounceUp+4
  5838  004AF0  50F3               	movf	243,w,c
  5839  004AF2  2774               	addwf	(??_bounceUp+3)& (0+255),f,b
  5840  004AF4  50F4               	movf	244,w,c
  5841  004AF6  2375               	addwfc	(??_bounceUp+4)& (0+255),f,b
  5842  004AF8  0E12               	movlw	18
  5843  004AFA  2574               	addwf	(??_bounceUp+3)& (0+255),w,b
  5844  004AFC  6EE1               	movwf	fsr1l,c
  5845  004AFE  0E00               	movlw	0
  5846  004B00  2175               	addwfc	(??_bounceUp+4)& (0+255),w,b
  5847  004B02  6EE2               	movwf	fsr1h,c
  5848  004B04  50DE               	movf	postinc2,w,c
  5849  004B06  5CE6               	subwf	postinc1,w,c
  5850  004B08  B0D8               	btfsc	status,0,c
  5851  004B0A  D002               	goto	u10830
  5852  004B0C  0E01               	movlw	1
  5853  004B0E  D001               	goto	u10840
  5854  004B10                     u10830:
  5855  004B10  0E00               	movlw	0
  5856  004B12                     u10840:
  5857  004B12  6F78               	movwf	bounceUp@reversed& (0+255),b
  5858                           
  5859                           ;bounce.c: 165: BYTE midway;;bounce.c: 166: switch(bounceState[io]) {
  5860  004B14  D146               	goto	l10891
  5861  004B16                     l10841:
  5862                           
  5863                           ; BSR set to: 0
  5864                           ;bounce.c: 169: midway = (NV->io[io].nv_io.nv_servo.servo_end_pos)/2U +;bounce.c: 170: (
      +                          NV->io[io].nv_io.nv_servo.servo_start_pos)/2U;
  5865  004B16  517A               	movf	bounceUp@io& (0+255),w,b
  5866  004B18  0D07               	mullw	7
  5867  004B1A  C0EC  F071         	movff	_NV,??_bounceUp
  5868  004B1E  C0ED  F072         	movff	_NV+1,??_bounceUp+1
  5869  004B22  50F3               	movf	243,w,c
  5870  004B24  2771               	addwf	??_bounceUp& (0+255),f,b
  5871  004B26  50F4               	movf	244,w,c
  5872  004B28  2372               	addwfc	(??_bounceUp+1)& (0+255),f,b
  5873  004B2A  0E12               	movlw	18
  5874  004B2C  2571               	addwf	??_bounceUp& (0+255),w,b
  5875  004B2E  6ED9               	movwf	fsr2l,c
  5876  004B30  0E00               	movlw	0
  5877  004B32  2172               	addwfc	(??_bounceUp+1)& (0+255),w,b
  5878  004B34  6EDA               	movwf	fsr2h,c
  5879  004B36  50DF               	movf	indf2,w,c
  5880  004B38  6F73               	movwf	(??_bounceUp+2)& (0+255),b
  5881  004B3A  90D8               	bcf	status,0,c
  5882  004B3C  3373               	rrcf	(??_bounceUp+2)& (0+255),f,b
  5883  004B3E  517A               	movf	bounceUp@io& (0+255),w,b
  5884  004B40  0D07               	mullw	7
  5885  004B42  C0EC  F074         	movff	_NV,??_bounceUp+3
  5886  004B46  C0ED  F075         	movff	_NV+1,??_bounceUp+4
  5887  004B4A  50F3               	movf	243,w,c
  5888  004B4C  2774               	addwf	(??_bounceUp+3)& (0+255),f,b
  5889  004B4E  50F4               	movf	244,w,c
  5890  004B50  2375               	addwfc	(??_bounceUp+4)& (0+255),f,b
  5891  004B52  0E13               	movlw	19
  5892  004B54  2574               	addwf	(??_bounceUp+3)& (0+255),w,b
  5893  004B56  6ED9               	movwf	fsr2l,c
  5894  004B58  0E00               	movlw	0
  5895  004B5A  2175               	addwfc	(??_bounceUp+4)& (0+255),w,b
  5896  004B5C  6EDA               	movwf	fsr2h,c
  5897  004B5E  50DF               	movf	indf2,w,c
  5898  004B60  6F76               	movwf	(??_bounceUp+5)& (0+255),b
  5899  004B62  90D8               	bcf	status,0,c
  5900  004B64  3176               	rrcf	(??_bounceUp+5)& (0+255),w,b
  5901  004B66  2573               	addwf	(??_bounceUp+2)& (0+255),w,b
  5902  004B68  6F79               	movwf	bounceUp@midway& (0+255),b
  5903                           
  5904                           ; BSR set to: 0
  5905                           ;bounce.c: 171: if (reversed) {
  5906  004B6A  5178               	movf	bounceUp@reversed& (0+255),w,b
  5907  004B6C  B4D8               	btfsc	status,2,c
  5908  004B6E  D023               	goto	l10853
  5909                           
  5910                           ; BSR set to: 0
  5911                           ;bounce.c: 172: currentPos[io] -= NV->io[io].nv_io.nv_bounce.bounce_pull_speed;
  5912  004B70  517A               	movf	bounceUp@io& (0+255),w,b
  5913  004B72  0D07               	mullw	7
  5914  004B74  C0EC  F071         	movff	_NV,??_bounceUp
  5915  004B78  C0ED  F072         	movff	_NV+1,??_bounceUp+1
  5916  004B7C  50F3               	movf	243,w,c
  5917  004B7E  2771               	addwf	??_bounceUp& (0+255),f,b
  5918  004B80  50F4               	movf	244,w,c
  5919  004B82  2372               	addwfc	(??_bounceUp+1)& (0+255),f,b
  5920  004B84  0E15               	movlw	21
  5921  004B86  2571               	addwf	??_bounceUp& (0+255),w,b
  5922  004B88  6ED9               	movwf	fsr2l,c
  5923  004B8A  0E00               	movlw	0
  5924  004B8C  2172               	addwfc	(??_bounceUp+1)& (0+255),w,b
  5925  004B8E  6EDA               	movwf	fsr2h,c
  5926  004B90  50DF               	movf	indf2,w,c
  5927  004B92  6F73               	movwf	(??_bounceUp+2)& (0+255),b
  5928  004B94  0E80               	movlw	low _currentPos
  5929  004B96  257A               	addwf	bounceUp@io& (0+255),w,b
  5930  004B98  6ED9               	movwf	fsr2l,c
  5931  004B9A  6ADA               	clrf	fsr2h,c
  5932  004B9C  0E01               	movlw	high _currentPos
  5933  004B9E  22DA               	addwfc	fsr2h,f,c
  5934  004BA0  5173               	movf	(??_bounceUp+2)& (0+255),w,b
  5935  004BA2  5EDF               	subwf	indf2,f,c
  5936                           
  5937                           ; BSR set to: 0
  5938                           ;bounce.c: 173: if (currentPos[io] <= midway) {
  5939  004BA4  0E80               	movlw	low _currentPos
  5940  004BA6  257A               	addwf	bounceUp@io& (0+255),w,b
  5941  004BA8  6ED9               	movwf	fsr2l,c
  5942  004BAA  6ADA               	clrf	fsr2h,c
  5943  004BAC  0E01               	movlw	high _currentPos
  5944  004BAE  22DA               	addwfc	fsr2h,f,c
  5945  004BB0  50DE               	movf	postinc2,w,c
  5946  004BB2  5D79               	subwf	bounceUp@midway& (0+255),w,b
  5947  004BB4  D022               	goto	L38
  5948  004BB6                     l10853:
  5949                           
  5950                           ; BSR set to: 0
  5951                           ;bounce.c: 178: currentPos[io] += NV->io[io].nv_io.nv_bounce.bounce_pull_speed;
  5952  004BB6  517A               	movf	bounceUp@io& (0+255),w,b
  5953  004BB8  0D07               	mullw	7
  5954  004BBA  C0EC  F071         	movff	_NV,??_bounceUp
  5955  004BBE  C0ED  F072         	movff	_NV+1,??_bounceUp+1
  5956  004BC2  50F3               	movf	243,w,c
  5957  004BC4  2771               	addwf	??_bounceUp& (0+255),f,b
  5958  004BC6  50F4               	movf	244,w,c
  5959  004BC8  2372               	addwfc	(??_bounceUp+1)& (0+255),f,b
  5960  004BCA  0E15               	movlw	21
  5961  004BCC  2571               	addwf	??_bounceUp& (0+255),w,b
  5962  004BCE  6ED9               	movwf	fsr2l,c
  5963  004BD0  0E00               	movlw	0
  5964  004BD2  2172               	addwfc	(??_bounceUp+1)& (0+255),w,b
  5965  004BD4  6EDA               	movwf	fsr2h,c
  5966  004BD6  50DF               	movf	indf2,w,c
  5967  004BD8  6F73               	movwf	(??_bounceUp+2)& (0+255),b
  5968  004BDA  0E80               	movlw	low _currentPos
  5969  004BDC  257A               	addwf	bounceUp@io& (0+255),w,b
  5970  004BDE  6ED9               	movwf	fsr2l,c
  5971  004BE0  6ADA               	clrf	fsr2h,c
  5972  004BE2  0E01               	movlw	high _currentPos
  5973  004BE4  22DA               	addwfc	fsr2h,f,c
  5974  004BE6  5173               	movf	(??_bounceUp+2)& (0+255),w,b
  5975  004BE8  26DF               	addwf	indf2,f,c
  5976                           
  5977                           ; BSR set to: 0
  5978                           ;bounce.c: 179: if (currentPos[io] >= midway) {
  5979  004BEA  0E80               	movlw	low _currentPos
  5980  004BEC  257A               	addwf	bounceUp@io& (0+255),w,b
  5981  004BEE  6ED9               	movwf	fsr2l,c
  5982  004BF0  6ADA               	clrf	fsr2h,c
  5983  004BF2  0E01               	movlw	high _currentPos
  5984  004BF4  22DA               	addwfc	fsr2h,f,c
  5985  004BF6  5179               	movf	bounceUp@midway& (0+255),w,b
  5986  004BF8  5CDE               	subwf	postinc2,w,c
  5987  004BFA                     L38:
  5988  004BFA  A0D8               	btfss	status,0,c
  5989  004BFC  D0E2               	goto	l10893
  5990                           
  5991                           ; BSR set to: 0
  5992                           ;bounce.c: 180: bounceState[io] = STATE_PAUSE;
  5993  004BFE  0EB4               	movlw	low _bounceState
  5994  004C00  257A               	addwf	bounceUp@io& (0+255),w,b
  5995  004C02  6ED9               	movwf	fsr2l,c
  5996  004C04  6ADA               	clrf	fsr2h,c
  5997  004C06  0E02               	movlw	high _bounceState
  5998  004C08  22DA               	addwfc	fsr2h,f,c
  5999  004C0A  0E01               	movlw	1
  6000  004C0C  6EDF               	movwf	indf2,c
  6001                           
  6002                           ; BSR set to: 0
  6003                           ;bounce.c: 181: speed[io] = NV->io[io].nv_io.nv_bounce.bounce_pull_pause;
  6004  004C0E  517A               	movf	bounceUp@io& (0+255),w,b
  6005  004C10  0D07               	mullw	7
  6006  004C12  C0EC  F071         	movff	_NV,??_bounceUp
  6007  004C16  C0ED  F072         	movff	_NV+1,??_bounceUp+1
  6008  004C1A  50F3               	movf	243,w,c
  6009  004C1C  2771               	addwf	??_bounceUp& (0+255),f,b
  6010  004C1E  50F4               	movf	244,w,c
  6011  004C20  2372               	addwfc	(??_bounceUp+1)& (0+255),f,b
  6012  004C22  0E16               	movlw	22
  6013  004C24  2571               	addwf	??_bounceUp& (0+255),w,b
  6014  004C26  6ED9               	movwf	fsr2l,c
  6015  004C28  0E00               	movlw	0
  6016  004C2A  2172               	addwfc	(??_bounceUp+1)& (0+255),w,b
  6017  004C2C  6EDA               	movwf	fsr2h,c
  6018  004C2E  50DF               	movf	indf2,w,c
  6019  004C30  6F73               	movwf	(??_bounceUp+2)& (0+255),b
  6020  004C32  6B74               	clrf	(??_bounceUp+3)& (0+255),b
  6021  004C34  517A               	movf	bounceUp@io& (0+255),w,b
  6022  004C36  0D02               	mullw	2
  6023  004C38  0E00               	movlw	low _speed
  6024  004C3A  24F3               	addwf	243,w,c
  6025  004C3C  6ED9               	movwf	fsr2l,c
  6026  004C3E  0E01               	movlw	high _speed
  6027  004C40  20F4               	addwfc	prodh,w,c
  6028  004C42  6EDA               	movwf	fsr2h,c
  6029  004C44  C073  FFDE         	movff	??_bounceUp+2,postinc2
  6030  004C48  C074  FFDD         	movff	??_bounceUp+3,postdec2
  6031  004C4C  D0BA               	goto	l10893
  6032  004C4E                     l10861:
  6033                           
  6034                           ; BSR set to: 0
  6035                           ;bounce.c: 187: if (speed[io] == 0) bounceState[io] = STATE_SECOND_PULL;
  6036  004C4E  517A               	movf	bounceUp@io& (0+255),w,b
  6037  004C50  0D02               	mullw	2
  6038  004C52  0E00               	movlw	low _speed
  6039  004C54  24F3               	addwf	243,w,c
  6040  004C56  6ED9               	movwf	fsr2l,c
  6041  004C58  0E01               	movlw	high _speed
  6042  004C5A  20F4               	addwfc	prodh,w,c
  6043  004C5C  6EDA               	movwf	fsr2h,c
  6044  004C5E  50DE               	movf	postinc2,w,c
  6045  004C60  10DE               	iorwf	postinc2,w,c
  6046  004C62  A4D8               	btfss	status,2,c
  6047  004C64  D008               	goto	l10865
  6048                           
  6049                           ; BSR set to: 0
  6050  004C66  0EB4               	movlw	low _bounceState
  6051  004C68  257A               	addwf	bounceUp@io& (0+255),w,b
  6052  004C6A  6ED9               	movwf	fsr2l,c
  6053  004C6C  6ADA               	clrf	fsr2h,c
  6054  004C6E  0E02               	movlw	high _bounceState
  6055  004C70  22DA               	addwfc	fsr2h,f,c
  6056  004C72  0E02               	movlw	2
  6057  004C74  6EDF               	movwf	indf2,c
  6058  004C76                     l10865:
  6059                           
  6060                           ; BSR set to: 0
  6061                           ;bounce.c: 188: speed[io]--;
  6062  004C76  517A               	movf	bounceUp@io& (0+255),w,b
  6063  004C78  0D02               	mullw	2
  6064  004C7A  0E00               	movlw	low _speed
  6065  004C7C  24F3               	addwf	243,w,c
  6066  004C7E  6ED9               	movwf	fsr2l,c
  6067  004C80  0E01               	movlw	high _speed
  6068  004C82  20F4               	addwfc	prodh,w,c
  6069  004C84  6EDA               	movwf	fsr2h,c
  6070  004C86  06DE               	decf	postinc2,f,c
  6071  004C88  0E00               	movlw	0
  6072  004C8A  5ADD               	subwfb	postdec2,f,c
  6073                           
  6074                           ;bounce.c: 189: break;
  6075  004C8C  D09A               	goto	l10893
  6076  004C8E                     l10867:
  6077                           
  6078                           ; BSR set to: 0
  6079                           ;bounce.c: 192: if (reversed) {
  6080  004C8E  5178               	movf	bounceUp@reversed& (0+255),w,b
  6081  004C90  B4D8               	btfsc	status,2,c
  6082  004C92  D048               	goto	l10879
  6083                           
  6084                           ; BSR set to: 0
  6085                           ;bounce.c: 193: currentPos[io] -= NV->io[io].nv_io.nv_bounce.bounce_pull_speed;
  6086  004C94  517A               	movf	bounceUp@io& (0+255),w,b
  6087  004C96  0D07               	mullw	7
  6088  004C98  C0EC  F071         	movff	_NV,??_bounceUp
  6089  004C9C  C0ED  F072         	movff	_NV+1,??_bounceUp+1
  6090  004CA0  50F3               	movf	243,w,c
  6091  004CA2  2771               	addwf	??_bounceUp& (0+255),f,b
  6092  004CA4  50F4               	movf	244,w,c
  6093  004CA6  2372               	addwfc	(??_bounceUp+1)& (0+255),f,b
  6094  004CA8  0E15               	movlw	21
  6095  004CAA  2571               	addwf	??_bounceUp& (0+255),w,b
  6096  004CAC  6ED9               	movwf	fsr2l,c
  6097  004CAE  0E00               	movlw	0
  6098  004CB0  2172               	addwfc	(??_bounceUp+1)& (0+255),w,b
  6099  004CB2  6EDA               	movwf	fsr2h,c
  6100  004CB4  50DF               	movf	indf2,w,c
  6101  004CB6  6F73               	movwf	(??_bounceUp+2)& (0+255),b
  6102  004CB8  0E80               	movlw	low _currentPos
  6103  004CBA  257A               	addwf	bounceUp@io& (0+255),w,b
  6104  004CBC  6ED9               	movwf	fsr2l,c
  6105  004CBE  6ADA               	clrf	fsr2h,c
  6106  004CC0  0E01               	movlw	high _currentPos
  6107  004CC2  22DA               	addwfc	fsr2h,f,c
  6108  004CC4  5173               	movf	(??_bounceUp+2)& (0+255),w,b
  6109  004CC6  5EDF               	subwf	indf2,f,c
  6110                           
  6111                           ; BSR set to: 0
  6112                           ;bounce.c: 194: if (currentPos[io]<=targetPos[io]-3) {
  6113  004CC8  0E80               	movlw	low _currentPos
  6114  004CCA  257A               	addwf	bounceUp@io& (0+255),w,b
  6115  004CCC  6ED9               	movwf	fsr2l,c
  6116  004CCE  6ADA               	clrf	fsr2h,c
  6117  004CD0  0E01               	movlw	high _currentPos
  6118  004CD2  22DA               	addwfc	fsr2h,f,c
  6119  004CD4  50DF               	movf	indf2,w,c
  6120  004CD6  6F71               	movwf	??_bounceUp& (0+255),b
  6121  004CD8  6B72               	clrf	(??_bounceUp+1)& (0+255),b
  6122  004CDA  0EFD               	movlw	253
  6123  004CDC  6F73               	movwf	(??_bounceUp+2)& (0+255),b
  6124  004CDE  0EFF               	movlw	255
  6125  004CE0  6F74               	movwf	(??_bounceUp+3)& (0+255),b
  6126  004CE2  0E70               	movlw	low _targetPos
  6127  004CE4  257A               	addwf	bounceUp@io& (0+255),w,b
  6128  004CE6  6ED9               	movwf	fsr2l,c
  6129  004CE8  6ADA               	clrf	fsr2h,c
  6130  004CEA  0E01               	movlw	high _targetPos
  6131  004CEC  22DA               	addwfc	fsr2h,f,c
  6132  004CEE  50DF               	movf	indf2,w,c
  6133  004CF0  6F75               	movwf	(??_bounceUp+4)& (0+255),b
  6134  004CF2  6B76               	clrf	(??_bounceUp+5)& (0+255),b
  6135  004CF4  5173               	movf	(??_bounceUp+2)& (0+255),w,b
  6136  004CF6  2775               	addwf	(??_bounceUp+4)& (0+255),f,b
  6137  004CF8  5174               	movf	(??_bounceUp+3)& (0+255),w,b
  6138  004CFA  2376               	addwfc	(??_bounceUp+5)& (0+255),f,b
  6139  004CFC  5171               	movf	??_bounceUp& (0+255),w,b
  6140  004CFE  5D75               	subwf	(??_bounceUp+4)& (0+255),w,b
  6141  004D00  5176               	movf	(??_bounceUp+5)& (0+255),w,b
  6142  004D02  0A80               	xorlw	128
  6143  004D04  6F77               	movwf	(??_bounceUp+6)& (0+255),b
  6144  004D06  5172               	movf	(??_bounceUp+1)& (0+255),w,b
  6145  004D08  0A80               	xorlw	128
  6146  004D0A  5977               	subwfb	(??_bounceUp+6)& (0+255),w,b
  6147  004D0C  A0D8               	btfss	status,0,c
  6148  004D0E  D059               	goto	l10893
  6149  004D10                     u10900:
  6150                           
  6151                           ; BSR set to: 0
  6152                           ;bounce.c: 195: bounceState[io] = STATE_DONE;
  6153  004D10  0EB4               	movlw	low _bounceState
  6154  004D12  257A               	addwf	bounceUp@io& (0+255),w,b
  6155  004D14  6ED9               	movwf	fsr2l,c
  6156  004D16  6ADA               	clrf	fsr2h,c
  6157  004D18  0E02               	movlw	high _bounceState
  6158  004D1A  22DA               	addwfc	fsr2h,f,c
  6159  004D1C  0E03               	movlw	3
  6160  004D1E  6EDF               	movwf	indf2,c
  6161                           
  6162                           ; BSR set to: 0
  6163                           ;bounce.c: 196: return 1;
  6164  004D20  0E01               	movlw	1
  6165  004D22  0012               	return	
  6166  004D24                     l10879:
  6167                           
  6168                           ; BSR set to: 0
  6169                           ;bounce.c: 199: currentPos[io] += NV->io[io].nv_io.nv_bounce.bounce_pull_speed;
  6170  004D24  517A               	movf	bounceUp@io& (0+255),w,b
  6171  004D26  0D07               	mullw	7
  6172  004D28  C0EC  F071         	movff	_NV,??_bounceUp
  6173  004D2C  C0ED  F072         	movff	_NV+1,??_bounceUp+1
  6174  004D30  50F3               	movf	243,w,c
  6175  004D32  2771               	addwf	??_bounceUp& (0+255),f,b
  6176  004D34  50F4               	movf	244,w,c
  6177  004D36  2372               	addwfc	(??_bounceUp+1)& (0+255),f,b
  6178  004D38  0E15               	movlw	21
  6179  004D3A  2571               	addwf	??_bounceUp& (0+255),w,b
  6180  004D3C  6ED9               	movwf	fsr2l,c
  6181  004D3E  0E00               	movlw	0
  6182  004D40  2172               	addwfc	(??_bounceUp+1)& (0+255),w,b
  6183  004D42  6EDA               	movwf	fsr2h,c
  6184  004D44  50DF               	movf	indf2,w,c
  6185  004D46  6F73               	movwf	(??_bounceUp+2)& (0+255),b
  6186  004D48  0E80               	movlw	low _currentPos
  6187  004D4A  257A               	addwf	bounceUp@io& (0+255),w,b
  6188  004D4C  6ED9               	movwf	fsr2l,c
  6189  004D4E  6ADA               	clrf	fsr2h,c
  6190  004D50  0E01               	movlw	high _currentPos
  6191  004D52  22DA               	addwfc	fsr2h,f,c
  6192  004D54  5173               	movf	(??_bounceUp+2)& (0+255),w,b
  6193  004D56  26DF               	addwf	indf2,f,c
  6194                           
  6195                           ; BSR set to: 0
  6196                           ;bounce.c: 200: if (currentPos[io]>=targetPos[io]-3) {
  6197  004D58  0EFD               	movlw	253
  6198  004D5A  6F71               	movwf	??_bounceUp& (0+255),b
  6199  004D5C  0EFF               	movlw	255
  6200  004D5E  6F72               	movwf	(??_bounceUp+1)& (0+255),b
  6201  004D60  0E70               	movlw	low _targetPos
  6202  004D62  257A               	addwf	bounceUp@io& (0+255),w,b
  6203  004D64  6ED9               	movwf	fsr2l,c
  6204  004D66  6ADA               	clrf	fsr2h,c
  6205  004D68  0E01               	movlw	high _targetPos
  6206  004D6A  22DA               	addwfc	fsr2h,f,c
  6207  004D6C  50DF               	movf	indf2,w,c
  6208  004D6E  6F73               	movwf	(??_bounceUp+2)& (0+255),b
  6209  004D70  6B74               	clrf	(??_bounceUp+3)& (0+255),b
  6210  004D72  5171               	movf	??_bounceUp& (0+255),w,b
  6211  004D74  2773               	addwf	(??_bounceUp+2)& (0+255),f,b
  6212  004D76  5172               	movf	(??_bounceUp+1)& (0+255),w,b
  6213  004D78  2374               	addwfc	(??_bounceUp+3)& (0+255),f,b
  6214  004D7A  0E80               	movlw	low _currentPos
  6215  004D7C  257A               	addwf	bounceUp@io& (0+255),w,b
  6216  004D7E  6ED9               	movwf	fsr2l,c
  6217  004D80  6ADA               	clrf	fsr2h,c
  6218  004D82  0E01               	movlw	high _currentPos
  6219  004D84  22DA               	addwfc	fsr2h,f,c
  6220  004D86  50DF               	movf	indf2,w,c
  6221  004D88  6F75               	movwf	(??_bounceUp+4)& (0+255),b
  6222  004D8A  6B76               	clrf	(??_bounceUp+5)& (0+255),b
  6223  004D8C  5173               	movf	(??_bounceUp+2)& (0+255),w,b
  6224  004D8E  5D75               	subwf	(??_bounceUp+4)& (0+255),w,b
  6225  004D90  5176               	movf	(??_bounceUp+5)& (0+255),w,b
  6226  004D92  0A80               	xorlw	128
  6227  004D94  6F77               	movwf	(??_bounceUp+6)& (0+255),b
  6228  004D96  5174               	movf	(??_bounceUp+3)& (0+255),w,b
  6229  004D98  0A80               	xorlw	128
  6230  004D9A  5977               	subwfb	(??_bounceUp+6)& (0+255),w,b
  6231  004D9C  B0D8               	btfsc	status,0,c
  6232  004D9E  D7B8               	goto	u10900
  6233  004DA0  D010               	goto	l10893
  6234  004DA2                     l10891:
  6235                           
  6236                           ; BSR set to: 0
  6237  004DA2  0EB4               	movlw	low _bounceState
  6238  004DA4  257A               	addwf	bounceUp@io& (0+255),w,b
  6239  004DA6  6ED9               	movwf	fsr2l,c
  6240  004DA8  6ADA               	clrf	fsr2h,c
  6241  004DAA  0E02               	movlw	high _bounceState
  6242  004DAC  22DA               	addwfc	fsr2h,f,c
  6243  004DAE  50DF               	movf	indf2,w,c
  6244                           
  6245                           ; Switch size 1, requested type "simple"
  6246                           ; Number of cases is 3, Range of values is 0 to 2
  6247                           ; switch strategies available:
  6248                           ; Name         Instructions Cycles
  6249                           ; simple_byte           10     6 (average)
  6250                           ;	Chosen strategy is simple_byte
  6251  004DB0  0A00               	xorlw	0	; case 0
  6252  004DB2  B4D8               	btfsc	status,2,c
  6253  004DB4  D6B0               	goto	l10841
  6254  004DB6  0A01               	xorlw	1	; case 1
  6255  004DB8  B4D8               	btfsc	status,2,c
  6256  004DBA  D749               	goto	l10861
  6257  004DBC  0A03               	xorlw	3	; case 2
  6258  004DBE  B4D8               	btfsc	status,2,c
  6259  004DC0  D766               	goto	l10867
  6260  004DC2                     l10893:
  6261                           
  6262                           ; BSR set to: 0
  6263                           ;bounce.c: 207: return 0;
  6264  004DC2  0E00               	movlw	0
  6265                           
  6266                           ; BSR set to: 0
  6267  004DC4  0012               	return		;funcret
  6268  004DC6                     __end_of_bounceUp:
  6269                           	callstack 0
  6270                           
  6271 ;; *************** function _bounceDown *****************
  6272 ;; Defined at:
  6273 ;;		line 105 in file "../../github/CANMIOfirmware/bounce.c"
  6274 ;; Parameters:    Size  Location     Type
  6275 ;;  io              1    wreg     unsigned char 
  6276 ;; Auto vars:     Size  Location     Type
  6277 ;;  io              1   41[BANK0 ] unsigned char 
  6278 ;;  tmp             2   39[BANK0 ] int 
  6279 ;;  reversed        1   38[BANK0 ] unsigned char 
  6280 ;; Return value:  Size  Location     Type
  6281 ;;                  1    wreg      unsigned char 
  6282 ;; Registers used:
  6283 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6284 ;; Tracked objects:
  6285 ;;		On entry : 3F/0
  6286 ;;		On exit  : 3F/0
  6287 ;;		Unchanged: 0/0
  6288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6289 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6290 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6291 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6292 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6293 ;;Total ram usage:       11 bytes
  6294 ;; Hardware stack levels used: 1
  6295 ;; Hardware stack levels required when called: 9
  6296 ;; This function calls:
  6297 ;;		___awdiv
  6298 ;;		___wmul
  6299 ;; This function is called by:
  6300 ;;		_pollServos
  6301 ;; This function uses a non-reentrant model
  6302 ;;
  6303                           
  6304                           	psect	text7
  6305  003522                     __ptext7:
  6306                           	callstack 0
  6307  003522                     _bounceDown:
  6308                           	callstack 19
  6309                           
  6310                           ; BSR set to: 0
  6311                           ;incstack = 0
  6312                           ;bounceDown@io stored from wreg
  6313  003522  6F89               	movwf	bounceDown@io& (0+255),b
  6314                           
  6315                           ;bounce.c: 107: if ( (currentPos[io]>targetPos[io]+3) || (currentPos[io]<targetPos[io]-3
      +                          ) || (speed[io]>3) || (speed[io]<-3)) {
  6316  003524  0E80               	movlw	low _currentPos
  6317  003526  0100               	movlb	0	; () banked
  6318  003528  2589               	addwf	bounceDown@io& (0+255),w,b
  6319  00352A  6ED9               	movwf	fsr2l,c
  6320  00352C  6ADA               	clrf	fsr2h,c
  6321  00352E  0E01               	movlw	high _currentPos
  6322  003530  22DA               	addwfc	fsr2h,f,c
  6323  003532  50DF               	movf	indf2,w,c
  6324  003534  6F7F               	movwf	??_bounceDown& (0+255),b
  6325  003536  6B80               	clrf	(??_bounceDown+1)& (0+255),b
  6326  003538  0E70               	movlw	low _targetPos
  6327  00353A  2589               	addwf	bounceDown@io& (0+255),w,b
  6328  00353C  6ED9               	movwf	fsr2l,c
  6329  00353E  6ADA               	clrf	fsr2h,c
  6330  003540  0E01               	movlw	high _targetPos
  6331  003542  22DA               	addwfc	fsr2h,f,c
  6332  003544  50DF               	movf	indf2,w,c
  6333  003546  6F81               	movwf	(??_bounceDown+2)& (0+255),b
  6334  003548  6B82               	clrf	(??_bounceDown+3)& (0+255),b
  6335  00354A  0E03               	movlw	3
  6336  00354C  2781               	addwf	(??_bounceDown+2)& (0+255),f,b
  6337  00354E  0E00               	movlw	0
  6338  003550  2382               	addwfc	(??_bounceDown+3)& (0+255),f,b
  6339  003552  517F               	movf	??_bounceDown& (0+255),w,b
  6340  003554  5D81               	subwf	(??_bounceDown+2)& (0+255),w,b
  6341  003556  5182               	movf	(??_bounceDown+3)& (0+255),w,b
  6342  003558  0A80               	xorlw	128
  6343  00355A  6F83               	movwf	(??_bounceDown+4)& (0+255),b
  6344  00355C  5180               	movf	(??_bounceDown+1)& (0+255),w,b
  6345  00355E  0A80               	xorlw	128
  6346  003560  5983               	subwfb	(??_bounceDown+4)& (0+255),w,b
  6347  003562  A0D8               	btfss	status,0,c
  6348  003564  D047               	goto	u24690
  6349                           
  6350                           ; BSR set to: 0
  6351  003566  0EFD               	movlw	253
  6352  003568  6F7F               	movwf	??_bounceDown& (0+255),b
  6353  00356A  0EFF               	movlw	255
  6354  00356C  6F80               	movwf	(??_bounceDown+1)& (0+255),b
  6355  00356E  0E70               	movlw	low _targetPos
  6356  003570  2589               	addwf	bounceDown@io& (0+255),w,b
  6357  003572  6ED9               	movwf	fsr2l,c
  6358  003574  6ADA               	clrf	fsr2h,c
  6359  003576  0E01               	movlw	high _targetPos
  6360  003578  22DA               	addwfc	fsr2h,f,c
  6361  00357A  50DF               	movf	indf2,w,c
  6362  00357C  6F81               	movwf	(??_bounceDown+2)& (0+255),b
  6363  00357E  6B82               	clrf	(??_bounceDown+3)& (0+255),b
  6364  003580  517F               	movf	??_bounceDown& (0+255),w,b
  6365  003582  2781               	addwf	(??_bounceDown+2)& (0+255),f,b
  6366  003584  5180               	movf	(??_bounceDown+1)& (0+255),w,b
  6367  003586  2382               	addwfc	(??_bounceDown+3)& (0+255),f,b
  6368  003588  0E80               	movlw	low _currentPos
  6369  00358A  2589               	addwf	bounceDown@io& (0+255),w,b
  6370  00358C  6ED9               	movwf	fsr2l,c
  6371  00358E  6ADA               	clrf	fsr2h,c
  6372  003590  0E01               	movlw	high _currentPos
  6373  003592  22DA               	addwfc	fsr2h,f,c
  6374  003594  50DF               	movf	indf2,w,c
  6375  003596  6F83               	movwf	(??_bounceDown+4)& (0+255),b
  6376  003598  6B84               	clrf	(??_bounceDown+5)& (0+255),b
  6377  00359A  5181               	movf	(??_bounceDown+2)& (0+255),w,b
  6378  00359C  5D83               	subwf	(??_bounceDown+4)& (0+255),w,b
  6379  00359E  5184               	movf	(??_bounceDown+5)& (0+255),w,b
  6380  0035A0  0A80               	xorlw	128
  6381  0035A2  6F85               	movwf	(??_bounceDown+6)& (0+255),b
  6382  0035A4  5182               	movf	(??_bounceDown+3)& (0+255),w,b
  6383  0035A6  0A80               	xorlw	128
  6384  0035A8  5985               	subwfb	(??_bounceDown+6)& (0+255),w,b
  6385  0035AA  A0D8               	btfss	status,0,c
  6386  0035AC  D023               	goto	u24690
  6387                           
  6388                           ; BSR set to: 0
  6389  0035AE  5189               	movf	bounceDown@io& (0+255),w,b
  6390  0035B0  0D02               	mullw	2
  6391  0035B2  0E00               	movlw	low _speed
  6392  0035B4  24F3               	addwf	243,w,c
  6393  0035B6  6ED9               	movwf	fsr2l,c
  6394  0035B8  0E01               	movlw	high _speed
  6395  0035BA  20F4               	addwfc	prodh,w,c
  6396  0035BC  6EDA               	movwf	fsr2h,c
  6397  0035BE  0E01               	movlw	1
  6398  0035C0  BEDB               	btfsc	plusw2,7,c
  6399  0035C2  D007               	goto	u24680
  6400  0035C4  0E01               	movlw	1
  6401  0035C6  50DB               	movf	plusw2,w,c
  6402  0035C8  E115               	bnz	l19905
  6403  0035CA  0E04               	movlw	4
  6404  0035CC  5CDE               	subwf	postinc2,w,c
  6405  0035CE  B0D8               	btfsc	status,0,c
  6406  0035D0  D011               	goto	u24690
  6407  0035D2                     u24680:
  6408                           
  6409                           ; BSR set to: 0
  6410  0035D2  5189               	movf	bounceDown@io& (0+255),w,b
  6411  0035D4  0D02               	mullw	2
  6412  0035D6  0E00               	movlw	low _speed
  6413  0035D8  24F3               	addwf	243,w,c
  6414  0035DA  6ED9               	movwf	fsr2l,c
  6415  0035DC  0E01               	movlw	high _speed
  6416  0035DE  20F4               	addwfc	prodh,w,c
  6417  0035E0  6EDA               	movwf	fsr2h,c
  6418  0035E2  0E01               	movlw	1
  6419  0035E4  AEDB               	btfss	plusw2,7,c
  6420  0035E6  D203               	goto	l19933
  6421  0035E8  0EFD               	movlw	253
  6422  0035EA  5CDE               	subwf	postinc2,w,c
  6423  0035EC  0EFF               	movlw	255
  6424  0035EE  58DE               	subwfb	postinc2,w,c
  6425  0035F0  B0D8               	btfsc	status,0,c
  6426  0035F2  D1FD               	goto	l19933
  6427  0035F4                     u24690:
  6428  0035F4                     l19905:
  6429                           
  6430                           ; BSR set to: 0
  6431                           ;bounce.c: 108: BOOL reversed = (BOOL)(NV->io[io].nv_io.nv_bounce.bounce_lower_pos > NV-
      +                          >io[io].nv_io.nv_bounce.bounce_upper_pos);
  6432  0035F4  5189               	movf	bounceDown@io& (0+255),w,b
  6433  0035F6  0D07               	mullw	7
  6434  0035F8  C0EC  F07F         	movff	_NV,??_bounceDown
  6435  0035FC  C0ED  F080         	movff	_NV+1,??_bounceDown+1
  6436  003600  50F3               	movf	243,w,c
  6437  003602  277F               	addwf	??_bounceDown& (0+255),f,b
  6438  003604  50F4               	movf	244,w,c
  6439  003606  2380               	addwfc	(??_bounceDown+1)& (0+255),f,b
  6440  003608  0E13               	movlw	19
  6441  00360A  257F               	addwf	??_bounceDown& (0+255),w,b
  6442  00360C  6ED9               	movwf	fsr2l,c
  6443  00360E  0E00               	movlw	0
  6444  003610  2180               	addwfc	(??_bounceDown+1)& (0+255),w,b
  6445  003612  6EDA               	movwf	fsr2h,c
  6446  003614  5189               	movf	bounceDown@io& (0+255),w,b
  6447  003616  0D07               	mullw	7
  6448  003618  C0EC  F082         	movff	_NV,??_bounceDown+3
  6449  00361C  C0ED  F083         	movff	_NV+1,??_bounceDown+4
  6450  003620  50F3               	movf	243,w,c
  6451  003622  2782               	addwf	(??_bounceDown+3)& (0+255),f,b
  6452  003624  50F4               	movf	244,w,c
  6453  003626  2383               	addwfc	(??_bounceDown+4)& (0+255),f,b
  6454  003628  0E12               	movlw	18
  6455  00362A  2582               	addwf	(??_bounceDown+3)& (0+255),w,b
  6456  00362C  6EE1               	movwf	fsr1l,c
  6457  00362E  0E00               	movlw	0
  6458  003630  2183               	addwfc	(??_bounceDown+4)& (0+255),w,b
  6459  003632  6EE2               	movwf	fsr1h,c
  6460  003634  50DE               	movf	postinc2,w,c
  6461  003636  5CE6               	subwf	postinc1,w,c
  6462  003638  B0D8               	btfsc	status,0,c
  6463  00363A  D002               	goto	u24700
  6464  00363C  0E01               	movlw	1
  6465  00363E  D001               	goto	u24710
  6466  003640                     u24700:
  6467  003640  0E00               	movlw	0
  6468  003642                     u24710:
  6469  003642  6F86               	movwf	bounceDown@reversed& (0+255),b
  6470                           
  6471                           ; BSR set to: 0
  6472                           ;bounce.c: 109: int tmp;;bounce.c: 111: if (! reversed) {
  6473  003644  5186               	movf	bounceDown@reversed& (0+255),w,b
  6474  003646  A4D8               	btfss	status,2,c
  6475  003648  D0EB               	goto	l19919
  6476                           
  6477                           ; BSR set to: 0
  6478                           ;bounce.c: 113: if (currentPos[io] < (NV->io[io].nv_io.nv_bounce.bounce_lower_pos + spee
      +                          d[io]/30)) {
  6479  00364A  5189               	movf	bounceDown@io& (0+255),w,b
  6480  00364C  0D02               	mullw	2
  6481  00364E  0E00               	movlw	low _speed
  6482  003650  24F3               	addwf	243,w,c
  6483  003652  6ED9               	movwf	fsr2l,c
  6484  003654  0E01               	movlw	high _speed
  6485  003656  20F4               	addwfc	prodh,w,c
  6486  003658  6EDA               	movwf	fsr2h,c
  6487  00365A  CFDE F077          	movff	postinc2,___awdiv@dividend
  6488  00365E  CFDD F078          	movff	postdec2,___awdiv@dividend+1
  6489  003662  0E00               	movlw	0
  6490  003664  6F7A               	movwf	(___awdiv@divisor+1)& (0+255),b
  6491  003666  0E1E               	movlw	30
  6492  003668  6F79               	movwf	___awdiv@divisor& (0+255),b
  6493  00366A  EC30  F046         	call	___awdiv	;wreg free
  6494  00366E  5189               	movf	bounceDown@io& (0+255),w,b
  6495  003670  0D07               	mullw	7
  6496  003672  C0EC  F07F         	movff	_NV,??_bounceDown
  6497  003676  C0ED  F080         	movff	_NV+1,??_bounceDown+1
  6498  00367A  50F3               	movf	243,w,c
  6499  00367C  277F               	addwf	??_bounceDown& (0+255),f,b
  6500  00367E  50F4               	movf	244,w,c
  6501  003680  2380               	addwfc	(??_bounceDown+1)& (0+255),f,b
  6502  003682  0E13               	movlw	19
  6503  003684  257F               	addwf	??_bounceDown& (0+255),w,b
  6504  003686  6ED9               	movwf	fsr2l,c
  6505  003688  0E00               	movlw	0
  6506  00368A  2180               	addwfc	(??_bounceDown+1)& (0+255),w,b
  6507  00368C  6EDA               	movwf	fsr2h,c
  6508  00368E  50DF               	movf	indf2,w,c
  6509  003690  6F81               	movwf	(??_bounceDown+2)& (0+255),b
  6510  003692  6B82               	clrf	(??_bounceDown+3)& (0+255),b
  6511  003694  5177               	movf	?___awdiv& (0+255),w,b
  6512  003696  2781               	addwf	(??_bounceDown+2)& (0+255),f,b
  6513  003698  5178               	movf	(?___awdiv+1)& (0+255),w,b
  6514  00369A  2382               	addwfc	(??_bounceDown+3)& (0+255),f,b
  6515  00369C  0E80               	movlw	low _currentPos
  6516  00369E  2589               	addwf	bounceDown@io& (0+255),w,b
  6517  0036A0  6ED9               	movwf	fsr2l,c
  6518  0036A2  6ADA               	clrf	fsr2h,c
  6519  0036A4  0E01               	movlw	high _currentPos
  6520  0036A6  22DA               	addwfc	fsr2h,f,c
  6521  0036A8  50DF               	movf	indf2,w,c
  6522  0036AA  6F83               	movwf	(??_bounceDown+4)& (0+255),b
  6523  0036AC  6B84               	clrf	(??_bounceDown+5)& (0+255),b
  6524  0036AE  5181               	movf	(??_bounceDown+2)& (0+255),w,b
  6525  0036B0  5D83               	subwf	(??_bounceDown+4)& (0+255),w,b
  6526  0036B2  5184               	movf	(??_bounceDown+5)& (0+255),w,b
  6527  0036B4  0A80               	xorlw	128
  6528  0036B6  6F85               	movwf	(??_bounceDown+6)& (0+255),b
  6529  0036B8  5182               	movf	(??_bounceDown+3)& (0+255),w,b
  6530  0036BA  0A80               	xorlw	128
  6531  0036BC  5985               	subwfb	(??_bounceDown+6)& (0+255),w,b
  6532  0036BE  B0D8               	btfsc	status,0,c
  6533  0036C0  D086               	goto	l19915
  6534                           
  6535                           ; BSR set to: 0
  6536                           ;bounce.c: 116: speed[io] = (-speed[io]*NV->io[io].nv_io.nv_bounce.bounce_coeff)/100;
  6537  0036C2  5189               	movf	bounceDown@io& (0+255),w,b
  6538  0036C4  0D07               	mullw	7
  6539  0036C6  C0EC  F07F         	movff	_NV,??_bounceDown
  6540  0036CA  C0ED  F080         	movff	_NV+1,??_bounceDown+1
  6541  0036CE  50F3               	movf	243,w,c
  6542  0036D0  277F               	addwf	??_bounceDown& (0+255),f,b
  6543  0036D2  50F4               	movf	244,w,c
  6544  0036D4  2380               	addwfc	(??_bounceDown+1)& (0+255),f,b
  6545  0036D6  0E14               	movlw	20
  6546  0036D8  257F               	addwf	??_bounceDown& (0+255),w,b
  6547  0036DA  6ED9               	movwf	fsr2l,c
  6548  0036DC  0E00               	movlw	0
  6549  0036DE  2180               	addwfc	(??_bounceDown+1)& (0+255),w,b
  6550  0036E0  6EDA               	movwf	fsr2h,c
  6551  0036E2  50DF               	movf	indf2,w,c
  6552  0036E4  6F81               	movwf	(??_bounceDown+2)& (0+255),b
  6553  0036E6  5181               	movf	(??_bounceDown+2)& (0+255),w,b
  6554  0036E8  6F71               	movwf	___wmul@multiplier& (0+255),b
  6555  0036EA  6B72               	clrf	(___wmul@multiplier+1)& (0+255),b
  6556  0036EC  5189               	movf	bounceDown@io& (0+255),w,b
  6557  0036EE  0D02               	mullw	2
  6558  0036F0  0E00               	movlw	low _speed
  6559  0036F2  24F3               	addwf	243,w,c
  6560  0036F4  6ED9               	movwf	fsr2l,c
  6561  0036F6  0E01               	movlw	high _speed
  6562  0036F8  20F4               	addwfc	prodh,w,c
  6563  0036FA  6EDA               	movwf	fsr2h,c
  6564  0036FC  CFDE F082          	movff	postinc2,??_bounceDown+3
  6565  003700  CFDD F083          	movff	postdec2,??_bounceDown+4
  6566  003704  1F82               	comf	(??_bounceDown+3)& (0+255),f,b
  6567  003706  1F83               	comf	(??_bounceDown+4)& (0+255),f,b
  6568  003708  4B82               	infsnz	(??_bounceDown+3)& (0+255),f,b
  6569  00370A  2B83               	incf	(??_bounceDown+4)& (0+255),f,b
  6570  00370C  C082  F073         	movff	??_bounceDown+3,___wmul@multiplicand
  6571  003710  C083  F074         	movff	??_bounceDown+4,___wmul@multiplicand+1
  6572  003714  ECF0  F051         	call	___wmul	;wreg free
  6573  003718  C071  F077         	movff	?___wmul,___awdiv@dividend
  6574  00371C  C072  F078         	movff	?___wmul+1,___awdiv@dividend+1
  6575  003720  0E00               	movlw	0
  6576  003722  6F7A               	movwf	(___awdiv@divisor+1)& (0+255),b
  6577  003724  0E64               	movlw	100
  6578  003726  6F79               	movwf	___awdiv@divisor& (0+255),b
  6579  003728  EC30  F046         	call	___awdiv	;wreg free
  6580  00372C  5189               	movf	bounceDown@io& (0+255),w,b
  6581  00372E  0D02               	mullw	2
  6582  003730  0E00               	movlw	low _speed
  6583  003732  24F3               	addwf	243,w,c
  6584  003734  6ED9               	movwf	fsr2l,c
  6585  003736  0E01               	movlw	high _speed
  6586  003738  20F4               	addwfc	prodh,w,c
  6587  00373A  6EDA               	movwf	fsr2h,c
  6588  00373C  C077  FFDE         	movff	?___awdiv,postinc2
  6589  003740  C078  FFDD         	movff	?___awdiv+1,postdec2
  6590                           
  6591                           ;bounce.c: 118: tmp = NV->io[io].nv_io.nv_bounce.bounce_lower_pos -;bounce.c: 119: (curr
      +                          entPos[io] - NV->io[io].nv_io.nv_bounce.bounce_lower_pos) -;bounce.c: 120: (speed[io]/30
      +                          );
  6592  003744  5189               	movf	bounceDown@io& (0+255),w,b
  6593  003746  0D02               	mullw	2
  6594  003748  0E00               	movlw	low _speed
  6595  00374A  24F3               	addwf	243,w,c
  6596  00374C  6ED9               	movwf	fsr2l,c
  6597  00374E  0E01               	movlw	high _speed
  6598  003750  20F4               	addwfc	prodh,w,c
  6599  003752  6EDA               	movwf	fsr2h,c
  6600  003754  CFDE F077          	movff	postinc2,___awdiv@dividend
  6601  003758  CFDD F078          	movff	postdec2,___awdiv@dividend+1
  6602  00375C  0E00               	movlw	0
  6603  00375E  6F7A               	movwf	(___awdiv@divisor+1)& (0+255),b
  6604  003760  0E1E               	movlw	30
  6605  003762  6F79               	movwf	___awdiv@divisor& (0+255),b
  6606  003764  EC30  F046         	call	___awdiv	;wreg free
  6607  003768  5189               	movf	bounceDown@io& (0+255),w,b
  6608  00376A  0D07               	mullw	7
  6609  00376C  C0EC  F07F         	movff	_NV,??_bounceDown
  6610  003770  C0ED  F080         	movff	_NV+1,??_bounceDown+1
  6611  003774  50F3               	movf	243,w,c
  6612  003776  277F               	addwf	??_bounceDown& (0+255),f,b
  6613  003778  50F4               	movf	244,w,c
  6614  00377A  2380               	addwfc	(??_bounceDown+1)& (0+255),f,b
  6615  00377C  0E13               	movlw	19
  6616  00377E  257F               	addwf	??_bounceDown& (0+255),w,b
  6617  003780  6ED9               	movwf	fsr2l,c
  6618  003782  0E00               	movlw	0
  6619  003784  2180               	addwfc	(??_bounceDown+1)& (0+255),w,b
  6620  003786  6EDA               	movwf	fsr2h,c
  6621  003788  50DF               	movf	indf2,w,c
  6622  00378A  6F81               	movwf	(??_bounceDown+2)& (0+255),b
  6623  00378C  5181               	movf	(??_bounceDown+2)& (0+255),w,b
  6624  00378E  0D02               	mullw	2
  6625  003790  CFF3 F082          	movff	prodl,??_bounceDown+3
  6626  003794  CFF4 F083          	movff	prodh,??_bounceDown+4
  6627  003798  0E80               	movlw	low _currentPos
  6628  00379A  2589               	addwf	bounceDown@io& (0+255),w,b
  6629  00379C  6ED9               	movwf	fsr2l,c
  6630  00379E  6ADA               	clrf	fsr2h,c
  6631  0037A0  0E01               	movlw	high _currentPos
  6632  0037A2  22DA               	addwfc	fsr2h,f,c
  6633  0037A4  50DF               	movf	indf2,w,c
  6634  0037A6  6F84               	movwf	(??_bounceDown+5)& (0+255),b
  6635  0037A8  5184               	movf	(??_bounceDown+5)& (0+255),w,b
  6636  0037AA  5F82               	subwf	(??_bounceDown+3)& (0+255),f,b
  6637  0037AC  0E00               	movlw	0
  6638  0037AE  5B83               	subwfb	(??_bounceDown+4)& (0+255),f,b
  6639  0037B0  5177               	movf	?___awdiv& (0+255),w,b
  6640  0037B2  5D82               	subwf	(??_bounceDown+3)& (0+255),w,b
  6641  0037B4  6F87               	movwf	bounceDown@tmp& (0+255),b
  6642  0037B6  5178               	movf	(?___awdiv+1)& (0+255),w,b
  6643  0037B8  5983               	subwfb	(??_bounceDown+4)& (0+255),w,b
  6644  0037BA  6F88               	movwf	(bounceDown@tmp+1)& (0+255),b
  6645                           
  6646                           ; BSR set to: 0
  6647                           ;bounce.c: 121: currentPos[io] = (unsigned char)tmp;
  6648  0037BC  0E80               	movlw	low _currentPos
  6649  0037BE  2589               	addwf	bounceDown@io& (0+255),w,b
  6650  0037C0  6ED9               	movwf	fsr2l,c
  6651  0037C2  6ADA               	clrf	fsr2h,c
  6652  0037C4  0E01               	movlw	high _currentPos
  6653  0037C6  22DA               	addwfc	fsr2h,f,c
  6654  0037C8  C087  FFDF         	movff	bounceDown@tmp,indf2
  6655                           
  6656                           ;bounce.c: 122: } else {
  6657  0037CC  D10E               	goto	l19929
  6658  0037CE                     l19915:
  6659                           
  6660                           ; BSR set to: 0
  6661                           ;bounce.c: 125: speed[io] += 3U;
  6662  0037CE  5189               	movf	bounceDown@io& (0+255),w,b
  6663  0037D0  0D02               	mullw	2
  6664  0037D2  0E00               	movlw	low _speed
  6665  0037D4  24F3               	addwf	243,w,c
  6666  0037D6  6ED9               	movwf	fsr2l,c
  6667  0037D8  0E01               	movlw	high _speed
  6668  0037DA  20F4               	addwfc	prodh,w,c
  6669  0037DC  6EDA               	movwf	fsr2h,c
  6670  0037DE  0E03               	movlw	3
  6671  0037E0  26DE               	addwf	postinc2,f,c
  6672  0037E2  0E00               	movlw	0
  6673  0037E4  22DD               	addwfc	postdec2,f,c
  6674                           
  6675                           ; BSR set to: 0
  6676                           ;bounce.c: 126: currentPos[io] -= (unsigned char)((speed[io]/30)+1);
  6677  0037E6  5189               	movf	bounceDown@io& (0+255),w,b
  6678  0037E8  0D02               	mullw	2
  6679  0037EA  0E00               	movlw	low _speed
  6680  0037EC  24F3               	addwf	243,w,c
  6681  0037EE  6ED9               	movwf	fsr2l,c
  6682  0037F0  0E01               	movlw	high _speed
  6683  0037F2  20F4               	addwfc	prodh,w,c
  6684  0037F4  6EDA               	movwf	fsr2h,c
  6685  0037F6  CFDE F077          	movff	postinc2,___awdiv@dividend
  6686  0037FA  CFDD F078          	movff	postdec2,___awdiv@dividend+1
  6687  0037FE  0E00               	movlw	0
  6688  003800  6F7A               	movwf	(___awdiv@divisor+1)& (0+255),b
  6689  003802  0E1E               	movlw	30
  6690  003804  6F79               	movwf	___awdiv@divisor& (0+255),b
  6691  003806  EC30  F046         	call	___awdiv	;wreg free
  6692  00380A  0E01               	movlw	1
  6693  00380C  2777               	addwf	?___awdiv& (0+255),f,b
  6694  00380E  0E80               	movlw	low _currentPos
  6695  003810  2589               	addwf	bounceDown@io& (0+255),w,b
  6696  003812  6ED9               	movwf	fsr2l,c
  6697  003814  6ADA               	clrf	fsr2h,c
  6698  003816  0E01               	movlw	high _currentPos
  6699  003818  22DA               	addwfc	fsr2h,f,c
  6700  00381A  5177               	movf	?___awdiv& (0+255),w,b
  6701  00381C  5EDF               	subwf	indf2,f,c
  6702  00381E  D0E5               	goto	l19929
  6703  003820                     l19919:
  6704                           
  6705                           ; BSR set to: 0
  6706                           ;bounce.c: 131: if (currentPos[io] > NV->io[io].nv_io.nv_bounce.bounce_lower_pos - speed
      +                          [io]/30) {
  6707  003820  0E80               	movlw	low _currentPos
  6708  003822  2589               	addwf	bounceDown@io& (0+255),w,b
  6709  003824  6ED9               	movwf	fsr2l,c
  6710  003826  6ADA               	clrf	fsr2h,c
  6711  003828  0E01               	movlw	high _currentPos
  6712  00382A  22DA               	addwfc	fsr2h,f,c
  6713  00382C  50DF               	movf	indf2,w,c
  6714  00382E  6F7F               	movwf	??_bounceDown& (0+255),b
  6715  003830  6B80               	clrf	(??_bounceDown+1)& (0+255),b
  6716  003832  5189               	movf	bounceDown@io& (0+255),w,b
  6717  003834  0D02               	mullw	2
  6718  003836  0E00               	movlw	low _speed
  6719  003838  24F3               	addwf	243,w,c
  6720  00383A  6ED9               	movwf	fsr2l,c
  6721  00383C  0E01               	movlw	high _speed
  6722  00383E  20F4               	addwfc	prodh,w,c
  6723  003840  6EDA               	movwf	fsr2h,c
  6724  003842  CFDE F077          	movff	postinc2,___awdiv@dividend
  6725  003846  CFDD F078          	movff	postdec2,___awdiv@dividend+1
  6726  00384A  0E00               	movlw	0
  6727  00384C  6F7A               	movwf	(___awdiv@divisor+1)& (0+255),b
  6728  00384E  0E1E               	movlw	30
  6729  003850  6F79               	movwf	___awdiv@divisor& (0+255),b
  6730  003852  EC30  F046         	call	___awdiv	;wreg free
  6731  003856  5189               	movf	bounceDown@io& (0+255),w,b
  6732  003858  0D07               	mullw	7
  6733  00385A  C0EC  F081         	movff	_NV,??_bounceDown+2
  6734  00385E  C0ED  F082         	movff	_NV+1,??_bounceDown+3
  6735  003862  50F3               	movf	243,w,c
  6736  003864  2781               	addwf	(??_bounceDown+2)& (0+255),f,b
  6737  003866  50F4               	movf	244,w,c
  6738  003868  2382               	addwfc	(??_bounceDown+3)& (0+255),f,b
  6739  00386A  0E13               	movlw	19
  6740  00386C  2581               	addwf	(??_bounceDown+2)& (0+255),w,b
  6741  00386E  6ED9               	movwf	fsr2l,c
  6742  003870  0E00               	movlw	0
  6743  003872  2182               	addwfc	(??_bounceDown+3)& (0+255),w,b
  6744  003874  6EDA               	movwf	fsr2h,c
  6745  003876  50DF               	movf	indf2,w,c
  6746  003878  6F83               	movwf	(??_bounceDown+4)& (0+255),b
  6747  00387A  6B84               	clrf	(??_bounceDown+5)& (0+255),b
  6748  00387C  5177               	movf	?___awdiv& (0+255),w,b
  6749  00387E  5F83               	subwf	(??_bounceDown+4)& (0+255),f,b
  6750  003880  5178               	movf	(?___awdiv+1)& (0+255),w,b
  6751  003882  5B84               	subwfb	(??_bounceDown+5)& (0+255),f,b
  6752  003884  517F               	movf	??_bounceDown& (0+255),w,b
  6753  003886  5D83               	subwf	(??_bounceDown+4)& (0+255),w,b
  6754  003888  5184               	movf	(??_bounceDown+5)& (0+255),w,b
  6755  00388A  0A80               	xorlw	128
  6756  00388C  6F85               	movwf	(??_bounceDown+6)& (0+255),b
  6757  00388E  5180               	movf	(??_bounceDown+1)& (0+255),w,b
  6758  003890  0A80               	xorlw	128
  6759  003892  5985               	subwfb	(??_bounceDown+6)& (0+255),w,b
  6760  003894  B0D8               	btfsc	status,0,c
  6761  003896  D081               	goto	l19925
  6762                           
  6763                           ; BSR set to: 0
  6764                           ;bounce.c: 134: speed[io] = (unsigned char)((-speed[io]*NV->io[io].nv_io.nv_bounce.bounc
      +                          e_coeff)/100);
  6765  003898  5189               	movf	bounceDown@io& (0+255),w,b
  6766  00389A  0D07               	mullw	7
  6767  00389C  C0EC  F07F         	movff	_NV,??_bounceDown
  6768  0038A0  C0ED  F080         	movff	_NV+1,??_bounceDown+1
  6769  0038A4  50F3               	movf	243,w,c
  6770  0038A6  277F               	addwf	??_bounceDown& (0+255),f,b
  6771  0038A8  50F4               	movf	244,w,c
  6772  0038AA  2380               	addwfc	(??_bounceDown+1)& (0+255),f,b
  6773  0038AC  0E14               	movlw	20
  6774  0038AE  257F               	addwf	??_bounceDown& (0+255),w,b
  6775  0038B0  6ED9               	movwf	fsr2l,c
  6776  0038B2  0E00               	movlw	0
  6777  0038B4  2180               	addwfc	(??_bounceDown+1)& (0+255),w,b
  6778  0038B6  6EDA               	movwf	fsr2h,c
  6779  0038B8  50DF               	movf	indf2,w,c
  6780  0038BA  6F81               	movwf	(??_bounceDown+2)& (0+255),b
  6781  0038BC  5181               	movf	(??_bounceDown+2)& (0+255),w,b
  6782  0038BE  6F71               	movwf	___wmul@multiplier& (0+255),b
  6783  0038C0  6B72               	clrf	(___wmul@multiplier+1)& (0+255),b
  6784  0038C2  5189               	movf	bounceDown@io& (0+255),w,b
  6785  0038C4  0D02               	mullw	2
  6786  0038C6  0E00               	movlw	low _speed
  6787  0038C8  24F3               	addwf	243,w,c
  6788  0038CA  6ED9               	movwf	fsr2l,c
  6789  0038CC  0E01               	movlw	high _speed
  6790  0038CE  20F4               	addwfc	prodh,w,c
  6791  0038D0  6EDA               	movwf	fsr2h,c
  6792  0038D2  CFDE F082          	movff	postinc2,??_bounceDown+3
  6793  0038D6  CFDD F083          	movff	postdec2,??_bounceDown+4
  6794  0038DA  1F82               	comf	(??_bounceDown+3)& (0+255),f,b
  6795  0038DC  1F83               	comf	(??_bounceDown+4)& (0+255),f,b
  6796  0038DE  4B82               	infsnz	(??_bounceDown+3)& (0+255),f,b
  6797  0038E0  2B83               	incf	(??_bounceDown+4)& (0+255),f,b
  6798  0038E2  C082  F073         	movff	??_bounceDown+3,___wmul@multiplicand
  6799  0038E6  C083  F074         	movff	??_bounceDown+4,___wmul@multiplicand+1
  6800  0038EA  ECF0  F051         	call	___wmul	;wreg free
  6801  0038EE  C071  F077         	movff	?___wmul,___awdiv@dividend
  6802  0038F2  C072  F078         	movff	?___wmul+1,___awdiv@dividend+1
  6803  0038F6  0E00               	movlw	0
  6804  0038F8  6F7A               	movwf	(___awdiv@divisor+1)& (0+255),b
  6805  0038FA  0E64               	movlw	100
  6806  0038FC  6F79               	movwf	___awdiv@divisor& (0+255),b
  6807  0038FE  EC30  F046         	call	___awdiv	;wreg free
  6808  003902  5177               	movf	?___awdiv& (0+255),w,b
  6809  003904  6F84               	movwf	(??_bounceDown+5)& (0+255),b
  6810  003906  6B85               	clrf	(??_bounceDown+6)& (0+255),b
  6811  003908  5189               	movf	bounceDown@io& (0+255),w,b
  6812  00390A  0D02               	mullw	2
  6813  00390C  0E00               	movlw	low _speed
  6814  00390E  24F3               	addwf	243,w,c
  6815  003910  6ED9               	movwf	fsr2l,c
  6816  003912  0E01               	movlw	high _speed
  6817  003914  20F4               	addwfc	prodh,w,c
  6818  003916  6EDA               	movwf	fsr2h,c
  6819  003918  C084  FFDE         	movff	??_bounceDown+5,postinc2
  6820  00391C  C085  FFDD         	movff	??_bounceDown+6,postdec2
  6821                           
  6822                           ;bounce.c: 136: tmp = NV->io[io].nv_io.nv_bounce.bounce_lower_pos +;bounce.c: 137: (NV->
      +                          io[io].nv_io.nv_bounce.bounce_lower_pos - currentPos[io]) +;bounce.c: 138: (speed[io]/30
      +                          );
  6823  003920  5189               	movf	bounceDown@io& (0+255),w,b
  6824  003922  0D02               	mullw	2
  6825  003924  0E00               	movlw	low _speed
  6826  003926  24F3               	addwf	243,w,c
  6827  003928  6ED9               	movwf	fsr2l,c
  6828  00392A  0E01               	movlw	high _speed
  6829  00392C  20F4               	addwfc	prodh,w,c
  6830  00392E  6EDA               	movwf	fsr2h,c
  6831  003930  CFDE F077          	movff	postinc2,___awdiv@dividend
  6832  003934  CFDD F078          	movff	postdec2,___awdiv@dividend+1
  6833  003938  0E00               	movlw	0
  6834  00393A  6F7A               	movwf	(___awdiv@divisor+1)& (0+255),b
  6835  00393C  0E1E               	movlw	30
  6836  00393E  6F79               	movwf	___awdiv@divisor& (0+255),b
  6837  003940  EC30  F046         	call	___awdiv	;wreg free
  6838  003944  5189               	movf	bounceDown@io& (0+255),w,b
  6839  003946  0D07               	mullw	7
  6840  003948  C0EC  F07F         	movff	_NV,??_bounceDown
  6841  00394C  C0ED  F080         	movff	_NV+1,??_bounceDown+1
  6842  003950  50F3               	movf	243,w,c
  6843  003952  277F               	addwf	??_bounceDown& (0+255),f,b
  6844  003954  50F4               	movf	244,w,c
  6845  003956  2380               	addwfc	(??_bounceDown+1)& (0+255),f,b
  6846  003958  0E13               	movlw	19
  6847  00395A  257F               	addwf	??_bounceDown& (0+255),w,b
  6848  00395C  6ED9               	movwf	fsr2l,c
  6849  00395E  0E00               	movlw	0
  6850  003960  2180               	addwfc	(??_bounceDown+1)& (0+255),w,b
  6851  003962  6EDA               	movwf	fsr2h,c
  6852  003964  50DF               	movf	indf2,w,c
  6853  003966  6F81               	movwf	(??_bounceDown+2)& (0+255),b
  6854  003968  5181               	movf	(??_bounceDown+2)& (0+255),w,b
  6855  00396A  0D02               	mullw	2
  6856  00396C  CFF3 F082          	movff	prodl,??_bounceDown+3
  6857  003970  CFF4 F083          	movff	prodh,??_bounceDown+4
  6858  003974  5177               	movf	?___awdiv& (0+255),w,b
  6859  003976  2782               	addwf	(??_bounceDown+3)& (0+255),f,b
  6860  003978  5178               	movf	(?___awdiv+1)& (0+255),w,b
  6861  00397A  2383               	addwfc	(??_bounceDown+4)& (0+255),f,b
  6862  00397C  0E80               	movlw	low _currentPos
  6863  00397E  2589               	addwf	bounceDown@io& (0+255),w,b
  6864  003980  6ED9               	movwf	fsr2l,c
  6865  003982  6ADA               	clrf	fsr2h,c
  6866  003984  0E01               	movlw	high _currentPos
  6867  003986  22DA               	addwfc	fsr2h,f,c
  6868  003988  50DF               	movf	indf2,w,c
  6869  00398A  6F84               	movwf	(??_bounceDown+5)& (0+255),b
  6870  00398C  5184               	movf	(??_bounceDown+5)& (0+255),w,b
  6871  00398E  5D82               	subwf	(??_bounceDown+3)& (0+255),w,b
  6872  003990  6F87               	movwf	bounceDown@tmp& (0+255),b
  6873  003992  5183               	movf	(??_bounceDown+4)& (0+255),w,b
  6874  003994  A0D8               	btfss	status,0,c
  6875  003996  0583               	decf	(??_bounceDown+4)& (0+255),w,b
  6876  003998  D710               	goto	L1
  6877  00399A                     l19925:
  6878                           
  6879                           ; BSR set to: 0
  6880                           ;bounce.c: 143: speed[io] += 3U;
  6881  00399A  5189               	movf	bounceDown@io& (0+255),w,b
  6882  00399C  0D02               	mullw	2
  6883  00399E  0E00               	movlw	low _speed
  6884  0039A0  24F3               	addwf	243,w,c
  6885  0039A2  6ED9               	movwf	fsr2l,c
  6886  0039A4  0E01               	movlw	high _speed
  6887  0039A6  20F4               	addwfc	prodh,w,c
  6888  0039A8  6EDA               	movwf	fsr2h,c
  6889  0039AA  0E03               	movlw	3
  6890  0039AC  26DE               	addwf	postinc2,f,c
  6891  0039AE  0E00               	movlw	0
  6892  0039B0  22DD               	addwfc	postdec2,f,c
  6893                           
  6894                           ; BSR set to: 0
  6895                           ;bounce.c: 144: currentPos[io] += (unsigned char)((speed[io]/30)+1);
  6896  0039B2  5189               	movf	bounceDown@io& (0+255),w,b
  6897  0039B4  0D02               	mullw	2
  6898  0039B6  0E00               	movlw	low _speed
  6899  0039B8  24F3               	addwf	243,w,c
  6900  0039BA  6ED9               	movwf	fsr2l,c
  6901  0039BC  0E01               	movlw	high _speed
  6902  0039BE  20F4               	addwfc	prodh,w,c
  6903  0039C0  6EDA               	movwf	fsr2h,c
  6904  0039C2  CFDE F077          	movff	postinc2,___awdiv@dividend
  6905  0039C6  CFDD F078          	movff	postdec2,___awdiv@dividend+1
  6906  0039CA  0E00               	movlw	0
  6907  0039CC  6F7A               	movwf	(___awdiv@divisor+1)& (0+255),b
  6908  0039CE  0E1E               	movlw	30
  6909  0039D0  6F79               	movwf	___awdiv@divisor& (0+255),b
  6910  0039D2  EC30  F046         	call	___awdiv	;wreg free
  6911  0039D6  0E01               	movlw	1
  6912  0039D8  2777               	addwf	?___awdiv& (0+255),f,b
  6913  0039DA  0E80               	movlw	low _currentPos
  6914  0039DC  2589               	addwf	bounceDown@io& (0+255),w,b
  6915  0039DE  6ED9               	movwf	fsr2l,c
  6916  0039E0  6ADA               	clrf	fsr2h,c
  6917  0039E2  0E01               	movlw	high _currentPos
  6918  0039E4  22DA               	addwfc	fsr2h,f,c
  6919  0039E6  5177               	movf	?___awdiv& (0+255),w,b
  6920  0039E8  26DF               	addwf	indf2,f,c
  6921  0039EA                     l19929:
  6922                           
  6923                           ; BSR set to: 0
  6924                           ;bounce.c: 145: };bounce.c: 146: };bounce.c: 148: return 0;
  6925  0039EA  0E00               	movlw	0
  6926  0039EC  0012               	return	
  6927  0039EE                     l19933:
  6928                           
  6929                           ; BSR set to: 0
  6930                           ;bounce.c: 149: };bounce.c: 150: return 1;
  6931  0039EE  0E01               	movlw	1
  6932                           
  6933                           ; BSR set to: 0
  6934  0039F0  0012               	return		;funcret
  6935  0039F2                     __end_of_bounceDown:
  6936                           	callstack 0
  6937                           
  6938 ;; *************** function ___awdiv *****************
  6939 ;; Defined at:
  6940 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\awdiv.c"
  6941 ;; Parameters:    Size  Location     Type
  6942 ;;  dividend        2   23[BANK0 ] int 
  6943 ;;  divisor         2   25[BANK0 ] int 
  6944 ;; Auto vars:     Size  Location     Type
  6945 ;;  quotient        2   29[BANK0 ] int 
  6946 ;;  sign            1   28[BANK0 ] unsigned char 
  6947 ;;  counter         1   27[BANK0 ] unsigned char 
  6948 ;; Return value:  Size  Location     Type
  6949 ;;                  2   23[BANK0 ] int 
  6950 ;; Registers used:
  6951 ;;		wreg, status,2, status,0
  6952 ;; Tracked objects:
  6953 ;;		On entry : 3F/0
  6954 ;;		On exit  : 3F/0
  6955 ;;		Unchanged: 0/0
  6956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6957 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6958 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6959 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6960 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6961 ;;Total ram usage:        8 bytes
  6962 ;; Hardware stack levels used: 1
  6963 ;; Hardware stack levels required when called: 8
  6964 ;; This function calls:
  6965 ;;		Nothing
  6966 ;; This function is called by:
  6967 ;;		_bounceDown
  6968 ;; This function uses a non-reentrant model
  6969 ;;
  6970                           
  6971                           	psect	text8
  6972  008C60                     __ptext8:
  6973                           	callstack 0
  6974  008C60                     ___awdiv:
  6975                           	callstack 19
  6976                           
  6977                           ; BSR set to: 0
  6978                           
  6979                           ; BSR set to: 0
  6980                           ;incstack = 0
  6981  008C60  0E00               	movlw	0
  6982  008C62  6F7C               	movwf	___awdiv@sign& (0+255),b
  6983                           
  6984                           ; BSR set to: 0
  6985  008C64  AF7A               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  6986  008C66  D006               	goto	l10675
  6987                           
  6988                           ; BSR set to: 0
  6989  008C68  6D79               	negf	___awdiv@divisor& (0+255),b
  6990  008C6A  1F7A               	comf	(___awdiv@divisor+1)& (0+255),f,b
  6991  008C6C  B0D8               	btfsc	status,0,c
  6992  008C6E  2B7A               	incf	(___awdiv@divisor+1)& (0+255),f,b
  6993                           
  6994                           ; BSR set to: 0
  6995  008C70  0E01               	movlw	1
  6996  008C72  6F7C               	movwf	___awdiv@sign& (0+255),b
  6997  008C74                     l10675:
  6998                           
  6999                           ; BSR set to: 0
  7000  008C74  AF78               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  7001  008C76  D006               	goto	l10681
  7002                           
  7003                           ; BSR set to: 0
  7004  008C78  6D77               	negf	___awdiv@dividend& (0+255),b
  7005  008C7A  1F78               	comf	(___awdiv@dividend+1)& (0+255),f,b
  7006  008C7C  B0D8               	btfsc	status,0,c
  7007  008C7E  2B78               	incf	(___awdiv@dividend+1)& (0+255),f,b
  7008                           
  7009                           ; BSR set to: 0
  7010  008C80  0E01               	movlw	1
  7011  008C82  1B7C               	xorwf	___awdiv@sign& (0+255),f,b
  7012  008C84                     l10681:
  7013                           
  7014                           ; BSR set to: 0
  7015  008C84  0E00               	movlw	0
  7016  008C86  6F7E               	movwf	(___awdiv@quotient+1)& (0+255),b
  7017  008C88  0E00               	movlw	0
  7018  008C8A  6F7D               	movwf	___awdiv@quotient& (0+255),b
  7019                           
  7020                           ; BSR set to: 0
  7021  008C8C  5179               	movf	___awdiv@divisor& (0+255),w,b
  7022  008C8E  117A               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  7023  008C90  B4D8               	btfsc	status,2,c
  7024  008C92  D01C               	goto	l10703
  7025                           
  7026                           ; BSR set to: 0
  7027  008C94  0E01               	movlw	1
  7028  008C96  6F7B               	movwf	___awdiv@counter& (0+255),b
  7029  008C98  D004               	goto	l10689
  7030  008C9A                     l10687:
  7031                           
  7032                           ; BSR set to: 0
  7033  008C9A  90D8               	bcf	status,0,c
  7034  008C9C  3779               	rlcf	___awdiv@divisor& (0+255),f,b
  7035  008C9E  377A               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  7036  008CA0  2B7B               	incf	___awdiv@counter& (0+255),f,b
  7037  008CA2                     l10689:
  7038                           
  7039                           ; BSR set to: 0
  7040  008CA2  AF7A               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  7041  008CA4  D7FA               	goto	l10687
  7042  008CA6                     u10620:
  7043                           
  7044                           ; BSR set to: 0
  7045  008CA6  90D8               	bcf	status,0,c
  7046  008CA8  377D               	rlcf	___awdiv@quotient& (0+255),f,b
  7047  008CAA  377E               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  7048                           
  7049                           ; BSR set to: 0
  7050  008CAC  5179               	movf	___awdiv@divisor& (0+255),w,b
  7051  008CAE  5D77               	subwf	___awdiv@dividend& (0+255),w,b
  7052  008CB0  517A               	movf	(___awdiv@divisor+1)& (0+255),w,b
  7053  008CB2  5978               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  7054  008CB4  A0D8               	btfss	status,0,c
  7055  008CB6  D005               	goto	l10699
  7056                           
  7057                           ; BSR set to: 0
  7058  008CB8  5179               	movf	___awdiv@divisor& (0+255),w,b
  7059  008CBA  5F77               	subwf	___awdiv@dividend& (0+255),f,b
  7060  008CBC  517A               	movf	(___awdiv@divisor+1)& (0+255),w,b
  7061  008CBE  5B78               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  7062                           
  7063                           ; BSR set to: 0
  7064  008CC0  817D               	bsf	___awdiv@quotient& (0+255),0,b
  7065  008CC2                     l10699:
  7066                           
  7067                           ; BSR set to: 0
  7068  008CC2  90D8               	bcf	status,0,c
  7069  008CC4  337A               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  7070  008CC6  3379               	rrcf	___awdiv@divisor& (0+255),f,b
  7071                           
  7072                           ; BSR set to: 0
  7073  008CC8  2F7B               	decfsz	___awdiv@counter& (0+255),f,b
  7074  008CCA  D7ED               	goto	u10620
  7075  008CCC                     l10703:
  7076                           
  7077                           ; BSR set to: 0
  7078  008CCC  517C               	movf	___awdiv@sign& (0+255),w,b
  7079  008CCE  B4D8               	btfsc	status,2,c
  7080  008CD0  D004               	goto	l10707
  7081                           
  7082                           ; BSR set to: 0
  7083  008CD2  6D7D               	negf	___awdiv@quotient& (0+255),b
  7084  008CD4  1F7E               	comf	(___awdiv@quotient+1)& (0+255),f,b
  7085  008CD6  B0D8               	btfsc	status,0,c
  7086  008CD8  2B7E               	incf	(___awdiv@quotient+1)& (0+255),f,b
  7087  008CDA                     l10707:
  7088                           
  7089                           ; BSR set to: 0
  7090  008CDA  C07D  F077         	movff	___awdiv@quotient,?___awdiv
  7091  008CDE  C07E  F078         	movff	___awdiv@quotient+1,?___awdiv+1
  7092                           
  7093                           ; BSR set to: 0
  7094  008CE2  0012               	return		;funcret
  7095  008CE4                     __end_of___awdiv:
  7096                           	callstack 0
  7097                           
  7098 ;; *************** function _processOutputs *****************
  7099 ;; Defined at:
  7100 ;;		line 178 in file "../../github/CANMIOfirmware/digitalOut.c"
  7101 ;; Parameters:    Size  Location     Type
  7102 ;;		None
  7103 ;; Auto vars:     Size  Location     Type
  7104 ;;  io              1   88[BANK0 ] unsigned char 
  7105 ;;  state           1    0        unsigned char 
  7106 ;; Return value:  Size  Location     Type
  7107 ;;                  1    wreg      void 
  7108 ;; Registers used:
  7109 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7110 ;; Tracked objects:
  7111 ;;		On entry : 3E/0
  7112 ;;		On exit  : 3F/0
  7113 ;;		Unchanged: 0/0
  7114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7115 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7116 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7117 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7118 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7119 ;;Total ram usage:        4 bytes
  7120 ;; Hardware stack levels used: 1
  7121 ;; Hardware stack levels required when called: 16
  7122 ;; This function calls:
  7123 ;;		_doneAction
  7124 ;;		_sendProducedEvent
  7125 ;;		_setOutputPin
  7126 ;; This function is called by:
  7127 ;;		_main
  7128 ;; This function uses a non-reentrant model
  7129 ;;
  7130                           
  7131                           	psect	text9
  7132  0055EE                     __ptext9:
  7133                           	callstack 0
  7134  0055EE                     _processOutputs:
  7135                           	callstack 14
  7136                           
  7137                           ;digitalOut.c: 179: BOOL state;;digitalOut.c: 180: unsigned char io;;digitalOut.c: 181: 
      +                          for (io=0; io<16U; io++) {
  7138                           
  7139                           ; BSR set to: 0
  7140                           ;incstack = 0
  7141  0055EE  0E00               	movlw	0
  7142  0055F0  0100               	movlb	0	; () banked
  7143  0055F2  6FB8               	movwf	processOutputs@io& (0+255),b
  7144  0055F4                     l21075:
  7145                           
  7146                           ; BSR set to: 0
  7147                           ;digitalOut.c: 182: if (NV->io[io].type == 1U) {
  7148  0055F4  51B8               	movf	processOutputs@io& (0+255),w,b
  7149  0055F6  0D07               	mullw	7
  7150  0055F8  C0EC  F0B5         	movff	_NV,??_processOutputs
  7151  0055FC  C0ED  F0B6         	movff	_NV+1,??_processOutputs+1
  7152  005600  50F3               	movf	243,w,c
  7153  005602  27B5               	addwf	??_processOutputs& (0+255),f,b
  7154  005604  50F4               	movf	244,w,c
  7155  005606  23B6               	addwfc	(??_processOutputs+1)& (0+255),f,b
  7156  005608  0E10               	movlw	16
  7157  00560A  25B5               	addwf	??_processOutputs& (0+255),w,b
  7158  00560C  6ED9               	movwf	fsr2l,c
  7159  00560E  0E00               	movlw	0
  7160  005610  21B6               	addwfc	(??_processOutputs+1)& (0+255),w,b
  7161  005612  6EDA               	movwf	fsr2h,c
  7162  005614  04DE               	decf	postinc2,w,c
  7163  005616  A4D8               	btfss	status,2,c
  7164  005618  D10B               	goto	l21115
  7165                           
  7166                           ; BSR set to: 0
  7167                           ;digitalOut.c: 184: if (flashDelays[io] == 1) {
  7168  00561A  0E60               	movlw	low _flashDelays
  7169  00561C  25B8               	addwf	processOutputs@io& (0+255),w,b
  7170  00561E  6ED9               	movwf	fsr2l,c
  7171  005620  6ADA               	clrf	fsr2h,c
  7172  005622  0E01               	movlw	high _flashDelays
  7173  005624  22DA               	addwfc	fsr2h,f,c
  7174  005626  04DE               	decf	postinc2,w,c
  7175  005628  A4D8               	btfss	status,2,c
  7176  00562A  D03D               	goto	l21085
  7177                           
  7178                           ; BSR set to: 0
  7179                           ;digitalOut.c: 185: setOutputPin(io, NV->io[io].flags & 0x20U);
  7180  00562C  51B8               	movf	processOutputs@io& (0+255),w,b
  7181  00562E  0D07               	mullw	7
  7182  005630  C0EC  F0B5         	movff	_NV,??_processOutputs
  7183  005634  C0ED  F0B6         	movff	_NV+1,??_processOutputs+1
  7184  005638  50F3               	movf	243,w,c
  7185  00563A  27B5               	addwf	??_processOutputs& (0+255),f,b
  7186  00563C  50F4               	movf	244,w,c
  7187  00563E  23B6               	addwfc	(??_processOutputs+1)& (0+255),f,b
  7188  005640  0E11               	movlw	17
  7189  005642  25B5               	addwf	??_processOutputs& (0+255),w,b
  7190  005644  6ED9               	movwf	fsr2l,c
  7191  005646  0E00               	movlw	0
  7192  005648  21B6               	addwfc	(??_processOutputs+1)& (0+255),w,b
  7193  00564A  6EDA               	movwf	fsr2h,c
  7194  00564C  50DF               	movf	indf2,w,c
  7195  00564E  0B20               	andlw	32
  7196  005650  6F71               	movwf	setOutputPin@state& (0+255),b
  7197  005652  51B8               	movf	processOutputs@io& (0+255),w,b
  7198  005654  EC90  F031         	call	_setOutputPin
  7199                           
  7200                           ; BSR set to: 0
  7201                           ;digitalOut.c: 186: flashDelays[io] = NV->io[io].nv_io.nv_output.output_flash_period;
  7202  005658  51B8               	movf	processOutputs@io& (0+255),w,b
  7203  00565A  0D07               	mullw	7
  7204  00565C  C0EC  F0B5         	movff	_NV,??_processOutputs
  7205  005660  C0ED  F0B6         	movff	_NV+1,??_processOutputs+1
  7206  005664  50F3               	movf	243,w,c
  7207  005666  27B5               	addwf	??_processOutputs& (0+255),f,b
  7208  005668  50F4               	movf	244,w,c
  7209  00566A  23B6               	addwfc	(??_processOutputs+1)& (0+255),f,b
  7210  00566C  0E13               	movlw	19
  7211  00566E  25B5               	addwf	??_processOutputs& (0+255),w,b
  7212  005670  6ED9               	movwf	fsr2l,c
  7213  005672  0E00               	movlw	0
  7214  005674  21B6               	addwfc	(??_processOutputs+1)& (0+255),w,b
  7215  005676  6EDA               	movwf	fsr2h,c
  7216  005678  0E60               	movlw	low _flashDelays
  7217  00567A  25B8               	addwf	processOutputs@io& (0+255),w,b
  7218  00567C  6EE1               	movwf	fsr1l,c
  7219  00567E  6AE2               	clrf	fsr1h,c
  7220  005680  0E01               	movlw	high _flashDelays
  7221  005682  22E2               	addwfc	fsr1h,f,c
  7222  005684  CFDF FFE7          	movff	indf2,indf1
  7223                           
  7224                           ; BSR set to: 0
  7225                           ;digitalOut.c: 187: flashDelays[io] = (char)(- flashDelays[io]);
  7226  005688  0E60               	movlw	low _flashDelays
  7227  00568A  25B8               	addwf	processOutputs@io& (0+255),w,b
  7228  00568C  6ED9               	movwf	fsr2l,c
  7229  00568E  6ADA               	clrf	fsr2h,c
  7230  005690  0E01               	movlw	high _flashDelays
  7231  005692  22DA               	addwfc	fsr2h,f,c
  7232  005694  0E60               	movlw	low _flashDelays
  7233  005696  25B8               	addwf	processOutputs@io& (0+255),w,b
  7234  005698  6EE1               	movwf	fsr1l,c
  7235  00569A  6AE2               	clrf	fsr1h,c
  7236  00569C  0E01               	movlw	high _flashDelays
  7237  00569E  22E2               	addwfc	fsr1h,f,c
  7238  0056A0  50E7               	movf	indf1,w,c
  7239  0056A2  0800               	sublw	0
  7240  0056A4  6EDF               	movwf	indf2,c
  7241  0056A6                     l21085:
  7242                           
  7243                           ; BSR set to: 0
  7244                           ;digitalOut.c: 188: };digitalOut.c: 189: if (flashDelays[io] == -1) {
  7245  0056A6  0E60               	movlw	low _flashDelays
  7246  0056A8  25B8               	addwf	processOutputs@io& (0+255),w,b
  7247  0056AA  6ED9               	movwf	fsr2l,c
  7248  0056AC  6ADA               	clrf	fsr2h,c
  7249  0056AE  0E01               	movlw	high _flashDelays
  7250  0056B0  22DA               	addwfc	fsr2h,f,c
  7251  0056B2  28DE               	incf	postinc2,w,c
  7252  0056B4  A4D8               	btfss	status,2,c
  7253  0056B6  D031               	goto	l21091
  7254                           
  7255                           ; BSR set to: 0
  7256                           ;digitalOut.c: 190: setOutputPin(io, (unsigned char)(! (NV->io[io].flags & 0x20U)));
  7257  0056B8  51B8               	movf	processOutputs@io& (0+255),w,b
  7258  0056BA  0D07               	mullw	7
  7259  0056BC  C0EC  F0B5         	movff	_NV,??_processOutputs
  7260  0056C0  C0ED  F0B6         	movff	_NV+1,??_processOutputs+1
  7261  0056C4  50F3               	movf	243,w,c
  7262  0056C6  27B5               	addwf	??_processOutputs& (0+255),f,b
  7263  0056C8  50F4               	movf	244,w,c
  7264  0056CA  23B6               	addwfc	(??_processOutputs+1)& (0+255),f,b
  7265  0056CC  0E11               	movlw	17
  7266  0056CE  25B5               	addwf	??_processOutputs& (0+255),w,b
  7267  0056D0  6ED9               	movwf	fsr2l,c
  7268  0056D2  0E00               	movlw	0
  7269  0056D4  21B6               	addwfc	(??_processOutputs+1)& (0+255),w,b
  7270  0056D6  6EDA               	movwf	fsr2h,c
  7271  0056D8  BADF               	btfsc	indf2,5,c
  7272  0056DA  D002               	goto	u26860
  7273  0056DC  0E01               	movlw	1
  7274  0056DE  D001               	goto	u26870
  7275  0056E0                     u26860:
  7276  0056E0  0E00               	movlw	0
  7277  0056E2                     u26870:
  7278  0056E2  6F71               	movwf	setOutputPin@state& (0+255),b
  7279  0056E4  51B8               	movf	processOutputs@io& (0+255),w,b
  7280  0056E6  EC90  F031         	call	_setOutputPin
  7281                           
  7282                           ; BSR set to: 0
  7283                           ;digitalOut.c: 191: flashDelays[io] = NV->io[io].nv_io.nv_output.output_flash_period;
  7284  0056EA  51B8               	movf	processOutputs@io& (0+255),w,b
  7285  0056EC  0D07               	mullw	7
  7286  0056EE  C0EC  F0B5         	movff	_NV,??_processOutputs
  7287  0056F2  C0ED  F0B6         	movff	_NV+1,??_processOutputs+1
  7288  0056F6  50F3               	movf	243,w,c
  7289  0056F8  27B5               	addwf	??_processOutputs& (0+255),f,b
  7290  0056FA  50F4               	movf	244,w,c
  7291  0056FC  23B6               	addwfc	(??_processOutputs+1)& (0+255),f,b
  7292  0056FE  0E13               	movlw	19
  7293  005700  25B5               	addwf	??_processOutputs& (0+255),w,b
  7294  005702  6ED9               	movwf	fsr2l,c
  7295  005704  0E00               	movlw	0
  7296  005706  21B6               	addwfc	(??_processOutputs+1)& (0+255),w,b
  7297  005708  6EDA               	movwf	fsr2h,c
  7298  00570A  0E60               	movlw	low _flashDelays
  7299  00570C  25B8               	addwf	processOutputs@io& (0+255),w,b
  7300  00570E  6EE1               	movwf	fsr1l,c
  7301  005710  6AE2               	clrf	fsr1h,c
  7302  005712  0E01               	movlw	high _flashDelays
  7303  005714  22E2               	addwfc	fsr1h,f,c
  7304  005716  CFDF FFE7          	movff	indf2,indf1
  7305  00571A                     l21091:
  7306                           
  7307                           ; BSR set to: 0
  7308                           ;digitalOut.c: 192: };digitalOut.c: 193: if (flashDelays[io] > 1) {
  7309  00571A  0E60               	movlw	low _flashDelays
  7310  00571C  25B8               	addwf	processOutputs@io& (0+255),w,b
  7311  00571E  6ED9               	movwf	fsr2l,c
  7312  005720  6ADA               	clrf	fsr2h,c
  7313  005722  0E01               	movlw	high _flashDelays
  7314  005724  22DA               	addwfc	fsr2h,f,c
  7315  005726  50DF               	movf	indf2,w,c
  7316  005728  0A80               	xorlw	128
  7317  00572A  0F7E               	addlw	-130
  7318  00572C  A0D8               	btfss	status,0,c
  7319  00572E  D008               	goto	l21095
  7320                           
  7321                           ; BSR set to: 0
  7322                           ;digitalOut.c: 194: flashDelays[io]--;
  7323  005730  0E60               	movlw	low _flashDelays
  7324  005732  25B8               	addwf	processOutputs@io& (0+255),w,b
  7325  005734  6ED9               	movwf	fsr2l,c
  7326  005736  6ADA               	clrf	fsr2h,c
  7327  005738  0E01               	movlw	high _flashDelays
  7328  00573A  22DA               	addwfc	fsr2h,f,c
  7329  00573C  06DF               	decf	indf2,f,c
  7330                           
  7331                           ;digitalOut.c: 195: } else if (flashDelays[io] < -1) {
  7332  00573E  D012               	goto	l236
  7333  005740                     l21095:
  7334                           
  7335                           ; BSR set to: 0
  7336  005740  0E60               	movlw	low _flashDelays
  7337  005742  25B8               	addwf	processOutputs@io& (0+255),w,b
  7338  005744  6ED9               	movwf	fsr2l,c
  7339  005746  6ADA               	clrf	fsr2h,c
  7340  005748  0E01               	movlw	high _flashDelays
  7341  00574A  22DA               	addwfc	fsr2h,f,c
  7342  00574C  50DF               	movf	indf2,w,c
  7343  00574E  0A80               	xorlw	128
  7344  005750  0F81               	addlw	129
  7345  005752  B0D8               	btfsc	status,0,c
  7346  005754  D007               	goto	l236
  7347                           
  7348                           ; BSR set to: 0
  7349                           ;digitalOut.c: 196: flashDelays[io]++;
  7350  005756  0E60               	movlw	low _flashDelays
  7351  005758  25B8               	addwf	processOutputs@io& (0+255),w,b
  7352  00575A  6ED9               	movwf	fsr2l,c
  7353  00575C  6ADA               	clrf	fsr2h,c
  7354  00575E  0E01               	movlw	high _flashDelays
  7355  005760  22DA               	addwfc	fsr2h,f,c
  7356  005762  2ADF               	incf	indf2,f,c
  7357  005764                     l236:
  7358                           
  7359                           ; BSR set to: 0
  7360                           ;digitalOut.c: 197: };digitalOut.c: 199: if (pulseDelays[io] == 1) {
  7361  005764  0EA4               	movlw	low _pulseDelays
  7362  005766  25B8               	addwf	processOutputs@io& (0+255),w,b
  7363  005768  6ED9               	movwf	fsr2l,c
  7364  00576A  6ADA               	clrf	fsr2h,c
  7365  00576C  0E02               	movlw	high _pulseDelays
  7366  00576E  22DA               	addwfc	fsr2h,f,c
  7367  005770  04DE               	decf	postinc2,w,c
  7368  005772  A4D8               	btfss	status,2,c
  7369  005774  D04D               	goto	l21111
  7370                           
  7371                           ; BSR set to: 0
  7372                           ;digitalOut.c: 201: if (NV->io[io].flags & 0x20U) {
  7373  005776  51B8               	movf	processOutputs@io& (0+255),w,b
  7374  005778  0D07               	mullw	7
  7375  00577A  C0EC  F0B5         	movff	_NV,??_processOutputs
  7376  00577E  C0ED  F0B6         	movff	_NV+1,??_processOutputs+1
  7377  005782  50F3               	movf	243,w,c
  7378  005784  27B5               	addwf	??_processOutputs& (0+255),f,b
  7379  005786  50F4               	movf	244,w,c
  7380  005788  23B6               	addwfc	(??_processOutputs+1)& (0+255),f,b
  7381  00578A  0E11               	movlw	17
  7382  00578C  25B5               	addwf	??_processOutputs& (0+255),w,b
  7383  00578E  6ED9               	movwf	fsr2l,c
  7384  005790  0E00               	movlw	0
  7385  005792  21B6               	addwfc	(??_processOutputs+1)& (0+255),w,b
  7386  005794  6EDA               	movwf	fsr2h,c
  7387  005796  AADF               	btfss	indf2,5,c
  7388  005798  D006               	goto	l21103
  7389                           
  7390                           ; BSR set to: 0
  7391                           ;digitalOut.c: 202: setOutputPin(io, 1);
  7392  00579A  0E01               	movlw	1
  7393  00579C  6F71               	movwf	setOutputPin@state& (0+255),b
  7394  00579E  51B8               	movf	processOutputs@io& (0+255),w,b
  7395  0057A0  EC90  F031         	call	_setOutputPin
  7396                           
  7397                           ;digitalOut.c: 203: } else {
  7398  0057A4  D005               	goto	l21105
  7399  0057A6                     l21103:
  7400                           
  7401                           ; BSR set to: 0
  7402                           ;digitalOut.c: 204: setOutputPin(io, 0);
  7403  0057A6  0E00               	movlw	0
  7404  0057A8  6F71               	movwf	setOutputPin@state& (0+255),b
  7405  0057AA  51B8               	movf	processOutputs@io& (0+255),w,b
  7406  0057AC  EC90  F031         	call	_setOutputPin
  7407  0057B0                     l21105:
  7408                           
  7409                           ; BSR set to: 0
  7410                           ;digitalOut.c: 205: };digitalOut.c: 207: if ( ! (NV->io[io].flags & 0x08U)) {
  7411  0057B0  51B8               	movf	processOutputs@io& (0+255),w,b
  7412  0057B2  0D07               	mullw	7
  7413  0057B4  C0EC  F0B5         	movff	_NV,??_processOutputs
  7414  0057B8  C0ED  F0B6         	movff	_NV+1,??_processOutputs+1
  7415  0057BC  50F3               	movf	243,w,c
  7416  0057BE  27B5               	addwf	??_processOutputs& (0+255),f,b
  7417  0057C0  50F4               	movf	244,w,c
  7418  0057C2  23B6               	addwfc	(??_processOutputs+1)& (0+255),f,b
  7419  0057C4  0E11               	movlw	17
  7420  0057C6  25B5               	addwf	??_processOutputs& (0+255),w,b
  7421  0057C8  6ED9               	movwf	fsr2l,c
  7422  0057CA  0E00               	movlw	0
  7423  0057CC  21B6               	addwfc	(??_processOutputs+1)& (0+255),w,b
  7424  0057CE  6EDA               	movwf	fsr2h,c
  7425  0057D0  B6DF               	btfsc	indf2,3,c
  7426  0057D2  D01C               	goto	l21109
  7427                           
  7428                           ; BSR set to: 0
  7429                           ;digitalOut.c: 209: sendProducedEvent(((8U + 4U*(io))+0U), (BOOL)(!(NV->io[io].flags & 0
      +                          x40U)));
  7430  0057D4  51B8               	movf	processOutputs@io& (0+255),w,b
  7431  0057D6  0D07               	mullw	7
  7432  0057D8  C0EC  F0B5         	movff	_NV,??_processOutputs
  7433  0057DC  C0ED  F0B6         	movff	_NV+1,??_processOutputs+1
  7434  0057E0  50F3               	movf	243,w,c
  7435  0057E2  27B5               	addwf	??_processOutputs& (0+255),f,b
  7436  0057E4  50F4               	movf	244,w,c
  7437  0057E6  23B6               	addwfc	(??_processOutputs+1)& (0+255),f,b
  7438  0057E8  0E11               	movlw	17
  7439  0057EA  25B5               	addwf	??_processOutputs& (0+255),w,b
  7440  0057EC  6ED9               	movwf	fsr2l,c
  7441  0057EE  0E00               	movlw	0
  7442  0057F0  21B6               	addwfc	(??_processOutputs+1)& (0+255),w,b
  7443  0057F2  6EDA               	movwf	fsr2h,c
  7444  0057F4  BCDF               	btfsc	indf2,6,c
  7445  0057F6  D002               	goto	u26930
  7446  0057F8  0E01               	movlw	1
  7447  0057FA  D001               	goto	u26940
  7448  0057FC                     u26930:
  7449  0057FC  0E00               	movlw	0
  7450  0057FE                     u26940:
  7451  0057FE  6FAE               	movwf	sendProducedEvent@on& (0+255),b
  7452  005800  51B8               	movf	processOutputs@io& (0+255),w,b
  7453  005802  0D04               	mullw	4
  7454  005804  50F3               	movf	243,w,c
  7455  005806  0F08               	addlw	8
  7456  005808  EC54  F03C         	call	_sendProducedEvent
  7457  00580C                     l21109:
  7458                           
  7459                           ;digitalOut.c: 210: };digitalOut.c: 211: doneAction();
  7460  00580C  EC7A  F053         	call	_doneAction	;wreg free
  7461  005810                     l21111:
  7462                           
  7463                           ; BSR set to: 0
  7464                           ;digitalOut.c: 212: };digitalOut.c: 213: if (pulseDelays[io] != 0) {
  7465  005810  0EA4               	movlw	low _pulseDelays
  7466  005812  25B8               	addwf	processOutputs@io& (0+255),w,b
  7467  005814  6ED9               	movwf	fsr2l,c
  7468  005816  6ADA               	clrf	fsr2h,c
  7469  005818  0E02               	movlw	high _pulseDelays
  7470  00581A  22DA               	addwfc	fsr2h,f,c
  7471  00581C  50DF               	movf	indf2,w,c
  7472  00581E  B4D8               	btfsc	status,2,c
  7473  005820  D007               	goto	l21115
  7474                           
  7475                           ; BSR set to: 0
  7476                           ;digitalOut.c: 214: pulseDelays[io]--;
  7477  005822  0EA4               	movlw	low _pulseDelays
  7478  005824  25B8               	addwf	processOutputs@io& (0+255),w,b
  7479  005826  6ED9               	movwf	fsr2l,c
  7480  005828  6ADA               	clrf	fsr2h,c
  7481  00582A  0E02               	movlw	high _pulseDelays
  7482  00582C  22DA               	addwfc	fsr2h,f,c
  7483  00582E  06DF               	decf	indf2,f,c
  7484  005830                     l21115:
  7485                           
  7486                           ; BSR set to: 0
  7487  005830  2BB8               	incf	processOutputs@io& (0+255),f,b
  7488                           
  7489                           ; BSR set to: 0
  7490  005832  0E0F               	movlw	15
  7491  005834  65B8               	cpfsgt	processOutputs@io& (0+255),b
  7492  005836  D6DE               	goto	l21075
  7493  005838  0012               	return	
  7494  00583A                     __end_of_processOutputs:
  7495                           	callstack 0
  7496                           
  7497 ;; *************** function _processActions *****************
  7498 ;; Defined at:
  7499 ;;		line 361 in file "../../github/CANMIOfirmware/mioEvents.c"
  7500 ;; Parameters:    Size  Location     Type
  7501 ;;		None
  7502 ;; Auto vars:     Size  Location     Type
  7503 ;;  nextAction      1  114[BANK0 ] unsigned char 
  7504 ;;  nextIo          1  111[BANK0 ] unsigned char 
  7505 ;;  nextType        1  109[BANK0 ] unsigned char 
  7506 ;;  ioAction        1  113[BANK0 ] unsigned char 
  7507 ;;  action          1  112[BANK0 ] unsigned char 
  7508 ;;  io              1  110[BANK0 ] unsigned char 
  7509 ;;  type            1  108[BANK0 ] unsigned char 
  7510 ;;  peekItem        1  107[BANK0 ] unsigned char 
  7511 ;;  simultaneous    1  106[BANK0 ] unsigned char 
  7512 ;; Return value:  Size  Location     Type
  7513 ;;                  1    wreg      void 
  7514 ;; Registers used:
  7515 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7516 ;; Tracked objects:
  7517 ;;		On entry : 3F/2
  7518 ;;		On exit  : 3E/0
  7519 ;;		Unchanged: 0/0
  7520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7521 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7522 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7523 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7524 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7525 ;;Total ram usage:       11 bytes
  7526 ;; Hardware stack levels used: 1
  7527 ;; Hardware stack levels required when called: 19
  7528 ;; This function calls:
  7529 ;;		___lwdiv
  7530 ;;		___lwmod
  7531 ;;		_completed
  7532 ;;		_deleteActionQueue
  7533 ;;		_doSOD
  7534 ;;		_doWait
  7535 ;;		_doneAction
  7536 ;;		_getAction
  7537 ;;		_needsStarting
  7538 ;;		_peekActionQueue
  7539 ;;		_setOutputState
  7540 ;;		_startOutput
  7541 ;; This function is called by:
  7542 ;;		_main
  7543 ;; This function uses a non-reentrant model
  7544 ;;
  7545                           
  7546                           	psect	text10
  7547  00583A                     __ptext10:
  7548                           	callstack 0
  7549  00583A                     _processActions:
  7550                           	callstack 11
  7551                           
  7552                           ; BSR set to: 2
  7553                           ;mioEvents.c: 362: unsigned char io;;mioEvents.c: 363: unsigned char type;;mioEvents.c: 
      +                          364: unsigned char action = getAction();
  7554                           
  7555                           ; BSR set to: 0
  7556                           ;incstack = 0
  7557  00583A  EC6E  F053         	call	_getAction	;wreg free
  7558  00583E  6FD0               	movwf	processActions@action& (0+255),b
  7559                           
  7560                           ; BSR set to: 0
  7561                           ;mioEvents.c: 365: unsigned char ioAction;;mioEvents.c: 366: unsigned char simultaneous;
      +                          ;mioEvents.c: 367: unsigned char peekItem;;mioEvents.c: 370: if (action == 0) {
  7562  005840  51D0               	movf	processActions@action& (0+255),w,b
  7563  005842  A4D8               	btfss	status,2,c
  7564  005844  D003               	goto	l21481
  7565  005846                     u27620:
  7566                           
  7567                           ; BSR set to: 0
  7568                           ;mioEvents.c: 371: doneAction();
  7569  005846  EC7A  F053         	call	_doneAction	;wreg free
  7570  00584A  0012               	return	
  7571  00584C                     l21481:
  7572                           
  7573                           ; BSR set to: 0
  7574                           ;mioEvents.c: 373: };mioEvents.c: 375: if (action == 1U) {
  7575  00584C  05D0               	decf	processActions@action& (0+255),w,b
  7576  00584E  A4D8               	btfss	status,2,c
  7577  005850  D003               	goto	l21489
  7578                           
  7579                           ; BSR set to: 0
  7580                           ;mioEvents.c: 377: doSOD();
  7581  005852  EC5A  F053         	call	_doSOD	;wreg free
  7582  005856  D7F7               	goto	u27620
  7583  005858                     l21489:
  7584                           
  7585                           ; BSR set to: 0
  7586                           ;mioEvents.c: 380: };mioEvents.c: 381: if (action == 2U) {
  7587  005858  0E02               	movlw	2
  7588  00585A  19D0               	xorwf	processActions@action& (0+255),w,b
  7589  00585C  A4D8               	btfss	status,2,c
  7590  00585E  D007               	goto	l21495
  7591                           
  7592                           ; BSR set to: 0
  7593                           ;mioEvents.c: 382: doWait(5);
  7594  005860  0E00               	movlw	0
  7595  005862  6F7E               	movwf	(doWait@duration+1)& (0+255),b
  7596  005864  0E05               	movlw	5
  7597  005866  6F7D               	movwf	doWait@duration& (0+255),b
  7598  005868  EC5A  F043         	call	_doWait	;wreg free
  7599  00586C  0012               	return	
  7600  00586E                     l21495:
  7601                           
  7602                           ; BSR set to: 0
  7603                           ;mioEvents.c: 384: };mioEvents.c: 385: if (action == 3U) {
  7604  00586E  0E03               	movlw	3
  7605  005870  19D0               	xorwf	processActions@action& (0+255),w,b
  7606  005872  A4D8               	btfss	status,2,c
  7607  005874  D007               	goto	l21501
  7608                           
  7609                           ; BSR set to: 0
  7610                           ;mioEvents.c: 386: doWait(10);
  7611  005876  0E00               	movlw	0
  7612  005878  6F7E               	movwf	(doWait@duration+1)& (0+255),b
  7613  00587A  0E0A               	movlw	10
  7614  00587C  6F7D               	movwf	doWait@duration& (0+255),b
  7615  00587E  EC5A  F043         	call	_doWait	;wreg free
  7616  005882  0012               	return	
  7617  005884                     l21501:
  7618                           
  7619                           ; BSR set to: 0
  7620                           ;mioEvents.c: 388: };mioEvents.c: 389: if (action == 4U) {
  7621  005884  0E04               	movlw	4
  7622  005886  19D0               	xorwf	processActions@action& (0+255),w,b
  7623  005888  A4D8               	btfss	status,2,c
  7624  00588A  D007               	goto	l21507
  7625                           
  7626                           ; BSR set to: 0
  7627                           ;mioEvents.c: 390: doWait(20);
  7628  00588C  0E00               	movlw	0
  7629  00588E  6F7E               	movwf	(doWait@duration+1)& (0+255),b
  7630  005890  0E14               	movlw	20
  7631  005892  6F7D               	movwf	doWait@duration& (0+255),b
  7632  005894  EC5A  F043         	call	_doWait	;wreg free
  7633  005898  0012               	return	
  7634  00589A                     l21507:
  7635                           
  7636                           ; BSR set to: 0
  7637                           ;mioEvents.c: 392: };mioEvents.c: 393: if (action == 5U) {
  7638  00589A  0E05               	movlw	5
  7639  00589C  19D0               	xorwf	processActions@action& (0+255),w,b
  7640  00589E  A4D8               	btfss	status,2,c
  7641  0058A0  D007               	goto	l21513
  7642                           
  7643                           ; BSR set to: 0
  7644                           ;mioEvents.c: 394: doWait(50);
  7645  0058A2  0E00               	movlw	0
  7646  0058A4  6F7E               	movwf	(doWait@duration+1)& (0+255),b
  7647  0058A6  0E32               	movlw	50
  7648  0058A8  6F7D               	movwf	doWait@duration& (0+255),b
  7649  0058AA  EC5A  F043         	call	_doWait	;wreg free
  7650  0058AE  0012               	return	
  7651  0058B0                     l21513:
  7652                           
  7653                           ; BSR set to: 0
  7654                           ;mioEvents.c: 396: };mioEvents.c: 397: simultaneous = action & 0x80U;
  7655  0058B0  51D0               	movf	processActions@action& (0+255),w,b
  7656  0058B2  0B80               	andlw	128
  7657  0058B4  6FCA               	movwf	processActions@simultaneous& (0+255),b
  7658                           
  7659                           ;mioEvents.c: 398: ioAction = action&0x7FU;
  7660  0058B6  51D0               	movf	processActions@action& (0+255),w,b
  7661  0058B8  0B7F               	andlw	127
  7662  0058BA  6FD1               	movwf	processActions@ioAction& (0+255),b
  7663                           
  7664                           ;mioEvents.c: 399: if ((ioAction >= 8U) && (ioAction < (8U + 16U * 5U))) {
  7665  0058BC  0E07               	movlw	7
  7666  0058BE  65D1               	cpfsgt	processActions@ioAction& (0+255),b
  7667  0058C0  D7C2               	goto	u27620
  7668                           
  7669                           ; BSR set to: 0
  7670  0058C2  0E58               	movlw	88
  7671  0058C4  61D1               	cpfslt	processActions@ioAction& (0+255),b
  7672  0058C6  D7BF               	goto	u27620
  7673                           
  7674                           ; BSR set to: 0
  7675                           ;mioEvents.c: 402: io = (((ioAction)-8U)/5U);
  7676  0058C8  0EF8               	movlw	248
  7677  0058CA  25D1               	addwf	processActions@ioAction& (0+255),w,b
  7678  0058CC  6F71               	movwf	___lwdiv@dividend& (0+255),b
  7679  0058CE  6B72               	clrf	(___lwdiv@dividend+1)& (0+255),b
  7680  0058D0  0EFF               	movlw	255
  7681  0058D2  2372               	addwfc	(___lwdiv@dividend+1)& (0+255),f,b
  7682  0058D4  0E00               	movlw	0
  7683  0058D6  6F74               	movwf	(___lwdiv@divisor+1)& (0+255),b
  7684  0058D8  0E05               	movlw	5
  7685  0058DA  6F73               	movwf	___lwdiv@divisor& (0+255),b
  7686  0058DC  ECCD  F04C         	call	___lwdiv	;wreg free
  7687  0058E0  5171               	movf	?___lwdiv& (0+255),w,b
  7688  0058E2  6FCE               	movwf	processActions@io& (0+255),b
  7689                           
  7690                           ;mioEvents.c: 403: ioAction = (((ioAction)-8U)%5U);
  7691  0058E4  0EF8               	movlw	248
  7692  0058E6  25D1               	addwf	processActions@ioAction& (0+255),w,b
  7693  0058E8  6F71               	movwf	___lwmod@dividend& (0+255),b
  7694  0058EA  6B72               	clrf	(___lwmod@dividend+1)& (0+255),b
  7695  0058EC  0EFF               	movlw	255
  7696  0058EE  2372               	addwfc	(___lwmod@dividend+1)& (0+255),f,b
  7697  0058F0  0E00               	movlw	0
  7698  0058F2  6F74               	movwf	(___lwmod@divisor+1)& (0+255),b
  7699  0058F4  0E05               	movlw	5
  7700  0058F6  6F73               	movwf	___lwmod@divisor& (0+255),b
  7701  0058F8  ECD0  F04E         	call	___lwmod	;wreg free
  7702  0058FC  5171               	movf	?___lwmod& (0+255),w,b
  7703  0058FE  6FD1               	movwf	processActions@ioAction& (0+255),b
  7704                           
  7705                           ; BSR set to: 0
  7706                           ;mioEvents.c: 404: type = NV->io[io].type;
  7707  005900  51CE               	movf	processActions@io& (0+255),w,b
  7708  005902  0D07               	mullw	7
  7709  005904  C0EC  F0C8         	movff	_NV,??_processActions
  7710  005908  C0ED  F0C9         	movff	_NV+1,??_processActions+1
  7711  00590C  50F3               	movf	243,w,c
  7712  00590E  27C8               	addwf	??_processActions& (0+255),f,b
  7713  005910  50F4               	movf	244,w,c
  7714  005912  23C9               	addwfc	(??_processActions+1)& (0+255),f,b
  7715  005914  0E10               	movlw	16
  7716  005916  25C8               	addwf	??_processActions& (0+255),w,b
  7717  005918  6ED9               	movwf	fsr2l,c
  7718  00591A  0E00               	movlw	0
  7719  00591C  21C9               	addwfc	(??_processActions+1)& (0+255),w,b
  7720  00591E  6EDA               	movwf	fsr2h,c
  7721  005920  50DF               	movf	indf2,w,c
  7722  005922  6FCC               	movwf	processActions@type& (0+255),b
  7723                           
  7724                           ; BSR set to: 0
  7725                           ;mioEvents.c: 407: setOutputState(io, ioAction, type);
  7726  005924  C0D1  F076         	movff	processActions@ioAction,setOutputState@action
  7727  005928  C0CC  F077         	movff	processActions@type,setOutputState@type
  7728  00592C  51CE               	movf	processActions@io& (0+255),w,b
  7729  00592E  EC51  F04C         	call	_setOutputState
  7730                           
  7731                           ; BSR set to: 0
  7732                           ;mioEvents.c: 408: if (needsStarting(io, ioAction, type)) {
  7733  005932  C0D1  F071         	movff	processActions@ioAction,needsStarting@action
  7734  005936  C0CC  F072         	movff	processActions@type,needsStarting@type
  7735  00593A  51CE               	movf	processActions@io& (0+255),w,b
  7736  00593C  EC72  F046         	call	_needsStarting
  7737  005940  0900               	iorlw	0
  7738  005942  B4D8               	btfsc	status,2,c
  7739  005944  D007               	goto	l21527
  7740                           
  7741                           ; BSR set to: 0
  7742                           ;mioEvents.c: 409: startOutput(io, ioAction, type);
  7743  005946  C0D1  F0C5         	movff	processActions@ioAction,startOutput@action
  7744  00594A  C0CC  F0C6         	movff	processActions@type,startOutput@type
  7745  00594E  51CE               	movf	processActions@io& (0+255),w,b
  7746  005950  EC77  F04B         	call	_startOutput
  7747  005954                     l21527:
  7748                           
  7749                           ;mioEvents.c: 410: };mioEvents.c: 412: peekItem = 1;
  7750  005954  0E01               	movlw	1
  7751  005956  0100               	movlb	0	; () banked
  7752  005958  6FCB               	movwf	processActions@peekItem& (0+255),b
  7753                           
  7754                           ;mioEvents.c: 413: while (simultaneous) {
  7755  00595A  D064               	goto	l21561
  7756  00595C                     l21529:
  7757                           
  7758                           ; BSR set to: 0
  7759                           ;mioEvents.c: 414: unsigned char nextAction;;mioEvents.c: 415: unsigned char nextIo;;mio
      +                          Events.c: 416: unsigned char nextType;;mioEvents.c: 418: nextAction = peekActionQueue(pe
      +                          ekItem);
  7760  00595C  51CB               	movf	processActions@peekItem& (0+255),w,b
  7761  00595E  ECED  F04A         	call	_peekActionQueue
  7762  005962  6FD2               	movwf	processActions@nextAction& (0+255),b
  7763                           
  7764                           ; BSR set to: 0
  7765                           ;mioEvents.c: 419: if (nextAction == 0) break;
  7766  005964  51D2               	movf	processActions@nextAction& (0+255),w,b
  7767  005966  B4D8               	btfsc	status,2,c
  7768  005968  D060               	goto	u27750
  7769                           
  7770                           ; BSR set to: 0
  7771                           ;mioEvents.c: 420: simultaneous = nextAction & 0x80U;
  7772  00596A  51D2               	movf	processActions@nextAction& (0+255),w,b
  7773  00596C  0B80               	andlw	128
  7774  00596E  6FCA               	movwf	processActions@simultaneous& (0+255),b
  7775                           
  7776                           ; BSR set to: 0
  7777                           ;mioEvents.c: 421: nextAction &= 0x7FU;
  7778  005970  9FD2               	bcf	processActions@nextAction& (0+255),7,b
  7779                           
  7780                           ; BSR set to: 0
  7781                           ;mioEvents.c: 422: nextIo = (((nextAction)-8U)/5U);
  7782  005972  0EF8               	movlw	248
  7783  005974  25D2               	addwf	processActions@nextAction& (0+255),w,b
  7784  005976  6F71               	movwf	___lwdiv@dividend& (0+255),b
  7785  005978  6B72               	clrf	(___lwdiv@dividend+1)& (0+255),b
  7786  00597A  0EFF               	movlw	255
  7787  00597C  2372               	addwfc	(___lwdiv@dividend+1)& (0+255),f,b
  7788  00597E  0E00               	movlw	0
  7789  005980  6F74               	movwf	(___lwdiv@divisor+1)& (0+255),b
  7790  005982  0E05               	movlw	5
  7791  005984  6F73               	movwf	___lwdiv@divisor& (0+255),b
  7792  005986  ECCD  F04C         	call	___lwdiv	;wreg free
  7793  00598A  5171               	movf	?___lwdiv& (0+255),w,b
  7794  00598C  6FCF               	movwf	processActions@nextIo& (0+255),b
  7795                           
  7796                           ; BSR set to: 0
  7797                           ;mioEvents.c: 423: if (nextIo == io) {
  7798  00598E  51CE               	movf	processActions@io& (0+255),w,b
  7799  005990  19CF               	xorwf	processActions@nextIo& (0+255),w,b
  7800  005992  B4D8               	btfsc	status,2,c
  7801  005994  D04A               	goto	u27750
  7802                           
  7803                           ; BSR set to: 0
  7804                           ;mioEvents.c: 428: };mioEvents.c: 429: nextAction = (((nextAction)-8U)%5U);
  7805  005996  0EF8               	movlw	248
  7806  005998  25D2               	addwf	processActions@nextAction& (0+255),w,b
  7807  00599A  6F71               	movwf	___lwmod@dividend& (0+255),b
  7808  00599C  6B72               	clrf	(___lwmod@dividend+1)& (0+255),b
  7809  00599E  0EFF               	movlw	255
  7810  0059A0  2372               	addwfc	(___lwmod@dividend+1)& (0+255),f,b
  7811  0059A2  0E00               	movlw	0
  7812  0059A4  6F74               	movwf	(___lwmod@divisor+1)& (0+255),b
  7813  0059A6  0E05               	movlw	5
  7814  0059A8  6F73               	movwf	___lwmod@divisor& (0+255),b
  7815  0059AA  ECD0  F04E         	call	___lwmod	;wreg free
  7816  0059AE  5171               	movf	?___lwmod& (0+255),w,b
  7817  0059B0  6FD2               	movwf	processActions@nextAction& (0+255),b
  7818                           
  7819                           ; BSR set to: 0
  7820                           ;mioEvents.c: 430: nextType = NV->io[nextIo].type;
  7821  0059B2  51CF               	movf	processActions@nextIo& (0+255),w,b
  7822  0059B4  0D07               	mullw	7
  7823  0059B6  C0EC  F0C8         	movff	_NV,??_processActions
  7824  0059BA  C0ED  F0C9         	movff	_NV+1,??_processActions+1
  7825  0059BE  50F3               	movf	243,w,c
  7826  0059C0  27C8               	addwf	??_processActions& (0+255),f,b
  7827  0059C2  50F4               	movf	244,w,c
  7828  0059C4  23C9               	addwfc	(??_processActions+1)& (0+255),f,b
  7829  0059C6  0E10               	movlw	16
  7830  0059C8  25C8               	addwf	??_processActions& (0+255),w,b
  7831  0059CA  6ED9               	movwf	fsr2l,c
  7832  0059CC  0E00               	movlw	0
  7833  0059CE  21C9               	addwfc	(??_processActions+1)& (0+255),w,b
  7834  0059D0  6EDA               	movwf	fsr2h,c
  7835  0059D2  50DF               	movf	indf2,w,c
  7836  0059D4  6FCD               	movwf	processActions@nextType& (0+255),b
  7837                           
  7838                           ; BSR set to: 0
  7839                           ;mioEvents.c: 431: setOutputState(nextIo, nextAction, nextType);
  7840  0059D6  C0D2  F076         	movff	processActions@nextAction,setOutputState@action
  7841  0059DA  C0CD  F077         	movff	processActions@nextType,setOutputState@type
  7842  0059DE  51CF               	movf	processActions@nextIo& (0+255),w,b
  7843  0059E0  EC51  F04C         	call	_setOutputState
  7844                           
  7845                           ; BSR set to: 0
  7846                           ;mioEvents.c: 432: if (needsStarting(nextIo, nextAction, nextType)) {
  7847  0059E4  C0D2  F071         	movff	processActions@nextAction,needsStarting@action
  7848  0059E8  C0CD  F072         	movff	processActions@nextType,needsStarting@type
  7849  0059EC  51CF               	movf	processActions@nextIo& (0+255),w,b
  7850  0059EE  EC72  F046         	call	_needsStarting
  7851  0059F2  0900               	iorlw	0
  7852  0059F4  B4D8               	btfsc	status,2,c
  7853  0059F6  D007               	goto	l21555
  7854                           
  7855                           ; BSR set to: 0
  7856                           ;mioEvents.c: 433: startOutput(nextIo, nextAction, nextType);
  7857  0059F8  C0D2  F0C5         	movff	processActions@nextAction,startOutput@action
  7858  0059FC  C0CD  F0C6         	movff	processActions@nextType,startOutput@type
  7859  005A00  51CF               	movf	processActions@nextIo& (0+255),w,b
  7860  005A02  EC77  F04B         	call	_startOutput
  7861  005A06                     l21555:
  7862                           
  7863                           ;mioEvents.c: 434: };mioEvents.c: 435: if (completed(nextIo, nextAction, nextType)) {
  7864  005A06  C0D2  F071         	movff	processActions@nextAction,completed@action
  7865  005A0A  C0CD  F072         	movff	processActions@nextType,completed@type
  7866  005A0E  0100               	movlb	0	; () banked
  7867  005A10  51CF               	movf	processActions@nextIo& (0+255),w,b
  7868  005A12  EC41  F044         	call	_completed
  7869  005A16  0900               	iorlw	0
  7870  005A18  B4D8               	btfsc	status,2,c
  7871  005A1A  D003               	goto	l21559
  7872                           
  7873                           ; BSR set to: 0
  7874                           ;mioEvents.c: 436: deleteActionQueue(peekItem);
  7875  005A1C  51CB               	movf	processActions@peekItem& (0+255),w,b
  7876  005A1E  EC6B  F04D         	call	_deleteActionQueue
  7877  005A22                     l21559:
  7878                           
  7879                           ; BSR set to: 0
  7880                           ;mioEvents.c: 437: };mioEvents.c: 438: peekItem++;
  7881  005A22  2BCB               	incf	processActions@peekItem& (0+255),f,b
  7882  005A24                     l21561:
  7883                           
  7884                           ; BSR set to: 0
  7885  005A24  51CA               	movf	processActions@simultaneous& (0+255),w,b
  7886  005A26  A4D8               	btfss	status,2,c
  7887  005A28  D799               	goto	l21529
  7888  005A2A                     u27750:
  7889                           
  7890                           ; BSR set to: 0
  7891                           ;mioEvents.c: 439: };mioEvents.c: 441: if (completed(io, ioAction, type)) {
  7892  005A2A  C0D1  F071         	movff	processActions@ioAction,completed@action
  7893  005A2E  C0CC  F072         	movff	processActions@type,completed@type
  7894  005A32  51CE               	movf	processActions@io& (0+255),w,b
  7895  005A34  EC41  F044         	call	_completed
  7896  005A38  0900               	iorlw	0
  7897  005A3A  B4D8               	btfsc	status,2,c
  7898  005A3C  0012               	return	
  7899  005A3E  D703               	goto	u27620
  7900  005A40                     __end_of_processActions:
  7901                           	callstack 0
  7902                           
  7903 ;; *************** function _startOutput *****************
  7904 ;; Defined at:
  7905 ;;		line 69 in file "../../github/CANMIOfirmware/outputs.c"
  7906 ;; Parameters:    Size  Location     Type
  7907 ;;  io              1    wreg     unsigned char 
  7908 ;;  action          1  101[BANK0 ] unsigned char 
  7909 ;;  type            1  102[BANK0 ] unsigned char 
  7910 ;; Auto vars:     Size  Location     Type
  7911 ;;  io              1  103[BANK0 ] unsigned char 
  7912 ;; Return value:  Size  Location     Type
  7913 ;;                  1    wreg      void 
  7914 ;; Registers used:
  7915 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7916 ;; Tracked objects:
  7917 ;;		On entry : 3F/0
  7918 ;;		On exit  : 3E/0
  7919 ;;		Unchanged: 0/0
  7920 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7921 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7922 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7923 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7924 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7925 ;;Total ram usage:        3 bytes
  7926 ;; Hardware stack levels used: 1
  7927 ;; Hardware stack levels required when called: 18
  7928 ;; This function calls:
  7929 ;;		_startBounceOutput
  7930 ;;		_startDigitalOutput
  7931 ;;		_startMultiOutput
  7932 ;;		_startServoOutput
  7933 ;; This function is called by:
  7934 ;;		_processActions
  7935 ;; This function uses a non-reentrant model
  7936 ;;
  7937                           
  7938                           	psect	text11
  7939  0096EE                     __ptext11:
  7940                           	callstack 0
  7941  0096EE                     _startOutput:
  7942                           	callstack 11
  7943                           
  7944                           ;incstack = 0
  7945                           ;startOutput@io stored from wreg
  7946  0096EE  6FC7               	movwf	startOutput@io& (0+255),b
  7947                           
  7948                           ;outputs.c: 70: switch(type) {
  7949  0096F0  D018               	goto	l20469
  7950  0096F2                     l20451:
  7951                           
  7952                           ; BSR set to: 0
  7953                           ;outputs.c: 75: startDigitalOutput(io, action);
  7954  0096F2  C0C5  F0BD         	movff	startOutput@action,startDigitalOutput@state
  7955  0096F6  51C7               	movf	startOutput@io& (0+255),w,b
  7956  0096F8  ECE3  F026         	call	_startDigitalOutput
  7957  0096FC  0012               	return	
  7958  0096FE                     l20455:
  7959                           
  7960                           ; BSR set to: 0
  7961                           ;outputs.c: 79: startBounceOutput(io, action);
  7962  0096FE  C0C5  F071         	movff	startOutput@action,startBounceOutput@action
  7963  009702  51C7               	movf	startOutput@io& (0+255),w,b
  7964  009704  ECC9  F049         	call	_startBounceOutput
  7965  009708  0012               	return	
  7966  00970A                     l20459:
  7967                           
  7968                           ; BSR set to: 0
  7969                           ;outputs.c: 84: startServoOutput(io, action);
  7970  00970A  C0C5  F071         	movff	startOutput@action,startServoOutput@action
  7971  00970E  51C7               	movf	startOutput@io& (0+255),w,b
  7972  009710  EC0A  F03B         	call	_startServoOutput
  7973  009714  0012               	return	
  7974  009716                     l20463:
  7975                           
  7976                           ; BSR set to: 0
  7977                           ;outputs.c: 89: startMultiOutput(io, action);
  7978  009716  C0C5  F071         	movff	startOutput@action,startMultiOutput@action
  7979  00971A  51C7               	movf	startOutput@io& (0+255),w,b
  7980  00971C  ECB9  F042         	call	_startMultiOutput
  7981  009720  0012               	return	
  7982  009722                     l20469:
  7983  009722  0100               	movlb	0	; () banked
  7984  009724  51C6               	movf	startOutput@type& (0+255),w,b
  7985                           
  7986                           ; Switch size 1, requested type "simple"
  7987                           ; Number of cases is 5, Range of values is 0 to 4
  7988                           ; switch strategies available:
  7989                           ; Name         Instructions Cycles
  7990                           ; simple_byte           16     9 (average)
  7991                           ;	Chosen strategy is simple_byte
  7992  009726  0A00               	xorlw	0	; case 0
  7993  009728  B4D8               	btfsc	status,2,c
  7994  00972A  0012               	return	
  7995  00972C  0A01               	xorlw	1	; case 1
  7996  00972E  B4D8               	btfsc	status,2,c
  7997  009730  D7E0               	goto	l20451
  7998  009732  0A03               	xorlw	3	; case 2
  7999  009734  B4D8               	btfsc	status,2,c
  8000  009736  D7E9               	goto	l20459
  8001  009738  0A01               	xorlw	1	; case 3
  8002  00973A  B4D8               	btfsc	status,2,c
  8003  00973C  D7E0               	goto	l20455
  8004  00973E  0A07               	xorlw	7	; case 4
  8005  009740  A4D8               	btfss	status,2,c
  8006  009742  0012               	return	
  8007  009744  D7E8               	goto	l20463
  8008  009746                     __end_of_startOutput:
  8009                           	callstack 0
  8010                           
  8011 ;; *************** function _startDigitalOutput *****************
  8012 ;; Defined at:
  8013 ;;		line 108 in file "../../github/CANMIOfirmware/digitalOut.c"
  8014 ;; Parameters:    Size  Location     Type
  8015 ;;  io              1    wreg     unsigned char 
  8016 ;;  state           1   93[BANK0 ] unsigned char 
  8017 ;; Auto vars:     Size  Location     Type
  8018 ;;  io              1  100[BANK0 ] unsigned char 
  8019 ;;  actionState     1   99[BANK0 ] unsigned char 
  8020 ;;  pinState        1   98[BANK0 ] unsigned char 
  8021 ;; Return value:  Size  Location     Type
  8022 ;;                  1    wreg      void 
  8023 ;; Registers used:
  8024 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8025 ;; Tracked objects:
  8026 ;;		On entry : 3F/0
  8027 ;;		On exit  : 3E/0
  8028 ;;		Unchanged: 0/0
  8029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8030 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8031 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8032 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8033 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8034 ;;Total ram usage:        8 bytes
  8035 ;; Hardware stack levels used: 1
  8036 ;; Hardware stack levels required when called: 17
  8037 ;; This function calls:
  8038 ;;		_ee_write
  8039 ;;		_sendInvertedProducedEvent
  8040 ;;		_setOutputPin
  8041 ;; This function is called by:
  8042 ;;		_startOutput
  8043 ;; This function uses a non-reentrant model
  8044 ;;
  8045                           
  8046                           	psect	text12
  8047  004DC6                     __ptext12:
  8048                           	callstack 0
  8049  004DC6                     _startDigitalOutput:
  8050                           	callstack 11
  8051                           
  8052                           ;incstack = 0
  8053                           ;startDigitalOutput@io stored from wreg
  8054  004DC6  6FC4               	movwf	startDigitalOutput@io& (0+255),b
  8055                           
  8056                           ;digitalOut.c: 109: BOOL pinState;;digitalOut.c: 110: BOOL actionState;;digitalOut.c: 11
      +                          8: if (state == 3U) {
  8057  004DC8  0E03               	movlw	3
  8058  004DCA  0100               	movlb	0	; () banked
  8059  004DCC  19BD               	xorwf	startDigitalOutput@state& (0+255),w,b
  8060  004DCE  A4D8               	btfss	status,2,c
  8061  004DD0  D063               	goto	l19951
  8062                           
  8063                           ; BSR set to: 0
  8064                           ;digitalOut.c: 119: flashDelays[io] = NV->io[io].nv_io.nv_output.output_flash_period;
  8065  004DD2  51C4               	movf	startDigitalOutput@io& (0+255),w,b
  8066  004DD4  0D07               	mullw	7
  8067  004DD6  C0EC  F0BE         	movff	_NV,??_startDigitalOutput
  8068  004DDA  C0ED  F0BF         	movff	_NV+1,??_startDigitalOutput+1
  8069  004DDE  50F3               	movf	243,w,c
  8070  004DE0  27BE               	addwf	??_startDigitalOutput& (0+255),f,b
  8071  004DE2  50F4               	movf	244,w,c
  8072  004DE4  23BF               	addwfc	(??_startDigitalOutput+1)& (0+255),f,b
  8073  004DE6  0E13               	movlw	19
  8074  004DE8  25BE               	addwf	??_startDigitalOutput& (0+255),w,b
  8075  004DEA  6ED9               	movwf	fsr2l,c
  8076  004DEC  0E00               	movlw	0
  8077  004DEE  21BF               	addwfc	(??_startDigitalOutput+1)& (0+255),w,b
  8078  004DF0  6EDA               	movwf	fsr2h,c
  8079  004DF2  0E60               	movlw	low _flashDelays
  8080  004DF4  25C4               	addwf	startDigitalOutput@io& (0+255),w,b
  8081  004DF6  6EE1               	movwf	fsr1l,c
  8082  004DF8  6AE2               	clrf	fsr1h,c
  8083  004DFA  0E01               	movlw	high _flashDelays
  8084  004DFC  22E2               	addwfc	fsr1h,f,c
  8085  004DFE  CFDF FFE7          	movff	indf2,indf1
  8086                           
  8087                           ; BSR set to: 0
  8088                           ;digitalOut.c: 120: pulseDelays[io] = 0;
  8089  004E02  0EA4               	movlw	low _pulseDelays
  8090  004E04  25C4               	addwf	startDigitalOutput@io& (0+255),w,b
  8091  004E06  6ED9               	movwf	fsr2l,c
  8092  004E08  6ADA               	clrf	fsr2h,c
  8093  004E0A  0E02               	movlw	high _pulseDelays
  8094  004E0C  22DA               	addwfc	fsr2h,f,c
  8095  004E0E  0E00               	movlw	0
  8096  004E10  6EDF               	movwf	indf2,c
  8097                           
  8098                           ; BSR set to: 0
  8099                           ;digitalOut.c: 121: setOutputPin(io, (unsigned char)(! ((NV->io[io].flags) & 0x20U)));
  8100  004E12  51C4               	movf	startDigitalOutput@io& (0+255),w,b
  8101  004E14  0D07               	mullw	7
  8102  004E16  C0EC  F0BE         	movff	_NV,??_startDigitalOutput
  8103  004E1A  C0ED  F0BF         	movff	_NV+1,??_startDigitalOutput+1
  8104  004E1E  50F3               	movf	243,w,c
  8105  004E20  27BE               	addwf	??_startDigitalOutput& (0+255),f,b
  8106  004E22  50F4               	movf	244,w,c
  8107  004E24  23BF               	addwfc	(??_startDigitalOutput+1)& (0+255),f,b
  8108  004E26  0E11               	movlw	17
  8109  004E28  25BE               	addwf	??_startDigitalOutput& (0+255),w,b
  8110  004E2A  6ED9               	movwf	fsr2l,c
  8111  004E2C  0E00               	movlw	0
  8112  004E2E  21BF               	addwfc	(??_startDigitalOutput+1)& (0+255),w,b
  8113  004E30  6EDA               	movwf	fsr2h,c
  8114  004E32  BADF               	btfsc	indf2,5,c
  8115  004E34  D002               	goto	u24760
  8116  004E36  0E01               	movlw	1
  8117  004E38  D001               	goto	u24770
  8118  004E3A                     u24760:
  8119  004E3A  0E00               	movlw	0
  8120  004E3C                     u24770:
  8121  004E3C  6F71               	movwf	setOutputPin@state& (0+255),b
  8122  004E3E  51C4               	movf	startDigitalOutput@io& (0+255),w,b
  8123  004E40  EC90  F031         	call	_setOutputPin
  8124                           
  8125                           ; BSR set to: 0
  8126                           ;digitalOut.c: 122: ee_write(((WORD)(((BYTE*)(0x3FF-40)))-17)+io, state);
  8127  004E44  0EC6               	movlw	198
  8128  004E46  25C4               	addwf	startDigitalOutput@io& (0+255),w,b
  8129  004E48  6F73               	movwf	ee_write@addr& (0+255),b
  8130  004E4A  6B74               	clrf	(ee_write@addr+1)& (0+255),b
  8131  004E4C  0E03               	movlw	3
  8132  004E4E  2374               	addwfc	(ee_write@addr+1)& (0+255),f,b
  8133  004E50  C0BD  F075         	movff	startDigitalOutput@state,ee_write@data
  8134  004E54  EC1D  F04D         	call	_ee_write	;wreg free
  8135                           
  8136                           ; BSR set to: 0
  8137                           ;digitalOut.c: 123: sendInvertedProducedEvent(((8U + 4U*(io))+0U), 1,;digitalOut.c: 124:
      +                           NV->io[io].flags & 0x40U, 1, 1);
  8138  004E58  0E01               	movlw	1
  8139  004E5A  6FB5               	movwf	sendInvertedProducedEvent@state& (0+255),b
  8140  004E5C  51C4               	movf	startDigitalOutput@io& (0+255),w,b
  8141  004E5E  0D07               	mullw	7
  8142  004E60  C0EC  F0BE         	movff	_NV,??_startDigitalOutput
  8143  004E64  C0ED  F0BF         	movff	_NV+1,??_startDigitalOutput+1
  8144  004E68  50F3               	movf	243,w,c
  8145  004E6A  27BE               	addwf	??_startDigitalOutput& (0+255),f,b
  8146  004E6C  50F4               	movf	244,w,c
  8147  004E6E  23BF               	addwfc	(??_startDigitalOutput+1)& (0+255),f,b
  8148  004E70  0E11               	movlw	17
  8149  004E72  25BE               	addwf	??_startDigitalOutput& (0+255),w,b
  8150  004E74  6ED9               	movwf	fsr2l,c
  8151  004E76  0E00               	movlw	0
  8152  004E78  21BF               	addwfc	(??_startDigitalOutput+1)& (0+255),w,b
  8153  004E7A  6EDA               	movwf	fsr2h,c
  8154  004E7C  50DF               	movf	indf2,w,c
  8155  004E7E  0B40               	andlw	64
  8156  004E80  6FB6               	movwf	sendInvertedProducedEvent@invert& (0+255),b
  8157  004E82  0E01               	movlw	1
  8158  004E84  6FB7               	movwf	sendInvertedProducedEvent@can_send_on& (0+255),b
  8159  004E86  0E01               	movlw	1
  8160  004E88  6FB8               	movwf	sendInvertedProducedEvent@can_send_off& (0+255),b
  8161  004E8A  51C4               	movf	startDigitalOutput@io& (0+255),w,b
  8162  004E8C  0D04               	mullw	4
  8163  004E8E  50F3               	movf	243,w,c
  8164  004E90  0F08               	addlw	8
  8165  004E92  EC91  F04D         	call	_sendInvertedProducedEvent
  8166  004E96  0012               	return	
  8167  004E98                     l19951:
  8168                           
  8169                           ; BSR set to: 0
  8170                           ;digitalOut.c: 126: };digitalOut.c: 127: flashDelays[io] = 0;
  8171  004E98  0E60               	movlw	low _flashDelays
  8172  004E9A  25C4               	addwf	startDigitalOutput@io& (0+255),w,b
  8173  004E9C  6ED9               	movwf	fsr2l,c
  8174  004E9E  6ADA               	clrf	fsr2h,c
  8175  004EA0  0E01               	movlw	high _flashDelays
  8176  004EA2  22DA               	addwfc	fsr2h,f,c
  8177  004EA4  0E00               	movlw	0
  8178  004EA6  6EDF               	movwf	indf2,c
  8179                           
  8180                           ; BSR set to: 0
  8181                           ;digitalOut.c: 129: actionState = (unsigned char)(state == 1U);
  8182  004EA8  05BD               	decf	startDigitalOutput@state& (0+255),w,b
  8183  004EAA  A4D8               	btfss	status,2,c
  8184  004EAC  D002               	goto	u24780
  8185  004EAE  0E01               	movlw	1
  8186  004EB0  D001               	goto	u24790
  8187  004EB2                     u24780:
  8188  004EB2  0E00               	movlw	0
  8189  004EB4                     u24790:
  8190  004EB4  6FC3               	movwf	startDigitalOutput@actionState& (0+255),b
  8191                           
  8192                           ; BSR set to: 0
  8193                           ;digitalOut.c: 132: if (NV->io[io].flags & 0x01U) {
  8194  004EB6  51C4               	movf	startDigitalOutput@io& (0+255),w,b
  8195  004EB8  0D07               	mullw	7
  8196  004EBA  C0EC  F0BE         	movff	_NV,??_startDigitalOutput
  8197  004EBE  C0ED  F0BF         	movff	_NV+1,??_startDigitalOutput+1
  8198  004EC2  50F3               	movf	243,w,c
  8199  004EC4  27BE               	addwf	??_startDigitalOutput& (0+255),f,b
  8200  004EC6  50F4               	movf	244,w,c
  8201  004EC8  23BF               	addwfc	(??_startDigitalOutput+1)& (0+255),f,b
  8202  004ECA  0E11               	movlw	17
  8203  004ECC  25BE               	addwf	??_startDigitalOutput& (0+255),w,b
  8204  004ECE  6ED9               	movwf	fsr2l,c
  8205  004ED0  0E00               	movlw	0
  8206  004ED2  21BF               	addwfc	(??_startDigitalOutput+1)& (0+255),w,b
  8207  004ED4  6EDA               	movwf	fsr2h,c
  8208  004ED6  A0DF               	btfss	indf2,0,c
  8209  004ED8  D007               	goto	l216
  8210                           
  8211                           ; BSR set to: 0
  8212                           ;digitalOut.c: 133: actionState = (unsigned char)(!actionState);
  8213  004EDA  51C3               	movf	startDigitalOutput@actionState& (0+255),w,b
  8214  004EDC  A4D8               	btfss	status,2,c
  8215  004EDE  D002               	goto	u24810
  8216  004EE0  0E01               	movlw	1
  8217  004EE2  D001               	goto	u24820
  8218  004EE4                     u24810:
  8219  004EE4  0E00               	movlw	0
  8220  004EE6                     u24820:
  8221  004EE6  6FC3               	movwf	startDigitalOutput@actionState& (0+255),b
  8222  004EE8                     l216:
  8223                           
  8224                           ; BSR set to: 0
  8225                           ;digitalOut.c: 134: };digitalOut.c: 137: if (( ! actionState) && (NV->io[io].nv_io.nv_ou
      +                          tput.output_pulse_duration)) {
  8226  004EE8  51C3               	movf	startDigitalOutput@actionState& (0+255),w,b
  8227  004EEA  A4D8               	btfss	status,2,c
  8228  004EEC  D013               	goto	l19963
  8229                           
  8230                           ; BSR set to: 0
  8231  004EEE  51C4               	movf	startDigitalOutput@io& (0+255),w,b
  8232  004EF0  0D07               	mullw	7
  8233  004EF2  C0EC  F0BE         	movff	_NV,??_startDigitalOutput
  8234  004EF6  C0ED  F0BF         	movff	_NV+1,??_startDigitalOutput+1
  8235  004EFA  50F3               	movf	243,w,c
  8236  004EFC  27BE               	addwf	??_startDigitalOutput& (0+255),f,b
  8237  004EFE  50F4               	movf	244,w,c
  8238  004F00  23BF               	addwfc	(??_startDigitalOutput+1)& (0+255),f,b
  8239  004F02  0E12               	movlw	18
  8240  004F04  25BE               	addwf	??_startDigitalOutput& (0+255),w,b
  8241  004F06  6ED9               	movwf	fsr2l,c
  8242  004F08  0E00               	movlw	0
  8243  004F0A  21BF               	addwfc	(??_startDigitalOutput+1)& (0+255),w,b
  8244  004F0C  6EDA               	movwf	fsr2h,c
  8245  004F0E  50DF               	movf	indf2,w,c
  8246  004F10  A4D8               	btfss	status,2,c
  8247  004F12  0012               	return	
  8248  004F14                     l19963:
  8249                           
  8250                           ; BSR set to: 0
  8251                           ;digitalOut.c: 139: };digitalOut.c: 143: if ((actionState) && NV->io[io].nv_io.nv_output
      +                          .output_pulse_duration && (pulseDelays[io] == 0)) {
  8252  004F14  51C3               	movf	startDigitalOutput@actionState& (0+255),w,b
  8253  004F16  B4D8               	btfsc	status,2,c
  8254  004F18  D03F               	goto	l19973
  8255                           
  8256                           ; BSR set to: 0
  8257  004F1A  51C4               	movf	startDigitalOutput@io& (0+255),w,b
  8258  004F1C  0D07               	mullw	7
  8259  004F1E  C0EC  F0BE         	movff	_NV,??_startDigitalOutput
  8260  004F22  C0ED  F0BF         	movff	_NV+1,??_startDigitalOutput+1
  8261  004F26  50F3               	movf	243,w,c
  8262  004F28  27BE               	addwf	??_startDigitalOutput& (0+255),f,b
  8263  004F2A  50F4               	movf	244,w,c
  8264  004F2C  23BF               	addwfc	(??_startDigitalOutput+1)& (0+255),f,b
  8265  004F2E  0E12               	movlw	18
  8266  004F30  25BE               	addwf	??_startDigitalOutput& (0+255),w,b
  8267  004F32  6ED9               	movwf	fsr2l,c
  8268  004F34  0E00               	movlw	0
  8269  004F36  21BF               	addwfc	(??_startDigitalOutput+1)& (0+255),w,b
  8270  004F38  6EDA               	movwf	fsr2h,c
  8271  004F3A  50DF               	movf	indf2,w,c
  8272  004F3C  B4D8               	btfsc	status,2,c
  8273  004F3E  D02C               	goto	l19973
  8274                           
  8275                           ; BSR set to: 0
  8276  004F40  0EA4               	movlw	low _pulseDelays
  8277  004F42  25C4               	addwf	startDigitalOutput@io& (0+255),w,b
  8278  004F44  6ED9               	movwf	fsr2l,c
  8279  004F46  6ADA               	clrf	fsr2h,c
  8280  004F48  0E02               	movlw	high _pulseDelays
  8281  004F4A  22DA               	addwfc	fsr2h,f,c
  8282  004F4C  50DF               	movf	indf2,w,c
  8283  004F4E  A4D8               	btfss	status,2,c
  8284  004F50  D023               	goto	l19973
  8285                           
  8286                           ; BSR set to: 0
  8287                           ;digitalOut.c: 144: pulseDelays[io] = NV->io[io].nv_io.nv_output.output_pulse_duration;
  8288  004F52  51C4               	movf	startDigitalOutput@io& (0+255),w,b
  8289  004F54  0D07               	mullw	7
  8290  004F56  C0EC  F0BE         	movff	_NV,??_startDigitalOutput
  8291  004F5A  C0ED  F0BF         	movff	_NV+1,??_startDigitalOutput+1
  8292  004F5E  50F3               	movf	243,w,c
  8293  004F60  27BE               	addwf	??_startDigitalOutput& (0+255),f,b
  8294  004F62  50F4               	movf	244,w,c
  8295  004F64  23BF               	addwfc	(??_startDigitalOutput+1)& (0+255),f,b
  8296  004F66  0E12               	movlw	18
  8297  004F68  25BE               	addwf	??_startDigitalOutput& (0+255),w,b
  8298  004F6A  6ED9               	movwf	fsr2l,c
  8299  004F6C  0E00               	movlw	0
  8300  004F6E  21BF               	addwfc	(??_startDigitalOutput+1)& (0+255),w,b
  8301  004F70  6EDA               	movwf	fsr2h,c
  8302  004F72  0EA4               	movlw	low _pulseDelays
  8303  004F74  25C4               	addwf	startDigitalOutput@io& (0+255),w,b
  8304  004F76  6EE1               	movwf	fsr1l,c
  8305  004F78  6AE2               	clrf	fsr1h,c
  8306  004F7A  0E02               	movlw	high _pulseDelays
  8307  004F7C  22E2               	addwfc	fsr1h,f,c
  8308  004F7E  CFDF FFE7          	movff	indf2,indf1
  8309                           
  8310                           ; BSR set to: 0
  8311                           ;digitalOut.c: 147: ee_write(((WORD)(((BYTE*)(0x3FF-40)))-17)+io, 2U);
  8312  004F82  0EC6               	movlw	198
  8313  004F84  25C4               	addwf	startDigitalOutput@io& (0+255),w,b
  8314  004F86  6F73               	movwf	ee_write@addr& (0+255),b
  8315  004F88  6B74               	clrf	(ee_write@addr+1)& (0+255),b
  8316  004F8A  0E03               	movlw	3
  8317  004F8C  2374               	addwfc	(ee_write@addr+1)& (0+255),f,b
  8318  004F8E  0E02               	movlw	2
  8319  004F90  6F75               	movwf	ee_write@data& (0+255),b
  8320  004F92  EC1D  F04D         	call	_ee_write	;wreg free
  8321                           
  8322                           ;digitalOut.c: 148: } else {
  8323  004F96  D015               	goto	l19981
  8324  004F98                     l19973:
  8325                           
  8326                           ; BSR set to: 0
  8327                           ;digitalOut.c: 149: ee_write(((WORD)(((BYTE*)(0x3FF-40)))-17)+io, actionState?1U:2U);
  8328  004F98  51C3               	movf	startDigitalOutput@actionState& (0+255),w,b
  8329  004F9A  A4D8               	btfss	status,2,c
  8330  004F9C  D004               	goto	l19977
  8331                           
  8332                           ; BSR set to: 0
  8333  004F9E  0E00               	movlw	0
  8334  004FA0  6FC1               	movwf	(_startDigitalOutput$680+1)& (0+255),b
  8335  004FA2  0E02               	movlw	2
  8336  004FA4  D003               	goto	L2
  8337  004FA6                     l19977:
  8338                           
  8339                           ; BSR set to: 0
  8340  004FA6  0E00               	movlw	0
  8341  004FA8  6FC1               	movwf	(_startDigitalOutput$680+1)& (0+255),b
  8342  004FAA  0E01               	movlw	1
  8343  004FAC                     L2:
  8344  004FAC  6FC0               	movwf	_startDigitalOutput$680& (0+255),b
  8345                           
  8346                           ; BSR set to: 0
  8347  004FAE  0EC6               	movlw	198
  8348  004FB0  25C4               	addwf	startDigitalOutput@io& (0+255),w,b
  8349  004FB2  6F73               	movwf	ee_write@addr& (0+255),b
  8350  004FB4  6B74               	clrf	(ee_write@addr+1)& (0+255),b
  8351  004FB6  0E03               	movlw	3
  8352  004FB8  2374               	addwfc	(ee_write@addr+1)& (0+255),f,b
  8353  004FBA  C0C0  F075         	movff	_startDigitalOutput$680,ee_write@data
  8354  004FBE  EC1D  F04D         	call	_ee_write	;wreg free
  8355  004FC2                     l19981:
  8356                           
  8357                           ; BSR set to: 0
  8358                           ;digitalOut.c: 150: };digitalOut.c: 152: pinState = actionState;
  8359  004FC2  C0C3  F0C2         	movff	startDigitalOutput@actionState,startDigitalOutput@pinState
  8360                           
  8361                           ; BSR set to: 0
  8362                           ;digitalOut.c: 153: if (NV->io[io].flags & 0x20U) {
  8363  004FC6  51C4               	movf	startDigitalOutput@io& (0+255),w,b
  8364  004FC8  0D07               	mullw	7
  8365  004FCA  C0EC  F0BE         	movff	_NV,??_startDigitalOutput
  8366  004FCE  C0ED  F0BF         	movff	_NV+1,??_startDigitalOutput+1
  8367  004FD2  50F3               	movf	243,w,c
  8368  004FD4  27BE               	addwf	??_startDigitalOutput& (0+255),f,b
  8369  004FD6  50F4               	movf	244,w,c
  8370  004FD8  23BF               	addwfc	(??_startDigitalOutput+1)& (0+255),f,b
  8371  004FDA  0E11               	movlw	17
  8372  004FDC  25BE               	addwf	??_startDigitalOutput& (0+255),w,b
  8373  004FDE  6ED9               	movwf	fsr2l,c
  8374  004FE0  0E00               	movlw	0
  8375  004FE2  21BF               	addwfc	(??_startDigitalOutput+1)& (0+255),w,b
  8376  004FE4  6EDA               	movwf	fsr2h,c
  8377  004FE6  AADF               	btfss	indf2,5,c
  8378  004FE8  D007               	goto	l19987
  8379                           
  8380                           ; BSR set to: 0
  8381                           ;digitalOut.c: 154: pinState = (BOOL)(!pinState);
  8382  004FEA  51C2               	movf	startDigitalOutput@pinState& (0+255),w,b
  8383  004FEC  A4D8               	btfss	status,2,c
  8384  004FEE  D002               	goto	u24900
  8385  004FF0  0E01               	movlw	1
  8386  004FF2  D001               	goto	u24910
  8387  004FF4                     u24900:
  8388  004FF4  0E00               	movlw	0
  8389  004FF6                     u24910:
  8390  004FF6  6FC2               	movwf	startDigitalOutput@pinState& (0+255),b
  8391  004FF8                     l19987:
  8392                           
  8393                           ; BSR set to: 0
  8394                           ;digitalOut.c: 155: };digitalOut.c: 156: setOutputPin(io, pinState);
  8395  004FF8  C0C2  F071         	movff	startDigitalOutput@pinState,setOutputPin@state
  8396  004FFC  51C4               	movf	startDigitalOutput@io& (0+255),w,b
  8397  004FFE  EC90  F031         	call	_setOutputPin
  8398                           
  8399                           ; BSR set to: 0
  8400                           ;digitalOut.c: 161: if (NV->io[io].flags & 0x08U) {
  8401  005002  51C4               	movf	startDigitalOutput@io& (0+255),w,b
  8402  005004  0D07               	mullw	7
  8403  005006  C0EC  F0BE         	movff	_NV,??_startDigitalOutput
  8404  00500A  C0ED  F0BF         	movff	_NV+1,??_startDigitalOutput+1
  8405  00500E  50F3               	movf	243,w,c
  8406  005010  27BE               	addwf	??_startDigitalOutput& (0+255),f,b
  8407  005012  50F4               	movf	244,w,c
  8408  005014  23BF               	addwfc	(??_startDigitalOutput+1)& (0+255),f,b
  8409  005016  0E11               	movlw	17
  8410  005018  25BE               	addwf	??_startDigitalOutput& (0+255),w,b
  8411  00501A  6ED9               	movwf	fsr2l,c
  8412  00501C  0E00               	movlw	0
  8413  00501E  21BF               	addwfc	(??_startDigitalOutput+1)& (0+255),w,b
  8414  005020  6EDA               	movwf	fsr2h,c
  8415  005022  A6DF               	btfss	indf2,3,c
  8416  005024  D023               	goto	l19995
  8417                           
  8418                           ; BSR set to: 0
  8419                           ;digitalOut.c: 162: if (actionState) {
  8420  005026  51C3               	movf	startDigitalOutput@actionState& (0+255),w,b
  8421  005028  B4D8               	btfsc	status,2,c
  8422  00502A  0012               	return	
  8423                           
  8424                           ; BSR set to: 0
  8425                           ;digitalOut.c: 165: sendInvertedProducedEvent(((8U + 4U*(io))+0U), actionState,;digitalO
      +                          ut.c: 166: NV->io[io].flags & 0x40U, 1, 1);
  8426  00502C  C0C3  F0B5         	movff	startDigitalOutput@actionState,sendInvertedProducedEvent@state
  8427  005030  51C4               	movf	startDigitalOutput@io& (0+255),w,b
  8428  005032  0D07               	mullw	7
  8429  005034  C0EC  F0BE         	movff	_NV,??_startDigitalOutput
  8430  005038  C0ED  F0BF         	movff	_NV+1,??_startDigitalOutput+1
  8431  00503C  50F3               	movf	243,w,c
  8432  00503E  27BE               	addwf	??_startDigitalOutput& (0+255),f,b
  8433  005040  50F4               	movf	244,w,c
  8434  005042  23BF               	addwfc	(??_startDigitalOutput+1)& (0+255),f,b
  8435  005044  0E11               	movlw	17
  8436  005046  25BE               	addwf	??_startDigitalOutput& (0+255),w,b
  8437  005048  6ED9               	movwf	fsr2l,c
  8438  00504A  0E00               	movlw	0
  8439  00504C  21BF               	addwfc	(??_startDigitalOutput+1)& (0+255),w,b
  8440  00504E  6EDA               	movwf	fsr2h,c
  8441  005050  50DF               	movf	indf2,w,c
  8442  005052  0B40               	andlw	64
  8443  005054  6FB6               	movwf	sendInvertedProducedEvent@invert& (0+255),b
  8444  005056  0E01               	movlw	1
  8445  005058  6FB7               	movwf	sendInvertedProducedEvent@can_send_on& (0+255),b
  8446  00505A  0E01               	movlw	1
  8447  00505C  6FB8               	movwf	sendInvertedProducedEvent@can_send_off& (0+255),b
  8448  00505E  51C4               	movf	startDigitalOutput@io& (0+255),w,b
  8449  005060  0D04               	mullw	4
  8450  005062  50F3               	movf	243,w,c
  8451  005064  0F08               	addlw	8
  8452  005066  EC91  F04D         	call	_sendInvertedProducedEvent
  8453  00506A  0012               	return	
  8454  00506C                     l19995:
  8455                           
  8456                           ; BSR set to: 0
  8457                           ;digitalOut.c: 170: sendInvertedProducedEvent(((8U + 4U*(io))+0U), actionState,;digitalO
      +                          ut.c: 171: NV->io[io].flags & 0x40U, 1, 1);
  8458  00506C  C0C3  F0B5         	movff	startDigitalOutput@actionState,sendInvertedProducedEvent@state
  8459  005070  51C4               	movf	startDigitalOutput@io& (0+255),w,b
  8460  005072  0D07               	mullw	7
  8461  005074  C0EC  F0BE         	movff	_NV,??_startDigitalOutput
  8462  005078  C0ED  F0BF         	movff	_NV+1,??_startDigitalOutput+1
  8463  00507C  50F3               	movf	243,w,c
  8464  00507E  27BE               	addwf	??_startDigitalOutput& (0+255),f,b
  8465  005080  50F4               	movf	244,w,c
  8466  005082  23BF               	addwfc	(??_startDigitalOutput+1)& (0+255),f,b
  8467  005084  0E11               	movlw	17
  8468  005086  25BE               	addwf	??_startDigitalOutput& (0+255),w,b
  8469  005088  6ED9               	movwf	fsr2l,c
  8470  00508A  0E00               	movlw	0
  8471  00508C  21BF               	addwfc	(??_startDigitalOutput+1)& (0+255),w,b
  8472  00508E  6EDA               	movwf	fsr2h,c
  8473  005090  50DF               	movf	indf2,w,c
  8474  005092  0B40               	andlw	64
  8475  005094  6FB6               	movwf	sendInvertedProducedEvent@invert& (0+255),b
  8476  005096  0E01               	movlw	1
  8477  005098  6FB7               	movwf	sendInvertedProducedEvent@can_send_on& (0+255),b
  8478  00509A  0E01               	movlw	1
  8479  00509C  6FB8               	movwf	sendInvertedProducedEvent@can_send_off& (0+255),b
  8480  00509E  51C4               	movf	startDigitalOutput@io& (0+255),w,b
  8481  0050A0  0D04               	mullw	4
  8482  0050A2  50F3               	movf	243,w,c
  8483  0050A4  0F08               	addlw	8
  8484  0050A6  EC91  F04D         	call	_sendInvertedProducedEvent
  8485  0050AA  0012               	return		;funcret
  8486  0050AC                     __end_of_startDigitalOutput:
  8487                           	callstack 0
  8488                           
  8489 ;; *************** function _setOutputState *****************
  8490 ;; Defined at:
  8491 ;;		line 102 in file "../../github/CANMIOfirmware/outputs.c"
  8492 ;; Parameters:    Size  Location     Type
  8493 ;;  io              1    wreg     unsigned char 
  8494 ;;  action          1   22[BANK0 ] unsigned char 
  8495 ;;  type            1   23[BANK0 ] unsigned char 
  8496 ;; Auto vars:     Size  Location     Type
  8497 ;;  io              1   24[BANK0 ] unsigned char 
  8498 ;; Return value:  Size  Location     Type
  8499 ;;                  1    wreg      void 
  8500 ;; Registers used:
  8501 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8502 ;; Tracked objects:
  8503 ;;		On entry : 3F/0
  8504 ;;		On exit  : 3F/0
  8505 ;;		Unchanged: 0/0
  8506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8507 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8508 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8509 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8510 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8511 ;;Total ram usage:        3 bytes
  8512 ;; Hardware stack levels used: 1
  8513 ;; Hardware stack levels required when called: 9
  8514 ;; This function calls:
  8515 ;;		_setBounceState
  8516 ;;		_setMultiState
  8517 ;;		_setServoState
  8518 ;; This function is called by:
  8519 ;;		_processActions
  8520 ;; This function uses a non-reentrant model
  8521 ;;
  8522                           
  8523                           	psect	text13
  8524  0098A2                     __ptext13:
  8525                           	callstack 0
  8526  0098A2                     _setOutputState:
  8527                           	callstack 20
  8528                           
  8529                           ;incstack = 0
  8530                           ;setOutputState@io stored from wreg
  8531  0098A2  6F78               	movwf	setOutputState@io& (0+255),b
  8532                           
  8533                           ;outputs.c: 103: switch(type) {
  8534  0098A4  D012               	goto	l20447
  8535  0098A6                     l20433:
  8536                           
  8537                           ; BSR set to: 0
  8538                           ;outputs.c: 114: setBounceState(io, action);
  8539  0098A6  C076  F071         	movff	setOutputState@action,setBounceState@action
  8540  0098AA  5178               	movf	setOutputState@io& (0+255),w,b
  8541  0098AC  EC7F  F036         	call	_setBounceState
  8542  0098B0  0012               	return	
  8543  0098B2                     l20437:
  8544                           
  8545                           ; BSR set to: 0
  8546                           ;outputs.c: 119: setServoState(io, action);
  8547  0098B2  C076  F071         	movff	setOutputState@action,setServoState@action
  8548  0098B6  5178               	movf	setOutputState@io& (0+255),w,b
  8549  0098B8  ECEC  F035         	call	_setServoState
  8550  0098BC  0012               	return	
  8551  0098BE                     l20441:
  8552                           
  8553                           ; BSR set to: 0
  8554                           ;outputs.c: 124: setMultiState(io, action);
  8555  0098BE  C076  F071         	movff	setOutputState@action,setMultiState@action
  8556  0098C2  5178               	movf	setOutputState@io& (0+255),w,b
  8557  0098C4  EC51  F035         	call	_setMultiState
  8558  0098C8  0012               	return	
  8559  0098CA                     l20447:
  8560  0098CA  0100               	movlb	0	; () banked
  8561  0098CC  5177               	movf	setOutputState@type& (0+255),w,b
  8562                           
  8563                           ; Switch size 1, requested type "simple"
  8564                           ; Number of cases is 7, Range of values is 0 to 6
  8565                           ; switch strategies available:
  8566                           ; Name         Instructions Cycles
  8567                           ; simple_byte           22    12 (average)
  8568                           ;	Chosen strategy is simple_byte
  8569  0098CE  0A00               	xorlw	0	; case 0
  8570  0098D0  B4D8               	btfsc	status,2,c
  8571  0098D2  0012               	return	
  8572  0098D4  0A01               	xorlw	1	; case 1
  8573  0098D6  B4D8               	btfsc	status,2,c
  8574  0098D8  0012               	return	
  8575  0098DA  0A03               	xorlw	3	; case 2
  8576  0098DC  B4D8               	btfsc	status,2,c
  8577  0098DE  D7E9               	goto	l20437
  8578  0098E0  0A01               	xorlw	1	; case 3
  8579  0098E2  B4D8               	btfsc	status,2,c
  8580  0098E4  D7E0               	goto	l20433
  8581  0098E6  0A07               	xorlw	7	; case 4
  8582  0098E8  B4D8               	btfsc	status,2,c
  8583  0098EA  D7E9               	goto	l20441
  8584  0098EC  0A01               	xorlw	1	; case 5
  8585  0098EE  B4D8               	btfsc	status,2,c
  8586  0098F0  0012               	return	
  8587  0098F2  0A03               	xorlw	3	; case 6
  8588  0098F4  0012               	return	
  8589  0098F6                     __end_of_setOutputState:
  8590                           	callstack 0
  8591                           
  8592 ;; *************** function _needsStarting *****************
  8593 ;; Defined at:
  8594 ;;		line 167 in file "../../github/CANMIOfirmware/outputs.c"
  8595 ;; Parameters:    Size  Location     Type
  8596 ;;  io              1    wreg     unsigned char 
  8597 ;;  action          1   17[BANK0 ] unsigned char 
  8598 ;;  type            1   18[BANK0 ] unsigned char 
  8599 ;; Auto vars:     Size  Location     Type
  8600 ;;  io              1   21[BANK0 ] unsigned char 
  8601 ;; Return value:  Size  Location     Type
  8602 ;;                  1    wreg      unsigned char 
  8603 ;; Registers used:
  8604 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  8605 ;; Tracked objects:
  8606 ;;		On entry : 3F/0
  8607 ;;		On exit  : 3F/0
  8608 ;;		Unchanged: 0/0
  8609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8610 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8611 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8612 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8613 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8614 ;;Total ram usage:        5 bytes
  8615 ;; Hardware stack levels used: 1
  8616 ;; Hardware stack levels required when called: 8
  8617 ;; This function calls:
  8618 ;;		Nothing
  8619 ;; This function is called by:
  8620 ;;		_processActions
  8621 ;; This function uses a non-reentrant model
  8622 ;;
  8623                           
  8624                           	psect	text14
  8625  008CE4                     __ptext14:
  8626                           	callstack 0
  8627  008CE4                     _needsStarting:
  8628                           	callstack 21
  8629                           
  8630                           ; BSR set to: 0
  8631                           ;incstack = 0
  8632                           ;needsStarting@io stored from wreg
  8633  008CE4  6F75               	movwf	needsStarting@io& (0+255),b
  8634                           
  8635                           ;outputs.c: 168: switch(type) {
  8636  008CE6  D02D               	goto	l16153
  8637  008CE8                     l16133:
  8638                           
  8639                           ; BSR set to: 0
  8640                           ;outputs.c: 171: return 0;
  8641  008CE8  0E00               	movlw	0
  8642  008CEA  0012               	return	
  8643  008CEC                     l16137:
  8644                           
  8645                           ; BSR set to: 0
  8646                           ;outputs.c: 177: return (BOOL)(pulseDelays[io] == 0U);
  8647  008CEC  0EA4               	movlw	low _pulseDelays
  8648  008CEE  2575               	addwf	needsStarting@io& (0+255),w,b
  8649  008CF0  6ED9               	movwf	fsr2l,c
  8650  008CF2  6ADA               	clrf	fsr2h,c
  8651  008CF4  0E02               	movlw	high _pulseDelays
  8652  008CF6  22DA               	addwfc	fsr2h,f,c
  8653  008CF8  50DF               	movf	indf2,w,c
  8654  008CFA  A4D8               	btfss	status,2,c
  8655  008CFC  D002               	goto	u18730
  8656  008CFE  0E01               	movlw	1
  8657  008D00  0012               	return	
  8658  008D02                     u18730:
  8659  008D02  0E00               	movlw	0
  8660  008D04  0012               	return	
  8661  008D06                     l16141:
  8662                           
  8663                           ; BSR set to: 0
  8664                           ;outputs.c: 182: case 3U:;outputs.c: 185: case 4U:;outputs.c: 187: if (targetPos[io] == 
      +                          currentPos[io]) {
  8665  008D06  0E80               	movlw	low _currentPos
  8666  008D08  2575               	addwf	needsStarting@io& (0+255),w,b
  8667  008D0A  6ED9               	movwf	fsr2l,c
  8668  008D0C  6ADA               	clrf	fsr2h,c
  8669  008D0E  0E01               	movlw	high _currentPos
  8670  008D10  22DA               	addwfc	fsr2h,f,c
  8671  008D12  0E70               	movlw	low _targetPos
  8672  008D14  2575               	addwf	needsStarting@io& (0+255),w,b
  8673  008D16  6EE1               	movwf	fsr1l,c
  8674  008D18  6AE2               	clrf	fsr1h,c
  8675  008D1A  0E01               	movlw	high _targetPos
  8676  008D1C  22E2               	addwfc	fsr1h,f,c
  8677  008D1E  50DE               	movf	postinc2,w,c
  8678  008D20  18E6               	xorwf	postinc1,w,c
  8679  008D22  B4D8               	btfsc	status,2,c
  8680  008D24  D7E1               	goto	l16133
  8681                           
  8682                           ; BSR set to: 0
  8683                           ;outputs.c: 190: };outputs.c: 191: return (BOOL)(servoState[io] != MOVING);
  8684  008D26  0E40               	movlw	low _servoState
  8685  008D28  2575               	addwf	needsStarting@io& (0+255),w,b
  8686  008D2A  6ED9               	movwf	fsr2l,c
  8687  008D2C  6ADA               	clrf	fsr2h,c
  8688  008D2E  0E01               	movlw	high _servoState
  8689  008D30  22DA               	addwfc	fsr2h,f,c
  8690  008D32  0E02               	movlw	2
  8691  008D34  18DE               	xorwf	postinc2,w,c
  8692  008D36  B4D8               	btfsc	status,2,c
  8693  008D38  D002               	goto	u18760
  8694  008D3A  0E01               	movlw	1
  8695  008D3C  0012               	return	
  8696  008D3E                     u18760:
  8697  008D3E  0E00               	movlw	0
  8698  008D40  0012               	return	
  8699  008D42                     l16153:
  8700  008D42  0100               	movlb	0	; () banked
  8701  008D44  5172               	movf	needsStarting@type& (0+255),w,b
  8702                           
  8703                           ; Switch size 1, requested type "simple"
  8704                           ; Number of cases is 5, Range of values is 0 to 4
  8705                           ; switch strategies available:
  8706                           ; Name         Instructions Cycles
  8707                           ; simple_byte           16     9 (average)
  8708                           ;	Chosen strategy is simple_byte
  8709  008D46  0A00               	xorlw	0	; case 0
  8710  008D48  B4D8               	btfsc	status,2,c
  8711  008D4A  D7CE               	goto	l16133
  8712  008D4C  0A01               	xorlw	1	; case 1
  8713  008D4E  B4D8               	btfsc	status,2,c
  8714  008D50  D7CD               	goto	l16137
  8715  008D52  0A03               	xorlw	3	; case 2
  8716  008D54  B4D8               	btfsc	status,2,c
  8717  008D56  D7D7               	goto	l16141
  8718  008D58  0A01               	xorlw	1	; case 3
  8719  008D5A  B4D8               	btfsc	status,2,c
  8720  008D5C  D7D4               	goto	l16141
  8721  008D5E  0A07               	xorlw	7	; case 4
  8722  008D60  B4D8               	btfsc	status,2,c
  8723  008D62  D7D1               	goto	l16141
  8724                           
  8725                           ; BSR set to: 0
  8726                           ;outputs.c: 194: return 1;
  8727  008D64  0E01               	movlw	1
  8728                           
  8729                           ; BSR set to: 0
  8730  008D66  0012               	return		;funcret
  8731  008D68                     __end_of_needsStarting:
  8732                           	callstack 0
  8733                           
  8734 ;; *************** function _getAction *****************
  8735 ;; Defined at:
  8736 ;;		line 91 in file "../../github/CANMIOfirmware/actionQueue.c"
  8737 ;; Parameters:    Size  Location     Type
  8738 ;;		None
  8739 ;; Auto vars:     Size  Location     Type
  8740 ;;		None
  8741 ;; Return value:  Size  Location     Type
  8742 ;;                  1    wreg      unsigned char 
  8743 ;; Registers used:
  8744 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  8745 ;; Tracked objects:
  8746 ;;		On entry : 3F/2
  8747 ;;		On exit  : 3F/0
  8748 ;;		Unchanged: 0/0
  8749 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8750 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8751 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8752 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8753 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8754 ;;Total ram usage:        0 bytes
  8755 ;; Hardware stack levels used: 1
  8756 ;; Hardware stack levels required when called: 10
  8757 ;; This function calls:
  8758 ;;		_peekActionQueue
  8759 ;; This function is called by:
  8760 ;;		_processActions
  8761 ;; This function uses a non-reentrant model
  8762 ;;
  8763                           
  8764                           	psect	text15
  8765  00A6DC                     __ptext15:
  8766                           	callstack 0
  8767  00A6DC                     _getAction:
  8768                           	callstack 19
  8769                           
  8770                           ; BSR set to: 2
  8771                           ;actionQueue.c: 92: return peekActionQueue(0);
  8772                           
  8773                           ; BSR set to: 0
  8774                           ;incstack = 0
  8775  00A6DC  0E00               	movlw	0
  8776  00A6DE  ECED  F04A         	call	_peekActionQueue
  8777                           
  8778                           ; BSR set to: 0
  8779  00A6E2  0012               	return		;funcret
  8780  00A6E4                     __end_of_getAction:
  8781                           	callstack 0
  8782                           
  8783 ;; *************** function _peekActionQueue *****************
  8784 ;; Defined at:
  8785 ;;		line 123 in file "../../github/CANMIOfirmware/actionQueue.c"
  8786 ;; Parameters:    Size  Location     Type
  8787 ;;  index           1    wreg     unsigned char 
  8788 ;; Auto vars:     Size  Location     Type
  8789 ;;  index           1   23[BANK0 ] unsigned char 
  8790 ;; Return value:  Size  Location     Type
  8791 ;;                  1    wreg      unsigned char 
  8792 ;; Registers used:
  8793 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  8794 ;; Tracked objects:
  8795 ;;		On entry : 3D/0
  8796 ;;		On exit  : 3F/0
  8797 ;;		Unchanged: 0/0
  8798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8799 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8800 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8801 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8802 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8803 ;;Total ram usage:        1 bytes
  8804 ;; Hardware stack levels used: 1
  8805 ;; Hardware stack levels required when called: 9
  8806 ;; This function calls:
  8807 ;;		_peek
  8808 ;;		_quantity
  8809 ;; This function is called by:
  8810 ;;		_getAction
  8811 ;;		_processActions
  8812 ;; This function uses a non-reentrant model
  8813 ;;
  8814                           
  8815                           	psect	text16
  8816  0095DA                     __ptext16:
  8817                           	callstack 0
  8818  0095DA                     _peekActionQueue:
  8819                           	callstack 20
  8820                           
  8821                           ; BSR set to: 0
  8822                           ;incstack = 0
  8823                           ;peekActionQueue@index stored from wreg
  8824  0095DA  0100               	movlb	0	; () banked
  8825  0095DC  6F77               	movwf	peekActionQueue@index& (0+255),b
  8826                           
  8827                           ;actionQueue.c: 124: if (index < quantity(&expeditedQueue)) {
  8828  0095DE  0EE3               	movlw	low _expeditedQueue
  8829  0095E0  0100               	movlb	0	; () banked
  8830  0095E2  6F71               	movwf	quantity@q& (0+255),b
  8831  0095E4  0E01               	movlw	high _expeditedQueue
  8832  0095E6  6F72               	movwf	(quantity@q+1)& (0+255),b
  8833  0095E8  ECCB  F04F         	call	_quantity	;wreg free
  8834  0095EC  6177               	cpfslt	peekActionQueue@index& (0+255),b
  8835  0095EE  D009               	goto	l15479
  8836                           
  8837                           ; BSR set to: 0
  8838                           ;actionQueue.c: 125: return peek(&expeditedQueue, index);
  8839  0095F0  0EE3               	movlw	low _expeditedQueue
  8840  0095F2  6F71               	movwf	peek@q& (0+255),b
  8841  0095F4  0E01               	movlw	high _expeditedQueue
  8842  0095F6  6F72               	movwf	(peek@q+1)& (0+255),b
  8843  0095F8  C077  F073         	movff	peekActionQueue@index,peek@index
  8844  0095FC  ECEC  F045         	call	_peek	;wreg free
  8845  009600  0012               	return	
  8846  009602                     l15479:
  8847                           
  8848                           ; BSR set to: 0
  8849                           ;actionQueue.c: 126: };actionQueue.c: 127: index -= quantity(&expeditedQueue);
  8850  009602  0EE3               	movlw	low _expeditedQueue
  8851  009604  6F71               	movwf	quantity@q& (0+255),b
  8852  009606  0E01               	movlw	high _expeditedQueue
  8853  009608  6F72               	movwf	(quantity@q+1)& (0+255),b
  8854  00960A  ECCB  F04F         	call	_quantity	;wreg free
  8855  00960E  5F77               	subwf	peekActionQueue@index& (0+255),f,b
  8856                           
  8857                           ;actionQueue.c: 128: if (index < quantity(&normalQueue)) {
  8858  009610  0EE8               	movlw	low _normalQueue
  8859  009612  6F71               	movwf	quantity@q& (0+255),b
  8860  009614  0E01               	movlw	high _normalQueue
  8861  009616  6F72               	movwf	(quantity@q+1)& (0+255),b
  8862  009618  ECCB  F04F         	call	_quantity	;wreg free
  8863  00961C  6177               	cpfslt	peekActionQueue@index& (0+255),b
  8864  00961E  D009               	goto	l15485
  8865                           
  8866                           ; BSR set to: 0
  8867                           ;actionQueue.c: 129: return peek(&normalQueue, index);
  8868  009620  0EE8               	movlw	low _normalQueue
  8869  009622  6F71               	movwf	peek@q& (0+255),b
  8870  009624  0E01               	movlw	high _normalQueue
  8871  009626  6F72               	movwf	(peek@q+1)& (0+255),b
  8872  009628  C077  F073         	movff	peekActionQueue@index,peek@index
  8873  00962C  ECEC  F045         	call	_peek	;wreg free
  8874  009630  0012               	return	
  8875  009632                     l15485:
  8876                           
  8877                           ; BSR set to: 0
  8878                           ;actionQueue.c: 130: };actionQueue.c: 131: return 0;
  8879  009632  0E00               	movlw	0
  8880                           
  8881                           ; BSR set to: 0
  8882  009634  0012               	return		;funcret
  8883  009636                     __end_of_peekActionQueue:
  8884                           	callstack 0
  8885                           
  8886 ;; *************** function _peek *****************
  8887 ;; Defined at:
  8888 ;;		line 74 in file "../../github/CANMIOfirmware/queue.c"
  8889 ;; Parameters:    Size  Location     Type
  8890 ;;  q               2   17[BANK0 ] PTR struct Queue
  8891 ;;		 -> expeditedQueue(5), normalQueue(5), 
  8892 ;;  index           1   19[BANK0 ] unsigned char 
  8893 ;; Auto vars:     Size  Location     Type
  8894 ;;		None
  8895 ;; Return value:  Size  Location     Type
  8896 ;;                  1    wreg      unsigned char 
  8897 ;; Registers used:
  8898 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  8899 ;; Tracked objects:
  8900 ;;		On entry : 3F/0
  8901 ;;		On exit  : 3F/0
  8902 ;;		Unchanged: 0/0
  8903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8904 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8905 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8906 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8907 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8908 ;;Total ram usage:        5 bytes
  8909 ;; Hardware stack levels used: 1
  8910 ;; Hardware stack levels required when called: 8
  8911 ;; This function calls:
  8912 ;;		Nothing
  8913 ;; This function is called by:
  8914 ;;		_peekActionQueue
  8915 ;; This function uses a non-reentrant model
  8916 ;;
  8917                           
  8918                           	psect	text17
  8919  008BD8                     __ptext17:
  8920                           	callstack 0
  8921  008BD8                     _peek:
  8922                           	callstack 20
  8923                           
  8924                           ; BSR set to: 0
  8925                           ;queue.c: 75: if (q->readIdx == q->writeIdx) return 0;
  8926                           
  8927                           ; BSR set to: 0
  8928                           ;incstack = 0
  8929  008BD8  EE20 F002          	lfsr	2,2
  8930  008BDC  5171               	movf	peek@q& (0+255),w,b
  8931  008BDE  26D9               	addwf	fsr2l,f,c
  8932  008BE0  5172               	movf	(peek@q+1)& (0+255),w,b
  8933  008BE2  22DA               	addwfc	fsr2h,f,c
  8934  008BE4  EE10 F001          	lfsr	1,1
  8935  008BE8  5171               	movf	peek@q& (0+255),w,b
  8936  008BEA  26E1               	addwf	fsr1l,f,c
  8937  008BEC  5172               	movf	(peek@q+1)& (0+255),w,b
  8938  008BEE  22E2               	addwfc	fsr1h,f,c
  8939  008BF0  50DE               	movf	postinc2,w,c
  8940  008BF2  18E6               	xorwf	postinc1,w,c
  8941  008BF4  A4D8               	btfss	status,2,c
  8942  008BF6  D002               	goto	l14783
  8943  008BF8                     u16870:
  8944                           
  8945                           ; BSR set to: 0
  8946  008BF8  0E00               	movlw	0
  8947  008BFA  0012               	return	
  8948  008BFC                     l14783:
  8949                           
  8950                           ; BSR set to: 0
  8951                           ;queue.c: 76: index += q->readIdx;
  8952  008BFC  EE20 F001          	lfsr	2,1
  8953  008C00  5171               	movf	peek@q& (0+255),w,b
  8954  008C02  26D9               	addwf	fsr2l,f,c
  8955  008C04  5172               	movf	(peek@q+1)& (0+255),w,b
  8956  008C06  22DA               	addwfc	fsr2h,f,c
  8957  008C08  50DF               	movf	indf2,w,c
  8958  008C0A  2773               	addwf	peek@index& (0+255),f,b
  8959                           
  8960                           ;queue.c: 78: if (index >= q->size) {
  8961  008C0C  C071  FFD9         	movff	peek@q,fsr2l
  8962  008C10  C072  FFDA         	movff	peek@q+1,fsr2h
  8963  008C14  50DE               	movf	postinc2,w,c
  8964  008C16  5D73               	subwf	peek@index& (0+255),w,b
  8965  008C18  A0D8               	btfss	status,0,c
  8966  008C1A  D006               	goto	l1118
  8967                           
  8968                           ; BSR set to: 0
  8969                           ;queue.c: 79: index -= q->size;
  8970  008C1C  C071  FFD9         	movff	peek@q,fsr2l
  8971  008C20  C072  FFDA         	movff	peek@q+1,fsr2h
  8972  008C24  50DF               	movf	indf2,w,c
  8973  008C26  5F73               	subwf	peek@index& (0+255),f,b
  8974  008C28                     l1118:
  8975                           
  8976                           ; BSR set to: 0
  8977                           ;queue.c: 80: };queue.c: 81: if (index == q->writeIdx) return 0;
  8978  008C28  EE20 F002          	lfsr	2,2
  8979  008C2C  5171               	movf	peek@q& (0+255),w,b
  8980  008C2E  26D9               	addwf	fsr2l,f,c
  8981  008C30  5172               	movf	(peek@q+1)& (0+255),w,b
  8982  008C32  22DA               	addwfc	fsr2h,f,c
  8983  008C34  5173               	movf	peek@index& (0+255),w,b
  8984  008C36  18DE               	xorwf	postinc2,w,c
  8985  008C38  B4D8               	btfsc	status,2,c
  8986  008C3A  D7DE               	goto	u16870
  8987                           
  8988                           ; BSR set to: 0
  8989                           ;queue.c: 82: return q->queue[index];
  8990  008C3C  EE20 F003          	lfsr	2,3
  8991  008C40  5171               	movf	peek@q& (0+255),w,b
  8992  008C42  26D9               	addwf	fsr2l,f,c
  8993  008C44  5172               	movf	(peek@q+1)& (0+255),w,b
  8994  008C46  22DA               	addwfc	fsr2h,f,c
  8995  008C48  CFDE F074          	movff	postinc2,??_peek
  8996  008C4C  CFDD F075          	movff	postdec2,??_peek+1
  8997  008C50  5173               	movf	peek@index& (0+255),w,b
  8998  008C52  2574               	addwf	??_peek& (0+255),w,b
  8999  008C54  6ED9               	movwf	fsr2l,c
  9000  008C56  0E00               	movlw	0
  9001  008C58  2175               	addwfc	(??_peek+1)& (0+255),w,b
  9002  008C5A  6EDA               	movwf	fsr2h,c
  9003  008C5C  50DF               	movf	indf2,w,c
  9004                           
  9005                           ; BSR set to: 0
  9006  008C5E  0012               	return		;funcret
  9007  008C60                     __end_of_peek:
  9008                           	callstack 0
  9009                           
  9010 ;; *************** function _doWait *****************
  9011 ;; Defined at:
  9012 ;;		line 456 in file "../../github/CANMIOfirmware/mioEvents.c"
  9013 ;; Parameters:    Size  Location     Type
  9014 ;;  duration        2   29[BANK0 ] unsigned int 
  9015 ;; Auto vars:     Size  Location     Type
  9016 ;;		None
  9017 ;; Return value:  Size  Location     Type
  9018 ;;                  1    wreg      void 
  9019 ;; Registers used:
  9020 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9021 ;; Tracked objects:
  9022 ;;		On entry : 3F/0
  9023 ;;		On exit  : 3E/0
  9024 ;;		Unchanged: 0/0
  9025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9026 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9027 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9028 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9029 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9030 ;;Total ram usage:        6 bytes
  9031 ;; Hardware stack levels used: 1
  9032 ;; Hardware stack levels required when called: 11
  9033 ;; This function calls:
  9034 ;;		___lmul
  9035 ;;		_doneAction
  9036 ;;		_tickGet
  9037 ;; This function is called by:
  9038 ;;		_processActions
  9039 ;; This function uses a non-reentrant model
  9040 ;;
  9041                           
  9042                           	psect	text18
  9043  0086B4                     __ptext18:
  9044                           	callstack 0
  9045  0086B4                     _doWait:
  9046                           	callstack 18
  9047                           
  9048                           ; BSR set to: 0
  9049                           ;mioEvents.c: 458: if (startWait.Val == 0) {
  9050                           
  9051                           ; BSR set to: 0
  9052                           ;incstack = 0
  9053  0086B4  0101               	movlb	1	; () banked
  9054  0086B6  51B8               	movf	_startWait& (0+255),w,b
  9055  0086B8  11B9               	iorwf	(_startWait+1)& (0+255),w,b
  9056  0086BA  11BA               	iorwf	(_startWait+2)& (0+255),w,b
  9057  0086BC  11BB               	iorwf	(_startWait+3)& (0+255),w,b
  9058  0086BE  A4D8               	btfss	status,2,c
  9059  0086C0  D00B               	goto	l20423
  9060                           
  9061                           ; BSR set to: 1
  9062                           ;mioEvents.c: 459: startWait.Val = tickGet();
  9063  0086C2  ECA3  F04B         	call	_tickGet	;wreg free
  9064  0086C6  C071  F1B8         	movff	?_tickGet,_startWait
  9065  0086CA  C072  F1B9         	movff	?_tickGet+1,_startWait+1
  9066  0086CE  C073  F1BA         	movff	?_tickGet+2,_startWait+2
  9067  0086D2  C074  F1BB         	movff	?_tickGet+3,_startWait+3
  9068  0086D6  0012               	return	
  9069  0086D8                     l20423:
  9070                           
  9071                           ; BSR set to: 1
  9072                           ;mioEvents.c: 463: if (((tickGet() - startWait.Val) > ((unsigned long)duration * (unsign
      +                          ed long)(62500/10)))) {
  9073  0086D8  ECA3  F04B         	call	_tickGet	;wreg free
  9074  0086DC  0101               	movlb	1	; () banked
  9075  0086DE  51B8               	movf	_startWait& (0+255),w,b
  9076  0086E0  0100               	movlb	0	; () banked
  9077  0086E2  5D71               	subwf	?_tickGet& (0+255),w,b
  9078  0086E4  6F7F               	movwf	??_doWait& (0+255),b
  9079  0086E6  0101               	movlb	1	; () banked
  9080  0086E8  51B9               	movf	(_startWait+1)& (0+255),w,b
  9081  0086EA  0100               	movlb	0	; () banked
  9082  0086EC  5972               	subwfb	(?_tickGet+1)& (0+255),w,b
  9083  0086EE  6F80               	movwf	(??_doWait+1)& (0+255),b
  9084  0086F0  0101               	movlb	1	; () banked
  9085  0086F2  51BA               	movf	(_startWait+2)& (0+255),w,b
  9086  0086F4  0100               	movlb	0	; () banked
  9087  0086F6  5973               	subwfb	(?_tickGet+2)& (0+255),w,b
  9088  0086F8  6F81               	movwf	(??_doWait+2)& (0+255),b
  9089  0086FA  0101               	movlb	1	; () banked
  9090  0086FC  51BB               	movf	(_startWait+3)& (0+255),w,b
  9091  0086FE  0100               	movlb	0	; () banked
  9092  008700  5974               	subwfb	(?_tickGet+3)& (0+255),w,b
  9093  008702  6F82               	movwf	(??_doWait+3)& (0+255),b
  9094  008704  C07D  F071         	movff	doWait@duration,___lmul@multiplier
  9095  008708  C07E  F072         	movff	doWait@duration+1,___lmul@multiplier+1
  9096  00870C  6B73               	clrf	(___lmul@multiplier+2)& (0+255),b
  9097  00870E  6B74               	clrf	(___lmul@multiplier+3)& (0+255),b
  9098  008710  0E6A               	movlw	106
  9099  008712  6F75               	movwf	___lmul@multiplicand& (0+255),b
  9100  008714  0E18               	movlw	24
  9101  008716  6F76               	movwf	(___lmul@multiplicand+1)& (0+255),b
  9102  008718  0E00               	movlw	0
  9103  00871A  6F77               	movwf	(___lmul@multiplicand+2)& (0+255),b
  9104  00871C  0E00               	movlw	0
  9105  00871E  6F78               	movwf	(___lmul@multiplicand+3)& (0+255),b
  9106  008720  ECFB  F04B         	call	___lmul	;wreg free
  9107  008724  517F               	movf	??_doWait& (0+255),w,b
  9108  008726  5D71               	subwf	?___lmul& (0+255),w,b
  9109  008728  5180               	movf	(??_doWait+1)& (0+255),w,b
  9110  00872A  5972               	subwfb	(?___lmul+1)& (0+255),w,b
  9111  00872C  5181               	movf	(??_doWait+2)& (0+255),w,b
  9112  00872E  5973               	subwfb	(?___lmul+2)& (0+255),w,b
  9113  008730  5182               	movf	(??_doWait+3)& (0+255),w,b
  9114  008732  5974               	subwfb	(?___lmul+3)& (0+255),w,b
  9115  008734  B0D8               	btfsc	status,0,c
  9116  008736  0012               	return	
  9117                           
  9118                           ; BSR set to: 0
  9119                           ;mioEvents.c: 464: doneAction();
  9120  008738  EC7A  F053         	call	_doneAction	;wreg free
  9121                           
  9122                           ; BSR set to: 0
  9123                           ;mioEvents.c: 465: startWait.Val = 0;
  9124  00873C  0E00               	movlw	0
  9125  00873E  0101               	movlb	1	; () banked
  9126  008740  6FB8               	movwf	_startWait& (0+255),b
  9127  008742  0E00               	movlw	0
  9128  008744  6FB9               	movwf	(_startWait+1)& (0+255),b
  9129  008746  0E00               	movlw	0
  9130  008748  6FBA               	movwf	(_startWait+2)& (0+255),b
  9131  00874A  0E00               	movlw	0
  9132  00874C  6FBB               	movwf	(_startWait+3)& (0+255),b
  9133  00874E  0012               	return		;funcret
  9134  008750                     __end_of_doWait:
  9135                           	callstack 0
  9136                           
  9137 ;; *************** function _doneAction *****************
  9138 ;; Defined at:
  9139 ;;		line 113 in file "../../github/CANMIOfirmware/actionQueue.c"
  9140 ;; Parameters:    Size  Location     Type
  9141 ;;		None
  9142 ;; Auto vars:     Size  Location     Type
  9143 ;;		None
  9144 ;; Return value:  Size  Location     Type
  9145 ;;                  1    wreg      void 
  9146 ;; Registers used:
  9147 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9148 ;; Tracked objects:
  9149 ;;		On entry : 3C/0
  9150 ;;		On exit  : 3F/0
  9151 ;;		Unchanged: 0/0
  9152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9153 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9154 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9155 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9156 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9157 ;;Total ram usage:        0 bytes
  9158 ;; Hardware stack levels used: 1
  9159 ;; Hardware stack levels required when called: 10
  9160 ;; This function calls:
  9161 ;;		_popAction
  9162 ;; This function is called by:
  9163 ;;		_processOutputs
  9164 ;;		_processActions
  9165 ;;		_doWait
  9166 ;; This function uses a non-reentrant model
  9167 ;;
  9168                           
  9169                           	psect	text19
  9170  00A6F4                     __ptext19:
  9171                           	callstack 0
  9172  00A6F4                     _doneAction:
  9173                           	callstack 19
  9174                           
  9175                           ;actionQueue.c: 114: popAction();
  9176                           
  9177                           ;incstack = 0
  9178  00A6F4  EC16  F052         	call	_popAction	;wreg free
  9179                           
  9180                           ; BSR set to: 0
  9181  00A6F8  0012               	return		;funcret
  9182  00A6FA                     __end_of_doneAction:
  9183                           	callstack 0
  9184                           
  9185 ;; *************** function _popAction *****************
  9186 ;; Defined at:
  9187 ;;		line 100 in file "../../github/CANMIOfirmware/actionQueue.c"
  9188 ;; Parameters:    Size  Location     Type
  9189 ;;		None
  9190 ;; Auto vars:     Size  Location     Type
  9191 ;;  ret             1   23[BANK0 ] unsigned char 
  9192 ;; Return value:  Size  Location     Type
  9193 ;;                  1    wreg      unsigned char 
  9194 ;; Registers used:
  9195 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9196 ;; Tracked objects:
  9197 ;;		On entry : 3C/0
  9198 ;;		On exit  : 3F/0
  9199 ;;		Unchanged: 0/0
  9200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9201 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9202 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9203 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9204 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9205 ;;Total ram usage:        1 bytes
  9206 ;; Hardware stack levels used: 1
  9207 ;; Hardware stack levels required when called: 9
  9208 ;; This function calls:
  9209 ;;		_pop
  9210 ;; This function is called by:
  9211 ;;		_doneAction
  9212 ;; This function uses a non-reentrant model
  9213 ;;
  9214                           
  9215                           	psect	text20
  9216  00A42C                     __ptext20:
  9217                           	callstack 0
  9218  00A42C                     _popAction:
  9219                           	callstack 19
  9220                           
  9221                           ;actionQueue.c: 101: unsigned char ret;;actionQueue.c: 102: ret = pop(&expeditedQueue);
  9222                           
  9223                           ; BSR set to: 0
  9224                           ;incstack = 0
  9225  00A42C  0EE3               	movlw	low _expeditedQueue
  9226  00A42E  0100               	movlb	0	; () banked
  9227  00A430  6F71               	movwf	pop@q& (0+255),b
  9228  00A432  0E01               	movlw	high _expeditedQueue
  9229  00A434  6F72               	movwf	(pop@q+1)& (0+255),b
  9230  00A436  ECF6  F043         	call	_pop	;wreg free
  9231  00A43A  6F77               	movwf	popAction@ret& (0+255),b
  9232                           
  9233                           ; BSR set to: 0
  9234                           ;actionQueue.c: 103: if (ret != 0) return ret;
  9235  00A43C  5177               	movf	popAction@ret& (0+255),w,b
  9236  00A43E  A4D8               	btfss	status,2,c
  9237  00A440  0012               	return	
  9238                           
  9239                           ; BSR set to: 0
  9240  00A442  0EE8               	movlw	low _normalQueue
  9241  00A444  6F71               	movwf	pop@q& (0+255),b
  9242  00A446  0E01               	movlw	high _normalQueue
  9243  00A448  6F72               	movwf	(pop@q+1)& (0+255),b
  9244  00A44A  ECF6  F043         	call	_pop	;wreg free
  9245                           
  9246                           ; BSR set to: 0
  9247  00A44E  0012               	return		;funcret
  9248  00A450                     __end_of_popAction:
  9249                           	callstack 0
  9250                           
  9251 ;; *************** function _pop *****************
  9252 ;; Defined at:
  9253 ;;		line 59 in file "../../github/CANMIOfirmware/queue.c"
  9254 ;; Parameters:    Size  Location     Type
  9255 ;;  q               2   17[BANK0 ] PTR struct Queue
  9256 ;;		 -> expeditedQueue(5), normalQueue(5), 
  9257 ;; Auto vars:     Size  Location     Type
  9258 ;;  ret             1   22[BANK0 ] unsigned char 
  9259 ;; Return value:  Size  Location     Type
  9260 ;;                  1    wreg      unsigned char 
  9261 ;; Registers used:
  9262 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  9263 ;; Tracked objects:
  9264 ;;		On entry : 3F/0
  9265 ;;		On exit  : 3F/0
  9266 ;;		Unchanged: 0/0
  9267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9268 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9269 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9270 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9271 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9272 ;;Total ram usage:        6 bytes
  9273 ;; Hardware stack levels used: 1
  9274 ;; Hardware stack levels required when called: 8
  9275 ;; This function calls:
  9276 ;;		Nothing
  9277 ;; This function is called by:
  9278 ;;		_popAction
  9279 ;; This function uses a non-reentrant model
  9280 ;;
  9281                           
  9282                           	psect	text21
  9283  0087EC                     __ptext21:
  9284                           	callstack 0
  9285  0087EC                     _pop:
  9286                           	callstack 19
  9287                           
  9288                           ; BSR set to: 0
  9289                           ;queue.c: 60: unsigned char ret;;queue.c: 61: if (q->writeIdx == q->readIdx) {
  9290                           
  9291                           ; BSR set to: 0
  9292                           ;incstack = 0
  9293  0087EC  EE20 F001          	lfsr	2,1
  9294  0087F0  5171               	movf	pop@q& (0+255),w,b
  9295  0087F2  26D9               	addwf	fsr2l,f,c
  9296  0087F4  5172               	movf	(pop@q+1)& (0+255),w,b
  9297  0087F6  22DA               	addwfc	fsr2h,f,c
  9298  0087F8  EE10 F002          	lfsr	1,2
  9299  0087FC  5171               	movf	pop@q& (0+255),w,b
  9300  0087FE  26E1               	addwf	fsr1l,f,c
  9301  008800  5172               	movf	(pop@q+1)& (0+255),w,b
  9302  008802  22E2               	addwfc	fsr1h,f,c
  9303  008804  50DE               	movf	postinc2,w,c
  9304  008806  18E6               	xorwf	postinc1,w,c
  9305  008808  A4D8               	btfss	status,2,c
  9306  00880A  D002               	goto	l14323
  9307                           
  9308                           ; BSR set to: 0
  9309                           ;queue.c: 62: return 0;
  9310  00880C  0E00               	movlw	0
  9311  00880E  0012               	return	
  9312  008810                     l14323:
  9313                           
  9314                           ; BSR set to: 0
  9315                           ;queue.c: 63: };queue.c: 64: ret = q->queue[q->readIdx++];
  9316  008810  EE20 F001          	lfsr	2,1
  9317  008814  5171               	movf	pop@q& (0+255),w,b
  9318  008816  26D9               	addwf	fsr2l,f,c
  9319  008818  5172               	movf	(pop@q+1)& (0+255),w,b
  9320  00881A  22DA               	addwfc	fsr2h,f,c
  9321  00881C  50DF               	movf	indf2,w,c
  9322  00881E  6F73               	movwf	??_pop& (0+255),b
  9323  008820  EE20 F003          	lfsr	2,3
  9324  008824  5171               	movf	pop@q& (0+255),w,b
  9325  008826  26D9               	addwf	fsr2l,f,c
  9326  008828  5172               	movf	(pop@q+1)& (0+255),w,b
  9327  00882A  22DA               	addwfc	fsr2h,f,c
  9328  00882C  CFDE F074          	movff	postinc2,??_pop+1
  9329  008830  CFDD F075          	movff	postdec2,??_pop+2
  9330  008834  5173               	movf	??_pop& (0+255),w,b
  9331  008836  2574               	addwf	(??_pop+1)& (0+255),w,b
  9332  008838  6ED9               	movwf	fsr2l,c
  9333  00883A  0E00               	movlw	0
  9334  00883C  2175               	addwfc	(??_pop+2)& (0+255),w,b
  9335  00883E  6EDA               	movwf	fsr2h,c
  9336  008840  50DF               	movf	indf2,w,c
  9337  008842  6F76               	movwf	pop@ret& (0+255),b
  9338  008844  EE20 F001          	lfsr	2,1
  9339  008848  5171               	movf	pop@q& (0+255),w,b
  9340  00884A  26D9               	addwf	fsr2l,f,c
  9341  00884C  5172               	movf	(pop@q+1)& (0+255),w,b
  9342  00884E  22DA               	addwfc	fsr2h,f,c
  9343  008850  2ADF               	incf	indf2,f,c
  9344                           
  9345                           ; BSR set to: 0
  9346                           ;queue.c: 65: if (q->readIdx >= q->size) q->readIdx = 0;
  9347  008852  C071  FFD9         	movff	pop@q,fsr2l
  9348  008856  C072  FFDA         	movff	pop@q+1,fsr2h
  9349  00885A  EE10 F001          	lfsr	1,1
  9350  00885E  5171               	movf	pop@q& (0+255),w,b
  9351  008860  26E1               	addwf	fsr1l,f,c
  9352  008862  5172               	movf	(pop@q+1)& (0+255),w,b
  9353  008864  22E2               	addwfc	fsr1h,f,c
  9354  008866  50DE               	movf	postinc2,w,c
  9355  008868  5CE6               	subwf	postinc1,w,c
  9356  00886A  A0D8               	btfss	status,0,c
  9357  00886C  D008               	goto	l14329
  9358                           
  9359                           ; BSR set to: 0
  9360  00886E  EE20 F001          	lfsr	2,1
  9361  008872  5171               	movf	pop@q& (0+255),w,b
  9362  008874  26D9               	addwf	fsr2l,f,c
  9363  008876  5172               	movf	(pop@q+1)& (0+255),w,b
  9364  008878  22DA               	addwfc	fsr2h,f,c
  9365  00887A  0E00               	movlw	0
  9366  00887C  6EDF               	movwf	indf2,c
  9367  00887E                     l14329:
  9368                           
  9369                           ; BSR set to: 0
  9370                           ;queue.c: 66: return ret;
  9371  00887E  5176               	movf	pop@ret& (0+255),w,b
  9372                           
  9373                           ; BSR set to: 0
  9374  008880  0012               	return		;funcret
  9375  008882                     __end_of_pop:
  9376                           	callstack 0
  9377                           
  9378 ;; *************** function ___lmul *****************
  9379 ;; Defined at:
  9380 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\Umul32.c"
  9381 ;; Parameters:    Size  Location     Type
  9382 ;;  multiplier      4   17[BANK0 ] unsigned long 
  9383 ;;  multiplicand    4   21[BANK0 ] unsigned long 
  9384 ;; Auto vars:     Size  Location     Type
  9385 ;;  product         4   25[BANK0 ] unsigned long 
  9386 ;; Return value:  Size  Location     Type
  9387 ;;                  4   17[BANK0 ] unsigned long 
  9388 ;; Registers used:
  9389 ;;		wreg, status,2, status,0
  9390 ;; Tracked objects:
  9391 ;;		On entry : 3F/0
  9392 ;;		On exit  : 3F/0
  9393 ;;		Unchanged: 0/0
  9394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9395 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9396 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9397 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9398 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9399 ;;Total ram usage:       12 bytes
  9400 ;; Hardware stack levels used: 1
  9401 ;; Hardware stack levels required when called: 8
  9402 ;; This function calls:
  9403 ;;		Nothing
  9404 ;; This function is called by:
  9405 ;;		_main
  9406 ;;		_doWait
  9407 ;; This function uses a non-reentrant model
  9408 ;;
  9409                           
  9410                           	psect	text22
  9411  0097F6                     __ptext22:
  9412                           	callstack 0
  9413  0097F6                     ___lmul:
  9414                           	callstack 20
  9415                           
  9416                           ; BSR set to: 0
  9417                           
  9418                           ; BSR set to: 0
  9419                           ;incstack = 0
  9420  0097F6  0E00               	movlw	0
  9421  0097F8  6F79               	movwf	___lmul@product& (0+255),b
  9422  0097FA  0E00               	movlw	0
  9423  0097FC  6F7A               	movwf	(___lmul@product+1)& (0+255),b
  9424  0097FE  0E00               	movlw	0
  9425  009800  6F7B               	movwf	(___lmul@product+2)& (0+255),b
  9426  009802  0E00               	movlw	0
  9427  009804  6F7C               	movwf	(___lmul@product+3)& (0+255),b
  9428  009806                     l11267:
  9429                           
  9430                           ; BSR set to: 0
  9431  009806  A171               	btfss	___lmul@multiplier& (0+255),0,b
  9432  009808  D008               	goto	l11271
  9433                           
  9434                           ; BSR set to: 0
  9435  00980A  5175               	movf	___lmul@multiplicand& (0+255),w,b
  9436  00980C  2779               	addwf	___lmul@product& (0+255),f,b
  9437  00980E  5176               	movf	(___lmul@multiplicand+1)& (0+255),w,b
  9438  009810  237A               	addwfc	(___lmul@product+1)& (0+255),f,b
  9439  009812  5177               	movf	(___lmul@multiplicand+2)& (0+255),w,b
  9440  009814  237B               	addwfc	(___lmul@product+2)& (0+255),f,b
  9441  009816  5178               	movf	(___lmul@multiplicand+3)& (0+255),w,b
  9442  009818  237C               	addwfc	(___lmul@product+3)& (0+255),f,b
  9443  00981A                     l11271:
  9444                           
  9445                           ; BSR set to: 0
  9446  00981A  90D8               	bcf	status,0,c
  9447  00981C  3775               	rlcf	___lmul@multiplicand& (0+255),f,b
  9448  00981E  3776               	rlcf	(___lmul@multiplicand+1)& (0+255),f,b
  9449  009820  3777               	rlcf	(___lmul@multiplicand+2)& (0+255),f,b
  9450  009822  3778               	rlcf	(___lmul@multiplicand+3)& (0+255),f,b
  9451                           
  9452                           ; BSR set to: 0
  9453  009824  90D8               	bcf	status,0,c
  9454  009826  3374               	rrcf	(___lmul@multiplier+3)& (0+255),f,b
  9455  009828  3373               	rrcf	(___lmul@multiplier+2)& (0+255),f,b
  9456  00982A  3372               	rrcf	(___lmul@multiplier+1)& (0+255),f,b
  9457  00982C  3371               	rrcf	___lmul@multiplier& (0+255),f,b
  9458  00982E  5171               	movf	___lmul@multiplier& (0+255),w,b
  9459  009830  1172               	iorwf	(___lmul@multiplier+1)& (0+255),w,b
  9460  009832  1173               	iorwf	(___lmul@multiplier+2)& (0+255),w,b
  9461  009834  1174               	iorwf	(___lmul@multiplier+3)& (0+255),w,b
  9462  009836  A4D8               	btfss	status,2,c
  9463  009838  D7E6               	goto	l11267
  9464                           
  9465                           ; BSR set to: 0
  9466  00983A  C079  F071         	movff	___lmul@product,?___lmul
  9467  00983E  C07A  F072         	movff	___lmul@product+1,?___lmul+1
  9468  009842  C07B  F073         	movff	___lmul@product+2,?___lmul+2
  9469  009846  C07C  F074         	movff	___lmul@product+3,?___lmul+3
  9470                           
  9471                           ; BSR set to: 0
  9472  00984A  0012               	return		;funcret
  9473  00984C                     __end_of___lmul:
  9474                           	callstack 0
  9475                           
  9476 ;; *************** function _doSOD *****************
  9477 ;; Defined at:
  9478 ;;		line 477 in file "../../github/CANMIOfirmware/mioEvents.c"
  9479 ;; Parameters:    Size  Location     Type
  9480 ;;		None
  9481 ;; Auto vars:     Size  Location     Type
  9482 ;;		None
  9483 ;; Return value:  Size  Location     Type
  9484 ;;                  1    wreg      void 
  9485 ;; Registers used:
  9486 ;;		wreg, status,2
  9487 ;; Tracked objects:
  9488 ;;		On entry : 3F/0
  9489 ;;		On exit  : 3F/0
  9490 ;;		Unchanged: 3F/0
  9491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9492 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9493 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9494 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9495 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9496 ;;Total ram usage:        0 bytes
  9497 ;; Hardware stack levels used: 1
  9498 ;; Hardware stack levels required when called: 8
  9499 ;; This function calls:
  9500 ;;		Nothing
  9501 ;; This function is called by:
  9502 ;;		_processActions
  9503 ;; This function uses a non-reentrant model
  9504 ;;
  9505                           
  9506                           	psect	text23
  9507  00A6B4                     __ptext23:
  9508                           	callstack 0
  9509  00A6B4                     _doSOD:
  9510                           	callstack 21
  9511                           
  9512                           ; BSR set to: 0
  9513                           ;mioEvents.c: 478: timedResponse = 1;
  9514                           
  9515                           ; BSR set to: 0
  9516                           ;incstack = 0
  9517  00A6B4  0E01               	movlw	1
  9518  00A6B6  6E14               	movwf	_timedResponse^0,c
  9519                           
  9520                           ;mioEvents.c: 479: timedResponseStep = 0;
  9521  00A6B8  0E00               	movlw	0
  9522  00A6BA  6E13               	movwf	_timedResponseStep^0,c
  9523                           
  9524                           ; BSR set to: 0
  9525  00A6BC  0012               	return		;funcret
  9526  00A6BE                     __end_of_doSOD:
  9527                           	callstack 0
  9528                           
  9529 ;; *************** function _deleteActionQueue *****************
  9530 ;; Defined at:
  9531 ;;		line 139 in file "../../github/CANMIOfirmware/actionQueue.c"
  9532 ;; Parameters:    Size  Location     Type
  9533 ;;  index           1    wreg     unsigned char 
  9534 ;; Auto vars:     Size  Location     Type
  9535 ;;  index           1   24[BANK0 ] unsigned char 
  9536 ;; Return value:  Size  Location     Type
  9537 ;;                  1    wreg      void 
  9538 ;; Registers used:
  9539 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9540 ;; Tracked objects:
  9541 ;;		On entry : 3F/0
  9542 ;;		On exit  : 3F/0
  9543 ;;		Unchanged: 0/0
  9544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9545 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9546 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9547 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9548 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9549 ;;Total ram usage:        2 bytes
  9550 ;; Hardware stack levels used: 1
  9551 ;; Hardware stack levels required when called: 9
  9552 ;; This function calls:
  9553 ;;		_delete
  9554 ;;		_quantity
  9555 ;; This function is called by:
  9556 ;;		_processActions
  9557 ;; This function uses a non-reentrant model
  9558 ;;
  9559                           
  9560                           	psect	text24
  9561  009AD6                     __ptext24:
  9562                           	callstack 0
  9563  009AD6                     _deleteActionQueue:
  9564                           	callstack 20
  9565                           
  9566                           ; BSR set to: 0
  9567                           ;incstack = 0
  9568                           ;deleteActionQueue@index stored from wreg
  9569  009AD6  6F78               	movwf	deleteActionQueue@index& (0+255),b
  9570                           
  9571                           ;actionQueue.c: 140: if (index <= quantity(&expeditedQueue)) {
  9572  009AD8  0EE3               	movlw	low _expeditedQueue
  9573  009ADA  0100               	movlb	0	; () banked
  9574  009ADC  6F71               	movwf	quantity@q& (0+255),b
  9575  009ADE  0E01               	movlw	high _expeditedQueue
  9576  009AE0  6F72               	movwf	(quantity@q+1)& (0+255),b
  9577  009AE2  ECCB  F04F         	call	_quantity	;wreg free
  9578  009AE6  6F77               	movwf	??_deleteActionQueue& (0+255),b
  9579  009AE8  5178               	movf	deleteActionQueue@index& (0+255),w,b
  9580  009AEA  5D77               	subwf	??_deleteActionQueue& (0+255),w,b
  9581  009AEC  A0D8               	btfss	status,0,c
  9582  009AEE  D009               	goto	l15967
  9583                           
  9584                           ; BSR set to: 0
  9585                           ;actionQueue.c: 141: delete(&expeditedQueue, index);
  9586  009AF0  0EE3               	movlw	low _expeditedQueue
  9587  009AF2  6F71               	movwf	delete@q& (0+255),b
  9588  009AF4  0E01               	movlw	high _expeditedQueue
  9589  009AF6  6F72               	movwf	(delete@q+1)& (0+255),b
  9590  009AF8  C078  F073         	movff	deleteActionQueue@index,delete@index
  9591  009AFC  ECFB  F049         	call	_delete	;wreg free
  9592                           
  9593                           ;actionQueue.c: 142: } else {
  9594  009B00  0012               	return	
  9595  009B02                     l15967:
  9596                           
  9597                           ; BSR set to: 0
  9598                           ;actionQueue.c: 143: index -= quantity(&expeditedQueue);
  9599  009B02  0EE3               	movlw	low _expeditedQueue
  9600  009B04  6F71               	movwf	quantity@q& (0+255),b
  9601  009B06  0E01               	movlw	high _expeditedQueue
  9602  009B08  6F72               	movwf	(quantity@q+1)& (0+255),b
  9603  009B0A  ECCB  F04F         	call	_quantity	;wreg free
  9604  009B0E  5F78               	subwf	deleteActionQueue@index& (0+255),f,b
  9605                           
  9606                           ;actionQueue.c: 144: delete(&normalQueue, index);
  9607  009B10  0EE8               	movlw	low _normalQueue
  9608  009B12  6F71               	movwf	delete@q& (0+255),b
  9609  009B14  0E01               	movlw	high _normalQueue
  9610  009B16  6F72               	movwf	(delete@q+1)& (0+255),b
  9611  009B18  C078  F073         	movff	deleteActionQueue@index,delete@index
  9612  009B1C  ECFB  F049         	call	_delete	;wreg free
  9613                           
  9614                           ; BSR set to: 0
  9615  009B20  0012               	return		;funcret
  9616  009B22                     __end_of_deleteActionQueue:
  9617                           	callstack 0
  9618                           
  9619 ;; *************** function _quantity *****************
  9620 ;; Defined at:
  9621 ;;		line 89 in file "../../github/CANMIOfirmware/queue.c"
  9622 ;; Parameters:    Size  Location     Type
  9623 ;;  q               2   17[BANK0 ] PTR struct Queue
  9624 ;;		 -> expeditedQueue(5), normalQueue(5), 
  9625 ;; Auto vars:     Size  Location     Type
  9626 ;;		None
  9627 ;; Return value:  Size  Location     Type
  9628 ;;                  1    wreg      unsigned char 
  9629 ;; Registers used:
  9630 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9631 ;; Tracked objects:
  9632 ;;		On entry : 3F/0
  9633 ;;		On exit  : 3F/0
  9634 ;;		Unchanged: 0/0
  9635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9636 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9637 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9638 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9639 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9640 ;;Total ram usage:        6 bytes
  9641 ;; Hardware stack levels used: 1
  9642 ;; Hardware stack levels required when called: 8
  9643 ;; This function calls:
  9644 ;;		Nothing
  9645 ;; This function is called by:
  9646 ;;		_peekActionQueue
  9647 ;;		_deleteActionQueue
  9648 ;; This function uses a non-reentrant model
  9649 ;;
  9650                           
  9651                           	psect	text25
  9652  009F96                     __ptext25:
  9653                           	callstack 0
  9654  009F96                     _quantity:
  9655                           	callstack 20
  9656                           
  9657                           ; BSR set to: 0
  9658                           ;queue.c: 90: return (unsigned char)((unsigned char)(q->writeIdx - q->readIdx) & (q->siz
      +                          e -1U));
  9659                           
  9660                           ; BSR set to: 0
  9661                           ;incstack = 0
  9662  009F96  EE20 F001          	lfsr	2,1
  9663  009F9A  5171               	movf	quantity@q& (0+255),w,b
  9664  009F9C  26D9               	addwf	fsr2l,f,c
  9665  009F9E  5172               	movf	(quantity@q+1)& (0+255),w,b
  9666  009FA0  22DA               	addwfc	fsr2h,f,c
  9667  009FA2  50DF               	movf	indf2,w,c
  9668  009FA4  6F73               	movwf	??_quantity& (0+255),b
  9669  009FA6  EE20 F002          	lfsr	2,2
  9670  009FAA  5171               	movf	quantity@q& (0+255),w,b
  9671  009FAC  26D9               	addwf	fsr2l,f,c
  9672  009FAE  5172               	movf	(quantity@q+1)& (0+255),w,b
  9673  009FB0  22DA               	addwfc	fsr2h,f,c
  9674  009FB2  50DF               	movf	indf2,w,c
  9675  009FB4  6F74               	movwf	(??_quantity+1)& (0+255),b
  9676  009FB6  5173               	movf	??_quantity& (0+255),w,b
  9677  009FB8  5D74               	subwf	(??_quantity+1)& (0+255),w,b
  9678  009FBA  6F75               	movwf	(??_quantity+2)& (0+255),b
  9679  009FBC  C071  FFD9         	movff	quantity@q,fsr2l
  9680  009FC0  C072  FFDA         	movff	quantity@q+1,fsr2h
  9681  009FC4  50DF               	movf	indf2,w,c
  9682  009FC6  6F76               	movwf	(??_quantity+3)& (0+255),b
  9683  009FC8  0576               	decf	(??_quantity+3)& (0+255),w,b
  9684  009FCA  1575               	andwf	(??_quantity+2)& (0+255),w,b
  9685                           
  9686                           ; BSR set to: 0
  9687  009FCC  0012               	return		;funcret
  9688  009FCE                     __end_of_quantity:
  9689                           	callstack 0
  9690                           
  9691 ;; *************** function _delete *****************
  9692 ;; Defined at:
  9693 ;;		line 97 in file "../../github/CANMIOfirmware/queue.c"
  9694 ;; Parameters:    Size  Location     Type
  9695 ;;  q               2   17[BANK0 ] PTR struct Queue
  9696 ;;		 -> expeditedQueue(5), normalQueue(5), 
  9697 ;;  index           1   19[BANK0 ] unsigned char 
  9698 ;; Auto vars:     Size  Location     Type
  9699 ;;		None
  9700 ;; Return value:  Size  Location     Type
  9701 ;;                  1    wreg      void 
  9702 ;; Registers used:
  9703 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9704 ;; Tracked objects:
  9705 ;;		On entry : 3F/0
  9706 ;;		On exit  : 3F/0
  9707 ;;		Unchanged: 0/0
  9708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9709 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9710 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9711 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9712 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9713 ;;Total ram usage:        5 bytes
  9714 ;; Hardware stack levels used: 1
  9715 ;; Hardware stack levels required when called: 8
  9716 ;; This function calls:
  9717 ;;		Nothing
  9718 ;; This function is called by:
  9719 ;;		_deleteActionQueue
  9720 ;; This function uses a non-reentrant model
  9721 ;;
  9722                           
  9723                           	psect	text26
  9724  0093F6                     __ptext26:
  9725                           	callstack 0
  9726  0093F6                     _delete:
  9727                           	callstack 20
  9728                           
  9729                           ; BSR set to: 0
  9730                           ;queue.c: 98: if (index >= q->size) return;
  9731                           
  9732                           ; BSR set to: 0
  9733                           ;incstack = 0
  9734  0093F6  C071  FFD9         	movff	delete@q,fsr2l
  9735  0093FA  C072  FFDA         	movff	delete@q+1,fsr2h
  9736  0093FE  50DE               	movf	postinc2,w,c
  9737  009400  5D73               	subwf	delete@index& (0+255),w,b
  9738  009402  B0D8               	btfsc	status,0,c
  9739  009404  0012               	return	
  9740                           
  9741                           ; BSR set to: 0
  9742                           ;queue.c: 100: index += q->readIdx;
  9743  009406  EE20 F001          	lfsr	2,1
  9744  00940A  5171               	movf	delete@q& (0+255),w,b
  9745  00940C  26D9               	addwf	fsr2l,f,c
  9746  00940E  5172               	movf	(delete@q+1)& (0+255),w,b
  9747  009410  22DA               	addwfc	fsr2h,f,c
  9748  009412  50DF               	movf	indf2,w,c
  9749  009414  2773               	addwf	delete@index& (0+255),f,b
  9750                           
  9751                           ;queue.c: 102: if (index >= q->size) {
  9752  009416  C071  FFD9         	movff	delete@q,fsr2l
  9753  00941A  C072  FFDA         	movff	delete@q+1,fsr2h
  9754  00941E  50DE               	movf	postinc2,w,c
  9755  009420  5D73               	subwf	delete@index& (0+255),w,b
  9756  009422  A0D8               	btfss	status,0,c
  9757  009424  D006               	goto	l1127
  9758                           
  9759                           ; BSR set to: 0
  9760                           ;queue.c: 103: index -= q->size;
  9761  009426  C071  FFD9         	movff	delete@q,fsr2l
  9762  00942A  C072  FFDA         	movff	delete@q+1,fsr2h
  9763  00942E  50DF               	movf	indf2,w,c
  9764  009430  5F73               	subwf	delete@index& (0+255),f,b
  9765  009432                     l1127:
  9766                           
  9767                           ; BSR set to: 0
  9768                           ;queue.c: 104: };queue.c: 105: q->queue[index] = 0;
  9769  009432  EE20 F003          	lfsr	2,3
  9770  009436  5171               	movf	delete@q& (0+255),w,b
  9771  009438  26D9               	addwf	fsr2l,f,c
  9772  00943A  5172               	movf	(delete@q+1)& (0+255),w,b
  9773  00943C  22DA               	addwfc	fsr2h,f,c
  9774  00943E  CFDE F074          	movff	postinc2,??_delete
  9775  009442  CFDD F075          	movff	postdec2,??_delete+1
  9776  009446  5173               	movf	delete@index& (0+255),w,b
  9777  009448  2574               	addwf	??_delete& (0+255),w,b
  9778  00944A  6ED9               	movwf	fsr2l,c
  9779  00944C  0E00               	movlw	0
  9780  00944E  2175               	addwfc	(??_delete+1)& (0+255),w,b
  9781  009450  6EDA               	movwf	fsr2h,c
  9782  009452  0E00               	movlw	0
  9783  009454  6EDF               	movwf	indf2,c
  9784                           
  9785                           ; BSR set to: 0
  9786  009456  0012               	return		;funcret
  9787  009458                     __end_of_delete:
  9788                           	callstack 0
  9789                           
  9790 ;; *************** function _completed *****************
  9791 ;; Defined at:
  9792 ;;		line 201 in file "../../github/CANMIOfirmware/outputs.c"
  9793 ;; Parameters:    Size  Location     Type
  9794 ;;  io              1    wreg     unsigned char 
  9795 ;;  action          1   17[BANK0 ] unsigned char 
  9796 ;;  type            1   18[BANK0 ] unsigned char 
  9797 ;; Auto vars:     Size  Location     Type
  9798 ;;  io              1   22[BANK0 ] unsigned char 
  9799 ;; Return value:  Size  Location     Type
  9800 ;;                  1    wreg      unsigned char 
  9801 ;; Registers used:
  9802 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  9803 ;; Tracked objects:
  9804 ;;		On entry : 3F/0
  9805 ;;		On exit  : 3F/0
  9806 ;;		Unchanged: 0/0
  9807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9808 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9809 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9810 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9811 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9812 ;;Total ram usage:        6 bytes
  9813 ;; Hardware stack levels used: 1
  9814 ;; Hardware stack levels required when called: 8
  9815 ;; This function calls:
  9816 ;;		Nothing
  9817 ;; This function is called by:
  9818 ;;		_processActions
  9819 ;; This function uses a non-reentrant model
  9820 ;;
  9821                           
  9822                           	psect	text27
  9823  008882                     __ptext27:
  9824                           	callstack 0
  9825  008882                     _completed:
  9826                           	callstack 21
  9827                           
  9828                           ; BSR set to: 0
  9829                           ;incstack = 0
  9830                           ;completed@io stored from wreg
  9831  008882  6F76               	movwf	completed@io& (0+255),b
  9832                           
  9833                           ;outputs.c: 202: switch(type) {
  9834  008884  D037               	goto	l16205
  9835  008886                     l16183:
  9836                           
  9837                           ; BSR set to: 0
  9838                           ;outputs.c: 205: return 1;
  9839  008886  0E01               	movlw	1
  9840  008888  0012               	return	
  9841  00888A                     l16187:
  9842                           
  9843                           ; BSR set to: 0
  9844                           ;outputs.c: 208: return (BOOL)(pulseDelays[io] == 0U);
  9845  00888A  0EA4               	movlw	low _pulseDelays
  9846  00888C  2576               	addwf	completed@io& (0+255),w,b
  9847  00888E  6ED9               	movwf	fsr2l,c
  9848  008890  6ADA               	clrf	fsr2h,c
  9849  008892  0E02               	movlw	high _pulseDelays
  9850  008894  22DA               	addwfc	fsr2h,f,c
  9851  008896  50DF               	movf	indf2,w,c
  9852  008898  A4D8               	btfss	status,2,c
  9853  00889A  D002               	goto	u18780
  9854  00889C  0E01               	movlw	1
  9855  00889E  0012               	return	
  9856  0088A0                     u18780:
  9857  0088A0  0E00               	movlw	0
  9858  0088A2  0012               	return	
  9859  0088A4                     l16191:
  9860                           
  9861                           ; BSR set to: 0
  9862                           ;outputs.c: 212: case 3U:;outputs.c: 215: case 4U:;outputs.c: 217: return (BOOL)((target
      +                          Pos[io] == currentPos[io]) && ((servoState[io] == STOPPED) || (servoState[io] == OFF)));
  9863  0088A4  0E00               	movlw	0
  9864  0088A6  6F75               	movwf	_completed$2368& (0+255),b
  9865                           
  9866                           ; BSR set to: 0
  9867  0088A8  0E80               	movlw	low _currentPos
  9868  0088AA  2576               	addwf	completed@io& (0+255),w,b
  9869  0088AC  6ED9               	movwf	fsr2l,c
  9870  0088AE  6ADA               	clrf	fsr2h,c
  9871  0088B0  0E01               	movlw	high _currentPos
  9872  0088B2  22DA               	addwfc	fsr2h,f,c
  9873  0088B4  0E70               	movlw	low _targetPos
  9874  0088B6  2576               	addwf	completed@io& (0+255),w,b
  9875  0088B8  6EE1               	movwf	fsr1l,c
  9876  0088BA  6AE2               	clrf	fsr1h,c
  9877  0088BC  0E01               	movlw	high _targetPos
  9878  0088BE  22E2               	addwfc	fsr1h,f,c
  9879  0088C0  50DE               	movf	postinc2,w,c
  9880  0088C2  18E6               	xorwf	postinc1,w,c
  9881  0088C4  A4D8               	btfss	status,2,c
  9882  0088C6  D014               	goto	l1100
  9883                           
  9884                           ; BSR set to: 0
  9885  0088C8  0E40               	movlw	low _servoState
  9886  0088CA  2576               	addwf	completed@io& (0+255),w,b
  9887  0088CC  6ED9               	movwf	fsr2l,c
  9888  0088CE  6ADA               	clrf	fsr2h,c
  9889  0088D0  0E01               	movlw	high _servoState
  9890  0088D2  22DA               	addwfc	fsr2h,f,c
  9891  0088D4  04DE               	decf	postinc2,w,c
  9892  0088D6  B4D8               	btfsc	status,2,c
  9893  0088D8  D009               	goto	u18820
  9894                           
  9895                           ; BSR set to: 0
  9896  0088DA  0E40               	movlw	low _servoState
  9897  0088DC  2576               	addwf	completed@io& (0+255),w,b
  9898  0088DE  6ED9               	movwf	fsr2l,c
  9899  0088E0  6ADA               	clrf	fsr2h,c
  9900  0088E2  0E01               	movlw	high _servoState
  9901  0088E4  22DA               	addwfc	fsr2h,f,c
  9902  0088E6  50DF               	movf	indf2,w,c
  9903  0088E8  A4D8               	btfss	status,2,c
  9904  0088EA  D002               	goto	l1100
  9905  0088EC                     u18820:
  9906                           
  9907                           ; BSR set to: 0
  9908  0088EC  0E01               	movlw	1
  9909  0088EE  6F75               	movwf	_completed$2368& (0+255),b
  9910  0088F0                     l1100:
  9911                           
  9912                           ; BSR set to: 0
  9913  0088F0  5175               	movf	_completed$2368& (0+255),w,b
  9914  0088F2  0012               	return	
  9915  0088F4                     l16205:
  9916  0088F4  0100               	movlb	0	; () banked
  9917  0088F6  5172               	movf	completed@type& (0+255),w,b
  9918                           
  9919                           ; Switch size 1, requested type "simple"
  9920                           ; Number of cases is 5, Range of values is 0 to 4
  9921                           ; switch strategies available:
  9922                           ; Name         Instructions Cycles
  9923                           ; simple_byte           16     9 (average)
  9924                           ;	Chosen strategy is simple_byte
  9925  0088F8  0A00               	xorlw	0	; case 0
  9926  0088FA  B4D8               	btfsc	status,2,c
  9927  0088FC  D7C4               	goto	l16183
  9928  0088FE  0A01               	xorlw	1	; case 1
  9929  008900  B4D8               	btfsc	status,2,c
  9930  008902  D7C3               	goto	l16187
  9931  008904  0A03               	xorlw	3	; case 2
  9932  008906  B4D8               	btfsc	status,2,c
  9933  008908  D7CD               	goto	l16191
  9934  00890A  0A01               	xorlw	1	; case 3
  9935  00890C  B4D8               	btfsc	status,2,c
  9936  00890E  D7CA               	goto	l16191
  9937  008910  0A07               	xorlw	7	; case 4
  9938  008912  B4D8               	btfsc	status,2,c
  9939  008914  D7C7               	goto	l16191
  9940  008916  D7B7               	goto	l16183
  9941  008918                     __end_of_completed:
  9942                           	callstack 0
  9943                           
  9944 ;; *************** function _pollAnalogue *****************
  9945 ;; Defined at:
  9946 ;;		line 73 in file "../../github/CANMIOfirmware/analogue.c"
  9947 ;; Parameters:    Size  Location     Type
  9948 ;;		None
  9949 ;; Auto vars:     Size  Location     Type
  9950 ;;  adc             2   96[BANK0 ] unsigned int 
  9951 ;;  lthreshold      2   94[BANK0 ] short 
  9952 ;;  hthreshold      2   92[BANK0 ] short 
  9953 ;;  lhysteresis     2   90[BANK0 ] short 
  9954 ;;  hhysteresis     2   88[BANK0 ] short 
  9955 ;; Return value:  Size  Location     Type
  9956 ;;                  1    wreg      void 
  9957 ;; Registers used:
  9958 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9959 ;; Tracked objects:
  9960 ;;		On entry : 3F/0
  9961 ;;		On exit  : 3F/0
  9962 ;;		Unchanged: 0/0
  9963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  9964 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9965 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9966 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9967 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  9968 ;;Total ram usage:       13 bytes
  9969 ;; Hardware stack levels used: 1
  9970 ;; Hardware stack levels required when called: 16
  9971 ;; This function calls:
  9972 ;;		___wmul
  9973 ;;		_cbusSendOpcNN
  9974 ;;		_sendProducedEvent
  9975 ;;		_writeFlashByte
  9976 ;; This function is called by:
  9977 ;;		_main
  9978 ;; This function uses a non-reentrant model
  9979 ;;
  9980                           
  9981                           	psect	text28
  9982  002470                     __ptext28:
  9983                           	callstack 0
  9984  002470                     _pollAnalogue:
  9985                           	callstack 14
  9986                           
  9987                           ; BSR set to: 0
  9988                           ;analogue.c: 74: WORD adc;;analogue.c: 76: short lthreshold;;analogue.c: 77: short hthre
      +                          shold;;analogue.c: 78: short lhysteresis;;analogue.c: 79: short hhysteresis;;analogue.c:
      +                           81: if (ADCON0bits.GO) {
  9989                           
  9990                           ; BSR set to: 0
  9991                           ;incstack = 0
  9992  002470  B2C2               	btfsc	194,1,c	;volatile
  9993  002472  0012               	return	
  9994                           
  9995                           ; BSR set to: 0
  9996                           ;analogue.c: 84: };analogue.c: 87: if ((NV->io[portInProgress].type == 5U) || (NV->io[po
      +                          rtInProgress].type == 6U)) {
  9997  002474  51E8               	movf	_portInProgress& (0+255),w,b
  9998  002476  0D07               	mullw	7
  9999  002478  C0EC  F0B5         	movff	_NV,??_pollAnalogue
 10000  00247C  C0ED  F0B6         	movff	_NV+1,??_pollAnalogue+1
 10001  002480  50F3               	movf	243,w,c
 10002  002482  27B5               	addwf	??_pollAnalogue& (0+255),f,b
 10003  002484  50F4               	movf	244,w,c
 10004  002486  23B6               	addwfc	(??_pollAnalogue+1)& (0+255),f,b
 10005  002488  0E10               	movlw	16
 10006  00248A  25B5               	addwf	??_pollAnalogue& (0+255),w,b
 10007  00248C  6ED9               	movwf	fsr2l,c
 10008  00248E  0E00               	movlw	0
 10009  002490  21B6               	addwfc	(??_pollAnalogue+1)& (0+255),w,b
 10010  002492  6EDA               	movwf	fsr2h,c
 10011  002494  0E05               	movlw	5
 10012  002496  18DE               	xorwf	postinc2,w,c
 10013  002498  B4D8               	btfsc	status,2,c
 10014  00249A  D014               	goto	u26550
 10015                           
 10016                           ; BSR set to: 0
 10017  00249C  51E8               	movf	_portInProgress& (0+255),w,b
 10018  00249E  0D07               	mullw	7
 10019  0024A0  C0EC  F0B5         	movff	_NV,??_pollAnalogue
 10020  0024A4  C0ED  F0B6         	movff	_NV+1,??_pollAnalogue+1
 10021  0024A8  50F3               	movf	243,w,c
 10022  0024AA  27B5               	addwf	??_pollAnalogue& (0+255),f,b
 10023  0024AC  50F4               	movf	244,w,c
 10024  0024AE  23B6               	addwfc	(??_pollAnalogue+1)& (0+255),f,b
 10025  0024B0  0E10               	movlw	16
 10026  0024B2  25B5               	addwf	??_pollAnalogue& (0+255),w,b
 10027  0024B4  6ED9               	movwf	fsr2l,c
 10028  0024B6  0E00               	movlw	0
 10029  0024B8  21B6               	addwfc	(??_pollAnalogue+1)& (0+255),w,b
 10030  0024BA  6EDA               	movwf	fsr2h,c
 10031  0024BC  0E06               	movlw	6
 10032  0024BE  18DE               	xorwf	postinc2,w,c
 10033  0024C0  A4D8               	btfss	status,2,c
 10034  0024C2  D284               	goto	l21053
 10035  0024C4                     u26550:
 10036                           
 10037                           ; BSR set to: 0
 10038                           ;analogue.c: 89: if (haveRequestedAdc) {
 10039  0024C4  5018               	movf	_haveRequestedAdc^0,w,c
 10040  0024C6  B4D8               	btfsc	status,2,c
 10041  0024C8  D281               	goto	l21053
 10042                           
 10043                           ; BSR set to: 0
 10044                           ;analogue.c: 91: adc = ADRESH;
 10045  0024CA  CFC4 F0C0          	movff	4036,pollAnalogue@adc	;volatile
 10046  0024CE  6BC1               	clrf	(pollAnalogue@adc+1)& (0+255),b
 10047                           
 10048                           ; BSR set to: 0
 10049                           ;analogue.c: 92: adc = adc << 8;
 10050  0024D0  51C0               	movf	pollAnalogue@adc& (0+255),w,b
 10051  0024D2  6FC1               	movwf	(pollAnalogue@adc+1)& (0+255),b
 10052  0024D4  6BC0               	clrf	pollAnalogue@adc& (0+255),b
 10053                           
 10054                           ; BSR set to: 0
 10055                           ;analogue.c: 93: adc |= ADRESL;
 10056  0024D6  50C3               	movf	195,w,c	;volatile
 10057  0024D8  13C0               	iorwf	pollAnalogue@adc& (0+255),f,b
 10058                           
 10059                           ; BSR set to: 0
 10060                           ;analogue.c: 97: if ((setupState == 0U) || (portInProgress != setupIo)) {
 10061  0024DA  5019               	movf	_setupState^0,w,c
 10062  0024DC  B4D8               	btfsc	status,2,c
 10063  0024DE  D004               	goto	u26580
 10064                           
 10065                           ; BSR set to: 0
 10066  0024E0  501A               	movf	_setupIo^0,w,c
 10067  0024E2  19E8               	xorwf	_portInProgress& (0+255),w,b
 10068  0024E4  B4D8               	btfsc	status,2,c
 10069  0024E6  D214               	goto	l21033
 10070  0024E8                     u26580:
 10071                           
 10072                           ; BSR set to: 0
 10073                           ;analogue.c: 98: if (NV->io[portInProgress].type == 6U) {
 10074  0024E8  51E8               	movf	_portInProgress& (0+255),w,b
 10075  0024EA  0D07               	mullw	7
 10076  0024EC  C0EC  F0B5         	movff	_NV,??_pollAnalogue
 10077  0024F0  C0ED  F0B6         	movff	_NV+1,??_pollAnalogue+1
 10078  0024F4  50F3               	movf	243,w,c
 10079  0024F6  27B5               	addwf	??_pollAnalogue& (0+255),f,b
 10080  0024F8  50F4               	movf	244,w,c
 10081  0024FA  23B6               	addwfc	(??_pollAnalogue+1)& (0+255),f,b
 10082  0024FC  0E10               	movlw	16
 10083  0024FE  25B5               	addwf	??_pollAnalogue& (0+255),w,b
 10084  002500  6ED9               	movwf	fsr2l,c
 10085  002502  0E00               	movlw	0
 10086  002504  21B6               	addwfc	(??_pollAnalogue+1)& (0+255),w,b
 10087  002506  6EDA               	movwf	fsr2h,c
 10088  002508  0E06               	movlw	6
 10089  00250A  18DE               	xorwf	postinc2,w,c
 10090  00250C  A4D8               	btfss	status,2,c
 10091  00250E  D128               	goto	l21005
 10092                           
 10093                           ; BSR set to: 0
 10094                           ;analogue.c: 101: lthreshold = NV->io[portInProgress].nv_io.nv_magnet.magnet_offset_h;
 10095  002510  51E8               	movf	_portInProgress& (0+255),w,b
 10096  002512  0D07               	mullw	7
 10097  002514  C0EC  F0B5         	movff	_NV,??_pollAnalogue
 10098  002518  C0ED  F0B6         	movff	_NV+1,??_pollAnalogue+1
 10099  00251C  50F3               	movf	243,w,c
 10100  00251E  27B5               	addwf	??_pollAnalogue& (0+255),f,b
 10101  002520  50F4               	movf	244,w,c
 10102  002522  23B6               	addwfc	(??_pollAnalogue+1)& (0+255),f,b
 10103  002524  0E15               	movlw	21
 10104  002526  25B5               	addwf	??_pollAnalogue& (0+255),w,b
 10105  002528  6ED9               	movwf	fsr2l,c
 10106  00252A  0E00               	movlw	0
 10107  00252C  21B6               	addwfc	(??_pollAnalogue+1)& (0+255),w,b
 10108  00252E  6EDA               	movwf	fsr2h,c
 10109  002530  50DF               	movf	indf2,w,c
 10110  002532  6FB7               	movwf	(??_pollAnalogue+2)& (0+255),b
 10111  002534  51B7               	movf	(??_pollAnalogue+2)& (0+255),w,b
 10112  002536  6FBE               	movwf	pollAnalogue@lthreshold& (0+255),b
 10113  002538  6BBF               	clrf	(pollAnalogue@lthreshold+1)& (0+255),b
 10114                           
 10115                           ; BSR set to: 0
 10116                           ;analogue.c: 102: lthreshold = lthreshold << 8;
 10117  00253A  51BE               	movf	pollAnalogue@lthreshold& (0+255),w,b
 10118  00253C  6FBF               	movwf	(pollAnalogue@lthreshold+1)& (0+255),b
 10119  00253E  6BBE               	clrf	pollAnalogue@lthreshold& (0+255),b
 10120                           
 10121                           ; BSR set to: 0
 10122                           ;analogue.c: 103: lthreshold |= NV->io[portInProgress].nv_io.nv_magnet.magnet_offset_l;
 10123  002540  51E8               	movf	_portInProgress& (0+255),w,b
 10124  002542  0D07               	mullw	7
 10125  002544  C0EC  F0B5         	movff	_NV,??_pollAnalogue
 10126  002548  C0ED  F0B6         	movff	_NV+1,??_pollAnalogue+1
 10127  00254C  50F3               	movf	243,w,c
 10128  00254E  27B5               	addwf	??_pollAnalogue& (0+255),f,b
 10129  002550  50F4               	movf	244,w,c
 10130  002552  23B6               	addwfc	(??_pollAnalogue+1)& (0+255),f,b
 10131  002554  0E16               	movlw	22
 10132  002556  25B5               	addwf	??_pollAnalogue& (0+255),w,b
 10133  002558  6ED9               	movwf	fsr2l,c
 10134  00255A  0E00               	movlw	0
 10135  00255C  21B6               	addwfc	(??_pollAnalogue+1)& (0+255),w,b
 10136  00255E  6EDA               	movwf	fsr2h,c
 10137  002560  50DF               	movf	indf2,w,c
 10138  002562  6FB7               	movwf	(??_pollAnalogue+2)& (0+255),b
 10139  002564  51B7               	movf	(??_pollAnalogue+2)& (0+255),w,b
 10140  002566  13BE               	iorwf	pollAnalogue@lthreshold& (0+255),f,b
 10141                           
 10142                           ; BSR set to: 0
 10143                           ;analogue.c: 104: hthreshold = lthreshold;
 10144  002568  C0BE  F0BC         	movff	pollAnalogue@lthreshold,pollAnalogue@hthreshold
 10145  00256C  C0BF  F0BD         	movff	pollAnalogue@lthreshold+1,pollAnalogue@hthreshold+1
 10146                           
 10147                           ; BSR set to: 0
 10148                           ;analogue.c: 105: lthreshold -= NV->io[portInProgress].nv_io.nv_magnet.magnet_threshold;
 10149  002570  51E8               	movf	_portInProgress& (0+255),w,b
 10150  002572  0D07               	mullw	7
 10151  002574  C0EC  F0B5         	movff	_NV,??_pollAnalogue
 10152  002578  C0ED  F0B6         	movff	_NV+1,??_pollAnalogue+1
 10153  00257C  50F3               	movf	243,w,c
 10154  00257E  27B5               	addwf	??_pollAnalogue& (0+255),f,b
 10155  002580  50F4               	movf	244,w,c
 10156  002582  23B6               	addwfc	(??_pollAnalogue+1)& (0+255),f,b
 10157  002584  0E13               	movlw	19
 10158  002586  25B5               	addwf	??_pollAnalogue& (0+255),w,b
 10159  002588  6ED9               	movwf	fsr2l,c
 10160  00258A  0E00               	movlw	0
 10161  00258C  21B6               	addwfc	(??_pollAnalogue+1)& (0+255),w,b
 10162  00258E  6EDA               	movwf	fsr2h,c
 10163  002590  50DF               	movf	indf2,w,c
 10164  002592  6FB7               	movwf	(??_pollAnalogue+2)& (0+255),b
 10165  002594  51B7               	movf	(??_pollAnalogue+2)& (0+255),w,b
 10166  002596  5FBE               	subwf	pollAnalogue@lthreshold& (0+255),f,b
 10167  002598  0E00               	movlw	0
 10168  00259A  5BBF               	subwfb	(pollAnalogue@lthreshold+1)& (0+255),f,b
 10169                           
 10170                           ; BSR set to: 0
 10171                           ;analogue.c: 106: hthreshold += NV->io[portInProgress].nv_io.nv_magnet.magnet_threshold;
 10172  00259C  51E8               	movf	_portInProgress& (0+255),w,b
 10173  00259E  0D07               	mullw	7
 10174  0025A0  C0EC  F0B5         	movff	_NV,??_pollAnalogue
 10175  0025A4  C0ED  F0B6         	movff	_NV+1,??_pollAnalogue+1
 10176  0025A8  50F3               	movf	243,w,c
 10177  0025AA  27B5               	addwf	??_pollAnalogue& (0+255),f,b
 10178  0025AC  50F4               	movf	244,w,c
 10179  0025AE  23B6               	addwfc	(??_pollAnalogue+1)& (0+255),f,b
 10180  0025B0  0E13               	movlw	19
 10181  0025B2  25B5               	addwf	??_pollAnalogue& (0+255),w,b
 10182  0025B4  6ED9               	movwf	fsr2l,c
 10183  0025B6  0E00               	movlw	0
 10184  0025B8  21B6               	addwfc	(??_pollAnalogue+1)& (0+255),w,b
 10185  0025BA  6EDA               	movwf	fsr2h,c
 10186  0025BC  50DF               	movf	indf2,w,c
 10187  0025BE  6FB7               	movwf	(??_pollAnalogue+2)& (0+255),b
 10188  0025C0  51B7               	movf	(??_pollAnalogue+2)& (0+255),w,b
 10189  0025C2  27BC               	addwf	pollAnalogue@hthreshold& (0+255),f,b
 10190  0025C4  0E00               	movlw	0
 10191  0025C6  23BD               	addwfc	(pollAnalogue@hthreshold+1)& (0+255),f,b
 10192                           
 10193                           ; BSR set to: 0
 10194                           ;analogue.c: 107: lhysteresis = lthreshold + NV->io[portInProgress].nv_io.nv_magnet.magn
      +                          et_hysteresis;
 10195  0025C8  51E8               	movf	_portInProgress& (0+255),w,b
 10196  0025CA  0D07               	mullw	7
 10197  0025CC  C0EC  F0B5         	movff	_NV,??_pollAnalogue
 10198  0025D0  C0ED  F0B6         	movff	_NV+1,??_pollAnalogue+1
 10199  0025D4  50F3               	movf	243,w,c
 10200  0025D6  27B5               	addwf	??_pollAnalogue& (0+255),f,b
 10201  0025D8  50F4               	movf	244,w,c
 10202  0025DA  23B6               	addwfc	(??_pollAnalogue+1)& (0+255),f,b
 10203  0025DC  0E14               	movlw	20
 10204  0025DE  25B5               	addwf	??_pollAnalogue& (0+255),w,b
 10205  0025E0  6ED9               	movwf	fsr2l,c
 10206  0025E2  0E00               	movlw	0
 10207  0025E4  21B6               	addwfc	(??_pollAnalogue+1)& (0+255),w,b
 10208  0025E6  6EDA               	movwf	fsr2h,c
 10209  0025E8  50DF               	movf	indf2,w,c
 10210  0025EA  6FB7               	movwf	(??_pollAnalogue+2)& (0+255),b
 10211  0025EC  51B7               	movf	(??_pollAnalogue+2)& (0+255),w,b
 10212  0025EE  25BE               	addwf	pollAnalogue@lthreshold& (0+255),w,b
 10213  0025F0  6FBA               	movwf	pollAnalogue@lhysteresis& (0+255),b
 10214  0025F2  0E00               	movlw	0
 10215  0025F4  21BF               	addwfc	(pollAnalogue@lthreshold+1)& (0+255),w,b
 10216  0025F6  6FBB               	movwf	(pollAnalogue@lhysteresis+1)& (0+255),b
 10217                           
 10218                           ; BSR set to: 0
 10219                           ;analogue.c: 108: hhysteresis = hthreshold - NV->io[portInProgress].nv_io.nv_magnet.magn
      +                          et_hysteresis;
 10220  0025F8  51E8               	movf	_portInProgress& (0+255),w,b
 10221  0025FA  0D07               	mullw	7
 10222  0025FC  C0EC  F0B5         	movff	_NV,??_pollAnalogue
 10223  002600  C0ED  F0B6         	movff	_NV+1,??_pollAnalogue+1
 10224  002604  50F3               	movf	243,w,c
 10225  002606  27B5               	addwf	??_pollAnalogue& (0+255),f,b
 10226  002608  50F4               	movf	244,w,c
 10227  00260A  23B6               	addwfc	(??_pollAnalogue+1)& (0+255),f,b
 10228  00260C  0E14               	movlw	20
 10229  00260E  25B5               	addwf	??_pollAnalogue& (0+255),w,b
 10230  002610  6ED9               	movwf	fsr2l,c
 10231  002612  0E00               	movlw	0
 10232  002614  21B6               	addwfc	(??_pollAnalogue+1)& (0+255),w,b
 10233  002616  6EDA               	movwf	fsr2h,c
 10234  002618  50DF               	movf	indf2,w,c
 10235  00261A  6FB7               	movwf	(??_pollAnalogue+2)& (0+255),b
 10236  00261C  51B7               	movf	(??_pollAnalogue+2)& (0+255),w,b
 10237  00261E  5DBC               	subwf	pollAnalogue@hthreshold& (0+255),w,b
 10238  002620  6FB8               	movwf	pollAnalogue@hhysteresis& (0+255),b
 10239  002622  51BD               	movf	(pollAnalogue@hthreshold+1)& (0+255),w,b
 10240  002624  A0D8               	btfss	status,0,c
 10241  002626  05BD               	decf	(pollAnalogue@hthreshold+1)& (0+255),w,b
 10242  002628  6FB9               	movwf	(pollAnalogue@hhysteresis+1)& (0+255),b
 10243                           
 10244                           ; BSR set to: 0
 10245                           ;analogue.c: 110: if ((analogueState[portInProgress].eventState != 2U) && ((short)adc >=
      +                           hthreshold)) {
 10246  00262A  0E90               	movlw	low _analogueState
 10247  00262C  25E8               	addwf	_portInProgress& (0+255),w,b
 10248  00262E  6ED9               	movwf	fsr2l,c
 10249  002630  6ADA               	clrf	fsr2h,c
 10250  002632  0E01               	movlw	high _analogueState
 10251  002634  22DA               	addwfc	fsr2h,f,c
 10252  002636  50DF               	movf	223,w,c
 10253  002638  0B03               	andlw	3
 10254  00263A  0A02               	xorlw	2
 10255  00263C  B4D8               	btfsc	status,2,c
 10256  00263E  D03C               	goto	l20993
 10257                           
 10258                           ; BSR set to: 0
 10259  002640  51BC               	movf	pollAnalogue@hthreshold& (0+255),w,b
 10260  002642  5DC0               	subwf	pollAnalogue@adc& (0+255),w,b
 10261  002644  51C1               	movf	(pollAnalogue@adc+1)& (0+255),w,b
 10262  002646  0A80               	xorlw	128
 10263  002648  6FB5               	movwf	??_pollAnalogue& (0+255),b
 10264  00264A  51BD               	movf	(pollAnalogue@hthreshold+1)& (0+255),w,b
 10265  00264C  0A80               	xorlw	128
 10266  00264E  59B5               	subwfb	??_pollAnalogue& (0+255),w,b
 10267  002650  A0D8               	btfss	status,0,c
 10268  002652  D032               	goto	l20993
 10269                           
 10270                           ; BSR set to: 0
 10271                           ;analogue.c: 112: if (analogueState[portInProgress].portState == 1U) {
 10272  002654  0E90               	movlw	low _analogueState
 10273  002656  25E8               	addwf	_portInProgress& (0+255),w,b
 10274  002658  6ED9               	movwf	fsr2l,c
 10275  00265A  6ADA               	clrf	fsr2h,c
 10276  00265C  0E01               	movlw	high _analogueState
 10277  00265E  22DA               	addwfc	fsr2h,f,c
 10278  002660  0101               	movlb	1	; () banked
 10279  002662  A4DF               	btfss	indf2,2,c
 10280  002664  D01D               	goto	l20991
 10281                           
 10282                           ; BSR set to: 1
 10283                           ;analogue.c: 113: sendProducedEvent(((8U + 4U*(portInProgress))+1U), (BOOL)(!(NV->io[por
      +                          tInProgress].flags & 0x40U)));
 10284  002666  0100               	movlb	0	; () banked
 10285  002668  51E8               	movf	_portInProgress& (0+255),w,b
 10286  00266A  0D07               	mullw	7
 10287  00266C  C0EC  F0B5         	movff	_NV,??_pollAnalogue
 10288  002670  C0ED  F0B6         	movff	_NV+1,??_pollAnalogue+1
 10289  002674  50F3               	movf	243,w,c
 10290  002676  27B5               	addwf	??_pollAnalogue& (0+255),f,b
 10291  002678  50F4               	movf	244,w,c
 10292  00267A  23B6               	addwfc	(??_pollAnalogue+1)& (0+255),f,b
 10293  00267C  0E11               	movlw	17
 10294  00267E  25B5               	addwf	??_pollAnalogue& (0+255),w,b
 10295  002680  6ED9               	movwf	fsr2l,c
 10296  002682  0E00               	movlw	0
 10297  002684  21B6               	addwfc	(??_pollAnalogue+1)& (0+255),w,b
 10298  002686  6EDA               	movwf	fsr2h,c
 10299  002688  BCDF               	btfsc	indf2,6,c
 10300  00268A  D002               	goto	u26630
 10301  00268C  0E01               	movlw	1
 10302  00268E  D001               	goto	u26640
 10303  002690                     u26630:
 10304  002690  0E00               	movlw	0
 10305  002692                     u26640:
 10306  002692  6FAE               	movwf	sendProducedEvent@on& (0+255),b
 10307  002694  51E8               	movf	_portInProgress& (0+255),w,b
 10308  002696  0D04               	mullw	4
 10309  002698  50F3               	movf	243,w,c
 10310  00269A  0F09               	addlw	9
 10311  00269C  EC54  F03C         	call	_sendProducedEvent
 10312  0026A0                     l20991:
 10313                           
 10314                           ;analogue.c: 114: };analogue.c: 115: analogueState[portInProgress].eventState = 2U;
 10315  0026A0  0E90               	movlw	low _analogueState
 10316  0026A2  0100               	movlb	0	; () banked
 10317  0026A4  25E8               	addwf	_portInProgress& (0+255),w,b
 10318  0026A6  6ED9               	movwf	fsr2l,c
 10319  0026A8  6ADA               	clrf	fsr2h,c
 10320  0026AA  0E01               	movlw	high _analogueState
 10321  0026AC  22DA               	addwfc	fsr2h,f,c
 10322  0026AE  50DF               	movf	223,w,c
 10323  0026B0  0BFC               	andlw	-4
 10324  0026B2  0902               	iorlw	2
 10325  0026B4  6EDF               	movwf	223,c
 10326                           
 10327                           ;analogue.c: 116: } else if ((analogueState[portInProgress].eventState == 2U) && ((short
      +                          )adc <= hhysteresis)) {
 10328  0026B6  D091               	goto	l21011
 10329  0026B8                     l20993:
 10330                           
 10331                           ; BSR set to: 0
 10332  0026B8  0E90               	movlw	low _analogueState
 10333  0026BA  25E8               	addwf	_portInProgress& (0+255),w,b
 10334  0026BC  6ED9               	movwf	fsr2l,c
 10335  0026BE  6ADA               	clrf	fsr2h,c
 10336  0026C0  0E01               	movlw	high _analogueState
 10337  0026C2  22DA               	addwfc	fsr2h,f,c
 10338  0026C4  50DF               	movf	223,w,c
 10339  0026C6  0B03               	andlw	3
 10340  0026C8  0A02               	xorlw	2
 10341  0026CA  A4D8               	btfss	status,2,c
 10342  0026CC  D086               	goto	l21011
 10343                           
 10344                           ; BSR set to: 0
 10345  0026CE  51C0               	movf	pollAnalogue@adc& (0+255),w,b
 10346  0026D0  5DB8               	subwf	pollAnalogue@hhysteresis& (0+255),w,b
 10347  0026D2  51B9               	movf	(pollAnalogue@hhysteresis+1)& (0+255),w,b
 10348  0026D4  0A80               	xorlw	128
 10349  0026D6  6FB5               	movwf	??_pollAnalogue& (0+255),b
 10350  0026D8  51C1               	movf	(pollAnalogue@adc+1)& (0+255),w,b
 10351  0026DA  0A80               	xorlw	128
 10352  0026DC  59B5               	subwfb	??_pollAnalogue& (0+255),w,b
 10353  0026DE  A0D8               	btfss	status,0,c
 10354  0026E0  D07C               	goto	l21011
 10355                           
 10356                           ; BSR set to: 0
 10357                           ;analogue.c: 118: if (analogueState[portInProgress].portState == 1U) {
 10358  0026E2  0E90               	movlw	low _analogueState
 10359  0026E4  25E8               	addwf	_portInProgress& (0+255),w,b
 10360  0026E6  6ED9               	movwf	fsr2l,c
 10361  0026E8  6ADA               	clrf	fsr2h,c
 10362  0026EA  0E01               	movlw	high _analogueState
 10363  0026EC  22DA               	addwfc	fsr2h,f,c
 10364  0026EE  0101               	movlb	1	; () banked
 10365  0026F0  A4DF               	btfss	indf2,2,c
 10366  0026F2  D02C               	goto	l21003
 10367                           
 10368                           ; BSR set to: 1
 10369                           ;analogue.c: 119: if (!(NV->io[portInProgress].flags & 0x08U)) {
 10370  0026F4  0100               	movlb	0	; () banked
 10371  0026F6  51E8               	movf	_portInProgress& (0+255),w,b
 10372  0026F8  0D07               	mullw	7
 10373  0026FA  C0EC  F0B5         	movff	_NV,??_pollAnalogue
 10374  0026FE  C0ED  F0B6         	movff	_NV+1,??_pollAnalogue+1
 10375  002702  50F3               	movf	243,w,c
 10376  002704  27B5               	addwf	??_pollAnalogue& (0+255),f,b
 10377  002706  50F4               	movf	244,w,c
 10378  002708  23B6               	addwfc	(??_pollAnalogue+1)& (0+255),f,b
 10379  00270A  0E11               	movlw	17
 10380  00270C  25B5               	addwf	??_pollAnalogue& (0+255),w,b
 10381  00270E  6ED9               	movwf	fsr2l,c
 10382  002710  0E00               	movlw	0
 10383  002712  21B6               	addwfc	(??_pollAnalogue+1)& (0+255),w,b
 10384  002714  6EDA               	movwf	fsr2h,c
 10385  002716  B6DF               	btfsc	indf2,3,c
 10386  002718  D019               	goto	l21003
 10387                           
 10388                           ; BSR set to: 0
 10389                           ;analogue.c: 120: sendProducedEvent(((8U + 4U*(portInProgress))+1U), NV->io[portInProgre
      +                          ss].flags & 0x40U);
 10390  00271A  51E8               	movf	_portInProgress& (0+255),w,b
 10391  00271C  0D07               	mullw	7
 10392  00271E  C0EC  F0B5         	movff	_NV,??_pollAnalogue
 10393  002722  C0ED  F0B6         	movff	_NV+1,??_pollAnalogue+1
 10394  002726  50F3               	movf	243,w,c
 10395  002728  27B5               	addwf	??_pollAnalogue& (0+255),f,b
 10396  00272A  50F4               	movf	244,w,c
 10397  00272C  23B6               	addwfc	(??_pollAnalogue+1)& (0+255),f,b
 10398  00272E  0E11               	movlw	17
 10399  002730  25B5               	addwf	??_pollAnalogue& (0+255),w,b
 10400  002732  6ED9               	movwf	fsr2l,c
 10401  002734  0E00               	movlw	0
 10402  002736  21B6               	addwfc	(??_pollAnalogue+1)& (0+255),w,b
 10403  002738  6EDA               	movwf	fsr2h,c
 10404  00273A  50DF               	movf	indf2,w,c
 10405  00273C  0B40               	andlw	64
 10406  00273E  6FAE               	movwf	sendProducedEvent@on& (0+255),b
 10407  002740  51E8               	movf	_portInProgress& (0+255),w,b
 10408  002742  0D04               	mullw	4
 10409  002744  50F3               	movf	243,w,c
 10410  002746  0F09               	addlw	9
 10411  002748  EC54  F03C         	call	_sendProducedEvent
 10412  00274C                     l21003:
 10413                           
 10414                           ;analogue.c: 121: };analogue.c: 122: };analogue.c: 123: analogueState[portInProgress].ev
      +                          entState = 0U;
 10415  00274C  0E90               	movlw	low _analogueState
 10416  00274E  0100               	movlb	0	; () banked
 10417  002750  25E8               	addwf	_portInProgress& (0+255),w,b
 10418  002752  6ED9               	movwf	fsr2l,c
 10419  002754  6ADA               	clrf	fsr2h,c
 10420  002756  0E01               	movlw	high _analogueState
 10421  002758  22DA               	addwfc	fsr2h,f,c
 10422  00275A  0EFC               	movlw	-4
 10423  00275C  16DF               	andwf	223,f,c
 10424  00275E  D03D               	goto	l21011
 10425  002760                     l21005:
 10426                           
 10427                           ; BSR set to: 0
 10428                           ;analogue.c: 128: adc = adc >> 4;
 10429  002760  C0C0  F0B5         	movff	pollAnalogue@adc,??_pollAnalogue
 10430  002764  C0C1  F0B6         	movff	pollAnalogue@adc+1,??_pollAnalogue+1
 10431  002768  0E04               	movlw	4
 10432  00276A  6FB7               	movwf	(??_pollAnalogue+2)& (0+255),b
 10433  00276C                     u26695:
 10434  00276C  90D8               	bcf	status,0,c
 10435  00276E  33B6               	rrcf	(??_pollAnalogue+1)& (0+255),f,b
 10436  002770  33B5               	rrcf	??_pollAnalogue& (0+255),f,b
 10437  002772  2FB7               	decfsz	(??_pollAnalogue+2)& (0+255),f,b
 10438  002774  D7FB               	goto	u26695
 10439  002776  C0B5  F0C0         	movff	??_pollAnalogue,pollAnalogue@adc
 10440  00277A  C0B6  F0C1         	movff	??_pollAnalogue+1,pollAnalogue@adc+1
 10441                           
 10442                           ; BSR set to: 0
 10443                           ;analogue.c: 129: lthreshold = NV->io[portInProgress].nv_io.nv_analogue_in.analogue_thre
      +                          shold;
 10444  00277E  51E8               	movf	_portInProgress& (0+255),w,b
 10445  002780  0D07               	mullw	7
 10446  002782  C0EC  F0B5         	movff	_NV,??_pollAnalogue
 10447  002786  C0ED  F0B6         	movff	_NV+1,??_pollAnalogue+1
 10448  00278A  50F3               	movf	243,w,c
 10449  00278C  27B5               	addwf	??_pollAnalogue& (0+255),f,b
 10450  00278E  50F4               	movf	244,w,c
 10451  002790  23B6               	addwfc	(??_pollAnalogue+1)& (0+255),f,b
 10452  002792  0E13               	movlw	19
 10453  002794  25B5               	addwf	??_pollAnalogue& (0+255),w,b
 10454  002796  6ED9               	movwf	fsr2l,c
 10455  002798  0E00               	movlw	0
 10456  00279A  21B6               	addwfc	(??_pollAnalogue+1)& (0+255),w,b
 10457  00279C  6EDA               	movwf	fsr2h,c
 10458  00279E  50DF               	movf	indf2,w,c
 10459  0027A0  6FB7               	movwf	(??_pollAnalogue+2)& (0+255),b
 10460  0027A2  51B7               	movf	(??_pollAnalogue+2)& (0+255),w,b
 10461  0027A4  6FBE               	movwf	pollAnalogue@lthreshold& (0+255),b
 10462  0027A6  6BBF               	clrf	(pollAnalogue@lthreshold+1)& (0+255),b
 10463                           
 10464                           ; BSR set to: 0
 10465                           ;analogue.c: 130: lhysteresis = lthreshold - NV->io[portInProgress].nv_io.nv_analogue_in
      +                          .analogue_hysteresis;
 10466  0027A8  51E8               	movf	_portInProgress& (0+255),w,b
 10467  0027AA  0D07               	mullw	7
 10468  0027AC  C0EC  F0B5         	movff	_NV,??_pollAnalogue
 10469  0027B0  C0ED  F0B6         	movff	_NV+1,??_pollAnalogue+1
 10470  0027B4  50F3               	movf	243,w,c
 10471  0027B6  27B5               	addwf	??_pollAnalogue& (0+255),f,b
 10472  0027B8  50F4               	movf	244,w,c
 10473  0027BA  23B6               	addwfc	(??_pollAnalogue+1)& (0+255),f,b
 10474  0027BC  0E14               	movlw	20
 10475  0027BE  25B5               	addwf	??_pollAnalogue& (0+255),w,b
 10476  0027C0  6ED9               	movwf	fsr2l,c
 10477  0027C2  0E00               	movlw	0
 10478  0027C4  21B6               	addwfc	(??_pollAnalogue+1)& (0+255),w,b
 10479  0027C6  6EDA               	movwf	fsr2h,c
 10480  0027C8  50DF               	movf	indf2,w,c
 10481  0027CA  6FB7               	movwf	(??_pollAnalogue+2)& (0+255),b
 10482  0027CC  51B7               	movf	(??_pollAnalogue+2)& (0+255),w,b
 10483  0027CE  5DBE               	subwf	pollAnalogue@lthreshold& (0+255),w,b
 10484  0027D0  6FBA               	movwf	pollAnalogue@lhysteresis& (0+255),b
 10485  0027D2  51BF               	movf	(pollAnalogue@lthreshold+1)& (0+255),w,b
 10486  0027D4  A0D8               	btfss	status,0,c
 10487  0027D6  05BF               	decf	(pollAnalogue@lthreshold+1)& (0+255),w,b
 10488  0027D8  6FBB               	movwf	(pollAnalogue@lhysteresis+1)& (0+255),b
 10489  0027DA                     l21011:
 10490                           
 10491                           ; BSR set to: 0
 10492                           ;analogue.c: 131: };analogue.c: 133: if ((analogueState[portInProgress].eventState != 1U
      +                          ) && ((short)adc <= lthreshold)) {
 10493  0027DA  0E90               	movlw	low _analogueState
 10494  0027DC  25E8               	addwf	_portInProgress& (0+255),w,b
 10495  0027DE  6ED9               	movwf	fsr2l,c
 10496  0027E0  6ADA               	clrf	fsr2h,c
 10497  0027E2  0E01               	movlw	high _analogueState
 10498  0027E4  22DA               	addwfc	fsr2h,f,c
 10499  0027E6  50DF               	movf	223,w,c
 10500  0027E8  0B03               	andlw	3
 10501  0027EA  06E8               	decf	wreg,f,c
 10502  0027EC  B4D8               	btfsc	status,2,c
 10503  0027EE  D03C               	goto	l21021
 10504                           
 10505                           ; BSR set to: 0
 10506  0027F0  51C0               	movf	pollAnalogue@adc& (0+255),w,b
 10507  0027F2  5DBE               	subwf	pollAnalogue@lthreshold& (0+255),w,b
 10508  0027F4  51BF               	movf	(pollAnalogue@lthreshold+1)& (0+255),w,b
 10509  0027F6  0A80               	xorlw	128
 10510  0027F8  6FB5               	movwf	??_pollAnalogue& (0+255),b
 10511  0027FA  51C1               	movf	(pollAnalogue@adc+1)& (0+255),w,b
 10512  0027FC  0A80               	xorlw	128
 10513  0027FE  59B5               	subwfb	??_pollAnalogue& (0+255),w,b
 10514  002800  A0D8               	btfss	status,0,c
 10515  002802  D032               	goto	l21021
 10516                           
 10517                           ; BSR set to: 0
 10518                           ;analogue.c: 135: if (analogueState[portInProgress].portState == 1U) {
 10519  002804  0E90               	movlw	low _analogueState
 10520  002806  25E8               	addwf	_portInProgress& (0+255),w,b
 10521  002808  6ED9               	movwf	fsr2l,c
 10522  00280A  6ADA               	clrf	fsr2h,c
 10523  00280C  0E01               	movlw	high _analogueState
 10524  00280E  22DA               	addwfc	fsr2h,f,c
 10525  002810  0101               	movlb	1	; () banked
 10526  002812  A4DF               	btfss	indf2,2,c
 10527  002814  D01D               	goto	l21019
 10528                           
 10529                           ; BSR set to: 1
 10530                           ;analogue.c: 136: sendProducedEvent(((8U + 4U*(portInProgress))+0U), (unsigned char)(!(N
      +                          V->io[portInProgress].flags & 0x40U)));
 10531  002816  0100               	movlb	0	; () banked
 10532  002818  51E8               	movf	_portInProgress& (0+255),w,b
 10533  00281A  0D07               	mullw	7
 10534  00281C  C0EC  F0B5         	movff	_NV,??_pollAnalogue
 10535  002820  C0ED  F0B6         	movff	_NV+1,??_pollAnalogue+1
 10536  002824  50F3               	movf	243,w,c
 10537  002826  27B5               	addwf	??_pollAnalogue& (0+255),f,b
 10538  002828  50F4               	movf	244,w,c
 10539  00282A  23B6               	addwfc	(??_pollAnalogue+1)& (0+255),f,b
 10540  00282C  0E11               	movlw	17
 10541  00282E  25B5               	addwf	??_pollAnalogue& (0+255),w,b
 10542  002830  6ED9               	movwf	fsr2l,c
 10543  002832  0E00               	movlw	0
 10544  002834  21B6               	addwfc	(??_pollAnalogue+1)& (0+255),w,b
 10545  002836  6EDA               	movwf	fsr2h,c
 10546  002838  BCDF               	btfsc	indf2,6,c
 10547  00283A  D002               	goto	u26730
 10548  00283C  0E01               	movlw	1
 10549  00283E  D001               	goto	u26740
 10550  002840                     u26730:
 10551  002840  0E00               	movlw	0
 10552  002842                     u26740:
 10553  002842  6FAE               	movwf	sendProducedEvent@on& (0+255),b
 10554  002844  51E8               	movf	_portInProgress& (0+255),w,b
 10555  002846  0D04               	mullw	4
 10556  002848  50F3               	movf	243,w,c
 10557  00284A  0F08               	addlw	8
 10558  00284C  EC54  F03C         	call	_sendProducedEvent
 10559  002850                     l21019:
 10560                           
 10561                           ;analogue.c: 137: };analogue.c: 138: analogueState[portInProgress].eventState = 1U;
 10562  002850  0E90               	movlw	low _analogueState
 10563  002852  0100               	movlb	0	; () banked
 10564  002854  25E8               	addwf	_portInProgress& (0+255),w,b
 10565  002856  6ED9               	movwf	fsr2l,c
 10566  002858  6ADA               	clrf	fsr2h,c
 10567  00285A  0E01               	movlw	high _analogueState
 10568  00285C  22DA               	addwfc	fsr2h,f,c
 10569  00285E  50DF               	movf	223,w,c
 10570  002860  0BFC               	andlw	-4
 10571  002862  0901               	iorlw	1
 10572  002864  6EDF               	movwf	223,c
 10573                           
 10574                           ;analogue.c: 139: } else if ((analogueState[portInProgress].eventState == 1U) && ((short
      +                          )adc >= lhysteresis)) {
 10575  002866  D0AA               	goto	l21051
 10576  002868                     l21021:
 10577                           
 10578                           ; BSR set to: 0
 10579  002868  0E90               	movlw	low _analogueState
 10580  00286A  25E8               	addwf	_portInProgress& (0+255),w,b
 10581  00286C  6ED9               	movwf	fsr2l,c
 10582  00286E  6ADA               	clrf	fsr2h,c
 10583  002870  0E01               	movlw	high _analogueState
 10584  002872  22DA               	addwfc	fsr2h,f,c
 10585  002874  50DF               	movf	223,w,c
 10586  002876  0B03               	andlw	3
 10587  002878  06E8               	decf	wreg,f,c
 10588  00287A  A4D8               	btfss	status,2,c
 10589  00287C  D09F               	goto	l21051
 10590                           
 10591                           ; BSR set to: 0
 10592  00287E  51BA               	movf	pollAnalogue@lhysteresis& (0+255),w,b
 10593  002880  5DC0               	subwf	pollAnalogue@adc& (0+255),w,b
 10594  002882  51C1               	movf	(pollAnalogue@adc+1)& (0+255),w,b
 10595  002884  0A80               	xorlw	128
 10596  002886  6FB5               	movwf	??_pollAnalogue& (0+255),b
 10597  002888  51BB               	movf	(pollAnalogue@lhysteresis+1)& (0+255),w,b
 10598  00288A  0A80               	xorlw	128
 10599  00288C  59B5               	subwfb	??_pollAnalogue& (0+255),w,b
 10600  00288E  A0D8               	btfss	status,0,c
 10601  002890  D095               	goto	l21051
 10602                           
 10603                           ; BSR set to: 0
 10604                           ;analogue.c: 141: if (analogueState[portInProgress].portState == 1U) {
 10605  002892  0E90               	movlw	low _analogueState
 10606  002894  25E8               	addwf	_portInProgress& (0+255),w,b
 10607  002896  6ED9               	movwf	fsr2l,c
 10608  002898  6ADA               	clrf	fsr2h,c
 10609  00289A  0E01               	movlw	high _analogueState
 10610  00289C  22DA               	addwfc	fsr2h,f,c
 10611  00289E  0101               	movlb	1	; () banked
 10612  0028A0  A4DF               	btfss	indf2,2,c
 10613  0028A2  D02C               	goto	l21031
 10614                           
 10615                           ; BSR set to: 1
 10616                           ;analogue.c: 142: if (!(NV->io[portInProgress].flags & 0x08U)) {
 10617  0028A4  0100               	movlb	0	; () banked
 10618  0028A6  51E8               	movf	_portInProgress& (0+255),w,b
 10619  0028A8  0D07               	mullw	7
 10620  0028AA  C0EC  F0B5         	movff	_NV,??_pollAnalogue
 10621  0028AE  C0ED  F0B6         	movff	_NV+1,??_pollAnalogue+1
 10622  0028B2  50F3               	movf	243,w,c
 10623  0028B4  27B5               	addwf	??_pollAnalogue& (0+255),f,b
 10624  0028B6  50F4               	movf	244,w,c
 10625  0028B8  23B6               	addwfc	(??_pollAnalogue+1)& (0+255),f,b
 10626  0028BA  0E11               	movlw	17
 10627  0028BC  25B5               	addwf	??_pollAnalogue& (0+255),w,b
 10628  0028BE  6ED9               	movwf	fsr2l,c
 10629  0028C0  0E00               	movlw	0
 10630  0028C2  21B6               	addwfc	(??_pollAnalogue+1)& (0+255),w,b
 10631  0028C4  6EDA               	movwf	fsr2h,c
 10632  0028C6  B6DF               	btfsc	indf2,3,c
 10633  0028C8  D019               	goto	l21031
 10634                           
 10635                           ; BSR set to: 0
 10636                           ;analogue.c: 143: sendProducedEvent(((8U + 4U*(portInProgress))+0U), NV->io[portInProgre
      +                          ss].flags & 0x40U);
 10637  0028CA  51E8               	movf	_portInProgress& (0+255),w,b
 10638  0028CC  0D07               	mullw	7
 10639  0028CE  C0EC  F0B5         	movff	_NV,??_pollAnalogue
 10640  0028D2  C0ED  F0B6         	movff	_NV+1,??_pollAnalogue+1
 10641  0028D6  50F3               	movf	243,w,c
 10642  0028D8  27B5               	addwf	??_pollAnalogue& (0+255),f,b
 10643  0028DA  50F4               	movf	244,w,c
 10644  0028DC  23B6               	addwfc	(??_pollAnalogue+1)& (0+255),f,b
 10645  0028DE  0E11               	movlw	17
 10646  0028E0  25B5               	addwf	??_pollAnalogue& (0+255),w,b
 10647  0028E2  6ED9               	movwf	fsr2l,c
 10648  0028E4  0E00               	movlw	0
 10649  0028E6  21B6               	addwfc	(??_pollAnalogue+1)& (0+255),w,b
 10650  0028E8  6EDA               	movwf	fsr2h,c
 10651  0028EA  50DF               	movf	indf2,w,c
 10652  0028EC  0B40               	andlw	64
 10653  0028EE  6FAE               	movwf	sendProducedEvent@on& (0+255),b
 10654  0028F0  51E8               	movf	_portInProgress& (0+255),w,b
 10655  0028F2  0D04               	mullw	4
 10656  0028F4  50F3               	movf	243,w,c
 10657  0028F6  0F08               	addlw	8
 10658  0028F8  EC54  F03C         	call	_sendProducedEvent
 10659  0028FC                     l21031:
 10660                           
 10661                           ;analogue.c: 144: };analogue.c: 145: };analogue.c: 146: analogueState[portInProgress].ev
      +                          entState = 0U;
 10662  0028FC  0E90               	movlw	low _analogueState
 10663  0028FE  0100               	movlb	0	; () banked
 10664  002900  25E8               	addwf	_portInProgress& (0+255),w,b
 10665  002902  6ED9               	movwf	fsr2l,c
 10666  002904  6ADA               	clrf	fsr2h,c
 10667  002906  0E01               	movlw	high _analogueState
 10668  002908  22DA               	addwfc	fsr2h,f,c
 10669  00290A  0EFC               	movlw	-4
 10670  00290C  16DF               	andwf	223,f,c
 10671  00290E  D056               	goto	l21051
 10672  002910                     l21033:
 10673                           
 10674                           ; BSR set to: 0
 10675                           ;analogue.c: 151: cbusMsg[d3] = 0U;
 10676  002910  0E00               	movlw	0
 10677  002912  6E25               	movwf	(_cbusMsg+9)^0,c
 10678                           
 10679                           ; BSR set to: 0
 10680                           ;analogue.c: 152: cbusMsg[d4] = portInProgress + 1U;
 10681  002914  29E8               	incf	_portInProgress& (0+255),w,b
 10682  002916  6E26               	movwf	(_cbusMsg+10)^0,c
 10683                           
 10684                           ; BSR set to: 0
 10685                           ;analogue.c: 153: cbusMsg[d5] = portInProgress + 1U;
 10686  002918  29E8               	incf	_portInProgress& (0+255),w,b
 10687  00291A  6E27               	movwf	(_cbusMsg+11)^0,c
 10688                           
 10689                           ; BSR set to: 0
 10690                           ;analogue.c: 154: cbusMsg[d7] = adc & 0xFFU;
 10691  00291C  C0C0  F029         	movff	pollAnalogue@adc,_cbusMsg+13
 10692                           
 10693                           ; BSR set to: 0
 10694                           ;analogue.c: 155: cbusMsg[d6] = adc >> 8U;
 10695  002920  C0C1  F028         	movff	pollAnalogue@adc+1,_cbusMsg+12
 10696                           
 10697                           ; BSR set to: 0
 10698                           ;analogue.c: 156: cbusSendOpcNN(0xFF, 0xFD, -1U, cbusMsg);
 10699  002924  0EFD               	movlw	253
 10700  002926  6F93               	movwf	cbusSendOpcNN@opc& (0+255),b
 10701  002928  0EFF               	movlw	255
 10702  00292A  6F95               	movwf	(cbusSendOpcNN@nodeID+1)& (0+255),b
 10703  00292C  6994               	setf	cbusSendOpcNN@nodeID& (0+255),b
 10704  00292E  0E1C               	movlw	low _cbusMsg
 10705  002930  6F96               	movwf	cbusSendOpcNN@msg& (0+255),b
 10706  002932  0EFF               	movlw	255
 10707  002934  EC03  F052         	call	_cbusSendOpcNN
 10708                           
 10709                           ; BSR set to: 0
 10710                           ;analogue.c: 157: if (setupState == 2U) {
 10711  002938  0E02               	movlw	2
 10712  00293A  1819               	xorwf	_setupState^0,w,c
 10713  00293C  A4D8               	btfss	status,2,c
 10714  00293E  D03C               	goto	l21049
 10715                           
 10716                           ; BSR set to: 0
 10717                           ;analogue.c: 159: writeFlashByte((BYTE*) (0xFF80U + (16U + 7U*(portInProgress) + 5U)), c
      +                          busMsg[d6]);
 10718  002940  C0E8  F071         	movff	_portInProgress,___wmul@multiplier
 10719  002944  6B72               	clrf	(___wmul@multiplier+1)& (0+255),b
 10720  002946  0E00               	movlw	0
 10721  002948  6F74               	movwf	(___wmul@multiplicand+1)& (0+255),b
 10722  00294A  0E07               	movlw	7
 10723  00294C  6F73               	movwf	___wmul@multiplicand& (0+255),b
 10724  00294E  ECF0  F051         	call	___wmul	;wreg free
 10725  002952  0E95               	movlw	149
 10726  002954  6FB5               	movwf	??_pollAnalogue& (0+255),b
 10727  002956  0EFF               	movlw	255
 10728  002958  6FB6               	movwf	(??_pollAnalogue+1)& (0+255),b
 10729  00295A  5171               	movf	?___wmul& (0+255),w,b
 10730  00295C  27B5               	addwf	??_pollAnalogue& (0+255),f,b
 10731  00295E  5172               	movf	(?___wmul+1)& (0+255),w,b
 10732  002960  23B6               	addwfc	(??_pollAnalogue+1)& (0+255),f,b
 10733  002962  C0B5  F087         	movff	??_pollAnalogue,writeFlashByte@flashAddr
 10734  002966  C0B6  F088         	movff	??_pollAnalogue+1,writeFlashByte@flashAddr+1
 10735  00296A  5187               	movf	writeFlashByte@flashAddr& (0+255),w,b
 10736  00296C  1188               	iorwf	(writeFlashByte@flashAddr+1)& (0+255),w,b
 10737  00296E  A4D8               	btfss	status,2,c
 10738  002970  0E20               	movlw	32
 10739  002972  6F89               	movwf	(writeFlashByte@flashAddr+2)& (0+255),b
 10740  002974  C028  F08A         	movff	_cbusMsg+12,writeFlashByte@flashData
 10741  002978  ECC0  F052         	call	_writeFlashByte	;wreg free
 10742                           
 10743                           ;analogue.c: 160: writeFlashByte((BYTE*) (0xFF80U + (16U + 7U*(portInProgress) + 6U)), c
      +                          busMsg[d7]);
 10744  00297C  C0E8  F071         	movff	_portInProgress,___wmul@multiplier
 10745  002980  6B72               	clrf	(___wmul@multiplier+1)& (0+255),b
 10746  002982  0E00               	movlw	0
 10747  002984  6F74               	movwf	(___wmul@multiplicand+1)& (0+255),b
 10748  002986  0E07               	movlw	7
 10749  002988  6F73               	movwf	___wmul@multiplicand& (0+255),b
 10750  00298A  ECF0  F051         	call	___wmul	;wreg free
 10751  00298E  0E96               	movlw	150
 10752  002990  6FB5               	movwf	??_pollAnalogue& (0+255),b
 10753  002992  0EFF               	movlw	255
 10754  002994  6FB6               	movwf	(??_pollAnalogue+1)& (0+255),b
 10755  002996  5171               	movf	?___wmul& (0+255),w,b
 10756  002998  27B5               	addwf	??_pollAnalogue& (0+255),f,b
 10757  00299A  5172               	movf	(?___wmul+1)& (0+255),w,b
 10758  00299C  23B6               	addwfc	(??_pollAnalogue+1)& (0+255),f,b
 10759  00299E  C0B5  F087         	movff	??_pollAnalogue,writeFlashByte@flashAddr
 10760  0029A2  C0B6  F088         	movff	??_pollAnalogue+1,writeFlashByte@flashAddr+1
 10761  0029A6  5187               	movf	writeFlashByte@flashAddr& (0+255),w,b
 10762  0029A8  1188               	iorwf	(writeFlashByte@flashAddr+1)& (0+255),w,b
 10763  0029AA  A4D8               	btfss	status,2,c
 10764  0029AC  0E20               	movlw	32
 10765  0029AE  6F89               	movwf	(writeFlashByte@flashAddr+2)& (0+255),b
 10766  0029B0  C029  F08A         	movff	_cbusMsg+13,writeFlashByte@flashData
 10767  0029B4  ECC0  F052         	call	_writeFlashByte	;wreg free
 10768  0029B8                     l21049:
 10769                           
 10770                           ; BSR set to: 0
 10771                           ;analogue.c: 161: };analogue.c: 162: setupState = 0U;
 10772  0029B8  0E00               	movlw	0
 10773  0029BA  6E19               	movwf	_setupState^0,c
 10774  0029BC                     l21051:
 10775                           
 10776                           ; BSR set to: 0
 10777                           ;analogue.c: 163: };analogue.c: 164: analogueState[portInProgress].portState = 1U;
 10778  0029BC  0E90               	movlw	low _analogueState
 10779  0029BE  25E8               	addwf	_portInProgress& (0+255),w,b
 10780  0029C0  6ED9               	movwf	fsr2l,c
 10781  0029C2  6ADA               	clrf	fsr2h,c
 10782  0029C4  0E01               	movlw	high _analogueState
 10783  0029C6  22DA               	addwfc	fsr2h,f,c
 10784  0029C8  0101               	movlb	1	; () banked
 10785  0029CA  84DF               	bsf	indf2,2,c
 10786  0029CC                     l21053:
 10787                           
 10788                           ;analogue.c: 165: };analogue.c: 166: };analogue.c: 168: portInProgress++;
 10789  0029CC  0100               	movlb	0	; () banked
 10790  0029CE  2BE8               	incf	_portInProgress& (0+255),f,b
 10791                           
 10792                           ; BSR set to: 0
 10793                           ;analogue.c: 169: if (portInProgress >= 16U) {
 10794  0029D0  0E0F               	movlw	15
 10795  0029D2  65E8               	cpfsgt	_portInProgress& (0+255),b
 10796  0029D4  D002               	goto	l21059
 10797                           
 10798                           ; BSR set to: 0
 10799                           ;analogue.c: 170: portInProgress = 0U;
 10800  0029D6  0E00               	movlw	0
 10801  0029D8  6FE8               	movwf	_portInProgress& (0+255),b
 10802  0029DA                     l21059:
 10803                           
 10804                           ; BSR set to: 0
 10805                           ;analogue.c: 171: };analogue.c: 173: if ((NV->io[portInProgress].type == 5U) || (NV->io[
      +                          portInProgress].type == 6U)) {
 10806  0029DA  51E8               	movf	_portInProgress& (0+255),w,b
 10807  0029DC  0D07               	mullw	7
 10808  0029DE  C0EC  F0B5         	movff	_NV,??_pollAnalogue
 10809  0029E2  C0ED  F0B6         	movff	_NV+1,??_pollAnalogue+1
 10810  0029E6  50F3               	movf	243,w,c
 10811  0029E8  27B5               	addwf	??_pollAnalogue& (0+255),f,b
 10812  0029EA  50F4               	movf	244,w,c
 10813  0029EC  23B6               	addwfc	(??_pollAnalogue+1)& (0+255),f,b
 10814  0029EE  0E10               	movlw	16
 10815  0029F0  25B5               	addwf	??_pollAnalogue& (0+255),w,b
 10816  0029F2  6ED9               	movwf	fsr2l,c
 10817  0029F4  0E00               	movlw	0
 10818  0029F6  21B6               	addwfc	(??_pollAnalogue+1)& (0+255),w,b
 10819  0029F8  6EDA               	movwf	fsr2h,c
 10820  0029FA  0E05               	movlw	5
 10821  0029FC  18DE               	xorwf	postinc2,w,c
 10822  0029FE  B4D8               	btfsc	status,2,c
 10823  002A00  D014               	goto	u26820
 10824                           
 10825                           ; BSR set to: 0
 10826  002A02  51E8               	movf	_portInProgress& (0+255),w,b
 10827  002A04  0D07               	mullw	7
 10828  002A06  C0EC  F0B5         	movff	_NV,??_pollAnalogue
 10829  002A0A  C0ED  F0B6         	movff	_NV+1,??_pollAnalogue+1
 10830  002A0E  50F3               	movf	243,w,c
 10831  002A10  27B5               	addwf	??_pollAnalogue& (0+255),f,b
 10832  002A12  50F4               	movf	244,w,c
 10833  002A14  23B6               	addwfc	(??_pollAnalogue+1)& (0+255),f,b
 10834  002A16  0E10               	movlw	16
 10835  002A18  25B5               	addwf	??_pollAnalogue& (0+255),w,b
 10836  002A1A  6ED9               	movwf	fsr2l,c
 10837  002A1C  0E00               	movlw	0
 10838  002A1E  21B6               	addwfc	(??_pollAnalogue+1)& (0+255),w,b
 10839  002A20  6EDA               	movwf	fsr2h,c
 10840  002A22  0E06               	movlw	6
 10841  002A24  18DE               	xorwf	postinc2,w,c
 10842  002A26  A4D8               	btfss	status,2,c
 10843  002A28  0012               	return	
 10844  002A2A                     u26820:
 10845                           
 10846                           ; BSR set to: 0
 10847                           ;analogue.c: 175: ADCON0bits.CHS = configs[portInProgress].an;
 10848  002A2A  51E8               	movf	_portInProgress& (0+255),w,b
 10849  002A2C  0D04               	mullw	4
 10850  002A2E  CFF3 F0B5          	movff	prodl,??_pollAnalogue
 10851  002A32  0E03               	movlw	3
 10852  002A34  27B5               	addwf	??_pollAnalogue& (0+255),f,b
 10853  002A36  51B5               	movf	??_pollAnalogue& (0+255),w,b
 10854  002A38  0F01               	addlw	low _configs
 10855  002A3A  6FB6               	movwf	(??_pollAnalogue+1)& (0+255),b
 10856  002A3C  C0B6  FFF6         	movff	??_pollAnalogue+1,tblptrl
 10857  002A40                     	if	1	;There is more than 1 active tblptr byte
 10858  002A40  0E0F               	movlw	high __smallconst
 10859  002A42  6EF7               	movwf	tblptrh,c
 10860  002A44                     	endif
 10861  002A44                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 10862  002A44  6AF8               	clrf	tblptru,c
 10863  002A46                     	endif
 10864  002A46                     	if	0	;tblptru may be non-zero
 10865  002A46                     	endif
 10866  002A46  0008               	tblrd		*
 10867  002A48  CFF5 F0B7          	movff	tablat,??_pollAnalogue+2
 10868  002A4C  47B7               	rlncf	(??_pollAnalogue+2)& (0+255),f,b
 10869  002A4E  47B7               	rlncf	(??_pollAnalogue+2)& (0+255),f,b
 10870  002A50  50C2               	movf	194,w,c	;volatile
 10871  002A52  19B7               	xorwf	(??_pollAnalogue+2)& (0+255),w,b
 10872  002A54  0B83               	andlw	-125
 10873  002A56  19B7               	xorwf	(??_pollAnalogue+2)& (0+255),w,b
 10874  002A58  6EC2               	movwf	194,c	;volatile
 10875                           
 10876                           ; BSR set to: 0
 10877                           ;analogue.c: 176: ADCON0bits.GO = 1U;
 10878  002A5A  82C2               	bsf	194,1,c	;volatile
 10879                           
 10880                           ; BSR set to: 0
 10881                           ;analogue.c: 177: haveRequestedAdc = 1U;
 10882  002A5C  0E01               	movlw	1
 10883  002A5E  6E18               	movwf	_haveRequestedAdc^0,c
 10884                           
 10885                           ; BSR set to: 0
 10886  002A60  0012               	return		;funcret
 10887  002A62                     __end_of_pollAnalogue:
 10888                           	callstack 0
 10889                           
 10890 ;; *************** function _inputScan *****************
 10891 ;; Defined at:
 10892 ;;		line 100 in file "../../github/CANMIOfirmware/inputs.c"
 10893 ;; Parameters:    Size  Location     Type
 10894 ;;		None
 10895 ;; Auto vars:     Size  Location     Type
 10896 ;;  change          1   89[BANK0 ] unsigned char 
 10897 ;;  input           1   90[BANK0 ] unsigned char 
 10898 ;; Return value:  Size  Location     Type
 10899 ;;                  1    wreg      void 
 10900 ;; Registers used:
 10901 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10902 ;; Tracked objects:
 10903 ;;		On entry : 3F/2
 10904 ;;		On exit  : 3F/0
 10905 ;;		Unchanged: 0/0
 10906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10907 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10908 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10909 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10910 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10911 ;;Total ram usage:        6 bytes
 10912 ;; Hardware stack levels used: 1
 10913 ;; Hardware stack levels required when called: 16
 10914 ;; This function calls:
 10915 ;;		_ee_write
 10916 ;;		_readInput
 10917 ;;		_sendProducedEvent
 10918 ;; This function is called by:
 10919 ;;		_main
 10920 ;; This function uses a non-reentrant model
 10921 ;;
 10922                           
 10923                           	psect	text29
 10924  00449A                     __ptext29:
 10925                           	callstack 0
 10926  00449A                     _inputScan:
 10927                           	callstack 14
 10928                           
 10929                           ; BSR set to: 2
 10930                           ;inputs.c: 101: for (io=0; io< 16U; io++) {
 10931                           
 10932                           ; BSR set to: 0
 10933                           ;incstack = 0
 10934  00449A  0E00               	movlw	0
 10935  00449C  0100               	movlb	0	; () banked
 10936  00449E  6FE7               	movwf	_io& (0+255),b
 10937  0044A0                     l21121:
 10938                           
 10939                           ; BSR set to: 0
 10940  0044A0  0E0F               	movlw	15
 10941  0044A2  65E7               	cpfsgt	_io& (0+255),b
 10942  0044A4  D001               	goto	l21125
 10943  0044A6  0012               	return	
 10944  0044A8                     l21125:
 10945                           
 10946                           ; BSR set to: 0
 10947                           ;inputs.c: 102: if (NV->io[io].type == 0U) {
 10948  0044A8  51E7               	movf	_io& (0+255),w,b
 10949  0044AA  0D07               	mullw	7
 10950  0044AC  C0EC  F0B5         	movff	_NV,??_inputScan
 10951  0044B0  C0ED  F0B6         	movff	_NV+1,??_inputScan+1
 10952  0044B4  50F3               	movf	243,w,c
 10953  0044B6  27B5               	addwf	??_inputScan& (0+255),f,b
 10954  0044B8  50F4               	movf	244,w,c
 10955  0044BA  23B6               	addwfc	(??_inputScan+1)& (0+255),f,b
 10956  0044BC  0E10               	movlw	16
 10957  0044BE  25B5               	addwf	??_inputScan& (0+255),w,b
 10958  0044C0  6ED9               	movwf	fsr2l,c
 10959  0044C2  0E00               	movlw	0
 10960  0044C4  21B6               	addwfc	(??_inputScan+1)& (0+255),w,b
 10961  0044C6  6EDA               	movwf	fsr2h,c
 10962  0044C8  50DF               	movf	indf2,w,c
 10963  0044CA  A4D8               	btfss	status,2,c
 10964  0044CC  D16F               	goto	l21187
 10965                           
 10966                           ; BSR set to: 0
 10967                           ;inputs.c: 103: BYTE input = readInput(io);
 10968  0044CE  51E7               	movf	_io& (0+255),w,b
 10969  0044D0  EC12  F037         	call	_readInput
 10970  0044D4  6FBA               	movwf	inputScan@input& (0+255),b
 10971                           
 10972                           ; BSR set to: 0
 10973                           ;inputs.c: 104: if (input != inputState[io]) {
 10974  0044D6  0E94               	movlw	low _inputState
 10975  0044D8  25E7               	addwf	_io& (0+255),w,b
 10976  0044DA  6ED9               	movwf	fsr2l,c
 10977  0044DC  6ADA               	clrf	fsr2h,c
 10978  0044DE  0E02               	movlw	high _inputState
 10979  0044E0  22DA               	addwfc	fsr2h,f,c
 10980  0044E2  51BA               	movf	inputScan@input& (0+255),w,b
 10981  0044E4  18DE               	xorwf	postinc2,w,c
 10982  0044E6  B4D8               	btfsc	status,2,c
 10983  0044E8  D159               	goto	l21185
 10984                           
 10985                           ; BSR set to: 0
 10986                           ;inputs.c: 105: BOOL change = 0;
 10987  0044EA  0E00               	movlw	0
 10988  0044EC  6FB9               	movwf	inputScan@change& (0+255),b
 10989                           
 10990                           ; BSR set to: 0
 10991                           ;inputs.c: 107: if (inputState[io] && (delayCount[io] == NV->io[io].nv_io.nv_input.input
      +                          _on_delay)) {
 10992  0044EE  0E94               	movlw	low _inputState
 10993  0044F0  25E7               	addwf	_io& (0+255),w,b
 10994  0044F2  6ED9               	movwf	fsr2l,c
 10995  0044F4  6ADA               	clrf	fsr2h,c
 10996  0044F6  0E02               	movlw	high _inputState
 10997  0044F8  22DA               	addwfc	fsr2h,f,c
 10998  0044FA  50DF               	movf	indf2,w,c
 10999  0044FC  B4D8               	btfsc	status,2,c
 11000  0044FE  D01C               	goto	l21139
 11001                           
 11002                           ; BSR set to: 0
 11003  004500  51E7               	movf	_io& (0+255),w,b
 11004  004502  0D07               	mullw	7
 11005  004504  C0EC  F0B5         	movff	_NV,??_inputScan
 11006  004508  C0ED  F0B6         	movff	_NV+1,??_inputScan+1
 11007  00450C  50F3               	movf	243,w,c
 11008  00450E  27B5               	addwf	??_inputScan& (0+255),f,b
 11009  004510  50F4               	movf	244,w,c
 11010  004512  23B6               	addwfc	(??_inputScan+1)& (0+255),f,b
 11011  004514  0E12               	movlw	18
 11012  004516  25B5               	addwf	??_inputScan& (0+255),w,b
 11013  004518  6ED9               	movwf	fsr2l,c
 11014  00451A  0E00               	movlw	0
 11015  00451C  21B6               	addwfc	(??_inputScan+1)& (0+255),w,b
 11016  00451E  6EDA               	movwf	fsr2h,c
 11017  004520  0E84               	movlw	low _delayCount
 11018  004522  25E7               	addwf	_io& (0+255),w,b
 11019  004524  6EE1               	movwf	fsr1l,c
 11020  004526  6AE2               	clrf	fsr1h,c
 11021  004528  0E02               	movlw	high _delayCount
 11022  00452A  22E2               	addwfc	fsr1h,f,c
 11023  00452C  50DE               	movf	postinc2,w,c
 11024  00452E  18E6               	xorwf	postinc1,w,c
 11025  004530  A4D8               	btfss	status,2,c
 11026  004532  D002               	goto	l21139
 11027                           
 11028                           ; BSR set to: 0
 11029                           ;inputs.c: 108: change = 1;
 11030  004534  0E01               	movlw	1
 11031  004536  6FB9               	movwf	inputScan@change& (0+255),b
 11032  004538                     l21139:
 11033                           
 11034                           ; BSR set to: 0
 11035                           ;inputs.c: 109: };inputs.c: 110: if (!inputState[io] && (delayCount[io] == NV->io[io].nv
      +                          _io.nv_input.input_off_delay)) {
 11036  004538  0E94               	movlw	low _inputState
 11037  00453A  25E7               	addwf	_io& (0+255),w,b
 11038  00453C  6ED9               	movwf	fsr2l,c
 11039  00453E  6ADA               	clrf	fsr2h,c
 11040  004540  0E02               	movlw	high _inputState
 11041  004542  22DA               	addwfc	fsr2h,f,c
 11042  004544  50DF               	movf	indf2,w,c
 11043  004546  A4D8               	btfss	status,2,c
 11044  004548  D01C               	goto	l316
 11045                           
 11046                           ; BSR set to: 0
 11047  00454A  51E7               	movf	_io& (0+255),w,b
 11048  00454C  0D07               	mullw	7
 11049  00454E  C0EC  F0B5         	movff	_NV,??_inputScan
 11050  004552  C0ED  F0B6         	movff	_NV+1,??_inputScan+1
 11051  004556  50F3               	movf	243,w,c
 11052  004558  27B5               	addwf	??_inputScan& (0+255),f,b
 11053  00455A  50F4               	movf	244,w,c
 11054  00455C  23B6               	addwfc	(??_inputScan+1)& (0+255),f,b
 11055  00455E  0E13               	movlw	19
 11056  004560  25B5               	addwf	??_inputScan& (0+255),w,b
 11057  004562  6ED9               	movwf	fsr2l,c
 11058  004564  0E00               	movlw	0
 11059  004566  21B6               	addwfc	(??_inputScan+1)& (0+255),w,b
 11060  004568  6EDA               	movwf	fsr2h,c
 11061  00456A  0E84               	movlw	low _delayCount
 11062  00456C  25E7               	addwf	_io& (0+255),w,b
 11063  00456E  6EE1               	movwf	fsr1l,c
 11064  004570  6AE2               	clrf	fsr1h,c
 11065  004572  0E02               	movlw	high _delayCount
 11066  004574  22E2               	addwfc	fsr1h,f,c
 11067  004576  50DE               	movf	postinc2,w,c
 11068  004578  18E6               	xorwf	postinc1,w,c
 11069  00457A  A4D8               	btfss	status,2,c
 11070  00457C  D002               	goto	l316
 11071                           
 11072                           ; BSR set to: 0
 11073                           ;inputs.c: 111: change = 1;
 11074  00457E  0E01               	movlw	1
 11075  004580  6FB9               	movwf	inputScan@change& (0+255),b
 11076  004582                     l316:
 11077                           
 11078                           ; BSR set to: 0
 11079                           ;inputs.c: 112: };inputs.c: 113: if (change) {
 11080  004582  51B9               	movf	inputScan@change& (0+255),w,b
 11081  004584  B4D8               	btfsc	status,2,c
 11082  004586  D102               	goto	l21183
 11083                           
 11084                           ; BSR set to: 0
 11085                           ;inputs.c: 115: delayCount[io] = 0;
 11086  004588  0E84               	movlw	low _delayCount
 11087  00458A  25E7               	addwf	_io& (0+255),w,b
 11088  00458C  6ED9               	movwf	fsr2l,c
 11089  00458E  6ADA               	clrf	fsr2h,c
 11090  004590  0E02               	movlw	high _delayCount
 11091  004592  22DA               	addwfc	fsr2h,f,c
 11092  004594  0E00               	movlw	0
 11093  004596  6EDF               	movwf	indf2,c
 11094                           
 11095                           ;inputs.c: 116: inputState[io] = input;
 11096  004598  0E94               	movlw	low _inputState
 11097  00459A  25E7               	addwf	_io& (0+255),w,b
 11098  00459C  6ED9               	movwf	fsr2l,c
 11099  00459E  6ADA               	clrf	fsr2h,c
 11100  0045A0  0E02               	movlw	high _inputState
 11101  0045A2  22DA               	addwfc	fsr2h,f,c
 11102  0045A4  C0BA  FFDF         	movff	inputScan@input,indf2
 11103                           
 11104                           ; BSR set to: 0
 11105                           ;inputs.c: 118: if (!(NV->io[io].flags & 0x01U)) {
 11106  0045A8  51E7               	movf	_io& (0+255),w,b
 11107  0045AA  0D07               	mullw	7
 11108  0045AC  C0EC  F0B5         	movff	_NV,??_inputScan
 11109  0045B0  C0ED  F0B6         	movff	_NV+1,??_inputScan+1
 11110  0045B4  50F3               	movf	243,w,c
 11111  0045B6  27B5               	addwf	??_inputScan& (0+255),f,b
 11112  0045B8  50F4               	movf	244,w,c
 11113  0045BA  23B6               	addwfc	(??_inputScan+1)& (0+255),f,b
 11114  0045BC  0E11               	movlw	17
 11115  0045BE  25B5               	addwf	??_inputScan& (0+255),w,b
 11116  0045C0  6ED9               	movwf	fsr2l,c
 11117  0045C2  0E00               	movlw	0
 11118  0045C4  21B6               	addwfc	(??_inputScan+1)& (0+255),w,b
 11119  0045C6  6EDA               	movwf	fsr2h,c
 11120  0045C8  B0DF               	btfsc	indf2,0,c
 11121  0045CA  D007               	goto	l21151
 11122                           
 11123                           ; BSR set to: 0
 11124                           ;inputs.c: 119: input = (BOOL)(!input);
 11125  0045CC  51BA               	movf	inputScan@input& (0+255),w,b
 11126  0045CE  A4D8               	btfss	status,2,c
 11127  0045D0  D002               	goto	u27060
 11128  0045D2  0E01               	movlw	1
 11129  0045D4  D001               	goto	u27070
 11130  0045D6                     u27060:
 11131  0045D6  0E00               	movlw	0
 11132  0045D8                     u27070:
 11133  0045D8  6FBA               	movwf	inputScan@input& (0+255),b
 11134  0045DA                     l21151:
 11135                           
 11136                           ; BSR set to: 0
 11137                           ;inputs.c: 120: };inputs.c: 122: if (NV->io[io].flags & 0x10U) {
 11138  0045DA  51E7               	movf	_io& (0+255),w,b
 11139  0045DC  0D07               	mullw	7
 11140  0045DE  C0EC  F0B5         	movff	_NV,??_inputScan
 11141  0045E2  C0ED  F0B6         	movff	_NV+1,??_inputScan+1
 11142  0045E6  50F3               	movf	243,w,c
 11143  0045E8  27B5               	addwf	??_inputScan& (0+255),f,b
 11144  0045EA  50F4               	movf	244,w,c
 11145  0045EC  23B6               	addwfc	(??_inputScan+1)& (0+255),f,b
 11146  0045EE  0E11               	movlw	17
 11147  0045F0  25B5               	addwf	??_inputScan& (0+255),w,b
 11148  0045F2  6ED9               	movwf	fsr2l,c
 11149  0045F4  0E00               	movlw	0
 11150  0045F6  21B6               	addwfc	(??_inputScan+1)& (0+255),w,b
 11151  0045F8  6EDA               	movwf	fsr2h,c
 11152  0045FA  A8DF               	btfss	indf2,4,c
 11153  0045FC  D027               	goto	l21159
 11154                           
 11155                           ; BSR set to: 0
 11156                           ;inputs.c: 123: if (input) {
 11157  0045FE  51BA               	movf	inputScan@input& (0+255),w,b
 11158  004600  B4D8               	btfsc	status,2,c
 11159  004602  D0D4               	goto	l21187
 11160                           
 11161                           ; BSR set to: 0
 11162                           ;inputs.c: 124: outputState[io] = (BOOL)(! outputState[io]);
 11163  004604  0E50               	movlw	low _outputState
 11164  004606  25E7               	addwf	_io& (0+255),w,b
 11165  004608  6ED9               	movwf	fsr2l,c
 11166  00460A  6ADA               	clrf	fsr2h,c
 11167  00460C  0E01               	movlw	high _outputState
 11168  00460E  22DA               	addwfc	fsr2h,f,c
 11169  004610  0E50               	movlw	low _outputState
 11170  004612  25E7               	addwf	_io& (0+255),w,b
 11171  004614  6EE1               	movwf	fsr1l,c
 11172  004616  6AE2               	clrf	fsr1h,c
 11173  004618  0E01               	movlw	high _outputState
 11174  00461A  22E2               	addwfc	fsr1h,f,c
 11175  00461C  50E7               	movf	indf1,w,c
 11176  00461E  A4D8               	btfss	status,2,c
 11177  004620  D002               	goto	u27100
 11178  004622  0E01               	movlw	1
 11179  004624  D001               	goto	u27110
 11180  004626                     u27100:
 11181  004626  0E00               	movlw	0
 11182  004628                     u27110:
 11183  004628  6EDF               	movwf	indf2,c
 11184                           
 11185                           ; BSR set to: 0
 11186                           ;inputs.c: 127: };inputs.c: 128: ee_write(((WORD)(((BYTE*)(0x3FF-40)))-17)+io, outputSta
      +                          te[io]);
 11187                           
 11188                           ;inputs.c: 125: } else {
 11189  00462A  0EC6               	movlw	198
 11190  00462C  25E7               	addwf	_io& (0+255),w,b
 11191  00462E  6F73               	movwf	ee_write@addr& (0+255),b
 11192  004630  6B74               	clrf	(ee_write@addr+1)& (0+255),b
 11193  004632  0E03               	movlw	3
 11194  004634  2374               	addwfc	(ee_write@addr+1)& (0+255),f,b
 11195  004636  0E50               	movlw	low _outputState
 11196  004638  25E7               	addwf	_io& (0+255),w,b
 11197  00463A  6ED9               	movwf	fsr2l,c
 11198  00463C  6ADA               	clrf	fsr2h,c
 11199  00463E  0E01               	movlw	high _outputState
 11200  004640  22DA               	addwfc	fsr2h,f,c
 11201  004642  50DF               	movf	indf2,w,c
 11202  004644  6F75               	movwf	ee_write@data& (0+255),b
 11203  004646  EC1D  F04D         	call	_ee_write	;wreg free
 11204                           
 11205                           ;inputs.c: 129: } else {
 11206  00464A  D008               	goto	l21161
 11207  00464C                     l21159:
 11208                           
 11209                           ; BSR set to: 0
 11210                           ;inputs.c: 130: outputState[io] = input;
 11211  00464C  0E50               	movlw	low _outputState
 11212  00464E  25E7               	addwf	_io& (0+255),w,b
 11213  004650  6ED9               	movwf	fsr2l,c
 11214  004652  6ADA               	clrf	fsr2h,c
 11215  004654  0E01               	movlw	high _outputState
 11216  004656  22DA               	addwfc	fsr2h,f,c
 11217  004658  C0BA  FFDF         	movff	inputScan@input,indf2
 11218  00465C                     l21161:
 11219                           
 11220                           ; BSR set to: 0
 11221                           ;inputs.c: 131: };inputs.c: 134: if (NV->io[io].flags & 0x08U) {
 11222  00465C  51E7               	movf	_io& (0+255),w,b
 11223  00465E  0D07               	mullw	7
 11224  004660  C0EC  F0B5         	movff	_NV,??_inputScan
 11225  004664  C0ED  F0B6         	movff	_NV+1,??_inputScan+1
 11226  004668  50F3               	movf	243,w,c
 11227  00466A  27B5               	addwf	??_inputScan& (0+255),f,b
 11228  00466C  50F4               	movf	244,w,c
 11229  00466E  23B6               	addwfc	(??_inputScan+1)& (0+255),f,b
 11230  004670  0E11               	movlw	17
 11231  004672  25B5               	addwf	??_inputScan& (0+255),w,b
 11232  004674  6ED9               	movwf	fsr2l,c
 11233  004676  0E00               	movlw	0
 11234  004678  21B6               	addwfc	(??_inputScan+1)& (0+255),w,b
 11235  00467A  6EDA               	movwf	fsr2h,c
 11236  00467C  A6DF               	btfss	indf2,3,c
 11237  00467E  D051               	goto	l21177
 11238                           
 11239                           ; BSR set to: 0
 11240                           ;inputs.c: 135: if (outputState[io]) {
 11241  004680  0E50               	movlw	low _outputState
 11242  004682  25E7               	addwf	_io& (0+255),w,b
 11243  004684  6ED9               	movwf	fsr2l,c
 11244  004686  6ADA               	clrf	fsr2h,c
 11245  004688  0E01               	movlw	high _outputState
 11246  00468A  22DA               	addwfc	fsr2h,f,c
 11247  00468C  50DF               	movf	indf2,w,c
 11248  00468E  B4D8               	btfsc	status,2,c
 11249  004690  D024               	goto	l21171
 11250                           
 11251                           ; BSR set to: 0
 11252                           ;inputs.c: 138: if (NV->io[io].flags & 0x40U) {
 11253  004692  51E7               	movf	_io& (0+255),w,b
 11254  004694  0D07               	mullw	7
 11255  004696  C0EC  F0B5         	movff	_NV,??_inputScan
 11256  00469A  C0ED  F0B6         	movff	_NV+1,??_inputScan+1
 11257  00469E  50F3               	movf	243,w,c
 11258  0046A0  27B5               	addwf	??_inputScan& (0+255),f,b
 11259  0046A2  50F4               	movf	244,w,c
 11260  0046A4  23B6               	addwfc	(??_inputScan+1)& (0+255),f,b
 11261  0046A6  0E11               	movlw	17
 11262  0046A8  25B5               	addwf	??_inputScan& (0+255),w,b
 11263  0046AA  6ED9               	movwf	fsr2l,c
 11264  0046AC  0E00               	movlw	0
 11265  0046AE  21B6               	addwfc	(??_inputScan+1)& (0+255),w,b
 11266  0046B0  6EDA               	movwf	fsr2h,c
 11267  0046B2  ACDF               	btfss	indf2,6,c
 11268  0046B4  D009               	goto	l21169
 11269                           
 11270                           ; BSR set to: 0
 11271                           ;inputs.c: 139: sendProducedEvent(((8U + 4U*(io))+0U), 0);
 11272  0046B6  0E00               	movlw	0
 11273  0046B8  6FAE               	movwf	sendProducedEvent@on& (0+255),b
 11274  0046BA  51E7               	movf	_io& (0+255),w,b
 11275  0046BC  0D04               	mullw	4
 11276  0046BE  50F3               	movf	243,w,c
 11277  0046C0  0F08               	addlw	8
 11278  0046C2  EC54  F03C         	call	_sendProducedEvent
 11279                           
 11280                           ;inputs.c: 140: } else {
 11281  0046C6  D072               	goto	l21187
 11282  0046C8                     l21169:
 11283                           
 11284                           ; BSR set to: 0
 11285                           ;inputs.c: 141: sendProducedEvent(((8U + 4U*(io))+0U), 1);
 11286  0046C8  0E01               	movlw	1
 11287  0046CA  6FAE               	movwf	sendProducedEvent@on& (0+255),b
 11288  0046CC  51E7               	movf	_io& (0+255),w,b
 11289  0046CE  0D04               	mullw	4
 11290  0046D0  50F3               	movf	243,w,c
 11291  0046D2  0F08               	addlw	8
 11292  0046D4  EC54  F03C         	call	_sendProducedEvent
 11293  0046D8  D069               	goto	l21187
 11294  0046DA                     l21171:
 11295                           
 11296                           ; BSR set to: 0
 11297                           ;inputs.c: 144: if (NV->io[io].flags & 0x40U) {
 11298  0046DA  51E7               	movf	_io& (0+255),w,b
 11299  0046DC  0D07               	mullw	7
 11300  0046DE  C0EC  F0B5         	movff	_NV,??_inputScan
 11301  0046E2  C0ED  F0B6         	movff	_NV+1,??_inputScan+1
 11302  0046E6  50F3               	movf	243,w,c
 11303  0046E8  27B5               	addwf	??_inputScan& (0+255),f,b
 11304  0046EA  50F4               	movf	244,w,c
 11305  0046EC  23B6               	addwfc	(??_inputScan+1)& (0+255),f,b
 11306  0046EE  0E11               	movlw	17
 11307  0046F0  25B5               	addwf	??_inputScan& (0+255),w,b
 11308  0046F2  6ED9               	movwf	fsr2l,c
 11309  0046F4  0E00               	movlw	0
 11310  0046F6  21B6               	addwfc	(??_inputScan+1)& (0+255),w,b
 11311  0046F8  6EDA               	movwf	fsr2h,c
 11312  0046FA  ACDF               	btfss	indf2,6,c
 11313  0046FC  D009               	goto	l21175
 11314                           
 11315                           ; BSR set to: 0
 11316                           ;inputs.c: 145: sendProducedEvent(((8U + 4U*(io))+1U), 0);
 11317  0046FE  0E00               	movlw	0
 11318  004700  6FAE               	movwf	sendProducedEvent@on& (0+255),b
 11319  004702  51E7               	movf	_io& (0+255),w,b
 11320  004704  0D04               	mullw	4
 11321  004706  50F3               	movf	243,w,c
 11322  004708  0F09               	addlw	9
 11323  00470A  EC54  F03C         	call	_sendProducedEvent
 11324                           
 11325                           ;inputs.c: 146: } else {
 11326  00470E  D04E               	goto	l21187
 11327  004710                     l21175:
 11328                           
 11329                           ; BSR set to: 0
 11330                           ;inputs.c: 147: sendProducedEvent(((8U + 4U*(io))+1U), 1);
 11331  004710  0E01               	movlw	1
 11332  004712  6FAE               	movwf	sendProducedEvent@on& (0+255),b
 11333  004714  51E7               	movf	_io& (0+255),w,b
 11334  004716  0D04               	mullw	4
 11335  004718  50F3               	movf	243,w,c
 11336  00471A  0F09               	addlw	9
 11337  00471C  EC54  F03C         	call	_sendProducedEvent
 11338  004720  D045               	goto	l21187
 11339  004722                     l21177:
 11340                           
 11341                           ; BSR set to: 0
 11342                           ;inputs.c: 152: if (NV->io[io].flags & 0x40U) {
 11343  004722  51E7               	movf	_io& (0+255),w,b
 11344  004724  0D07               	mullw	7
 11345  004726  C0EC  F0B5         	movff	_NV,??_inputScan
 11346  00472A  C0ED  F0B6         	movff	_NV+1,??_inputScan+1
 11347  00472E  50F3               	movf	243,w,c
 11348  004730  27B5               	addwf	??_inputScan& (0+255),f,b
 11349  004732  50F4               	movf	244,w,c
 11350  004734  23B6               	addwfc	(??_inputScan+1)& (0+255),f,b
 11351  004736  0E11               	movlw	17
 11352  004738  25B5               	addwf	??_inputScan& (0+255),w,b
 11353  00473A  6ED9               	movwf	fsr2l,c
 11354  00473C  0E00               	movlw	0
 11355  00473E  21B6               	addwfc	(??_inputScan+1)& (0+255),w,b
 11356  004740  6EDA               	movwf	fsr2h,c
 11357  004742  ACDF               	btfss	indf2,6,c
 11358  004744  D014               	goto	l21181
 11359                           
 11360                           ; BSR set to: 0
 11361                           ;inputs.c: 153: sendProducedEvent(((8U + 4U*(io))+0U), (BOOL)(!outputState[io]));
 11362  004746  0E50               	movlw	low _outputState
 11363  004748  25E7               	addwf	_io& (0+255),w,b
 11364  00474A  6ED9               	movwf	fsr2l,c
 11365  00474C  6ADA               	clrf	fsr2h,c
 11366  00474E  0E01               	movlw	high _outputState
 11367  004750  22DA               	addwfc	fsr2h,f,c
 11368  004752  50DF               	movf	indf2,w,c
 11369  004754  A4D8               	btfss	status,2,c
 11370  004756  D002               	goto	u27170
 11371  004758  0E01               	movlw	1
 11372  00475A  D001               	goto	u27180
 11373  00475C                     u27170:
 11374  00475C  0E00               	movlw	0
 11375  00475E                     u27180:
 11376  00475E  6FAE               	movwf	sendProducedEvent@on& (0+255),b
 11377  004760  51E7               	movf	_io& (0+255),w,b
 11378  004762  0D04               	mullw	4
 11379  004764  50F3               	movf	243,w,c
 11380  004766  0F08               	addlw	8
 11381  004768  EC54  F03C         	call	_sendProducedEvent
 11382                           
 11383                           ;inputs.c: 154: } else {
 11384  00476C  D01F               	goto	l21187
 11385  00476E                     l21181:
 11386                           
 11387                           ; BSR set to: 0
 11388                           ;inputs.c: 155: sendProducedEvent(((8U + 4U*(io))+0U), outputState[io]);
 11389  00476E  0E50               	movlw	low _outputState
 11390  004770  25E7               	addwf	_io& (0+255),w,b
 11391  004772  6ED9               	movwf	fsr2l,c
 11392  004774  6ADA               	clrf	fsr2h,c
 11393  004776  0E01               	movlw	high _outputState
 11394  004778  22DA               	addwfc	fsr2h,f,c
 11395  00477A  50DF               	movf	indf2,w,c
 11396  00477C  6FAE               	movwf	sendProducedEvent@on& (0+255),b
 11397  00477E  51E7               	movf	_io& (0+255),w,b
 11398  004780  0D04               	mullw	4
 11399  004782  50F3               	movf	243,w,c
 11400  004784  0F08               	addlw	8
 11401  004786  EC54  F03C         	call	_sendProducedEvent
 11402  00478A  D010               	goto	l21187
 11403  00478C                     l21183:
 11404                           
 11405                           ; BSR set to: 0
 11406                           ;inputs.c: 159: delayCount[io]++;
 11407  00478C  0E84               	movlw	low _delayCount
 11408  00478E  25E7               	addwf	_io& (0+255),w,b
 11409  004790  6ED9               	movwf	fsr2l,c
 11410  004792  6ADA               	clrf	fsr2h,c
 11411  004794  0E02               	movlw	high _delayCount
 11412  004796  22DA               	addwfc	fsr2h,f,c
 11413  004798  2ADF               	incf	indf2,f,c
 11414  00479A  D008               	goto	l21187
 11415  00479C                     l21185:
 11416                           
 11417                           ; BSR set to: 0
 11418                           ;inputs.c: 162: delayCount[io] = 0;
 11419  00479C  0E84               	movlw	low _delayCount
 11420  00479E  25E7               	addwf	_io& (0+255),w,b
 11421  0047A0  6ED9               	movwf	fsr2l,c
 11422  0047A2  6ADA               	clrf	fsr2h,c
 11423  0047A4  0E02               	movlw	high _delayCount
 11424  0047A6  22DA               	addwfc	fsr2h,f,c
 11425  0047A8  0E00               	movlw	0
 11426  0047AA  6EDF               	movwf	indf2,c
 11427  0047AC                     l21187:
 11428  0047AC  0100               	movlb	0	; () banked
 11429  0047AE  2BE7               	incf	_io& (0+255),f,b
 11430  0047B0  D677               	goto	l21121
 11431  0047B2                     __end_of_inputScan:
 11432                           	callstack 0
 11433                           
 11434 ;; *************** function _initialise *****************
 11435 ;; Defined at:
 11436 ;;		line 388 in file "../../github/CANMIOfirmware/main.c"
 11437 ;; Parameters:    Size  Location     Type
 11438 ;;		None
 11439 ;; Auto vars:     Size  Location     Type
 11440 ;;  simultaneous    1  119[BANK0 ] unsigned char 
 11441 ;;  action          1  118[BANK0 ] unsigned char 
 11442 ;;  ev              2  122[BANK0 ] int 
 11443 ;;  en              2  124[BANK0 ] unsigned int 
 11444 ;;  paction         1  126[BANK0 ] unsigned char 
 11445 ;;  evIndex         1  121[BANK0 ] unsigned char 
 11446 ;;  i               1  120[BANK0 ] unsigned char 
 11447 ;; Return value:  Size  Location     Type
 11448 ;;                  1    wreg      void 
 11449 ;; Registers used:
 11450 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11451 ;; Tracked objects:
 11452 ;;		On entry : 3F/1
 11453 ;;		On exit  : 3F/0
 11454 ;;		Unchanged: 0/0
 11455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11456 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11457 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11458 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11459 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11460 ;;Total ram usage:       13 bytes
 11461 ;; Hardware stack levels used: 1
 11462 ;; Hardware stack levels required when called: 24
 11463 ;; This function calls:
 11464 ;;		_actionQueueInit
 11465 ;;		_addEvent
 11466 ;;		_configIO
 11467 ;;		_ee_read
 11468 ;;		_ee_write
 11469 ;;		_factoryResetEE
 11470 ;;		_factoryResetFlash
 11471 ;;		_getEv
 11472 ;;		_getProducedEvent
 11473 ;;		_initAnalogue
 11474 ;;		_initInputScan
 11475 ;;		_initOutputs
 11476 ;;		_initServos
 11477 ;;		_initTicker
 11478 ;;		_initTimedResponse
 11479 ;;		_loadNvCache
 11480 ;;		_mioEventsInit
 11481 ;;		_mioFlimInit
 11482 ;;		_writeEv
 11483 ;;		_writeFlashByte
 11484 ;; This function is called by:
 11485 ;;		_main
 11486 ;; This function uses a non-reentrant model
 11487 ;;
 11488                           
 11489                           	psect	text30
 11490  0039F2                     __ptext30:
 11491                           	callstack 0
 11492  0039F2                     _initialise:
 11493                           	callstack 6
 11494                           
 11495                           ; BSR set to: 1
 11496                           ;main.c: 390: OSCTUNEbits.PLLEN = 1;
 11497                           
 11498                           ; BSR set to: 0
 11499                           ;incstack = 0
 11500  0039F2  8C9B               	bsf	155,6,c	;volatile
 11501                           
 11502                           ;main.c: 396: RCONbits.IPEN = 1;
 11503  0039F4  8ED0               	bsf	208,7,c	;volatile
 11504                           
 11505                           ; BSR set to: 1
 11506                           ;main.c: 399: if (ee_read((WORD)((BYTE*)(0x3FF-5))) != 0x01) {
 11507  0039F6  0E03               	movlw	3
 11508  0039F8  0100               	movlb	0	; () banked
 11509  0039FA  6F72               	movwf	(ee_read@addr+1)& (0+255),b
 11510  0039FC  0EFA               	movlw	250
 11511  0039FE  6F71               	movwf	ee_read@addr& (0+255),b
 11512  003A00  EC97  F052         	call	_ee_read	;wreg free
 11513  003A04  06E8               	decf	wreg,f,c
 11514  003A06  B4D8               	btfsc	status,2,c
 11515  003A08  D01B               	goto	l21205
 11516                           
 11517                           ;main.c: 402: factoryResetEE();
 11518  003A0A  EC48  F04E         	call	_factoryResetEE	;wreg free
 11519                           
 11520                           ; BSR set to: 0
 11521                           ;main.c: 404: factoryResetFlash();
 11522  003A0E  EC5C  F051         	call	_factoryResetFlash	;wreg free
 11523                           
 11524                           ; BSR set to: 0
 11525                           ;main.c: 406: ee_write((WORD)((BYTE*)(0x3FF-5)), 0x01);
 11526  003A12  0E03               	movlw	3
 11527  003A14  6F74               	movwf	(ee_write@addr+1)& (0+255),b
 11528  003A16  0EFA               	movlw	250
 11529  003A18  6F73               	movwf	ee_write@addr& (0+255),b
 11530  003A1A  0E01               	movlw	1
 11531  003A1C  6F75               	movwf	ee_write@data& (0+255),b
 11532  003A1E  EC1D  F04D         	call	_ee_write	;wreg free
 11533                           
 11534                           ; BSR set to: 0
 11535                           ;main.c: 407: writeFlashByte((BYTE*)(0xFF80U + 0U), (BYTE)0x02U);
 11536  003A22  0E80               	movlw	128
 11537  003A24  6F87               	movwf	writeFlashByte@flashAddr& (0+255),b
 11538  003A26  0EFF               	movlw	255
 11539  003A28  6F88               	movwf	(writeFlashByte@flashAddr+1)& (0+255),b
 11540  003A2A  5187               	movf	writeFlashByte@flashAddr& (0+255),w,b
 11541  003A2C  1188               	iorwf	(writeFlashByte@flashAddr+1)& (0+255),w,b
 11542  003A2E  A4D8               	btfss	status,2,c
 11543  003A30  0E20               	movlw	32
 11544  003A32  6F89               	movwf	(writeFlashByte@flashAddr+2)& (0+255),b
 11545  003A34  0E02               	movlw	2
 11546  003A36  6F8A               	movwf	writeFlashByte@flashData& (0+255),b
 11547  003A38  ECC0  F052         	call	_writeFlashByte	;wreg free
 11548                           
 11549                           ; BSR set to: 0
 11550                           ;main.c: 409: loadNvCache();
 11551  003A3C  EC12  F04F         	call	_loadNvCache	;wreg free
 11552  003A40                     l21205:
 11553                           
 11554                           ;main.c: 411: };main.c: 413: if (NV->nv_version != 0x02U) {
 11555  003A40  C0EC  FFD9         	movff	_NV,fsr2l
 11556  003A44  C0ED  FFDA         	movff	_NV+1,fsr2h
 11557  003A48  0E02               	movlw	2
 11558  003A4A  18DE               	xorwf	postinc2,w,c
 11559  003A4C  B4D8               	btfsc	status,2,c
 11560  003A4E  D183               	goto	l21315
 11561                           
 11562                           ;main.c: 415: if (NV->nv_version == 1) {
 11563  003A50  C0EC  FFD9         	movff	_NV,fsr2l
 11564  003A54  C0ED  FFDA         	movff	_NV+1,fsr2h
 11565  003A58  04DE               	decf	postinc2,w,c
 11566  003A5A  A4D8               	btfss	status,2,c
 11567  003A5C  D16B               	goto	l21309
 11568                           
 11569                           ;main.c: 417: unsigned char i, evIndex;;main.c: 423: for (i=0; i<255U; i++) {
 11570  003A5E  0E00               	movlw	0
 11571  003A60  0100               	movlb	0	; () banked
 11572  003A62  6FD8               	movwf	initialise@i& (0+255),b
 11573  003A64                     l21215:
 11574                           
 11575                           ; BSR set to: 0
 11576                           ;main.c: 425: for (evIndex=1; evIndex<20U; evIndex++) {
 11577  003A64  0E01               	movlw	1
 11578  003A66  6FD9               	movwf	initialise@evIndex& (0+255),b
 11579  003A68                     l21221:
 11580                           
 11581                           ; BSR set to: 0
 11582                           ;main.c: 426: int ev = getEv(i, evIndex);
 11583  003A68  C0D9  F081         	movff	initialise@evIndex,getEv@evNum
 11584  003A6C  51D8               	movf	initialise@i& (0+255),w,b
 11585  003A6E  EC22  F038         	call	_getEv
 11586  003A72  C081  F0DA         	movff	?_getEv,initialise@ev
 11587  003A76  C082  F0DB         	movff	?_getEv+1,initialise@ev+1
 11588                           
 11589                           ; BSR set to: 0
 11590                           ;main.c: 427: if (ev > 0) {
 11591  003A7A  BFDB               	btfsc	(initialise@ev+1)& (0+255),7,b
 11592  003A7C  D044               	goto	l21233
 11593  003A7E  51DB               	movf	(initialise@ev+1)& (0+255),w,b
 11594  003A80  E103               	bnz	u27220
 11595  003A82  05DA               	decf	initialise@ev& (0+255),w,b
 11596  003A84  A0D8               	btfss	status,0,c
 11597  003A86  D03F               	goto	l21233
 11598  003A88                     u27220:
 11599                           
 11600                           ; BSR set to: 0
 11601                           ;main.c: 428: if (((unsigned char)ev & 0x7FU) >= 8U) {
 11602  003A88  C0DA  F0D2         	movff	initialise@ev,??_initialise
 11603  003A8C  0E7F               	movlw	127
 11604  003A8E  17D2               	andwf	??_initialise& (0+255),f,b
 11605  003A90  0E07               	movlw	7
 11606  003A92  65D2               	cpfsgt	??_initialise& (0+255),b
 11607  003A94  D038               	goto	l21233
 11608                           
 11609                           ; BSR set to: 0
 11610                           ;main.c: 429: unsigned char action;;main.c: 430: unsigned char simultaneous = (unsigned 
      +                          char)ev & 0x80U;
 11611  003A96  51DA               	movf	initialise@ev& (0+255),w,b
 11612  003A98  0B80               	andlw	128
 11613  003A9A  6FD7               	movwf	initialise@simultaneous& (0+255),b
 11614                           
 11615                           ;main.c: 431: ev &= 0x7FU;
 11616  003A9C  0E7F               	movlw	127
 11617  003A9E  17DA               	andwf	initialise@ev& (0+255),f,b
 11618  003AA0  0E00               	movlw	0
 11619  003AA2  17DB               	andwf	(initialise@ev+1)& (0+255),f,b
 11620                           
 11621                           ;main.c: 432: io = ((((unsigned char)ev)-8U)/4U);
 11622  003AA4  0EF8               	movlw	248
 11623  003AA6  6FD2               	movwf	??_initialise& (0+255),b
 11624  003AA8  0EFF               	movlw	255
 11625  003AAA  6FD3               	movwf	(??_initialise+1)& (0+255),b
 11626  003AAC  51DA               	movf	initialise@ev& (0+255),w,b
 11627  003AAE  6FD4               	movwf	(??_initialise+2)& (0+255),b
 11628  003AB0  6BD5               	clrf	(??_initialise+3)& (0+255),b
 11629  003AB2  51D2               	movf	??_initialise& (0+255),w,b
 11630  003AB4  27D4               	addwf	(??_initialise+2)& (0+255),f,b
 11631  003AB6  51D3               	movf	(??_initialise+1)& (0+255),w,b
 11632  003AB8  23D5               	addwfc	(??_initialise+3)& (0+255),f,b
 11633  003ABA  90D8               	bcf	status,0,c
 11634  003ABC  33D5               	rrcf	(??_initialise+3)& (0+255),f,b
 11635  003ABE  33D4               	rrcf	(??_initialise+2)& (0+255),f,b
 11636  003AC0  90D8               	bcf	status,0,c
 11637  003AC2  33D5               	rrcf	(??_initialise+3)& (0+255),f,b
 11638  003AC4  33D4               	rrcf	(??_initialise+2)& (0+255),f,b
 11639  003AC6  51D4               	movf	(??_initialise+2)& (0+255),w,b
 11640  003AC8  6FE6               	movwf	_io@main$F1444& (0+255),b
 11641                           
 11642                           ;main.c: 433: action = ((((unsigned char)ev)-8U)%4U);
 11643  003ACA  51DA               	movf	initialise@ev& (0+255),w,b
 11644  003ACC  0FF8               	addlw	248
 11645  003ACE  0B03               	andlw	3
 11646  003AD0  6FD6               	movwf	initialise@action& (0+255),b
 11647                           
 11648                           ; BSR set to: 0
 11649                           ;main.c: 434: ev = simultaneous | ((8U + 5U*(io)) + action);
 11650  003AD2  51E6               	movf	_io@main$F1444& (0+255),w,b
 11651  003AD4  0D05               	mullw	5
 11652  003AD6  CFF3 F0D2          	movff	prodl,??_initialise
 11653  003ADA  CFF4 F0D3          	movff	prodh,??_initialise+1
 11654  003ADE  51D6               	movf	initialise@action& (0+255),w,b
 11655  003AE0  27D2               	addwf	??_initialise& (0+255),f,b
 11656  003AE2  0E00               	movlw	0
 11657  003AE4  23D3               	addwfc	(??_initialise+1)& (0+255),f,b
 11658  003AE6  0E08               	movlw	8
 11659  003AE8  27D2               	addwf	??_initialise& (0+255),f,b
 11660  003AEA  0E00               	movlw	0
 11661  003AEC  23D3               	addwfc	(??_initialise+1)& (0+255),f,b
 11662  003AEE  51D7               	movf	initialise@simultaneous& (0+255),w,b
 11663  003AF0  11D2               	iorwf	??_initialise& (0+255),w,b
 11664  003AF2  6FDA               	movwf	initialise@ev& (0+255),b
 11665  003AF4  51D3               	movf	(??_initialise+1)& (0+255),w,b
 11666  003AF6  6FDB               	movwf	(initialise@ev+1)& (0+255),b
 11667                           
 11668                           ; BSR set to: 0
 11669                           ;main.c: 435: writeEv(i, evIndex, (unsigned char)ev);
 11670  003AF8  C0D9  F0A1         	movff	initialise@evIndex,writeEv@evNum
 11671  003AFC  C0DA  F0A2         	movff	initialise@ev,writeEv@evVal
 11672  003B00  51D8               	movf	initialise@i& (0+255),w,b
 11673  003B02  ECB3  F020         	call	_writeEv
 11674  003B06                     l21233:
 11675                           
 11676                           ; BSR set to: 0
 11677                           ;main.c: 436: };main.c: 437: };main.c: 438: if (ev == -5) {
 11678  003B06  0EFB               	movlw	251
 11679  003B08  19DA               	xorwf	initialise@ev& (0+255),w,b
 11680  003B0A  E103               	bnz	l21237
 11681  003B0C  29DB               	incf	(initialise@ev+1)& (0+255),w,b
 11682  003B0E  B4D8               	btfsc	status,2,c
 11683  003B10  D004               	goto	u27250
 11684  003B12                     l21237:
 11685                           
 11686                           ; BSR set to: 0
 11687  003B12  2BD9               	incf	initialise@evIndex& (0+255),f,b
 11688                           
 11689                           ; BSR set to: 0
 11690  003B14  0E13               	movlw	19
 11691  003B16  65D9               	cpfsgt	initialise@evIndex& (0+255),b
 11692  003B18  D7A7               	goto	l21221
 11693  003B1A                     u27250:
 11694                           
 11695                           ; BSR set to: 0
 11696  003B1A  2BD8               	incf	initialise@i& (0+255),f,b
 11697                           
 11698                           ; BSR set to: 0
 11699  003B1C  29D8               	incf	initialise@i& (0+255),w,b
 11700  003B1E  A4D8               	btfss	status,2,c
 11701  003B20  D7A1               	goto	l21215
 11702                           
 11703                           ; BSR set to: 0
 11704                           ;main.c: 440: };main.c: 441: };main.c: 442: };main.c: 447: for (io=0; io<16U; io++) {
 11705  003B22  0E00               	movlw	0
 11706  003B24  6FE6               	movwf	_io@main$F1444& (0+255),b
 11707  003B26                     l21247:
 11708                           
 11709                           ; BSR set to: 0
 11710  003B26  0E0F               	movlw	15
 11711  003B28  65E6               	cpfsgt	_io@main$F1444& (0+255),b
 11712  003B2A  D001               	goto	l21251
 11713  003B2C  D105               	goto	l21311
 11714  003B2E                     l21251:
 11715                           
 11716                           ; BSR set to: 0
 11717                           ;main.c: 448: unsigned char paction;;main.c: 449: WORD en = io+1U;
 11718  003B2E  0E01               	movlw	1
 11719  003B30  25E6               	addwf	_io@main$F1444& (0+255),w,b
 11720  003B32  6FDC               	movwf	initialise@en& (0+255),b
 11721  003B34  6BDD               	clrf	(initialise@en+1)& (0+255),b
 11722  003B36  0E00               	movlw	0
 11723  003B38  23DD               	addwfc	(initialise@en+1)& (0+255),f,b
 11724                           
 11725                           ;main.c: 450: switch (NV->io[io].type) {
 11726  003B3A  D0D4               	goto	l21303
 11727  003B3C                     l21253:
 11728                           
 11729                           ; BSR set to: 0
 11730                           ;main.c: 452: paction = ((8U + 4U*(io))+0U);
 11731  003B3C  51E6               	movf	_io@main$F1444& (0+255),w,b
 11732  003B3E  0D04               	mullw	4
 11733  003B40  50F3               	movf	243,w,c
 11734  003B42  0F08               	addlw	8
 11735  003B44  6FDE               	movwf	initialise@paction& (0+255),b
 11736                           
 11737                           ; BSR set to: 0
 11738                           ;main.c: 453: if ( ! getProducedEvent(paction)) {
 11739  003B46  51DE               	movf	initialise@paction& (0+255),w,b
 11740  003B48  ECBE  F04A         	call	_getProducedEvent
 11741  003B4C  0900               	iorlw	0
 11742  003B4E  A4D8               	btfss	status,2,c
 11743  003B50  D0EF               	goto	l21305
 11744                           
 11745                           ; BSR set to: 0
 11746                           ;main.c: 454: addEvent(nodeID, en, 0, paction, 1);
 11747  003B52  C001  F0B3         	movff	_nodeID,addEvent@nodeNumber
 11748  003B56  C002  F0B4         	movff	_nodeID+1,addEvent@nodeNumber+1
 11749  003B5A  C0DC  F0B5         	movff	initialise@en,addEvent@eventNumber
 11750  003B5E  C0DD  F0B6         	movff	initialise@en+1,addEvent@eventNumber+1
 11751  003B62  0E00               	movlw	0
 11752  003B64  6FB7               	movwf	addEvent@evNum& (0+255),b
 11753  003B66  C0DE  F0B8         	movff	initialise@paction,addEvent@evVal
 11754  003B6A  0E01               	movlw	1
 11755  003B6C  6FB9               	movwf	addEvent@forceOwnNN& (0+255),b
 11756  003B6E  EC0F  F02E         	call	_addEvent	;wreg free
 11757  003B72  D0DE               	goto	l21305
 11758  003B74                     l21259:
 11759                           
 11760                           ; BSR set to: 0
 11761                           ;main.c: 459: paction = ((8U + 4U*(io))+0U);
 11762  003B74  51E6               	movf	_io@main$F1444& (0+255),w,b
 11763  003B76  0D04               	mullw	4
 11764  003B78  50F3               	movf	243,w,c
 11765  003B7A  0F08               	addlw	8
 11766  003B7C  6FDE               	movwf	initialise@paction& (0+255),b
 11767                           
 11768                           ; BSR set to: 0
 11769                           ;main.c: 460: if ( ! getProducedEvent(paction)) {
 11770  003B7E  51DE               	movf	initialise@paction& (0+255),w,b
 11771  003B80  ECBE  F04A         	call	_getProducedEvent
 11772  003B84  0900               	iorlw	0
 11773  003B86  A4D8               	btfss	status,2,c
 11774  003B88  D012               	goto	l21265
 11775                           
 11776                           ; BSR set to: 0
 11777                           ;main.c: 461: addEvent(nodeID, 100+en, 0, paction, 1);
 11778  003B8A  C001  F0B3         	movff	_nodeID,addEvent@nodeNumber
 11779  003B8E  C002  F0B4         	movff	_nodeID+1,addEvent@nodeNumber+1
 11780  003B92  0E64               	movlw	100
 11781  003B94  25DC               	addwf	initialise@en& (0+255),w,b
 11782  003B96  6FB5               	movwf	addEvent@eventNumber& (0+255),b
 11783  003B98  0E00               	movlw	0
 11784  003B9A  21DD               	addwfc	(initialise@en+1)& (0+255),w,b
 11785  003B9C  6FB6               	movwf	(addEvent@eventNumber+1)& (0+255),b
 11786  003B9E  0E00               	movlw	0
 11787  003BA0  6FB7               	movwf	addEvent@evNum& (0+255),b
 11788  003BA2  C0DE  F0B8         	movff	initialise@paction,addEvent@evVal
 11789  003BA6  0E01               	movlw	1
 11790  003BA8  6FB9               	movwf	addEvent@forceOwnNN& (0+255),b
 11791  003BAA  EC0F  F02E         	call	_addEvent	;wreg free
 11792  003BAE                     l21265:
 11793                           
 11794                           ; BSR set to: 0
 11795                           ;main.c: 462: };main.c: 463: paction = ((8U + 4U*(io))+1U);
 11796  003BAE  51E6               	movf	_io@main$F1444& (0+255),w,b
 11797  003BB0  0D04               	mullw	4
 11798  003BB2  50F3               	movf	243,w,c
 11799  003BB4  0F09               	addlw	9
 11800  003BB6  6FDE               	movwf	initialise@paction& (0+255),b
 11801                           
 11802                           ; BSR set to: 0
 11803                           ;main.c: 464: if ( ! getProducedEvent(paction)) {
 11804  003BB8  51DE               	movf	initialise@paction& (0+255),w,b
 11805  003BBA  ECBE  F04A         	call	_getProducedEvent
 11806  003BBE  0900               	iorlw	0
 11807  003BC0  A4D8               	btfss	status,2,c
 11808  003BC2  D012               	goto	l21271
 11809                           
 11810                           ; BSR set to: 0
 11811                           ;main.c: 465: addEvent(nodeID, 300+en, 0, paction, 1);
 11812  003BC4  C001  F0B3         	movff	_nodeID,addEvent@nodeNumber
 11813  003BC8  C002  F0B4         	movff	_nodeID+1,addEvent@nodeNumber+1
 11814  003BCC  0E2C               	movlw	44
 11815  003BCE  25DC               	addwf	initialise@en& (0+255),w,b
 11816  003BD0  6FB5               	movwf	addEvent@eventNumber& (0+255),b
 11817  003BD2  0E01               	movlw	1
 11818  003BD4  21DD               	addwfc	(initialise@en+1)& (0+255),w,b
 11819  003BD6  6FB6               	movwf	(addEvent@eventNumber+1)& (0+255),b
 11820  003BD8  0E00               	movlw	0
 11821  003BDA  6FB7               	movwf	addEvent@evNum& (0+255),b
 11822  003BDC  C0DE  F0B8         	movff	initialise@paction,addEvent@evVal
 11823  003BE0  0E01               	movlw	1
 11824  003BE2  6FB9               	movwf	addEvent@forceOwnNN& (0+255),b
 11825  003BE4  EC0F  F02E         	call	_addEvent	;wreg free
 11826  003BE8                     l21271:
 11827                           
 11828                           ; BSR set to: 0
 11829                           ;main.c: 466: };main.c: 467: paction = ((8U + 4U*(io))+2U);
 11830  003BE8  51E6               	movf	_io@main$F1444& (0+255),w,b
 11831  003BEA  0D04               	mullw	4
 11832  003BEC  50F3               	movf	243,w,c
 11833  003BEE  0F0A               	addlw	10
 11834  003BF0  6FDE               	movwf	initialise@paction& (0+255),b
 11835                           
 11836                           ; BSR set to: 0
 11837                           ;main.c: 468: if ( ! getProducedEvent(paction)) {
 11838  003BF2  51DE               	movf	initialise@paction& (0+255),w,b
 11839  003BF4  ECBE  F04A         	call	_getProducedEvent
 11840  003BF8  0900               	iorlw	0
 11841  003BFA  A4D8               	btfss	status,2,c
 11842  003BFC  D099               	goto	l21305
 11843                           
 11844                           ; BSR set to: 0
 11845                           ;main.c: 469: addEvent(nodeID, 200+en, 0, paction, 1);
 11846  003BFE  C001  F0B3         	movff	_nodeID,addEvent@nodeNumber
 11847  003C02  C002  F0B4         	movff	_nodeID+1,addEvent@nodeNumber+1
 11848  003C06  0EC8               	movlw	200
 11849  003C08  25DC               	addwf	initialise@en& (0+255),w,b
 11850  003C0A  6FB5               	movwf	addEvent@eventNumber& (0+255),b
 11851  003C0C  0E00               	movlw	0
 11852  003C0E  21DD               	addwfc	(initialise@en+1)& (0+255),w,b
 11853  003C10  6FB6               	movwf	(addEvent@eventNumber+1)& (0+255),b
 11854  003C12  0E00               	movlw	0
 11855  003C14  6FB7               	movwf	addEvent@evNum& (0+255),b
 11856  003C16  C0DE  F0B8         	movff	initialise@paction,addEvent@evVal
 11857  003C1A  0E01               	movlw	1
 11858  003C1C  6FB9               	movwf	addEvent@forceOwnNN& (0+255),b
 11859  003C1E  EC0F  F02E         	call	_addEvent	;wreg free
 11860  003C22  D086               	goto	l21305
 11861  003C24                     l21277:
 11862                           
 11863                           ; BSR set to: 0
 11864                           ;main.c: 475: case 3U:;main.c: 477: paction = ((8U + 4U*(io))+0U);
 11865  003C24  51E6               	movf	_io@main$F1444& (0+255),w,b
 11866  003C26  0D04               	mullw	4
 11867  003C28  50F3               	movf	243,w,c
 11868  003C2A  0F08               	addlw	8
 11869  003C2C  6FDE               	movwf	initialise@paction& (0+255),b
 11870                           
 11871                           ; BSR set to: 0
 11872                           ;main.c: 478: if ( ! getProducedEvent(paction)) {
 11873  003C2E  51DE               	movf	initialise@paction& (0+255),w,b
 11874  003C30  ECBE  F04A         	call	_getProducedEvent
 11875  003C34  0900               	iorlw	0
 11876  003C36  A4D8               	btfss	status,2,c
 11877  003C38  D07B               	goto	l21305
 11878  003C3A                     u27320:
 11879                           
 11880                           ; BSR set to: 0
 11881                           ;main.c: 479: addEvent(nodeID, 100+en, 0, paction, 1);
 11882  003C3A  C001  F0B3         	movff	_nodeID,addEvent@nodeNumber
 11883  003C3E  C002  F0B4         	movff	_nodeID+1,addEvent@nodeNumber+1
 11884  003C42  0E64               	movlw	100
 11885  003C44  25DC               	addwf	initialise@en& (0+255),w,b
 11886  003C46  6FB5               	movwf	addEvent@eventNumber& (0+255),b
 11887  003C48  0E00               	movlw	0
 11888  003C4A  21DD               	addwfc	(initialise@en+1)& (0+255),w,b
 11889  003C4C  6FB6               	movwf	(addEvent@eventNumber+1)& (0+255),b
 11890  003C4E  0E00               	movlw	0
 11891  003C50  6FB7               	movwf	addEvent@evNum& (0+255),b
 11892  003C52  C0DE  F0B8         	movff	initialise@paction,addEvent@evVal
 11893  003C56  0E01               	movlw	1
 11894  003C58  6FB9               	movwf	addEvent@forceOwnNN& (0+255),b
 11895  003C5A  EC0F  F02E         	call	_addEvent	;wreg free
 11896  003C5E  D068               	goto	l21305
 11897  003C60                     l21283:
 11898                           
 11899                           ; BSR set to: 0
 11900                           ;main.c: 488: paction = ((8U + 4U*(io))+0U);
 11901  003C60  51E6               	movf	_io@main$F1444& (0+255),w,b
 11902  003C62  0D04               	mullw	4
 11903  003C64  50F3               	movf	243,w,c
 11904  003C66  0F08               	addlw	8
 11905  003C68  6FDE               	movwf	initialise@paction& (0+255),b
 11906                           
 11907                           ; BSR set to: 0
 11908                           ;main.c: 489: if ( ! getProducedEvent(paction)) {
 11909  003C6A  51DE               	movf	initialise@paction& (0+255),w,b
 11910  003C6C  ECBE  F04A         	call	_getProducedEvent
 11911  003C70  0900               	iorlw	0
 11912  003C72  A4D8               	btfss	status,2,c
 11913  003C74  D010               	goto	l21289
 11914                           
 11915                           ; BSR set to: 0
 11916                           ;main.c: 490: addEvent(nodeID, en, 0, paction, 1);
 11917  003C76  C001  F0B3         	movff	_nodeID,addEvent@nodeNumber
 11918  003C7A  C002  F0B4         	movff	_nodeID+1,addEvent@nodeNumber+1
 11919  003C7E  C0DC  F0B5         	movff	initialise@en,addEvent@eventNumber
 11920  003C82  C0DD  F0B6         	movff	initialise@en+1,addEvent@eventNumber+1
 11921  003C86  0E00               	movlw	0
 11922  003C88  6FB7               	movwf	addEvent@evNum& (0+255),b
 11923  003C8A  C0DE  F0B8         	movff	initialise@paction,addEvent@evVal
 11924  003C8E  0E01               	movlw	1
 11925  003C90  6FB9               	movwf	addEvent@forceOwnNN& (0+255),b
 11926  003C92  EC0F  F02E         	call	_addEvent	;wreg free
 11927  003C96                     l21289:
 11928                           
 11929                           ; BSR set to: 0
 11930                           ;main.c: 494: paction = ((8U + 4U*(io))+1U);
 11931  003C96  51E6               	movf	_io@main$F1444& (0+255),w,b
 11932  003C98  0D04               	mullw	4
 11933  003C9A  50F3               	movf	243,w,c
 11934  003C9C  0F09               	addlw	9
 11935  003C9E  6FDE               	movwf	initialise@paction& (0+255),b
 11936                           
 11937                           ; BSR set to: 0
 11938                           ;main.c: 495: if ( ! getProducedEvent(paction)) {
 11939  003CA0  51DE               	movf	initialise@paction& (0+255),w,b
 11940  003CA2  ECBE  F04A         	call	_getProducedEvent
 11941  003CA6  0900               	iorlw	0
 11942  003CA8  A4D8               	btfss	status,2,c
 11943  003CAA  D010               	goto	l21295
 11944                           
 11945                           ; BSR set to: 0
 11946                           ;main.c: 496: addEvent(nodeID, en, 0, paction, 1);
 11947  003CAC  C001  F0B3         	movff	_nodeID,addEvent@nodeNumber
 11948  003CB0  C002  F0B4         	movff	_nodeID+1,addEvent@nodeNumber+1
 11949  003CB4  C0DC  F0B5         	movff	initialise@en,addEvent@eventNumber
 11950  003CB8  C0DD  F0B6         	movff	initialise@en+1,addEvent@eventNumber+1
 11951  003CBC  0E00               	movlw	0
 11952  003CBE  6FB7               	movwf	addEvent@evNum& (0+255),b
 11953  003CC0  C0DE  F0B8         	movff	initialise@paction,addEvent@evVal
 11954  003CC4  0E01               	movlw	1
 11955  003CC6  6FB9               	movwf	addEvent@forceOwnNN& (0+255),b
 11956  003CC8  EC0F  F02E         	call	_addEvent	;wreg free
 11957  003CCC                     l21295:
 11958                           
 11959                           ; BSR set to: 0
 11960                           ;main.c: 497: };main.c: 498: paction = ((8U + 4U*(io))+0U);
 11961  003CCC  51E6               	movf	_io@main$F1444& (0+255),w,b
 11962  003CCE  0D04               	mullw	4
 11963  003CD0  50F3               	movf	243,w,c
 11964  003CD2  0F08               	addlw	8
 11965  003CD4  6FDE               	movwf	initialise@paction& (0+255),b
 11966                           
 11967                           ; BSR set to: 0
 11968                           ;main.c: 499: if ( ! getProducedEvent(paction)) {
 11969  003CD6  51DE               	movf	initialise@paction& (0+255),w,b
 11970  003CD8  ECBE  F04A         	call	_getProducedEvent
 11971  003CDC  0900               	iorlw	0
 11972  003CDE  B4D8               	btfsc	status,2,c
 11973  003CE0  D7AC               	goto	u27320
 11974  003CE2  D026               	goto	l21305
 11975  003CE4                     l21303:
 11976                           
 11977                           ; BSR set to: 0
 11978  003CE4  51E6               	movf	_io@main$F1444& (0+255),w,b
 11979  003CE6  0D07               	mullw	7
 11980  003CE8  C0EC  F0D2         	movff	_NV,??_initialise
 11981  003CEC  C0ED  F0D3         	movff	_NV+1,??_initialise+1
 11982  003CF0  50F3               	movf	243,w,c
 11983  003CF2  27D2               	addwf	??_initialise& (0+255),f,b
 11984  003CF4  50F4               	movf	244,w,c
 11985  003CF6  23D3               	addwfc	(??_initialise+1)& (0+255),f,b
 11986  003CF8  0E10               	movlw	16
 11987  003CFA  25D2               	addwf	??_initialise& (0+255),w,b
 11988  003CFC  6ED9               	movwf	fsr2l,c
 11989  003CFE  0E00               	movlw	0
 11990  003D00  21D3               	addwfc	(??_initialise+1)& (0+255),w,b
 11991  003D02  6EDA               	movwf	fsr2h,c
 11992  003D04  50DF               	movf	indf2,w,c
 11993                           
 11994                           ; Switch size 1, requested type "simple"
 11995                           ; Number of cases is 7, Range of values is 0 to 6
 11996                           ; switch strategies available:
 11997                           ; Name         Instructions Cycles
 11998                           ; simple_byte           22    12 (average)
 11999                           ;	Chosen strategy is simple_byte
 12000  003D06  0A00               	xorlw	0	; case 0
 12001  003D08  B4D8               	btfsc	status,2,c
 12002  003D0A  D718               	goto	l21253
 12003  003D0C  0A01               	xorlw	1	; case 1
 12004  003D0E  B4D8               	btfsc	status,2,c
 12005  003D10  D789               	goto	l21277
 12006  003D12  0A03               	xorlw	3	; case 2
 12007  003D14  B4D8               	btfsc	status,2,c
 12008  003D16  D72E               	goto	l21259
 12009  003D18  0A01               	xorlw	1	; case 3
 12010  003D1A  B4D8               	btfsc	status,2,c
 12011  003D1C  D783               	goto	l21277
 12012  003D1E  0A07               	xorlw	7	; case 4
 12013  003D20  B4D8               	btfsc	status,2,c
 12014  003D22  D006               	goto	l21305
 12015  003D24  0A01               	xorlw	1	; case 5
 12016  003D26  B4D8               	btfsc	status,2,c
 12017  003D28  D79B               	goto	l21283
 12018  003D2A  0A03               	xorlw	3	; case 6
 12019  003D2C  B4D8               	btfsc	status,2,c
 12020  003D2E  D7B3               	goto	l21289
 12021  003D30                     l21305:
 12022                           
 12023                           ; BSR set to: 0
 12024  003D30  2BE6               	incf	_io@main$F1444& (0+255),f,b
 12025  003D32  D6F9               	goto	l21247
 12026  003D34                     l21309:
 12027                           
 12028                           ;main.c: 508: factoryResetFlash();
 12029  003D34  EC5C  F051         	call	_factoryResetFlash	;wreg free
 12030  003D38                     l21311:
 12031                           
 12032                           ; BSR set to: 0
 12033                           ;main.c: 509: };main.c: 511: writeFlashByte((BYTE*)(0xFF80U + 0U), (BYTE)0x02U);
 12034  003D38  0E80               	movlw	128
 12035  003D3A  6F87               	movwf	writeFlashByte@flashAddr& (0+255),b
 12036  003D3C  0EFF               	movlw	255
 12037  003D3E  6F88               	movwf	(writeFlashByte@flashAddr+1)& (0+255),b
 12038  003D40  5187               	movf	writeFlashByte@flashAddr& (0+255),w,b
 12039  003D42  1188               	iorwf	(writeFlashByte@flashAddr+1)& (0+255),w,b
 12040  003D44  A4D8               	btfss	status,2,c
 12041  003D46  0E20               	movlw	32
 12042  003D48  6F89               	movwf	(writeFlashByte@flashAddr+2)& (0+255),b
 12043  003D4A  0E02               	movlw	2
 12044  003D4C  6F8A               	movwf	writeFlashByte@flashData& (0+255),b
 12045  003D4E  ECC0  F052         	call	_writeFlashByte	;wreg free
 12046                           
 12047                           ; BSR set to: 0
 12048                           ;main.c: 513: loadNvCache();
 12049  003D52  EC12  F04F         	call	_loadNvCache	;wreg free
 12050  003D56                     l21315:
 12051                           
 12052                           ;main.c: 515: };main.c: 517: initTicker(0);
 12053  003D56  0E00               	movlw	0
 12054  003D58  EC33  F04F         	call	_initTicker
 12055                           
 12056                           ;main.c: 519: INTCON2bits.RBPU = 0;
 12057  003D5C  9EF1               	bcf	241,7,c	;volatile
 12058                           
 12059                           ;main.c: 521: WPUB = NV->pullups;
 12060  003D5E  0100               	movlb	0	; () banked
 12061  003D60  EE20 F004          	lfsr	2,4
 12062  003D64  51EC               	movf	_NV& (0+255),w,b
 12063  003D66  26D9               	addwf	fsr2l,f,c
 12064  003D68  51ED               	movf	(_NV+1)& (0+255),w,b
 12065  003D6A  22DA               	addwfc	fsr2h,f,c
 12066  003D6C  50DF               	movf	indf2,w,c
 12067  003D6E  010F               	movlb	15	; () banked
 12068  003D70  6F5B               	movwf	91,b	;volatile
 12069                           
 12070                           ; BSR set to: 15
 12071                           ;main.c: 522: actionQueueInit();
 12072  003D72  EC86  F050         	call	_actionQueueInit	;wreg free
 12073                           
 12074                           ; BSR set to: 1
 12075                           ;main.c: 523: mioEventsInit();
 12076  003D76  EC1D  F053         	call	_mioEventsInit	;wreg free
 12077                           
 12078                           ; BSR set to: 1
 12079                           ;main.c: 524: mioFlimInit();
 12080  003D7A  EC5F  F053         	call	_mioFlimInit	;wreg free
 12081                           
 12082                           ; BSR set to: 1
 12083                           ;main.c: 526: initAnalogue();
 12084  003D7E  EC03  F050         	call	_initAnalogue	;wreg free
 12085                           
 12086                           ; BSR set to: 0
 12087                           ;main.c: 529: ANCON0 = 0x00;
 12088  003D82  0E00               	movlw	0
 12089  003D84  010F               	movlb	15	; () banked
 12090  003D86  6F5D               	movwf	93,b	;volatile
 12091                           
 12092                           ; BSR set to: 15
 12093                           ;main.c: 530: ANCON1 = 0x00;
 12094  003D88  0E00               	movlw	0
 12095  003D8A  6F5C               	movwf	92,b	;volatile
 12096                           
 12097                           ; BSR set to: 15
 12098                           ;main.c: 533: initServos();
 12099  003D8C  EC20  F02D         	call	_initServos	;wreg free
 12100                           
 12101                           ; BSR set to: 0
 12102                           ;main.c: 535: initOutputs();
 12103  003D90  EC45  F051         	call	_initOutputs	;wreg free
 12104                           
 12105                           ; BSR set to: 0
 12106                           ;main.c: 538: for (io=0; io< 16U; io++) {
 12107  003D94  0E00               	movlw	0
 12108  003D96  6FE6               	movwf	_io@main$F1444& (0+255),b
 12109  003D98                     l21339:
 12110                           
 12111                           ; BSR set to: 0
 12112  003D98  0E0F               	movlw	15
 12113  003D9A  65E6               	cpfsgt	_io@main$F1444& (0+255),b
 12114  003D9C  D001               	goto	l21343
 12115  003D9E  D006               	goto	l21349
 12116  003DA0                     l21343:
 12117                           
 12118                           ; BSR set to: 0
 12119                           ;main.c: 539: configIO(io);
 12120  003DA0  51E6               	movf	_io@main$F1444& (0+255),w,b
 12121  003DA2  EC31  F015         	call	_configIO
 12122  003DA6  0100               	movlb	0	; () banked
 12123  003DA8  2BE6               	incf	_io@main$F1444& (0+255),f,b
 12124  003DAA  D7F6               	goto	l21339
 12125  003DAC                     l21349:
 12126                           
 12127                           ; BSR set to: 0
 12128                           ;main.c: 540: };main.c: 541: initInputScan();
 12129  003DAC  EC4C  F03E         	call	_initInputScan	;wreg free
 12130                           
 12131                           ; BSR set to: 0
 12132                           ;main.c: 542: initTimedResponse();
 12133  003DB0  EC80  F053         	call	_initTimedResponse	;wreg free
 12134                           
 12135                           ; BSR set to: 0
 12136                           ;main.c: 545: (INTCONbits.GIE = 1);
 12137  003DB4  8EF2               	bsf	242,7,c	;volatile
 12138                           
 12139                           ; BSR set to: 0
 12140  003DB6  0012               	return		;funcret
 12141  003DB8                     __end_of_initialise:
 12142                           	callstack 0
 12143                           
 12144 ;; *************** function _mioFlimInit *****************
 12145 ;; Defined at:
 12146 ;;		line 139 in file "../../github/CANMIOfirmware/mioFLiM.c"
 12147 ;; Parameters:    Size  Location     Type
 12148 ;;		None
 12149 ;; Auto vars:     Size  Location     Type
 12150 ;;		None
 12151 ;; Return value:  Size  Location     Type
 12152 ;;                  1    wreg      void 
 12153 ;; Registers used:
 12154 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12155 ;; Tracked objects:
 12156 ;;		On entry : 3F/1
 12157 ;;		On exit  : 3F/1
 12158 ;;		Unchanged: 0/0
 12159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12160 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12161 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12162 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12163 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12164 ;;Total ram usage:        0 bytes
 12165 ;; Hardware stack levels used: 1
 12166 ;; Hardware stack levels required when called: 18
 12167 ;; This function calls:
 12168 ;;		_flimInit
 12169 ;;		_mioNvInit
 12170 ;; This function is called by:
 12171 ;;		_initialise
 12172 ;; This function uses a non-reentrant model
 12173 ;;
 12174                           
 12175                           	psect	text31
 12176  00A6BE                     __ptext31:
 12177                           	callstack 0
 12178  00A6BE                     _mioFlimInit:
 12179                           	callstack 11
 12180                           
 12181                           ; BSR set to: 1
 12182                           ;mioFLiM.c: 140: flimInit();
 12183                           
 12184                           ; BSR set to: 0
 12185                           ;incstack = 0
 12186  00A6BE  ECAF  F04E         	call	_flimInit	;wreg free
 12187                           
 12188                           ; BSR set to: 1
 12189                           ;mioFLiM.c: 141: mioNvInit();
 12190  00A6C2  EC94  F053         	call	_mioNvInit	;wreg free
 12191                           
 12192                           ; BSR set to: 1
 12193  00A6C6  0012               	return		;funcret
 12194  00A6C8                     __end_of_mioFlimInit:
 12195                           	callstack 0
 12196                           
 12197 ;; *************** function _mioNvInit *****************
 12198 ;; Defined at:
 12199 ;;		line 76 in file "../../github/CANMIOfirmware/mioNv.c"
 12200 ;; Parameters:    Size  Location     Type
 12201 ;;		None
 12202 ;; Auto vars:     Size  Location     Type
 12203 ;;		None
 12204 ;; Return value:  Size  Location     Type
 12205 ;;                  1    wreg      void 
 12206 ;; Registers used:
 12207 ;;		None
 12208 ;; Tracked objects:
 12209 ;;		On entry : 3F/1
 12210 ;;		On exit  : 3F/1
 12211 ;;		Unchanged: 3F/0
 12212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12213 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12214 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12215 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12216 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12217 ;;Total ram usage:        0 bytes
 12218 ;; Hardware stack levels used: 1
 12219 ;; Hardware stack levels required when called: 8
 12220 ;; This function calls:
 12221 ;;		Nothing
 12222 ;; This function is called by:
 12223 ;;		_mioFlimInit
 12224 ;; This function uses a non-reentrant model
 12225 ;;
 12226                           
 12227                           	psect	text32
 12228  00A728                     __ptext32:
 12229                           	callstack 0
 12230  00A728                     _mioNvInit:
 12231                           	callstack 20
 12232                           
 12233                           ; BSR set to: 1
 12234                           
 12235                           ; BSR set to: 1
 12236                           ;incstack = 0
 12237  00A728  0012               	return		;funcret
 12238  00A72A                     __end_of_mioNvInit:
 12239                           	callstack 0
 12240                           
 12241 ;; *************** function _flimInit *****************
 12242 ;; Defined at:
 12243 ;;		line 109 in file "../../github/CBUSlib/FliM.c"
 12244 ;; Parameters:    Size  Location     Type
 12245 ;;		None
 12246 ;; Auto vars:     Size  Location     Type
 12247 ;;		None
 12248 ;; Return value:  Size  Location     Type
 12249 ;;                  1    wreg      void 
 12250 ;; Registers used:
 12251 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12252 ;; Tracked objects:
 12253 ;;		On entry : 3F/1
 12254 ;;		On exit  : 3F/1
 12255 ;;		Unchanged: 0/0
 12256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12257 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12258 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12259 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12260 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12261 ;;Total ram usage:        0 bytes
 12262 ;; Hardware stack levels used: 1
 12263 ;; Hardware stack levels required when called: 17
 12264 ;; This function calls:
 12265 ;;		_cbusInit
 12266 ;;		_ee_read
 12267 ;;		_eventsInit
 12268 ;;		_setStatusLed
 12269 ;; This function is called by:
 12270 ;;		_mioFlimInit
 12271 ;; This function uses a non-reentrant model
 12272 ;;
 12273                           
 12274                           	psect	text33
 12275  009D5E                     __ptext33:
 12276                           	callstack 0
 12277  009D5E                     _flimInit:
 12278                           	callstack 11
 12279                           
 12280                           ; BSR set to: 1
 12281                           ;FliM.c: 111: flimState = ee_read((WORD)((BYTE*)(0x3FF-4)));
 12282                           
 12283                           ; BSR set to: 1
 12284                           ;incstack = 0
 12285  009D5E  0E03               	movlw	3
 12286  009D60  0100               	movlb	0	; () banked
 12287  009D62  6F72               	movwf	(ee_read@addr+1)& (0+255),b
 12288  009D64  0EFB               	movlw	251
 12289  009D66  6F71               	movwf	ee_read@addr& (0+255),b
 12290  009D68  EC97  F052         	call	_ee_read	;wreg free
 12291  009D6C  6E16               	movwf	_flimState^0,c
 12292                           
 12293                           ;FliM.c: 112: prevFlimState = flimState;
 12294  009D6E  C016  F006         	movff	_flimState,_prevFlimState
 12295                           
 12296                           ;FliM.c: 113: cbusInit(0x00);
 12297  009D72  0E00               	movlw	0
 12298  009D74  0100               	movlb	0	; () banked
 12299  009D76  6F7F               	movwf	(cbusInit@initNodeID+1)& (0+255),b
 12300  009D78  0E00               	movlw	0
 12301  009D7A  6F7E               	movwf	cbusInit@initNodeID& (0+255),b
 12302  009D7C  EC54  F050         	call	_cbusInit	;wreg free
 12303                           
 12304                           ; BSR set to: 0
 12305                           ;FliM.c: 114: eventsInit();
 12306  009D80  EC7D  F053         	call	_eventsInit	;wreg free
 12307                           
 12308                           ; BSR set to: 0
 12309                           ;FliM.c: 115: FlashStatus = 0;
 12310  009D84  0E00               	movlw	0
 12311  009D86  0101               	movlb	1	; () banked
 12312  009D88  6FD6               	movwf	_FlashStatus& (0+255),b
 12313                           
 12314                           ; BSR set to: 1
 12315                           ;FliM.c: 116: setStatusLed(flimState == fsFLiM);
 12316  009D8A  0416               	decf	_flimState^0,w,c
 12317  009D8C  A4D8               	btfss	status,2,c
 12318  009D8E  D002               	goto	u24950
 12319  009D90  0E01               	movlw	1
 12320  009D92  D001               	goto	u24960
 12321  009D94                     u24950:
 12322  009D94  0E00               	movlw	0
 12323  009D96                     u24960:
 12324  009D96  ECCD  F052         	call	_setStatusLed
 12325                           
 12326                           ; BSR set to: 1
 12327                           ;FliM.c: 123: NV_changed = 0;
 12328  009D9A  0E00               	movlw	0
 12329  009D9C  6FD5               	movwf	_NV_changed& (0+255),b
 12330                           
 12331                           ; BSR set to: 1
 12332  009D9E  0012               	return		;funcret
 12333  009DA0                     __end_of_flimInit:
 12334                           	callstack 0
 12335                           
 12336 ;; *************** function _eventsInit *****************
 12337 ;; Defined at:
 12338 ;;		line 273 in file "../../github/CBUSlib/events.c"
 12339 ;; Parameters:    Size  Location     Type
 12340 ;;		None
 12341 ;; Auto vars:     Size  Location     Type
 12342 ;;		None
 12343 ;; Return value:  Size  Location     Type
 12344 ;;                  1    wreg      void 
 12345 ;; Registers used:
 12346 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12347 ;; Tracked objects:
 12348 ;;		On entry : 3F/0
 12349 ;;		On exit  : 3F/0
 12350 ;;		Unchanged: 0/0
 12351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12352 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12353 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12354 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12355 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12356 ;;Total ram usage:        0 bytes
 12357 ;; Hardware stack levels used: 1
 12358 ;; Hardware stack levels required when called: 16
 12359 ;; This function calls:
 12360 ;;		_rebuildHashtable
 12361 ;; This function is called by:
 12362 ;;		_flimInit
 12363 ;; This function uses a non-reentrant model
 12364 ;;
 12365                           
 12366                           	psect	text34
 12367  00A6FA                     __ptext34:
 12368                           	callstack 0
 12369  00A6FA                     _eventsInit:
 12370                           	callstack 11
 12371                           
 12372                           ; BSR set to: 0
 12373                           ;events.c: 277: rebuildHashtable();
 12374                           
 12375                           ; BSR set to: 1
 12376                           ;incstack = 0
 12377  00A6FA  ECB2  F034         	call	_rebuildHashtable	;wreg free
 12378                           
 12379                           ; BSR set to: 0
 12380  00A6FE  0012               	return		;funcret
 12381  00A700                     __end_of_eventsInit:
 12382                           	callstack 0
 12383                           
 12384 ;; *************** function _cbusInit *****************
 12385 ;; Defined at:
 12386 ;;		line 74 in file "../../github/CBUSlib/cbus.c"
 12387 ;; Parameters:    Size  Location     Type
 12388 ;;  initNodeID      2   30[BANK0 ] unsigned int 
 12389 ;; Auto vars:     Size  Location     Type
 12390 ;;		None
 12391 ;; Return value:  Size  Location     Type
 12392 ;;                  1    wreg      void 
 12393 ;; Registers used:
 12394 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 12395 ;; Tracked objects:
 12396 ;;		On entry : 3F/0
 12397 ;;		On exit  : 3F/0
 12398 ;;		Unchanged: 0/0
 12399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12400 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12401 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12402 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12403 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12404 ;;Total ram usage:        2 bytes
 12405 ;; Hardware stack levels used: 1
 12406 ;; Hardware stack levels required when called: 11
 12407 ;; This function calls:
 12408 ;;		_canInit
 12409 ;;		_ee_read_short
 12410 ;; This function is called by:
 12411 ;;		_flimInit
 12412 ;; This function uses a non-reentrant model
 12413 ;;
 12414                           
 12415                           	psect	text35
 12416  00A0A8                     __ptext35:
 12417                           	callstack 0
 12418  00A0A8                     _cbusInit:
 12419                           	callstack 16
 12420                           
 12421                           ; BSR set to: 0
 12422                           ;cbus.c: 77: nodeID = ee_read_short( (WORD)((WORD*)(0x3FF-3)) );
 12423                           
 12424                           ; BSR set to: 0
 12425                           ;incstack = 0
 12426  00A0A8  0E03               	movlw	3
 12427  00A0AA  6F74               	movwf	(ee_read_short@addr+1)& (0+255),b
 12428  00A0AC  0EFC               	movlw	252
 12429  00A0AE  6F73               	movwf	ee_read_short@addr& (0+255),b
 12430  00A0B0  ECF6  F04C         	call	_ee_read_short	;wreg free
 12431  00A0B4  C073  F001         	movff	?_ee_read_short,_nodeID
 12432  00A0B8  C074  F002         	movff	?_ee_read_short+1,_nodeID+1
 12433                           
 12434                           ; BSR set to: 0
 12435                           ;cbus.c: 79: if (nodeID == 0xFFFF)
 12436  00A0BC  2801               	incf	_nodeID^0,w,c
 12437  00A0BE  E107               	bnz	l19529
 12438  00A0C0  2802               	incf	(_nodeID+1)^0,w,c
 12439  00A0C2  A4D8               	btfss	status,2,c
 12440  00A0C4  D004               	goto	l19529
 12441                           
 12442                           ; BSR set to: 0
 12443                           ;cbus.c: 80: nodeID = initNodeID;
 12444  00A0C6  C07E  F001         	movff	cbusInit@initNodeID,_nodeID
 12445  00A0CA  C07F  F002         	movff	cbusInit@initNodeID+1,_nodeID+1
 12446  00A0CE                     l19529:
 12447                           
 12448                           ; BSR set to: 0
 12449                           ;cbus.c: 83: canInit(0,0);
 12450  00A0CE  0E00               	movlw	0
 12451  00A0D0  6F7B               	movwf	canInit@initCanID& (0+255),b
 12452  00A0D2  0E00               	movlw	0
 12453  00A0D4  ECF8  F02E         	call	_canInit
 12454                           
 12455                           ; BSR set to: 0
 12456  00A0D8  0012               	return		;funcret
 12457  00A0DA                     __end_of_cbusInit:
 12458                           	callstack 0
 12459                           
 12460 ;; *************** function _ee_read_short *****************
 12461 ;; Defined at:
 12462 ;;		line 447 in file "../../github/CBUSlib/romops.c"
 12463 ;; Parameters:    Size  Location     Type
 12464 ;;  addr            2   19[BANK0 ] unsigned int 
 12465 ;; Auto vars:     Size  Location     Type
 12466 ;;  ret             2   26[BANK0 ] unsigned int 
 12467 ;;  ee_addr         2   24[BANK0 ] unsigned int 
 12468 ;; Return value:  Size  Location     Type
 12469 ;;                  2   19[BANK0 ] unsigned int 
 12470 ;; Registers used:
 12471 ;;		wreg, status,2, status,0, cstack
 12472 ;; Tracked objects:
 12473 ;;		On entry : 3F/0
 12474 ;;		On exit  : 3F/0
 12475 ;;		Unchanged: 0/0
 12476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12477 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12478 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12479 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12480 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12481 ;;Total ram usage:        9 bytes
 12482 ;; Hardware stack levels used: 1
 12483 ;; Hardware stack levels required when called: 9
 12484 ;; This function calls:
 12485 ;;		_ee_read
 12486 ;; This function is called by:
 12487 ;;		_cbusInit
 12488 ;; This function uses a non-reentrant model
 12489 ;;
 12490                           
 12491                           	psect	text36
 12492  0099EC                     __ptext36:
 12493                           	callstack 0
 12494  0099EC                     _ee_read_short:
 12495                           	callstack 17
 12496                           
 12497                           ; BSR set to: 0
 12498                           ;romops.c: 450: WORD ee_addr = addr;
 12499                           
 12500                           ; BSR set to: 0
 12501                           ;incstack = 0
 12502  0099EC  C073  F078         	movff	ee_read_short@addr,ee_read_short@ee_addr
 12503  0099F0  C074  F079         	movff	ee_read_short@addr+1,ee_read_short@ee_addr+1
 12504                           
 12505                           ; BSR set to: 0
 12506                           ;romops.c: 451: WORD ret = ee_read(ee_addr++);
 12507  0099F4  C078  F071         	movff	ee_read_short@ee_addr,ee_read@addr
 12508  0099F8  C079  F072         	movff	ee_read_short@ee_addr+1,ee_read@addr+1
 12509  0099FC  EC97  F052         	call	_ee_read	;wreg free
 12510  009A00  0100               	movlb	0	; () banked
 12511  009A02  6F75               	movwf	??_ee_read_short& (0+255),b
 12512  009A04  5175               	movf	??_ee_read_short& (0+255),w,b
 12513  009A06  6F7A               	movwf	ee_read_short@ret& (0+255),b
 12514  009A08  6B7B               	clrf	(ee_read_short@ret+1)& (0+255),b
 12515                           
 12516                           ; BSR set to: 0
 12517  009A0A  4B78               	infsnz	ee_read_short@ee_addr& (0+255),f,b
 12518  009A0C  2B79               	incf	(ee_read_short@ee_addr+1)& (0+255),f,b
 12519                           
 12520                           ; BSR set to: 0
 12521                           ;romops.c: 453: ret = ret | ((WORD)ee_read(ee_addr) << 8);
 12522  009A0E  C078  F071         	movff	ee_read_short@ee_addr,ee_read@addr
 12523  009A12  C079  F072         	movff	ee_read_short@ee_addr+1,ee_read@addr+1
 12524  009A16  EC97  F052         	call	_ee_read	;wreg free
 12525  009A1A  0100               	movlb	0	; () banked
 12526  009A1C  6F75               	movwf	??_ee_read_short& (0+255),b
 12527  009A1E  5175               	movf	??_ee_read_short& (0+255),w,b
 12528  009A20  6F77               	movwf	(??_ee_read_short+2)& (0+255),b
 12529  009A22  6B76               	clrf	(??_ee_read_short+1)& (0+255),b
 12530  009A24  517A               	movf	ee_read_short@ret& (0+255),w,b
 12531  009A26  1176               	iorwf	(??_ee_read_short+1)& (0+255),w,b
 12532  009A28  6F7A               	movwf	ee_read_short@ret& (0+255),b
 12533  009A2A  517B               	movf	(ee_read_short@ret+1)& (0+255),w,b
 12534  009A2C  1177               	iorwf	(??_ee_read_short+2)& (0+255),w,b
 12535  009A2E  6F7B               	movwf	(ee_read_short@ret+1)& (0+255),b
 12536                           
 12537                           ; BSR set to: 0
 12538                           ;romops.c: 454: return ret;
 12539  009A30  C07A  F073         	movff	ee_read_short@ret,?_ee_read_short
 12540  009A34  C07B  F074         	movff	ee_read_short@ret+1,?_ee_read_short+1
 12541                           
 12542                           ; BSR set to: 0
 12543  009A38  0012               	return		;funcret
 12544  009A3A                     __end_of_ee_read_short:
 12545                           	callstack 0
 12546                           
 12547 ;; *************** function _canInit *****************
 12548 ;; Defined at:
 12549 ;;		line 113 in file "../../github/CBUSlib/can18.c"
 12550 ;; Parameters:    Size  Location     Type
 12551 ;;  busNum          1    wreg     unsigned char 
 12552 ;;  initCanID       1   27[BANK0 ] unsigned char 
 12553 ;; Auto vars:     Size  Location     Type
 12554 ;;  busNum          1    0[COMRAM] unsigned char 
 12555 ;; Return value:  Size  Location     Type
 12556 ;;                  1    wreg      void 
 12557 ;; Registers used:
 12558 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 12559 ;; Tracked objects:
 12560 ;;		On entry : 3F/0
 12561 ;;		On exit  : 3F/0
 12562 ;;		Unchanged: 0/0
 12563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12564 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12565 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12566 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12567 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12568 ;;Total ram usage:        3 bytes
 12569 ;; Hardware stack levels used: 1
 12570 ;; Hardware stack levels required when called: 10
 12571 ;; This function calls:
 12572 ;;		_ee_read
 12573 ;;		_ee_write
 12574 ;;		_tickGet
 12575 ;; This function is called by:
 12576 ;;		_cbusInit
 12577 ;; This function uses a non-reentrant model
 12578 ;;
 12579                           
 12580                           	psect	text37
 12581  005DF0                     __ptext37:
 12582                           	callstack 0
 12583  005DF0                     _canInit:
 12584                           	callstack 16
 12585                           
 12586                           ; BSR set to: 0
 12587                           ;can18.c: 115: larbCount = 0;
 12588                           
 12589                           ; BSR set to: 0
 12590                           ;incstack = 0
 12591  005DF0  0E00               	movlw	0
 12592  005DF2  0101               	movlb	1	; () banked
 12593  005DF4  6FDE               	movwf	_larbCount& (0+255),b
 12594                           
 12595                           ;can18.c: 116: txErrCount = 0;
 12596  005DF6  0E00               	movlw	0
 12597  005DF8  6FDD               	movwf	_txErrCount& (0+255),b
 12598                           
 12599                           ;can18.c: 117: txTimeoutCount = 0;
 12600  005DFA  0E00               	movlw	0
 12601  005DFC  6FDC               	movwf	_txTimeoutCount& (0+255),b
 12602                           
 12603                           ;can18.c: 118: canTransmitFailed = 0;
 12604  005DFE  0E00               	movlw	0
 12605  005E00  6E0C               	movwf	_canTransmitFailed^0,c
 12606                           
 12607                           ;can18.c: 119: canTransmitTimeout.Val = 0;
 12608  005E02  0E00               	movlw	0
 12609  005E04  6FB4               	movwf	_canTransmitTimeout& (0+255),b
 12610  005E06  0E00               	movlw	0
 12611  005E08  6FB5               	movwf	(_canTransmitTimeout+1)& (0+255),b
 12612  005E0A  0E00               	movlw	0
 12613  005E0C  6FB6               	movwf	(_canTransmitTimeout+2)& (0+255),b
 12614  005E0E  0E00               	movlw	0
 12615  005E10  6FB7               	movwf	(_canTransmitTimeout+3)& (0+255),b
 12616                           
 12617                           ;can18.c: 120: maxCanTxFifo = 0;
 12618  005E12  0E00               	movlw	0
 12619  005E14  6E0B               	movwf	_maxCanTxFifo^0,c
 12620                           
 12621                           ;can18.c: 121: maxCanRxFifo = 0;
 12622  005E16  0E00               	movlw	0
 12623  005E18  6E0A               	movwf	_maxCanRxFifo^0,c
 12624                           
 12625                           ;can18.c: 122: rxOflowCount = 0;
 12626  005E1A  0E00               	movlw	0
 12627  005E1C  6FDA               	movwf	_rxOflowCount& (0+255),b
 12628                           
 12629                           ;can18.c: 123: txOflowCount = 0;
 12630  005E1E  0E00               	movlw	0
 12631  005E20  6FDB               	movwf	_txOflowCount& (0+255),b
 12632                           
 12633                           ;can18.c: 124: txIndexNextFree = 0;
 12634  005E22  0E00               	movlw	0
 12635  005E24  6E11               	movwf	_txIndexNextFree^0,c
 12636                           
 12637                           ;can18.c: 125: txIndexNextUsed = 0;
 12638  005E26  0E00               	movlw	0
 12639  005E28  6E10               	movwf	_txIndexNextUsed^0,c
 12640                           
 12641                           ;can18.c: 126: rxIndexNextFree = 0;
 12642  005E2A  0E00               	movlw	0
 12643  005E2C  6E0F               	movwf	_rxIndexNextFree^0,c
 12644                           
 12645                           ;can18.c: 127: rxIndexNextUsed = 0;
 12646  005E2E  0E00               	movlw	0
 12647  005E30  6E0E               	movwf	_rxIndexNextUsed^0,c
 12648                           
 12649                           ;can18.c: 128: txFifoUsage = 0;
 12650  005E32  0E00               	movlw	0
 12651  005E34  6FD9               	movwf	_txFifoUsage& (0+255),b
 12652                           
 12653                           ;can18.c: 129: rxFifoUsage = 0;
 12654  005E36  0E00               	movlw	0
 12655  005E38  6FD8               	movwf	_rxFifoUsage& (0+255),b
 12656                           
 12657                           ;can18.c: 131: IPR5 = 0;
 12658  005E3A  0E00               	movlw	0
 12659  005E3C  6E78               	movwf	120,c	;volatile
 12660                           
 12661                           ;can18.c: 134: CANCON = 0b10000000;
 12662  005E3E  0E80               	movlw	128
 12663  005E40  6E6F               	movwf	111,c	;volatile
 12664  005E42                     l1567:
 12665  005E42  AE6E               	btfss	110,7,c	;volatile
 12666  005E44  D7FE               	goto	l1567
 12667                           
 12668                           ;can18.c: 152: ECANCON = 0b10110000;
 12669  005E46  0EB0               	movlw	176
 12670  005E48  6E72               	movwf	114,c	;volatile
 12671                           
 12672                           ;can18.c: 153: BSEL0 = 0;
 12673  005E4A  0E00               	movlw	0
 12674  005E4C  010E               	movlb	14	; () banked
 12675  005E4E  6F7D               	movwf	125,b	;volatile
 12676                           
 12677                           ;can18.c: 158: BRGCON1 = 0b00001111;
 12678  005E50  0E0F               	movlw	15
 12679  005E52  6F43               	movwf	67,b	;volatile
 12680                           
 12681                           ; BSR set to: 14
 12682                           ;can18.c: 161: clkMHz = (( BRGCON1 & 0x3FU ) + 1U ) << 2U;
 12683  005E54  5143               	movf	67,w,b	;volatile
 12684  005E56  0B3F               	andlw	63
 12685  005E58  0D04               	mullw	4
 12686  005E5A  50F3               	movf	243,w,c
 12687  005E5C  0F04               	addlw	4
 12688  005E5E  6E17               	movwf	_clkMHz^0,c
 12689                           
 12690                           ; BSR set to: 14
 12691                           ;can18.c: 183: BRGCON2 = 0b10011110;
 12692  005E60  0E9E               	movlw	158
 12693  005E62  6F44               	movwf	68,b	;volatile
 12694                           
 12695                           ; BSR set to: 14
 12696                           ;can18.c: 184: BRGCON3 = 0b00000011;
 12697  005E64  0E03               	movlw	3
 12698  005E66  6F45               	movwf	69,b	;volatile
 12699                           
 12700                           ; BSR set to: 14
 12701                           ;can18.c: 188: CIOCON = 0b00100000;
 12702  005E68  0E20               	movlw	32
 12703  005E6A  6E70               	movwf	112,c	;volatile
 12704                           
 12705                           ; BSR set to: 14
 12706                           ;can18.c: 193: RXM0SIDH = 0;
 12707  005E6C  0E00               	movlw	0
 12708  005E6E  6FF8               	movwf	248,b	;volatile
 12709                           
 12710                           ; BSR set to: 14
 12711                           ;can18.c: 194: RXM0SIDL = 0x08;
 12712  005E70  0E08               	movlw	8
 12713  005E72  6FF9               	movwf	249,b	;volatile
 12714                           
 12715                           ; BSR set to: 14
 12716                           ;can18.c: 195: RXM0EIDH = 0;
 12717  005E74  0E00               	movlw	0
 12718  005E76  6FFA               	movwf	250,b	;volatile
 12719                           
 12720                           ; BSR set to: 14
 12721                           ;can18.c: 196: RXM0EIDL = 0;
 12722  005E78  0E00               	movlw	0
 12723  005E7A  6FFB               	movwf	251,b	;volatile
 12724                           
 12725                           ; BSR set to: 14
 12726                           ;can18.c: 197: RXM1SIDH = 0;
 12727  005E7C  0E00               	movlw	0
 12728  005E7E  6FFC               	movwf	252,b	;volatile
 12729                           
 12730                           ; BSR set to: 14
 12731                           ;can18.c: 198: RXM1SIDL = 0x08;
 12732  005E80  0E08               	movlw	8
 12733  005E82  6FFD               	movwf	253,b	;volatile
 12734                           
 12735                           ; BSR set to: 14
 12736                           ;can18.c: 199: RXM1EIDH = 0;
 12737  005E84  0E00               	movlw	0
 12738  005E86  6FFE               	movwf	254,b	;volatile
 12739                           
 12740                           ; BSR set to: 14
 12741                           ;can18.c: 200: RXM1EIDL = 0;
 12742  005E88  0E00               	movlw	0
 12743  005E8A  6FFF               	movwf	255,b	;volatile
 12744                           
 12745                           ; BSR set to: 14
 12746                           ;can18.c: 203: RXF0SIDL = 0x80;
 12747  005E8C  0E80               	movlw	128
 12748  005E8E  6FE1               	movwf	225,b	;volatile
 12749                           
 12750                           ; BSR set to: 14
 12751                           ;can18.c: 206: RXFBCON0 = 0;
 12752  005E90  0E00               	movlw	0
 12753  005E92  6F71               	movwf	113,b	;volatile
 12754                           
 12755                           ; BSR set to: 14
 12756                           ;can18.c: 207: RXFBCON1 = 0;
 12757  005E94  0E00               	movlw	0
 12758  005E96  6F72               	movwf	114,b	;volatile
 12759                           
 12760                           ; BSR set to: 14
 12761                           ;can18.c: 208: RXFBCON2 = 0;
 12762  005E98  0E00               	movlw	0
 12763  005E9A  6F73               	movwf	115,b	;volatile
 12764                           
 12765                           ; BSR set to: 14
 12766                           ;can18.c: 209: RXFBCON3 = 0;
 12767  005E9C  0E00               	movlw	0
 12768  005E9E  6F74               	movwf	116,b	;volatile
 12769                           
 12770                           ; BSR set to: 14
 12771                           ;can18.c: 210: RXFBCON4 = 0;
 12772  005EA0  0E00               	movlw	0
 12773  005EA2  6F75               	movwf	117,b	;volatile
 12774                           
 12775                           ; BSR set to: 14
 12776                           ;can18.c: 211: RXFBCON5 = 0;
 12777  005EA4  0E00               	movlw	0
 12778  005EA6  6F76               	movwf	118,b	;volatile
 12779                           
 12780                           ; BSR set to: 14
 12781                           ;can18.c: 212: RXFBCON6 = 0;
 12782  005EA8  0E00               	movlw	0
 12783  005EAA  6F77               	movwf	119,b	;volatile
 12784                           
 12785                           ; BSR set to: 14
 12786                           ;can18.c: 213: RXFBCON7 = 0;
 12787  005EAC  0E00               	movlw	0
 12788  005EAE  6F78               	movwf	120,b	;volatile
 12789                           
 12790                           ; BSR set to: 14
 12791                           ;can18.c: 216: MSEL0 = 0;
 12792  005EB0  0E00               	movlw	0
 12793  005EB2  6F79               	movwf	121,b	;volatile
 12794                           
 12795                           ; BSR set to: 14
 12796                           ;can18.c: 217: MSEL1 = 0;
 12797  005EB4  0E00               	movlw	0
 12798  005EB6  6F7A               	movwf	122,b	;volatile
 12799                           
 12800                           ; BSR set to: 14
 12801                           ;can18.c: 218: MSEL2 = 0;
 12802  005EB8  0E00               	movlw	0
 12803  005EBA  6F7B               	movwf	123,b	;volatile
 12804                           
 12805                           ; BSR set to: 14
 12806                           ;can18.c: 219: MSEL3 = 0;
 12807  005EBC  0E00               	movlw	0
 12808  005EBE  6F7C               	movwf	124,b	;volatile
 12809                           
 12810                           ; BSR set to: 14
 12811                           ;can18.c: 238: RXB0CON = 0x20;
 12812  005EC0  0E20               	movlw	32
 12813  005EC2  6E60               	movwf	96,c	;volatile
 12814                           
 12815                           ; BSR set to: 14
 12816                           ;can18.c: 239: RXB1CON = 0x20;
 12817  005EC4  0E20               	movlw	32
 12818  005EC6  010F               	movlb	15	; () banked
 12819  005EC8  6F30               	movwf	48,b	;volatile
 12820                           
 12821                           ; BSR set to: 15
 12822                           ;can18.c: 240: B0CON = 0;
 12823  005ECA  0E00               	movlw	0
 12824  005ECC  010E               	movlb	14	; () banked
 12825  005ECE  6F80               	movwf	128,b	;volatile
 12826                           
 12827                           ; BSR set to: 14
 12828                           ;can18.c: 241: B1CON = 0;
 12829  005ED0  0E00               	movlw	0
 12830  005ED2  6F90               	movwf	144,b	;volatile
 12831                           
 12832                           ; BSR set to: 14
 12833                           ;can18.c: 242: B2CON = 0;
 12834  005ED4  0E00               	movlw	0
 12835  005ED6  6FA0               	movwf	160,b	;volatile
 12836                           
 12837                           ; BSR set to: 14
 12838                           ;can18.c: 243: B3CON = 0;
 12839  005ED8  0E00               	movlw	0
 12840  005EDA  6FB0               	movwf	176,b	;volatile
 12841                           
 12842                           ; BSR set to: 14
 12843                           ;can18.c: 244: B4CON = 0;
 12844  005EDC  0E00               	movlw	0
 12845  005EDE  6FC0               	movwf	192,b	;volatile
 12846                           
 12847                           ; BSR set to: 14
 12848                           ;can18.c: 245: B5CON = 0;
 12849  005EE0  0E00               	movlw	0
 12850  005EE2  6FD0               	movwf	208,b	;volatile
 12851                           
 12852                           ; BSR set to: 14
 12853                           ;can18.c: 247: BIE0 = 0;
 12854  005EE4  0E00               	movlw	0
 12855  005EE6  6F7E               	movwf	126,b	;volatile
 12856                           
 12857                           ; BSR set to: 14
 12858                           ;can18.c: 248: TXBIEbits.TXB0IE = 1;
 12859  005EE8  857F               	bsf	127,2,b	;volatile
 12860                           
 12861                           ; BSR set to: 14
 12862                           ;can18.c: 249: TXBIEbits.TXB1IE = 0;
 12863  005EEA  977F               	bcf	127,3,b	;volatile
 12864                           
 12865                           ; BSR set to: 14
 12866                           ;can18.c: 250: TXBIEbits.TXB2IE = 0;
 12867  005EEC  997F               	bcf	127,4,b	;volatile
 12868                           
 12869                           ; BSR set to: 14
 12870                           ;can18.c: 251: CANCON = 0;
 12871  005EEE  0E00               	movlw	0
 12872  005EF0  6E6F               	movwf	111,c	;volatile
 12873                           
 12874                           ; BSR set to: 14
 12875                           ;can18.c: 253: if (initCanID == 0)
 12876  005EF2  0100               	movlb	0	; () banked
 12877  005EF4  517B               	movf	canInit@initCanID& (0+255),w,b
 12878  005EF6  A4D8               	btfss	status,2,c
 12879  005EF8  D00D               	goto	l1570
 12880                           
 12881                           ; BSR set to: 0
 12882                           ;can18.c: 254: {;can18.c: 255: canID = ee_read( (WORD)((BYTE*)(0x3FF-1)) );
 12883  005EFA  0E03               	movlw	3
 12884  005EFC  6F72               	movwf	(ee_read@addr+1)& (0+255),b
 12885  005EFE  0EFE               	movlw	254
 12886  005F00  6F71               	movwf	ee_read@addr& (0+255),b
 12887  005F02  EC97  F052         	call	_ee_read	;wreg free
 12888  005F06  6E2C               	movwf	_canID^0,c
 12889                           
 12890                           ;can18.c: 257: if (canID == 0xFF)
 12891  005F08  282C               	incf	_canID^0,w,c
 12892  005F0A  A4D8               	btfss	status,2,c
 12893  005F0C  D00D               	goto	l19087
 12894                           
 12895                           ;can18.c: 258: canID = 0x01;
 12896  005F0E  0E01               	movlw	1
 12897  005F10  6E2C               	movwf	_canID^0,c
 12898  005F12  D00A               	goto	l19087
 12899  005F14                     l1570:
 12900                           
 12901                           ; BSR set to: 0
 12902                           ;can18.c: 260: else;can18.c: 261: {;can18.c: 262: canID = initCanID;
 12903  005F14  C07B  F02C         	movff	canInit@initCanID,_canID
 12904                           
 12905                           ; BSR set to: 0
 12906                           ;can18.c: 263: ee_write((WORD)((BYTE*)(0x3FF-1)), canID);
 12907  005F18  0E03               	movlw	3
 12908  005F1A  6F74               	movwf	(ee_write@addr+1)& (0+255),b
 12909  005F1C  0EFE               	movlw	254
 12910  005F1E  6F73               	movwf	ee_write@addr& (0+255),b
 12911  005F20  C02C  F075         	movff	_canID,ee_write@data
 12912  005F24  EC1D  F04D         	call	_ee_write	;wreg free
 12913  005F28                     l19087:
 12914                           
 12915                           ;can18.c: 264: };can18.c: 268: TXB0CON = 0;
 12916  005F28  0E00               	movlw	0
 12917  005F2A  010F               	movlb	15	; () banked
 12918  005F2C  6F20               	movwf	32,b	;volatile
 12919                           
 12920                           ; BSR set to: 15
 12921                           ;can18.c: 269: TXB0CONbits.TXPRI0 = 0;
 12922  005F2E  9120               	bcf	32,0,b	;volatile
 12923                           
 12924                           ; BSR set to: 15
 12925                           ;can18.c: 270: TXB0CONbits.TXPRI1 = 0;
 12926  005F30  9320               	bcf	32,1,b	;volatile
 12927                           
 12928                           ; BSR set to: 15
 12929                           ;can18.c: 271: TXB0DLC = 0;
 12930  005F32  0E00               	movlw	0
 12931  005F34  6F25               	movwf	37,b	;volatile
 12932                           
 12933                           ; BSR set to: 15
 12934                           ;can18.c: 272: TXB0SIDH = 0b10110000 | ((canID & 0x78U) >>3U);
 12935  005F36  382C               	swapf	_canID^0,w,c
 12936  005F38  46E8               	rlncf	wreg,f,c
 12937  005F3A  0B1F               	andlw	31
 12938  005F3C  0B0F               	andlw	15
 12939  005F3E  09B0               	iorlw	176
 12940  005F40  6F21               	movwf	33,b	;volatile
 12941                           
 12942                           ; BSR set to: 15
 12943                           ;can18.c: 273: TXB0SIDL = (canID & 0x07U) << 5U;
 12944  005F42  C02C  F07C         	movff	_canID,??_canInit
 12945  005F46  0E07               	movlw	7
 12946  005F48  0100               	movlb	0	; () banked
 12947  005F4A  177C               	andwf	??_canInit& (0+255),f,b
 12948  005F4C  0E05               	movlw	5
 12949  005F4E  6F7D               	movwf	(??_canInit+1)& (0+255),b
 12950  005F50                     u23625:
 12951  005F50  90D8               	bcf	status,0,c
 12952  005F52  377C               	rlcf	??_canInit& (0+255),f,b
 12953  005F54  2F7D               	decfsz	(??_canInit+1)& (0+255),f,b
 12954  005F56  D7FC               	goto	u23625
 12955  005F58  517C               	movf	??_canInit& (0+255),w,b
 12956  005F5A  010F               	movlb	15	; () banked
 12957  005F5C  6F22               	movwf	34,b	;volatile
 12958                           
 12959                           ; BSR set to: 15
 12960                           ;can18.c: 277: TXB1CON = 0;
 12961  005F5E  0E00               	movlw	0
 12962  005F60  6F10               	movwf	16,b	;volatile
 12963                           
 12964                           ; BSR set to: 15
 12965                           ;can18.c: 278: TXB1CONbits.TXPRI0 = 0;
 12966  005F62  9110               	bcf	16,0,b	;volatile
 12967                           
 12968                           ; BSR set to: 15
 12969                           ;can18.c: 279: TXB1CONbits.TXPRI1 = 1;
 12970  005F64  8310               	bsf	16,1,b	;volatile
 12971                           
 12972                           ; BSR set to: 15
 12973                           ;can18.c: 280: TXB1DLC = 0x40;
 12974  005F66  0E40               	movlw	64
 12975  005F68  6F15               	movwf	21,b	;volatile
 12976                           
 12977                           ; BSR set to: 15
 12978                           ;can18.c: 281: TXB1SIDH = 0b10110000 | ((canID & 0x78U) >>3U);
 12979  005F6A  382C               	swapf	_canID^0,w,c
 12980  005F6C  46E8               	rlncf	wreg,f,c
 12981  005F6E  0B1F               	andlw	31
 12982  005F70  0B0F               	andlw	15
 12983  005F72  09B0               	iorlw	176
 12984  005F74  6F11               	movwf	17,b	;volatile
 12985                           
 12986                           ; BSR set to: 15
 12987                           ;can18.c: 282: TXB1SIDL = TXB0SIDL;
 12988  005F76  CF22 FF12          	movff	3874,3858	;volatile
 12989                           
 12990                           ; BSR set to: 15
 12991                           ;can18.c: 286: TXB2CON = 0;
 12992  005F7A  0E00               	movlw	0
 12993  005F7C  6F00               	movwf	0,b	;volatile
 12994                           
 12995                           ; BSR set to: 15
 12996                           ;can18.c: 287: TXB2CONbits.TXPRI0 = 1;
 12997  005F7E  8100               	bsf	0,0,b	;volatile
 12998                           
 12999                           ; BSR set to: 15
 13000                           ;can18.c: 288: TXB2CONbits.TXPRI1 = 1;
 13001  005F80  8300               	bsf	0,1,b	;volatile
 13002                           
 13003                           ; BSR set to: 15
 13004                           ;can18.c: 289: TXB2DLC = 0;
 13005  005F82  0E00               	movlw	0
 13006  005F84  6F05               	movwf	5,b	;volatile
 13007                           
 13008                           ; BSR set to: 15
 13009                           ;can18.c: 290: TXB2SIDH = 0b10110000 | ((canID & 0x78U) >>3U);
 13010  005F86  382C               	swapf	_canID^0,w,c
 13011  005F88  46E8               	rlncf	wreg,f,c
 13012  005F8A  0B1F               	andlw	31
 13013  005F8C  0B0F               	andlw	15
 13014  005F8E  09B0               	iorlw	176
 13015  005F90  6F01               	movwf	1,b	;volatile
 13016                           
 13017                           ; BSR set to: 15
 13018                           ;can18.c: 291: TXB2SIDL = TXB0SIDL;
 13019  005F92  CF22 FF02          	movff	3874,3842	;volatile
 13020                           
 13021                           ; BSR set to: 15
 13022                           ;can18.c: 295: enumerationRequired = enumerationInProgress = 0;
 13023  005F96  0E00               	movlw	0
 13024  005F98  6E07               	movwf	_enumerationInProgress^0,c
 13025  005F9A  C007  F009         	movff	_enumerationInProgress,_enumerationRequired
 13026                           
 13027                           ; BSR set to: 15
 13028                           ;can18.c: 296: enumerationStartTime.Val = tickGet();
 13029  005F9E  ECA3  F04B         	call	_tickGet	;wreg free
 13030  005FA2  C071  F1B0         	movff	?_tickGet,_enumerationStartTime
 13031  005FA6  C072  F1B1         	movff	?_tickGet+1,_enumerationStartTime+1
 13032  005FAA  C073  F1B2         	movff	?_tickGet+2,_enumerationStartTime+2
 13033  005FAE  C074  F1B3         	movff	?_tickGet+3,_enumerationStartTime+3
 13034                           
 13035                           ; BSR set to: 0
 13036                           ;can18.c: 300: PIE5bits.FIFOWMIE = 1;
 13037  005FB2  8076               	bsf	118,0,c	;volatile
 13038                           
 13039                           ; BSR set to: 0
 13040                           ;can18.c: 301: PIE5bits.ERRIE = 1;
 13041  005FB4  8A76               	bsf	118,5,c	;volatile
 13042                           
 13043                           ; BSR set to: 0
 13044  005FB6  0012               	return		;funcret
 13045  005FB8                     __end_of_canInit:
 13046                           	callstack 0
 13047                           
 13048 ;; *************** function _mioEventsInit *****************
 13049 ;; Defined at:
 13050 ;;		line 88 in file "../../github/CANMIOfirmware/mioEvents.c"
 13051 ;; Parameters:    Size  Location     Type
 13052 ;;		None
 13053 ;; Auto vars:     Size  Location     Type
 13054 ;;		None
 13055 ;; Return value:  Size  Location     Type
 13056 ;;                  1    wreg      void 
 13057 ;; Registers used:
 13058 ;;		wreg, status,2
 13059 ;; Tracked objects:
 13060 ;;		On entry : 3F/1
 13061 ;;		On exit  : 3F/1
 13062 ;;		Unchanged: 0/0
 13063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13064 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13065 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13066 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13067 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13068 ;;Total ram usage:        0 bytes
 13069 ;; Hardware stack levels used: 1
 13070 ;; Hardware stack levels required when called: 8
 13071 ;; This function calls:
 13072 ;;		Nothing
 13073 ;; This function is called by:
 13074 ;;		_initialise
 13075 ;; This function uses a non-reentrant model
 13076 ;;
 13077                           
 13078                           	psect	text38
 13079  00A63A                     __ptext38:
 13080                           	callstack 0
 13081  00A63A                     _mioEventsInit:
 13082                           	callstack 21
 13083                           
 13084                           ; BSR set to: 1
 13085                           ;mioEvents.c: 89: startWait.Val = 0;
 13086                           
 13087                           ; BSR set to: 0
 13088                           ;incstack = 0
 13089  00A63A  0E00               	movlw	0
 13090  00A63C  6FB8               	movwf	_startWait& (0+255),b
 13091  00A63E  0E00               	movlw	0
 13092  00A640  6FB9               	movwf	(_startWait+1)& (0+255),b
 13093  00A642  0E00               	movlw	0
 13094  00A644  6FBA               	movwf	(_startWait+2)& (0+255),b
 13095  00A646  0E00               	movlw	0
 13096  00A648  6FBB               	movwf	(_startWait+3)& (0+255),b
 13097                           
 13098                           ; BSR set to: 1
 13099  00A64A  0012               	return		;funcret
 13100  00A64C                     __end_of_mioEventsInit:
 13101                           	callstack 0
 13102                           
 13103 ;; *************** function _initTimedResponse *****************
 13104 ;; Defined at:
 13105 ;;		line 75 in file "../../github/CBUSlib/timedResponse.c"
 13106 ;; Parameters:    Size  Location     Type
 13107 ;;		None
 13108 ;; Auto vars:     Size  Location     Type
 13109 ;;		None
 13110 ;; Return value:  Size  Location     Type
 13111 ;;                  1    wreg      void 
 13112 ;; Registers used:
 13113 ;;		wreg, status,2
 13114 ;; Tracked objects:
 13115 ;;		On entry : 3F/0
 13116 ;;		On exit  : 3F/0
 13117 ;;		Unchanged: 3F/0
 13118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13119 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13120 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13121 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13122 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13123 ;;Total ram usage:        0 bytes
 13124 ;; Hardware stack levels used: 1
 13125 ;; Hardware stack levels required when called: 8
 13126 ;; This function calls:
 13127 ;;		Nothing
 13128 ;; This function is called by:
 13129 ;;		_initialise
 13130 ;; This function uses a non-reentrant model
 13131 ;;
 13132                           
 13133                           	psect	text39
 13134  00A700                     __ptext39:
 13135                           	callstack 0
 13136  00A700                     _initTimedResponse:
 13137                           	callstack 21
 13138                           
 13139                           ; BSR set to: 0
 13140                           ;timedResponse.c: 76: timedResponse = 0;
 13141                           
 13142                           ; BSR set to: 1
 13143                           ;incstack = 0
 13144  00A700  0E00               	movlw	0
 13145  00A702  6E14               	movwf	_timedResponse^0,c
 13146                           
 13147                           ; BSR set to: 0
 13148  00A704  0012               	return		;funcret
 13149  00A706                     __end_of_initTimedResponse:
 13150                           	callstack 0
 13151                           
 13152 ;; *************** function _initTicker *****************
 13153 ;; Defined at:
 13154 ;;		line 102 in file "../../github/CBUSlib/ticktime.c"
 13155 ;; Parameters:    Size  Location     Type
 13156 ;;  priority        1    wreg     unsigned char 
 13157 ;; Auto vars:     Size  Location     Type
 13158 ;;  priority        1   17[BANK0 ] unsigned char 
 13159 ;;  i               1   19[BANK0 ] unsigned char 
 13160 ;;  divider         1   18[BANK0 ] unsigned char 
 13161 ;; Return value:  Size  Location     Type
 13162 ;;                  1    wreg      void 
 13163 ;; Registers used:
 13164 ;;		wreg, status,2, status,0, cstack
 13165 ;; Tracked objects:
 13166 ;;		On entry : 0/1
 13167 ;;		On exit  : 0/0
 13168 ;;		Unchanged: 0/0
 13169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13170 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13171 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13172 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13173 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13174 ;;Total ram usage:        3 bytes
 13175 ;; Hardware stack levels used: 1
 13176 ;; Hardware stack levels required when called: 9
 13177 ;; This function calls:
 13178 ;;		_setclkMHz
 13179 ;; This function is called by:
 13180 ;;		_initialise
 13181 ;; This function uses a non-reentrant model
 13182 ;;
 13183                           
 13184                           	psect	text40
 13185  009E66                     __ptext40:
 13186                           	callstack 0
 13187  009E66                     _initTicker:
 13188                           	callstack 20
 13189                           
 13190                           ; BSR set to: 0
 13191                           ;incstack = 0
 13192                           ;initTicker@priority stored from wreg
 13193  009E66  0100               	movlb	0	; () banked
 13194  009E68  6F71               	movwf	initTicker@priority& (0+255),b
 13195                           
 13196                           ;ticktime.c: 104: BYTE divider, i;;ticktime.c: 106: setclkMHz();
 13197  009E6A  EC83  F053         	call	_setclkMHz	;wreg free
 13198                           
 13199                           ;ticktime.c: 107: divider = 0;
 13200  009E6E  0E00               	movlw	0
 13201  009E70  0100               	movlb	0	; () banked
 13202  009E72  6F72               	movwf	initTicker@divider& (0+255),b
 13203                           
 13204                           ; BSR set to: 0
 13205                           ;ticktime.c: 109: for (i=clkMHz;i>0;i>>=1)
 13206  009E74  C017  F073         	movff	_clkMHz,initTicker@i
 13207  009E78                     l11421:
 13208                           
 13209                           ; BSR set to: 0
 13210  009E78  5173               	movf	initTicker@i& (0+255),w,b
 13211  009E7A  B4D8               	btfsc	status,2,c
 13212  009E7C  D004               	goto	l2606
 13213                           
 13214                           ; BSR set to: 0
 13215                           ;ticktime.c: 110: divider++;
 13216  009E7E  2B72               	incf	initTicker@divider& (0+255),f,b
 13217                           
 13218                           ; BSR set to: 0
 13219  009E80  90D8               	bcf	status,0,c
 13220  009E82  3373               	rrcf	initTicker@i& (0+255),f,b
 13221  009E84  D7F9               	goto	l11421
 13222  009E86                     l2606:
 13223                           
 13224                           ; BSR set to: 0
 13225                           ;ticktime.c: 113: T0CON = (unsigned char)(0b00000000 | divider);
 13226  009E86  C072  FFD5         	movff	initTicker@divider,4053	;volatile
 13227                           
 13228                           ;ticktime.c: 114: INTCON2bits.TMR0IP = priority;
 13229  009E8A  B171               	btfsc	initTicker@priority& (0+255),0,b
 13230  009E8C  D002               	bra	u11605
 13231  009E8E  94F1               	bcf	241,2,c	;volatile
 13232  009E90  D001               	bra	u11606
 13233  009E92                     u11605:
 13234  009E92  84F1               	bsf	241,2,c	;volatile
 13235  009E94                     u11606:
 13236                           
 13237                           ;ticktime.c: 115: INTCONbits.TMR0IF = 0;
 13238  009E94  94F2               	bcf	242,2,c	;volatile
 13239                           
 13240                           ;ticktime.c: 116: INTCONbits.TMR0IE = 1;
 13241  009E96  8AF2               	bsf	242,5,c	;volatile
 13242                           
 13243                           ;ticktime.c: 117: T0CONbits.TMR0ON = 1;
 13244  009E98  8ED5               	bsf	213,7,c	;volatile
 13245                           
 13246                           ;ticktime.c: 119: timerExtension1 = 0;
 13247  009E9A  0E00               	movlw	0
 13248  009E9C  6E04               	movwf	_timerExtension1^0,c	;volatile
 13249                           
 13250                           ;ticktime.c: 120: timerExtension2 = 0;
 13251  009E9E  0E00               	movlw	0
 13252  009EA0  6E03               	movwf	_timerExtension2^0,c	;volatile
 13253  009EA2  0012               	return		;funcret
 13254  009EA4                     __end_of_initTicker:
 13255                           	callstack 0
 13256                           
 13257 ;; *************** function _setclkMHz *****************
 13258 ;; Defined at:
 13259 ;;		line 165 in file "../../github/CANMIOfirmware/hwsettings.c"
 13260 ;; Parameters:    Size  Location     Type
 13261 ;;		None
 13262 ;; Auto vars:     Size  Location     Type
 13263 ;;		None
 13264 ;; Return value:  Size  Location     Type
 13265 ;;                  1    wreg      void 
 13266 ;; Registers used:
 13267 ;;		wreg, status,2
 13268 ;; Tracked objects:
 13269 ;;		On entry : 0/0
 13270 ;;		On exit  : 0/0
 13271 ;;		Unchanged: 0/0
 13272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13273 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13274 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13275 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13276 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13277 ;;Total ram usage:        0 bytes
 13278 ;; Hardware stack levels used: 1
 13279 ;; Hardware stack levels required when called: 8
 13280 ;; This function calls:
 13281 ;;		Nothing
 13282 ;; This function is called by:
 13283 ;;		_initTicker
 13284 ;; This function uses a non-reentrant model
 13285 ;;
 13286                           
 13287                           	psect	text41
 13288  00A706                     __ptext41:
 13289                           	callstack 0
 13290  00A706                     _setclkMHz:
 13291                           	callstack 20
 13292                           
 13293                           ;hwsettings.c: 172: clkMHz= 64;
 13294                           
 13295                           ;incstack = 0
 13296  00A706  0E40               	movlw	64
 13297  00A708  6E17               	movwf	_clkMHz^0,c
 13298  00A70A  0012               	return		;funcret
 13299  00A70C                     __end_of_setclkMHz:
 13300                           	callstack 0
 13301                           
 13302 ;; *************** function _initServos *****************
 13303 ;; Defined at:
 13304 ;;		line 116 in file "../../github/CANMIOfirmware/servo.c"
 13305 ;; Parameters:    Size  Location     Type
 13306 ;;		None
 13307 ;; Auto vars:     Size  Location     Type
 13308 ;;  io              1   37[BANK0 ] unsigned char 
 13309 ;; Return value:  Size  Location     Type
 13310 ;;                  1    wreg      void 
 13311 ;; Registers used:
 13312 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13313 ;; Tracked objects:
 13314 ;;		On entry : 3F/F
 13315 ;;		On exit  : 3F/0
 13316 ;;		Unchanged: 0/0
 13317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13318 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13319 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13320 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13321 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13322 ;;Total ram usage:        5 bytes
 13323 ;; Hardware stack levels used: 1
 13324 ;; Hardware stack levels required when called: 11
 13325 ;; This function calls:
 13326 ;;		_ee_read
 13327 ;;		_setOutputPosition
 13328 ;;		_tickGet
 13329 ;; This function is called by:
 13330 ;;		_initialise
 13331 ;; This function uses a non-reentrant model
 13332 ;;
 13333                           
 13334                           	psect	text42
 13335  005A40                     __ptext42:
 13336                           	callstack 0
 13337  005A40                     _initServos:
 13338                           	callstack 18
 13339                           
 13340                           ; BSR set to: 15
 13341                           ;servo.c: 117: unsigned char io;;servo.c: 118: for (io=0; io<16U; io++) {
 13342                           
 13343                           ;incstack = 0
 13344  005A40  0E00               	movlw	0
 13345  005A42  0100               	movlb	0	; () banked
 13346  005A44  6F85               	movwf	initServos@io& (0+255),b
 13347  005A46                     l20335:
 13348                           
 13349                           ; BSR set to: 0
 13350                           ;servo.c: 120: if (NV->io[io].flags & 0x04U) {
 13351  005A46  5185               	movf	initServos@io& (0+255),w,b
 13352  005A48  0D07               	mullw	7
 13353  005A4A  C0EC  F081         	movff	_NV,??_initServos
 13354  005A4E  C0ED  F082         	movff	_NV+1,??_initServos+1
 13355  005A52  50F3               	movf	243,w,c
 13356  005A54  2781               	addwf	??_initServos& (0+255),f,b
 13357  005A56  50F4               	movf	244,w,c
 13358  005A58  2382               	addwfc	(??_initServos+1)& (0+255),f,b
 13359  005A5A  0E11               	movlw	17
 13360  005A5C  2581               	addwf	??_initServos& (0+255),w,b
 13361  005A5E  6ED9               	movwf	fsr2l,c
 13362  005A60  0E00               	movlw	0
 13363  005A62  2182               	addwfc	(??_initServos+1)& (0+255),w,b
 13364  005A64  6EDA               	movwf	fsr2h,c
 13365  005A66  A4DF               	btfss	indf2,2,c
 13366  005A68  D008               	goto	l20339
 13367                           
 13368                           ; BSR set to: 0
 13369                           ;servo.c: 122: servoState[io] = STOPPED;
 13370  005A6A  0E40               	movlw	low _servoState
 13371  005A6C  2585               	addwf	initServos@io& (0+255),w,b
 13372  005A6E  6ED9               	movwf	fsr2l,c
 13373  005A70  6ADA               	clrf	fsr2h,c
 13374  005A72  0E01               	movlw	high _servoState
 13375  005A74  22DA               	addwfc	fsr2h,f,c
 13376  005A76  0E01               	movlw	1
 13377  005A78  D007               	goto	L3
 13378  005A7A                     l20339:
 13379                           
 13380                           ; BSR set to: 0
 13381                           ;servo.c: 124: servoState[io] = OFF;
 13382  005A7A  0E40               	movlw	low _servoState
 13383  005A7C  2585               	addwf	initServos@io& (0+255),w,b
 13384  005A7E  6ED9               	movwf	fsr2l,c
 13385  005A80  6ADA               	clrf	fsr2h,c
 13386  005A82  0E01               	movlw	high _servoState
 13387  005A84  22DA               	addwfc	fsr2h,f,c
 13388  005A86  0E00               	movlw	0
 13389  005A88                     L3:
 13390  005A88  6EDF               	movwf	indf2,c
 13391                           
 13392                           ; BSR set to: 0
 13393                           ;servo.c: 125: };servo.c: 126: ticksWhenStopped[io].Val = tickGet();
 13394  005A8A  ECA3  F04B         	call	_tickGet	;wreg free
 13395  005A8E  5185               	movf	initServos@io& (0+255),w,b
 13396  005A90  0D04               	mullw	4
 13397  005A92  0E00               	movlw	low _ticksWhenStopped
 13398  005A94  24F3               	addwf	243,w,c
 13399  005A96  6ED9               	movwf	fsr2l,c
 13400  005A98  0E02               	movlw	high _ticksWhenStopped
 13401  005A9A  20F4               	addwfc	prodh,w,c
 13402  005A9C  6EDA               	movwf	fsr2h,c
 13403  005A9E  C071  FFDE         	movff	?_tickGet,postinc2
 13404  005AA2  C072  FFDE         	movff	?_tickGet+1,postinc2
 13405  005AA6  C073  FFDE         	movff	?_tickGet+2,postinc2
 13406  005AAA  C074  FFDE         	movff	?_tickGet+3,postinc2
 13407                           
 13408                           ; BSR set to: 0
 13409                           ;servo.c: 127: if ((NV->io[io].type == 2U) || (NV->io[io].type == 3U) || (NV->io[io].typ
      +                          e == 4U)) {
 13410  005AAE  5185               	movf	initServos@io& (0+255),w,b
 13411  005AB0  0D07               	mullw	7
 13412  005AB2  C0EC  F081         	movff	_NV,??_initServos
 13413  005AB6  C0ED  F082         	movff	_NV+1,??_initServos+1
 13414  005ABA  50F3               	movf	243,w,c
 13415  005ABC  2781               	addwf	??_initServos& (0+255),f,b
 13416  005ABE  50F4               	movf	244,w,c
 13417  005AC0  2382               	addwfc	(??_initServos+1)& (0+255),f,b
 13418  005AC2  0E10               	movlw	16
 13419  005AC4  2581               	addwf	??_initServos& (0+255),w,b
 13420  005AC6  6ED9               	movwf	fsr2l,c
 13421  005AC8  0E00               	movlw	0
 13422  005ACA  2182               	addwfc	(??_initServos+1)& (0+255),w,b
 13423  005ACC  6EDA               	movwf	fsr2h,c
 13424  005ACE  0E02               	movlw	2
 13425  005AD0  18DE               	xorwf	postinc2,w,c
 13426  005AD2  B4D8               	btfsc	status,2,c
 13427  005AD4  D028               	goto	u25300
 13428                           
 13429                           ; BSR set to: 0
 13430  005AD6  5185               	movf	initServos@io& (0+255),w,b
 13431  005AD8  0D07               	mullw	7
 13432  005ADA  C0EC  F081         	movff	_NV,??_initServos
 13433  005ADE  C0ED  F082         	movff	_NV+1,??_initServos+1
 13434  005AE2  50F3               	movf	243,w,c
 13435  005AE4  2781               	addwf	??_initServos& (0+255),f,b
 13436  005AE6  50F4               	movf	244,w,c
 13437  005AE8  2382               	addwfc	(??_initServos+1)& (0+255),f,b
 13438  005AEA  0E10               	movlw	16
 13439  005AEC  2581               	addwf	??_initServos& (0+255),w,b
 13440  005AEE  6ED9               	movwf	fsr2l,c
 13441  005AF0  0E00               	movlw	0
 13442  005AF2  2182               	addwfc	(??_initServos+1)& (0+255),w,b
 13443  005AF4  6EDA               	movwf	fsr2h,c
 13444  005AF6  0E03               	movlw	3
 13445  005AF8  18DE               	xorwf	postinc2,w,c
 13446  005AFA  B4D8               	btfsc	status,2,c
 13447  005AFC  D014               	goto	u25300
 13448                           
 13449                           ; BSR set to: 0
 13450  005AFE  5185               	movf	initServos@io& (0+255),w,b
 13451  005B00  0D07               	mullw	7
 13452  005B02  C0EC  F081         	movff	_NV,??_initServos
 13453  005B06  C0ED  F082         	movff	_NV+1,??_initServos+1
 13454  005B0A  50F3               	movf	243,w,c
 13455  005B0C  2781               	addwf	??_initServos& (0+255),f,b
 13456  005B0E  50F4               	movf	244,w,c
 13457  005B10  2382               	addwfc	(??_initServos+1)& (0+255),f,b
 13458  005B12  0E10               	movlw	16
 13459  005B14  2581               	addwf	??_initServos& (0+255),w,b
 13460  005B16  6ED9               	movwf	fsr2l,c
 13461  005B18  0E00               	movlw	0
 13462  005B1A  2182               	addwfc	(??_initServos+1)& (0+255),w,b
 13463  005B1C  6EDA               	movwf	fsr2h,c
 13464  005B1E  0E04               	movlw	4
 13465  005B20  18DE               	xorwf	postinc2,w,c
 13466  005B22  A4D8               	btfss	status,2,c
 13467  005B24  D059               	goto	l20355
 13468  005B26                     u25300:
 13469                           
 13470                           ; BSR set to: 0
 13471                           ;servo.c: 128: if (NV->io[io].flags & 0x04U) {
 13472  005B26  5185               	movf	initServos@io& (0+255),w,b
 13473  005B28  0D07               	mullw	7
 13474  005B2A  C0EC  F081         	movff	_NV,??_initServos
 13475  005B2E  C0ED  F082         	movff	_NV+1,??_initServos+1
 13476  005B32  50F3               	movf	243,w,c
 13477  005B34  2781               	addwf	??_initServos& (0+255),f,b
 13478  005B36  50F4               	movf	244,w,c
 13479  005B38  2382               	addwfc	(??_initServos+1)& (0+255),f,b
 13480  005B3A  0E11               	movlw	17
 13481  005B3C  2581               	addwf	??_initServos& (0+255),w,b
 13482  005B3E  6ED9               	movwf	fsr2l,c
 13483  005B40  0E00               	movlw	0
 13484  005B42  2182               	addwfc	(??_initServos+1)& (0+255),w,b
 13485  005B44  6EDA               	movwf	fsr2h,c
 13486  005B46  A4DF               	btfss	indf2,2,c
 13487  005B48  D020               	goto	l20353
 13488                           
 13489                           ; BSR set to: 0
 13490                           ;servo.c: 129: setOutputPosition(io, ee_read(((WORD)(((BYTE*)(0x3FF-40)))-17)+io), NV->i
      +                          o[io].type);
 13491  005B4A  0EC6               	movlw	198
 13492  005B4C  2585               	addwf	initServos@io& (0+255),w,b
 13493  005B4E  6F71               	movwf	ee_read@addr& (0+255),b
 13494  005B50  6B72               	clrf	(ee_read@addr+1)& (0+255),b
 13495  005B52  0E03               	movlw	3
 13496  005B54  2372               	addwfc	(ee_read@addr+1)& (0+255),f,b
 13497  005B56  EC97  F052         	call	_ee_read	;wreg free
 13498  005B5A  0100               	movlb	0	; () banked
 13499  005B5C  6F7C               	movwf	setOutputPosition@pos& (0+255),b
 13500  005B5E  5185               	movf	initServos@io& (0+255),w,b
 13501  005B60  0D07               	mullw	7
 13502  005B62  C0EC  F081         	movff	_NV,??_initServos
 13503  005B66  C0ED  F082         	movff	_NV+1,??_initServos+1
 13504  005B6A  50F3               	movf	243,w,c
 13505  005B6C  2781               	addwf	??_initServos& (0+255),f,b
 13506  005B6E  50F4               	movf	244,w,c
 13507  005B70  2382               	addwfc	(??_initServos+1)& (0+255),f,b
 13508  005B72  0E10               	movlw	16
 13509  005B74  2581               	addwf	??_initServos& (0+255),w,b
 13510  005B76  6ED9               	movwf	fsr2l,c
 13511  005B78  0E00               	movlw	0
 13512  005B7A  2182               	addwfc	(??_initServos+1)& (0+255),w,b
 13513  005B7C  6EDA               	movwf	fsr2h,c
 13514  005B7E  50DF               	movf	indf2,w,c
 13515  005B80  6F7D               	movwf	setOutputPosition@type& (0+255),b
 13516  005B82  5185               	movf	initServos@io& (0+255),w,b
 13517  005B84  ECAC  F047         	call	_setOutputPosition
 13518                           
 13519                           ;servo.c: 130: } else {
 13520  005B88  D027               	goto	l20355
 13521  005B8A                     l20353:
 13522                           
 13523                           ; BSR set to: 0
 13524                           ;servo.c: 131: setOutputPosition(io, NV->io[io].nv_io.nv_servo.servo_start_pos, NV->io[i
      +                          o].type);
 13525  005B8A  5185               	movf	initServos@io& (0+255),w,b
 13526  005B8C  0D07               	mullw	7
 13527  005B8E  C0EC  F081         	movff	_NV,??_initServos
 13528  005B92  C0ED  F082         	movff	_NV+1,??_initServos+1
 13529  005B96  50F3               	movf	243,w,c
 13530  005B98  2781               	addwf	??_initServos& (0+255),f,b
 13531  005B9A  50F4               	movf	244,w,c
 13532  005B9C  2382               	addwfc	(??_initServos+1)& (0+255),f,b
 13533  005B9E  0E12               	movlw	18
 13534  005BA0  2581               	addwf	??_initServos& (0+255),w,b
 13535  005BA2  6ED9               	movwf	fsr2l,c
 13536  005BA4  0E00               	movlw	0
 13537  005BA6  2182               	addwfc	(??_initServos+1)& (0+255),w,b
 13538  005BA8  6EDA               	movwf	fsr2h,c
 13539  005BAA  50DF               	movf	indf2,w,c
 13540  005BAC  6F7C               	movwf	setOutputPosition@pos& (0+255),b
 13541  005BAE  5185               	movf	initServos@io& (0+255),w,b
 13542  005BB0  0D07               	mullw	7
 13543  005BB2  C0EC  F083         	movff	_NV,??_initServos+2
 13544  005BB6  C0ED  F084         	movff	_NV+1,??_initServos+3
 13545  005BBA  50F3               	movf	243,w,c
 13546  005BBC  2783               	addwf	(??_initServos+2)& (0+255),f,b
 13547  005BBE  50F4               	movf	244,w,c
 13548  005BC0  2384               	addwfc	(??_initServos+3)& (0+255),f,b
 13549  005BC2  0E10               	movlw	16
 13550  005BC4  2583               	addwf	(??_initServos+2)& (0+255),w,b
 13551  005BC6  6ED9               	movwf	fsr2l,c
 13552  005BC8  0E00               	movlw	0
 13553  005BCA  2184               	addwfc	(??_initServos+3)& (0+255),w,b
 13554  005BCC  6EDA               	movwf	fsr2h,c
 13555  005BCE  50DF               	movf	indf2,w,c
 13556  005BD0  6F7D               	movwf	setOutputPosition@type& (0+255),b
 13557  005BD2  5185               	movf	initServos@io& (0+255),w,b
 13558  005BD4  ECAC  F047         	call	_setOutputPosition
 13559  005BD8                     l20355:
 13560                           
 13561                           ; BSR set to: 0
 13562                           ;servo.c: 132: };servo.c: 133: };servo.c: 134: stepsPerPollSpeed[io] = 0;
 13563  005BD8  0E30               	movlw	low _stepsPerPollSpeed
 13564  005BDA  2585               	addwf	initServos@io& (0+255),w,b
 13565  005BDC  6ED9               	movwf	fsr2l,c
 13566  005BDE  6ADA               	clrf	fsr2h,c
 13567  005BE0  0E01               	movlw	high _stepsPerPollSpeed
 13568  005BE2  22DA               	addwfc	fsr2h,f,c
 13569  005BE4  0E00               	movlw	0
 13570  005BE6  6EDF               	movwf	indf2,c
 13571                           
 13572                           ; BSR set to: 0
 13573  005BE8  2B85               	incf	initServos@io& (0+255),f,b
 13574                           
 13575                           ; BSR set to: 0
 13576  005BEA  0E0F               	movlw	15
 13577  005BEC  6585               	cpfsgt	initServos@io& (0+255),b
 13578  005BEE  D72B               	goto	l20335
 13579                           
 13580                           ; BSR set to: 0
 13581                           ;servo.c: 135: };servo.c: 138: T1GCONbits.TMR1GE = 0;
 13582  005BF0  9EAA               	bcf	170,7,c	;volatile
 13583                           
 13584                           ; BSR set to: 0
 13585                           ;servo.c: 139: T1CONbits.TMR1CS = 0;
 13586  005BF2  0E3F               	movlw	-193
 13587  005BF4  16CD               	andwf	205,f,c	;volatile
 13588                           
 13589                           ;servo.c: 140: T1CONbits.T1CKPS = 2;
 13590  005BF6  50CD               	movf	205,w,c	;volatile
 13591  005BF8  0BCF               	andlw	-49
 13592  005BFA  0920               	iorlw	32
 13593  005BFC  6ECD               	movwf	205,c	;volatile
 13594                           
 13595                           ; BSR set to: 0
 13596                           ;servo.c: 141: T1CONbits.SOSCEN = 1;
 13597  005BFE  86CD               	bsf	205,3,c	;volatile
 13598                           
 13599                           ; BSR set to: 0
 13600                           ;servo.c: 142: T1CONbits.RD16 = 1;
 13601  005C00  82CD               	bsf	205,1,c	;volatile
 13602                           
 13603                           ; BSR set to: 0
 13604                           ;servo.c: 143: PIE1bits.TMR1IE = 1;
 13605  005C02  809D               	bsf	157,0,c	;volatile
 13606                           
 13607                           ; BSR set to: 0
 13608                           ;servo.c: 145: T3GCONbits.TMR3GE = 0;
 13609  005C04  9EB0               	bcf	176,7,c	;volatile
 13610                           
 13611                           ;servo.c: 146: T3CONbits.TMR3CS = 0;
 13612  005C06  0E3F               	movlw	-193
 13613  005C08  16B1               	andwf	177,f,c	;volatile
 13614                           
 13615                           ;servo.c: 147: T3CONbits.T3CKPS = 2;
 13616  005C0A  50B1               	movf	177,w,c	;volatile
 13617  005C0C  0BCF               	andlw	-49
 13618  005C0E  0920               	iorlw	32
 13619  005C10  6EB1               	movwf	177,c	;volatile
 13620                           
 13621                           ; BSR set to: 0
 13622                           ;servo.c: 148: T3CONbits.SOSCEN = 1;
 13623  005C12  86B1               	bsf	177,3,c	;volatile
 13624                           
 13625                           ; BSR set to: 0
 13626                           ;servo.c: 149: T3CONbits.RD16 = 1;
 13627  005C14  82B1               	bsf	177,1,c	;volatile
 13628                           
 13629                           ; BSR set to: 0
 13630                           ;servo.c: 150: PIE2bits.TMR3IE = 1;
 13631  005C16  82A0               	bsf	160,1,c	;volatile
 13632                           
 13633                           ; BSR set to: 0
 13634                           ;servo.c: 152: servoInBlock = io - 1U;
 13635  005C18  0585               	decf	initServos@io& (0+255),w,b
 13636  005C1A  6E12               	movwf	_servoInBlock^0,c
 13637                           
 13638                           ; BSR set to: 0
 13639  005C1C  0012               	return		;funcret
 13640  005C1E                     __end_of_initServos:
 13641                           	callstack 0
 13642                           
 13643 ;; *************** function _setOutputPosition *****************
 13644 ;; Defined at:
 13645 ;;		line 137 in file "../../github/CANMIOfirmware/outputs.c"
 13646 ;; Parameters:    Size  Location     Type
 13647 ;;  io              1    wreg     unsigned char 
 13648 ;;  pos             1   28[BANK0 ] unsigned char 
 13649 ;;  type            1   29[BANK0 ] unsigned char 
 13650 ;; Auto vars:     Size  Location     Type
 13651 ;;  io              1   32[BANK0 ] unsigned char 
 13652 ;; Return value:  Size  Location     Type
 13653 ;;                  1    wreg      void 
 13654 ;; Registers used:
 13655 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13656 ;; Tracked objects:
 13657 ;;		On entry : 3F/0
 13658 ;;		On exit  : 3F/0
 13659 ;;		Unchanged: 0/0
 13660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13661 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13662 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13663 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13664 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13665 ;;Total ram usage:        5 bytes
 13666 ;; Hardware stack levels used: 1
 13667 ;; Hardware stack levels required when called: 10
 13668 ;; This function calls:
 13669 ;;		_setDigitalOutput
 13670 ;;		_setOutputPin
 13671 ;;		_setServoPosition
 13672 ;; This function is called by:
 13673 ;;		_initServos
 13674 ;; This function uses a non-reentrant model
 13675 ;;
 13676                           
 13677                           	psect	text43
 13678  008F58                     __ptext43:
 13679                           	callstack 0
 13680  008F58                     _setOutputPosition:
 13681                           	callstack 18
 13682                           
 13683                           ; BSR set to: 0
 13684                           ;incstack = 0
 13685                           ;setOutputPosition@io stored from wreg
 13686  008F58  6F80               	movwf	setOutputPosition@io& (0+255),b
 13687                           
 13688                           ;outputs.c: 138: switch(type) {
 13689  008F5A  D022               	goto	l20057
 13690  008F5C                     l20045:
 13691                           
 13692                           ; BSR set to: 0
 13693                           ;outputs.c: 145: setDigitalOutput(io, pos);
 13694  008F5C  C07C  F077         	movff	setOutputPosition@pos,setDigitalOutput@state
 13695  008F60  5180               	movf	setOutputPosition@io& (0+255),w,b
 13696  008F62  ECBC  F03F         	call	_setDigitalOutput
 13697  008F66  0012               	return	
 13698  008F68                     l20049:
 13699                           
 13700                           ; BSR set to: 0
 13701                           ;outputs.c: 151: case 4U:;outputs.c: 154: case 2U:;outputs.c: 155: setServoPosition(io, 
      +                          pos);
 13702  008F68  C07C  F071         	movff	setOutputPosition@pos,setServoPosition@pos
 13703  008F6C  5180               	movf	setOutputPosition@io& (0+255),w,b
 13704  008F6E  ECCA  F051         	call	_setServoPosition
 13705                           
 13706                           ; BSR set to: 0
 13707                           ;outputs.c: 156: setOutputPin(io, (NV->io[io].flags & 0x20U));
 13708  008F72  5180               	movf	setOutputPosition@io& (0+255),w,b
 13709  008F74  0D07               	mullw	7
 13710  008F76  C0EC  F07E         	movff	_NV,??_setOutputPosition
 13711  008F7A  C0ED  F07F         	movff	_NV+1,??_setOutputPosition+1
 13712  008F7E  50F3               	movf	243,w,c
 13713  008F80  277E               	addwf	??_setOutputPosition& (0+255),f,b
 13714  008F82  50F4               	movf	244,w,c
 13715  008F84  237F               	addwfc	(??_setOutputPosition+1)& (0+255),f,b
 13716  008F86  0E11               	movlw	17
 13717  008F88  257E               	addwf	??_setOutputPosition& (0+255),w,b
 13718  008F8A  6ED9               	movwf	fsr2l,c
 13719  008F8C  0E00               	movlw	0
 13720  008F8E  217F               	addwfc	(??_setOutputPosition+1)& (0+255),w,b
 13721  008F90  6EDA               	movwf	fsr2h,c
 13722  008F92  50DF               	movf	indf2,w,c
 13723  008F94  0B20               	andlw	32
 13724  008F96  6F71               	movwf	setOutputPin@state& (0+255),b
 13725  008F98  5180               	movf	setOutputPosition@io& (0+255),w,b
 13726  008F9A  EC90  F031         	call	_setOutputPin
 13727  008F9E  0012               	return	
 13728  008FA0                     l20057:
 13729  008FA0  0100               	movlb	0	; () banked
 13730  008FA2  517D               	movf	setOutputPosition@type& (0+255),w,b
 13731                           
 13732                           ; Switch size 1, requested type "simple"
 13733                           ; Number of cases is 7, Range of values is 0 to 6
 13734                           ; switch strategies available:
 13735                           ; Name         Instructions Cycles
 13736                           ; simple_byte           22    12 (average)
 13737                           ;	Chosen strategy is simple_byte
 13738  008FA4  0A00               	xorlw	0	; case 0
 13739  008FA6  B4D8               	btfsc	status,2,c
 13740  008FA8  0012               	return	
 13741  008FAA  0A01               	xorlw	1	; case 1
 13742  008FAC  B4D8               	btfsc	status,2,c
 13743  008FAE  D7D6               	goto	l20045
 13744  008FB0  0A03               	xorlw	3	; case 2
 13745  008FB2  B4D8               	btfsc	status,2,c
 13746  008FB4  D7D9               	goto	l20049
 13747  008FB6  0A01               	xorlw	1	; case 3
 13748  008FB8  B4D8               	btfsc	status,2,c
 13749  008FBA  D7D6               	goto	l20049
 13750  008FBC  0A07               	xorlw	7	; case 4
 13751  008FBE  B4D8               	btfsc	status,2,c
 13752  008FC0  D7D3               	goto	l20049
 13753  008FC2  0A01               	xorlw	1	; case 5
 13754  008FC4  B4D8               	btfsc	status,2,c
 13755  008FC6  0012               	return	
 13756  008FC8  0A03               	xorlw	3	; case 6
 13757  008FCA  0012               	return	
 13758  008FCC                     __end_of_setOutputPosition:
 13759                           	callstack 0
 13760                           
 13761 ;; *************** function _setServoPosition *****************
 13762 ;; Defined at:
 13763 ;;		line 624 in file "../../github/CANMIOfirmware/servo.c"
 13764 ;; Parameters:    Size  Location     Type
 13765 ;;  io              1    wreg     unsigned char 
 13766 ;;  pos             1   17[BANK0 ] unsigned char 
 13767 ;; Auto vars:     Size  Location     Type
 13768 ;;  io              1   18[BANK0 ] unsigned char 
 13769 ;; Return value:  Size  Location     Type
 13770 ;;                  1    wreg      void 
 13771 ;; Registers used:
 13772 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 13773 ;; Tracked objects:
 13774 ;;		On entry : 3F/0
 13775 ;;		On exit  : 3F/0
 13776 ;;		Unchanged: 0/0
 13777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13778 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13779 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13780 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13781 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13782 ;;Total ram usage:        2 bytes
 13783 ;; Hardware stack levels used: 1
 13784 ;; Hardware stack levels required when called: 8
 13785 ;; This function calls:
 13786 ;;		Nothing
 13787 ;; This function is called by:
 13788 ;;		_setOutputPosition
 13789 ;; This function uses a non-reentrant model
 13790 ;;
 13791                           
 13792                           	psect	text44
 13793  00A394                     __ptext44:
 13794                           	callstack 0
 13795  00A394                     _setServoPosition:
 13796                           	callstack 19
 13797                           
 13798                           ; BSR set to: 0
 13799                           ;incstack = 0
 13800                           ;setServoPosition@io stored from wreg
 13801  00A394  6F72               	movwf	setServoPosition@io& (0+255),b
 13802                           
 13803                           ;servo.c: 625: targetPos[io] = pos;
 13804  00A396  0E70               	movlw	low _targetPos
 13805  00A398  0100               	movlb	0	; () banked
 13806  00A39A  2572               	addwf	setServoPosition@io& (0+255),w,b
 13807  00A39C  6ED9               	movwf	fsr2l,c
 13808  00A39E  6ADA               	clrf	fsr2h,c
 13809  00A3A0  0E01               	movlw	high _targetPos
 13810  00A3A2  22DA               	addwfc	fsr2h,f,c
 13811  00A3A4  C071  FFDF         	movff	setServoPosition@pos,indf2
 13812                           
 13813                           ;servo.c: 626: currentPos[io] = pos;
 13814  00A3A8  0E80               	movlw	low _currentPos
 13815  00A3AA  2572               	addwf	setServoPosition@io& (0+255),w,b
 13816  00A3AC  6ED9               	movwf	fsr2l,c
 13817  00A3AE  6ADA               	clrf	fsr2h,c
 13818  00A3B0  0E01               	movlw	high _currentPos
 13819  00A3B2  22DA               	addwfc	fsr2h,f,c
 13820  00A3B4  C071  FFDF         	movff	setServoPosition@pos,indf2
 13821                           
 13822                           ; BSR set to: 0
 13823  00A3B8  0012               	return		;funcret
 13824  00A3BA                     __end_of_setServoPosition:
 13825                           	callstack 0
 13826                           
 13827 ;; *************** function _initOutputs *****************
 13828 ;; Defined at:
 13829 ;;		line 87 in file "../../github/CANMIOfirmware/digitalOut.c"
 13830 ;; Parameters:    Size  Location     Type
 13831 ;;		None
 13832 ;; Auto vars:     Size  Location     Type
 13833 ;;  io              1   17[BANK0 ] unsigned char 
 13834 ;; Return value:  Size  Location     Type
 13835 ;;                  1    wreg      void 
 13836 ;; Registers used:
 13837 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 13838 ;; Tracked objects:
 13839 ;;		On entry : 3F/0
 13840 ;;		On exit  : 3F/0
 13841 ;;		Unchanged: 0/0
 13842 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13843 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13844 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13845 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13846 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13847 ;;Total ram usage:        1 bytes
 13848 ;; Hardware stack levels used: 1
 13849 ;; Hardware stack levels required when called: 8
 13850 ;; This function calls:
 13851 ;;		Nothing
 13852 ;; This function is called by:
 13853 ;;		_initialise
 13854 ;; This function uses a non-reentrant model
 13855 ;;
 13856                           
 13857                           	psect	text45
 13858  00A28A                     __ptext45:
 13859                           	callstack 0
 13860  00A28A                     _initOutputs:
 13861                           	callstack 21
 13862                           
 13863                           ; BSR set to: 0
 13864                           ;digitalOut.c: 89: unsigned char io;;digitalOut.c: 90: for (io=0; io<16U; io++) {
 13865                           
 13866                           ; BSR set to: 0
 13867                           ;incstack = 0
 13868  00A28A  0E00               	movlw	0
 13869  00A28C  6F71               	movwf	initOutputs@io& (0+255),b
 13870  00A28E                     l15975:
 13871                           
 13872                           ; BSR set to: 0
 13873                           ;digitalOut.c: 91: pulseDelays[io] = 0;
 13874  00A28E  0EA4               	movlw	low _pulseDelays
 13875  00A290  2571               	addwf	initOutputs@io& (0+255),w,b
 13876  00A292  6ED9               	movwf	fsr2l,c
 13877  00A294  6ADA               	clrf	fsr2h,c
 13878  00A296  0E02               	movlw	high _pulseDelays
 13879  00A298  22DA               	addwfc	fsr2h,f,c
 13880  00A29A  0E00               	movlw	0
 13881  00A29C  6EDF               	movwf	indf2,c
 13882                           
 13883                           ;digitalOut.c: 92: flashDelays[io] = 0;
 13884  00A29E  0E60               	movlw	low _flashDelays
 13885  00A2A0  2571               	addwf	initOutputs@io& (0+255),w,b
 13886  00A2A2  6ED9               	movwf	fsr2l,c
 13887  00A2A4  6ADA               	clrf	fsr2h,c
 13888  00A2A6  0E01               	movlw	high _flashDelays
 13889  00A2A8  22DA               	addwfc	fsr2h,f,c
 13890  00A2AA  0E00               	movlw	0
 13891  00A2AC  6EDF               	movwf	indf2,c
 13892                           
 13893                           ; BSR set to: 0
 13894  00A2AE  2B71               	incf	initOutputs@io& (0+255),f,b
 13895                           
 13896                           ; BSR set to: 0
 13897  00A2B0  0E0F               	movlw	15
 13898  00A2B2  6571               	cpfsgt	initOutputs@io& (0+255),b
 13899  00A2B4  D7EC               	goto	l15975
 13900  00A2B6  0012               	return	
 13901  00A2B8                     __end_of_initOutputs:
 13902                           	callstack 0
 13903                           
 13904 ;; *************** function _initInputScan *****************
 13905 ;; Defined at:
 13906 ;;		line 75 in file "../../github/CANMIOfirmware/inputs.c"
 13907 ;; Parameters:    Size  Location     Type
 13908 ;;		None
 13909 ;; Auto vars:     Size  Location     Type
 13910 ;;  input           1   24[BANK0 ] unsigned char 
 13911 ;; Return value:  Size  Location     Type
 13912 ;;                  1    wreg      void 
 13913 ;; Registers used:
 13914 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13915 ;; Tracked objects:
 13916 ;;		On entry : 3F/0
 13917 ;;		On exit  : 3F/0
 13918 ;;		Unchanged: 0/0
 13919 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13920 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13921 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13922 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13923 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13924 ;;Total ram usage:        3 bytes
 13925 ;; Hardware stack levels used: 1
 13926 ;; Hardware stack levels required when called: 9
 13927 ;; This function calls:
 13928 ;;		_ee_read
 13929 ;;		_readInput
 13930 ;; This function is called by:
 13931 ;;		_initialise
 13932 ;; This function uses a non-reentrant model
 13933 ;;
 13934                           
 13935                           	psect	text46
 13936  007C98                     __ptext46:
 13937                           	callstack 0
 13938  007C98                     _initInputScan:
 13939                           	callstack 20
 13940                           
 13941                           ; BSR set to: 0
 13942                           ;inputs.c: 76: for (io=0; io<16U; io++) {
 13943                           
 13944                           ; BSR set to: 0
 13945                           ;incstack = 0
 13946  007C98  0E00               	movlw	0
 13947  007C9A  6FE7               	movwf	_io& (0+255),b
 13948  007C9C                     l20301:
 13949                           
 13950                           ; BSR set to: 0
 13951  007C9C  0E0F               	movlw	15
 13952  007C9E  65E7               	cpfsgt	_io& (0+255),b
 13953  007CA0  D001               	goto	l20305
 13954  007CA2  0012               	return	
 13955  007CA4                     l20305:
 13956                           
 13957                           ; BSR set to: 0
 13958                           ;inputs.c: 77: BYTE input = readInput(io);
 13959  007CA4  51E7               	movf	_io& (0+255),w,b
 13960  007CA6  EC12  F037         	call	_readInput
 13961  007CAA  6F78               	movwf	initInputScan@input& (0+255),b
 13962                           
 13963                           ; BSR set to: 0
 13964                           ;inputs.c: 78: inputState[io] = input;
 13965  007CAC  0E94               	movlw	low _inputState
 13966  007CAE  25E7               	addwf	_io& (0+255),w,b
 13967  007CB0  6ED9               	movwf	fsr2l,c
 13968  007CB2  6ADA               	clrf	fsr2h,c
 13969  007CB4  0E02               	movlw	high _inputState
 13970  007CB6  22DA               	addwfc	fsr2h,f,c
 13971  007CB8  C078  FFDF         	movff	initInputScan@input,indf2
 13972                           
 13973                           ; BSR set to: 0
 13974                           ;inputs.c: 79: if (!(NV->io[io].flags & 0x01U)) {
 13975  007CBC  51E7               	movf	_io& (0+255),w,b
 13976  007CBE  0D07               	mullw	7
 13977  007CC0  C0EC  F076         	movff	_NV,??_initInputScan
 13978  007CC4  C0ED  F077         	movff	_NV+1,??_initInputScan+1
 13979  007CC8  50F3               	movf	243,w,c
 13980  007CCA  2776               	addwf	??_initInputScan& (0+255),f,b
 13981  007CCC  50F4               	movf	244,w,c
 13982  007CCE  2377               	addwfc	(??_initInputScan+1)& (0+255),f,b
 13983  007CD0  0E11               	movlw	17
 13984  007CD2  2576               	addwf	??_initInputScan& (0+255),w,b
 13985  007CD4  6ED9               	movwf	fsr2l,c
 13986  007CD6  0E00               	movlw	0
 13987  007CD8  2177               	addwfc	(??_initInputScan+1)& (0+255),w,b
 13988  007CDA  6EDA               	movwf	fsr2h,c
 13989  007CDC  B0DF               	btfsc	indf2,0,c
 13990  007CDE  D007               	goto	l20313
 13991                           
 13992                           ; BSR set to: 0
 13993                           ;inputs.c: 80: input = (BYTE)(!input);
 13994  007CE0  5178               	movf	initInputScan@input& (0+255),w,b
 13995  007CE2  A4D8               	btfss	status,2,c
 13996  007CE4  D002               	goto	u25240
 13997  007CE6  0E01               	movlw	1
 13998  007CE8  D001               	goto	u25250
 13999  007CEA                     u25240:
 14000  007CEA  0E00               	movlw	0
 14001  007CEC                     u25250:
 14002  007CEC  6F78               	movwf	initInputScan@input& (0+255),b
 14003  007CEE                     l20313:
 14004                           
 14005                           ; BSR set to: 0
 14006                           ;inputs.c: 81: };inputs.c: 82: outputState[io] = input;
 14007  007CEE  0E50               	movlw	low _outputState
 14008  007CF0  25E7               	addwf	_io& (0+255),w,b
 14009  007CF2  6ED9               	movwf	fsr2l,c
 14010  007CF4  6ADA               	clrf	fsr2h,c
 14011  007CF6  0E01               	movlw	high _outputState
 14012  007CF8  22DA               	addwfc	fsr2h,f,c
 14013  007CFA  C078  FFDF         	movff	initInputScan@input,indf2
 14014                           
 14015                           ; BSR set to: 0
 14016                           ;inputs.c: 83: if (NV->io[io].flags & 0x10U) {
 14017  007CFE  51E7               	movf	_io& (0+255),w,b
 14018  007D00  0D07               	mullw	7
 14019  007D02  C0EC  F076         	movff	_NV,??_initInputScan
 14020  007D06  C0ED  F077         	movff	_NV+1,??_initInputScan+1
 14021  007D0A  50F3               	movf	243,w,c
 14022  007D0C  2776               	addwf	??_initInputScan& (0+255),f,b
 14023  007D0E  50F4               	movf	244,w,c
 14024  007D10  2377               	addwfc	(??_initInputScan+1)& (0+255),f,b
 14025  007D12  0E11               	movlw	17
 14026  007D14  2576               	addwf	??_initInputScan& (0+255),w,b
 14027  007D16  6ED9               	movwf	fsr2l,c
 14028  007D18  0E00               	movlw	0
 14029  007D1A  2177               	addwfc	(??_initInputScan+1)& (0+255),w,b
 14030  007D1C  6EDA               	movwf	fsr2h,c
 14031  007D1E  A8DF               	btfss	indf2,4,c
 14032  007D20  D00F               	goto	l20319
 14033                           
 14034                           ; BSR set to: 0
 14035                           ;inputs.c: 84: outputState[io] = ee_read(((WORD)(((BYTE*)(0x3FF-40)))-17)+io);
 14036  007D22  0E50               	movlw	low _outputState
 14037  007D24  25E7               	addwf	_io& (0+255),w,b
 14038  007D26  6ED9               	movwf	fsr2l,c
 14039  007D28  6ADA               	clrf	fsr2h,c
 14040  007D2A  0E01               	movlw	high _outputState
 14041  007D2C  22DA               	addwfc	fsr2h,f,c
 14042  007D2E  0EC6               	movlw	198
 14043  007D30  25E7               	addwf	_io& (0+255),w,b
 14044  007D32  6F71               	movwf	ee_read@addr& (0+255),b
 14045  007D34  6B72               	clrf	(ee_read@addr+1)& (0+255),b
 14046  007D36  0E03               	movlw	3
 14047  007D38  2372               	addwfc	(ee_read@addr+1)& (0+255),f,b
 14048  007D3A  EC97  F052         	call	_ee_read	;wreg free
 14049  007D3E  6EDF               	movwf	indf2,c
 14050  007D40                     l20319:
 14051                           
 14052                           ;inputs.c: 85: };inputs.c: 86: delayCount[io] = 0;
 14053  007D40  0E84               	movlw	low _delayCount
 14054  007D42  0100               	movlb	0	; () banked
 14055  007D44  25E7               	addwf	_io& (0+255),w,b
 14056  007D46  6ED9               	movwf	fsr2l,c
 14057  007D48  6ADA               	clrf	fsr2h,c
 14058  007D4A  0E02               	movlw	high _delayCount
 14059  007D4C  22DA               	addwfc	fsr2h,f,c
 14060  007D4E  0E00               	movlw	0
 14061  007D50  6EDF               	movwf	indf2,c
 14062                           
 14063                           ; BSR set to: 0
 14064  007D52  2BE7               	incf	_io& (0+255),f,b
 14065  007D54  D7A3               	goto	l20301
 14066  007D56                     __end_of_initInputScan:
 14067                           	callstack 0
 14068                           
 14069 ;; *************** function _readInput *****************
 14070 ;; Defined at:
 14071 ;;		line 173 in file "../../github/CANMIOfirmware/inputs.c"
 14072 ;; Parameters:    Size  Location     Type
 14073 ;;  io              1    wreg     unsigned char 
 14074 ;; Auto vars:     Size  Location     Type
 14075 ;;  io              1   21[BANK0 ] unsigned char 
 14076 ;; Return value:  Size  Location     Type
 14077 ;;                  1    wreg      unsigned char 
 14078 ;; Registers used:
 14079 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 14080 ;; Tracked objects:
 14081 ;;		On entry : 3F/0
 14082 ;;		On exit  : 3F/0
 14083 ;;		Unchanged: 0/0
 14084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14085 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14086 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14087 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14088 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14089 ;;Total ram usage:        5 bytes
 14090 ;; Hardware stack levels used: 1
 14091 ;; Hardware stack levels required when called: 8
 14092 ;; This function calls:
 14093 ;;		Nothing
 14094 ;; This function is called by:
 14095 ;;		_initInputScan
 14096 ;;		_inputScan
 14097 ;; This function uses a non-reentrant model
 14098 ;;
 14099                           
 14100                           	psect	text47
 14101  006E24                     __ptext47:
 14102                           	callstack 0
 14103  006E24                     _readInput:
 14104                           	callstack 21
 14105                           
 14106                           ; BSR set to: 0
 14107                           ;incstack = 0
 14108                           ;readInput@io stored from wreg
 14109  006E24  6F75               	movwf	readInput@io& (0+255),b
 14110                           
 14111                           ;inputs.c: 174: if (NV->io[io].type == 0U) {
 14112  006E26  0100               	movlb	0	; () banked
 14113  006E28  5175               	movf	readInput@io& (0+255),w,b
 14114  006E2A  0D07               	mullw	7
 14115  006E2C  C0EC  F071         	movff	_NV,??_readInput
 14116  006E30  C0ED  F072         	movff	_NV+1,??_readInput+1
 14117  006E34  50F3               	movf	243,w,c
 14118  006E36  2771               	addwf	??_readInput& (0+255),f,b
 14119  006E38  50F4               	movf	244,w,c
 14120  006E3A  2372               	addwfc	(??_readInput+1)& (0+255),f,b
 14121  006E3C  0E10               	movlw	16
 14122  006E3E  2571               	addwf	??_readInput& (0+255),w,b
 14123  006E40  6ED9               	movwf	fsr2l,c
 14124  006E42  0E00               	movlw	0
 14125  006E44  2172               	addwfc	(??_readInput+1)& (0+255),w,b
 14126  006E46  6EDA               	movwf	fsr2h,c
 14127  006E48  50DF               	movf	indf2,w,c
 14128  006E4A  B4D8               	btfsc	status,2,c
 14129  006E4C  D058               	goto	l10977
 14130  006E4E  D070               	goto	l10979
 14131  006E50                     l10963:
 14132                           
 14133                           ; BSR set to: 0
 14134                           ;inputs.c: 177: return PORTA & (1U<<configs[io].no);
 14135  006E50  5175               	movf	readInput@io& (0+255),w,b
 14136  006E52  0D04               	mullw	4
 14137  006E54  CFF3 F071          	movff	prodl,??_readInput
 14138  006E58  0E02               	movlw	2
 14139  006E5A  2771               	addwf	??_readInput& (0+255),f,b
 14140  006E5C  5171               	movf	??_readInput& (0+255),w,b
 14141  006E5E  0F01               	addlw	low _configs
 14142  006E60  6F72               	movwf	(??_readInput+1)& (0+255),b
 14143  006E62  C072  FFF6         	movff	??_readInput+1,tblptrl
 14144  006E66                     	if	1	;There is more than 1 active tblptr byte
 14145  006E66  0E0F               	movlw	high __smallconst
 14146  006E68  6EF7               	movwf	tblptrh,c
 14147  006E6A                     	endif
 14148  006E6A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 14149  006E6A  6AF8               	clrf	tblptru,c
 14150  006E6C                     	endif
 14151  006E6C                     	if	0	;tblptru may be non-zero
 14152  006E6C                     	endif
 14153  006E6C  0008               	tblrd		*
 14154  006E6E  CFF5 F073          	movff	tablat,??_readInput+2
 14155  006E72  0E01               	movlw	1
 14156  006E74  6F74               	movwf	(??_readInput+3)& (0+255),b
 14157  006E76  2B73               	incf	(??_readInput+2)& (0+255),f,b
 14158  006E78  D002               	goto	u11124
 14159  006E7A                     u11125:
 14160  006E7A  90D8               	bcf	status,0,c
 14161  006E7C  3774               	rlcf	(??_readInput+3)& (0+255),f,b
 14162  006E7E                     u11124:
 14163  006E7E  2F73               	decfsz	(??_readInput+2)& (0+255),f,b
 14164  006E80  D7FC               	goto	u11125
 14165  006E82  0100               	movlb	0	; () banked
 14166  006E84  5174               	movf	(??_readInput+3)& (0+255),w,b
 14167  006E86  1480               	andwf	128,w,c	;volatile
 14168  006E88  0012               	return	
 14169  006E8A                     l10967:
 14170                           
 14171                           ; BSR set to: 0
 14172                           ;inputs.c: 179: return PORTB & (1U<<configs[io].no);
 14173  006E8A  5175               	movf	readInput@io& (0+255),w,b
 14174  006E8C  0D04               	mullw	4
 14175  006E8E  CFF3 F071          	movff	prodl,??_readInput
 14176  006E92  0E02               	movlw	2
 14177  006E94  2771               	addwf	??_readInput& (0+255),f,b
 14178  006E96  5171               	movf	??_readInput& (0+255),w,b
 14179  006E98  0F01               	addlw	low _configs
 14180  006E9A  6F72               	movwf	(??_readInput+1)& (0+255),b
 14181  006E9C  C072  FFF6         	movff	??_readInput+1,tblptrl
 14182  006EA0                     	if	1	;There is more than 1 active tblptr byte
 14183  006EA0  0E0F               	movlw	high __smallconst
 14184  006EA2  6EF7               	movwf	tblptrh,c
 14185  006EA4                     	endif
 14186  006EA4                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 14187  006EA4  6AF8               	clrf	tblptru,c
 14188  006EA6                     	endif
 14189  006EA6                     	if	0	;tblptru may be non-zero
 14190  006EA6                     	endif
 14191  006EA6  0008               	tblrd		*
 14192  006EA8  CFF5 F073          	movff	tablat,??_readInput+2
 14193  006EAC  0E01               	movlw	1
 14194  006EAE  6F74               	movwf	(??_readInput+3)& (0+255),b
 14195  006EB0  2B73               	incf	(??_readInput+2)& (0+255),f,b
 14196  006EB2  D002               	goto	u11134
 14197  006EB4                     u11135:
 14198  006EB4  90D8               	bcf	status,0,c
 14199  006EB6  3774               	rlcf	(??_readInput+3)& (0+255),f,b
 14200  006EB8                     u11134:
 14201  006EB8  2F73               	decfsz	(??_readInput+2)& (0+255),f,b
 14202  006EBA  D7FC               	goto	u11135
 14203  006EBC  0100               	movlb	0	; () banked
 14204  006EBE  5174               	movf	(??_readInput+3)& (0+255),w,b
 14205  006EC0  1481               	andwf	129,w,c	;volatile
 14206  006EC2  0012               	return	
 14207  006EC4                     l10971:
 14208                           
 14209                           ; BSR set to: 0
 14210                           ;inputs.c: 181: return PORTC & (1U<<configs[io].no);
 14211  006EC4  5175               	movf	readInput@io& (0+255),w,b
 14212  006EC6  0D04               	mullw	4
 14213  006EC8  CFF3 F071          	movff	prodl,??_readInput
 14214  006ECC  0E02               	movlw	2
 14215  006ECE  2771               	addwf	??_readInput& (0+255),f,b
 14216  006ED0  5171               	movf	??_readInput& (0+255),w,b
 14217  006ED2  0F01               	addlw	low _configs
 14218  006ED4  6F72               	movwf	(??_readInput+1)& (0+255),b
 14219  006ED6  C072  FFF6         	movff	??_readInput+1,tblptrl
 14220  006EDA                     	if	1	;There is more than 1 active tblptr byte
 14221  006EDA  0E0F               	movlw	high __smallconst
 14222  006EDC  6EF7               	movwf	tblptrh,c
 14223  006EDE                     	endif
 14224  006EDE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 14225  006EDE  6AF8               	clrf	tblptru,c
 14226  006EE0                     	endif
 14227  006EE0                     	if	0	;tblptru may be non-zero
 14228  006EE0                     	endif
 14229  006EE0  0008               	tblrd		*
 14230  006EE2  CFF5 F073          	movff	tablat,??_readInput+2
 14231  006EE6  0E01               	movlw	1
 14232  006EE8  6F74               	movwf	(??_readInput+3)& (0+255),b
 14233  006EEA  2B73               	incf	(??_readInput+2)& (0+255),f,b
 14234  006EEC  D002               	goto	u11144
 14235  006EEE                     u11145:
 14236  006EEE  90D8               	bcf	status,0,c
 14237  006EF0  3774               	rlcf	(??_readInput+3)& (0+255),f,b
 14238  006EF2                     u11144:
 14239  006EF2  2F73               	decfsz	(??_readInput+2)& (0+255),f,b
 14240  006EF4  D7FC               	goto	u11145
 14241  006EF6  0100               	movlb	0	; () banked
 14242  006EF8  5174               	movf	(??_readInput+3)& (0+255),w,b
 14243  006EFA  1482               	andwf	130,w,c	;volatile
 14244  006EFC  0012               	return	
 14245  006EFE                     l10977:
 14246                           
 14247                           ; BSR set to: 0
 14248  006EFE  5175               	movf	readInput@io& (0+255),w,b
 14249  006F00  0D04               	mullw	4
 14250  006F02  CFF3 F071          	movff	prodl,??_readInput
 14251  006F06  0E01               	movlw	1
 14252  006F08  2771               	addwf	??_readInput& (0+255),f,b
 14253  006F0A  5171               	movf	??_readInput& (0+255),w,b
 14254  006F0C  0F01               	addlw	low _configs
 14255  006F0E  6F72               	movwf	(??_readInput+1)& (0+255),b
 14256  006F10  C072  FFF6         	movff	??_readInput+1,tblptrl
 14257  006F14                     	if	1	;There is more than 1 active tblptr byte
 14258  006F14  0E0F               	movlw	high __smallconst
 14259  006F16  6EF7               	movwf	tblptrh,c
 14260  006F18                     	endif
 14261  006F18                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 14262  006F18  6AF8               	clrf	tblptru,c
 14263  006F1A                     	endif
 14264  006F1A                     	if	0	;tblptru may be non-zero
 14265  006F1A                     	endif
 14266  006F1A  0008               	tblrd		*
 14267  006F1C  50F5               	movf	tablat,w,c
 14268                           
 14269                           ; Switch size 1, requested type "simple"
 14270                           ; Number of cases is 3, Range of values is 65 to 67
 14271                           ; switch strategies available:
 14272                           ; Name         Instructions Cycles
 14273                           ; simple_byte           10     6 (average)
 14274                           ;	Chosen strategy is simple_byte
 14275  006F1E  0A41               	xorlw	65	; case 65
 14276  006F20  B4D8               	btfsc	status,2,c
 14277  006F22  D796               	goto	l10963
 14278  006F24  0A03               	xorlw	3	; case 66
 14279  006F26  B4D8               	btfsc	status,2,c
 14280  006F28  D7B0               	goto	l10967
 14281  006F2A  0A01               	xorlw	1	; case 67
 14282  006F2C  B4D8               	btfsc	status,2,c
 14283  006F2E  D7CA               	goto	l10971
 14284  006F30                     l10979:
 14285                           
 14286                           ; BSR set to: 0
 14287                           ;inputs.c: 183: };inputs.c: 184: return 0;
 14288  006F30  0E00               	movlw	0
 14289                           
 14290                           ; BSR set to: 0
 14291  006F32  0012               	return		;funcret
 14292  006F34                     __end_of_readInput:
 14293                           	callstack 0
 14294                           
 14295 ;; *************** function _initAnalogue *****************
 14296 ;; Defined at:
 14297 ;;		line 51 in file "../../github/CANMIOfirmware/analogue.c"
 14298 ;; Parameters:    Size  Location     Type
 14299 ;;		None
 14300 ;; Auto vars:     Size  Location     Type
 14301 ;;		None
 14302 ;; Return value:  Size  Location     Type
 14303 ;;                  1    wreg      void 
 14304 ;; Registers used:
 14305 ;;		wreg, status,2
 14306 ;; Tracked objects:
 14307 ;;		On entry : 3F/1
 14308 ;;		On exit  : 3F/0
 14309 ;;		Unchanged: 0/0
 14310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14311 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14312 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14313 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14314 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14315 ;;Total ram usage:        0 bytes
 14316 ;; Hardware stack levels used: 1
 14317 ;; Hardware stack levels required when called: 8
 14318 ;; This function calls:
 14319 ;;		Nothing
 14320 ;; This function is called by:
 14321 ;;		_initialise
 14322 ;; This function uses a non-reentrant model
 14323 ;;
 14324                           
 14325                           	psect	text48
 14326  00A006                     __ptext48:
 14327                           	callstack 0
 14328  00A006                     _initAnalogue:
 14329                           	callstack 21
 14330                           
 14331                           ; BSR set to: 1
 14332                           ;analogue.c: 52: ADCON1bits.VCFG = 0;
 14333                           
 14334                           ; BSR set to: 0
 14335                           ;incstack = 0
 14336  00A006  0ECF               	movlw	-49
 14337  00A008  16C1               	andwf	193,f,c	;volatile
 14338                           
 14339                           ; BSR set to: 1
 14340                           ;analogue.c: 53: ADCON1bits.VNCFG = 0;
 14341  00A00A  96C1               	bcf	193,3,c	;volatile
 14342                           
 14343                           ;analogue.c: 54: ADCON1bits.TRIGSEL = 1;
 14344  00A00C  50C1               	movf	193,w,c	;volatile
 14345  00A00E  0B3F               	andlw	-193
 14346  00A010  0940               	iorlw	64
 14347  00A012  6EC1               	movwf	193,c	;volatile
 14348                           
 14349                           ;analogue.c: 55: ADCON1bits.CHSN = 0;
 14350  00A014  0EF8               	movlw	-8
 14351  00A016  16C1               	andwf	193,f,c	;volatile
 14352                           
 14353                           ; BSR set to: 1
 14354                           ;analogue.c: 56: ADCON2bits.ADFM = 1;
 14355  00A018  8EC0               	bsf	192,7,c	;volatile
 14356                           
 14357                           ;analogue.c: 57: ADCON2bits.ACQT = 2;
 14358  00A01A  50C0               	movf	192,w,c	;volatile
 14359  00A01C  0BC7               	andlw	-57
 14360  00A01E  0910               	iorlw	16
 14361  00A020  6EC0               	movwf	192,c	;volatile
 14362                           
 14363                           ;analogue.c: 58: ADCON2bits.ADCS = 6;
 14364  00A022  50C0               	movf	192,w,c	;volatile
 14365  00A024  0BF8               	andlw	-8
 14366  00A026  0906               	iorlw	6
 14367  00A028  6EC0               	movwf	192,c	;volatile
 14368                           
 14369                           ;analogue.c: 60: portInProgress = 0;
 14370  00A02A  0E00               	movlw	0
 14371  00A02C  0100               	movlb	0	; () banked
 14372  00A02E  6FE8               	movwf	_portInProgress& (0+255),b
 14373                           
 14374                           ; BSR set to: 0
 14375                           ;analogue.c: 61: ADCON0bits.ADON = 1;
 14376  00A030  80C2               	bsf	194,0,c	;volatile
 14377                           
 14378                           ;analogue.c: 63: setupState = 0U;
 14379  00A032  0E00               	movlw	0
 14380  00A034  6E19               	movwf	_setupState^0,c
 14381                           
 14382                           ;analogue.c: 64: haveRequestedAdc = 0;
 14383  00A036  0E00               	movlw	0
 14384  00A038  6E18               	movwf	_haveRequestedAdc^0,c
 14385                           
 14386                           ; BSR set to: 0
 14387  00A03A  0012               	return		;funcret
 14388  00A03C                     __end_of_initAnalogue:
 14389                           	callstack 0
 14390                           
 14391 ;; *************** function _actionQueueInit *****************
 14392 ;; Defined at:
 14393 ;;		line 58 in file "../../github/CANMIOfirmware/actionQueue.c"
 14394 ;; Parameters:    Size  Location     Type
 14395 ;;		None
 14396 ;; Auto vars:     Size  Location     Type
 14397 ;;		None
 14398 ;; Return value:  Size  Location     Type
 14399 ;;                  1    wreg      void 
 14400 ;; Registers used:
 14401 ;;		wreg, status,2, status,0
 14402 ;; Tracked objects:
 14403 ;;		On entry : 3F/F
 14404 ;;		On exit  : 3F/1
 14405 ;;		Unchanged: 0/0
 14406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14407 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14408 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14409 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14410 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14411 ;;Total ram usage:        0 bytes
 14412 ;; Hardware stack levels used: 1
 14413 ;; Hardware stack levels required when called: 8
 14414 ;; This function calls:
 14415 ;;		Nothing
 14416 ;; This function is called by:
 14417 ;;		_initialise
 14418 ;; This function uses a non-reentrant model
 14419 ;;
 14420                           
 14421                           	psect	text49
 14422  00A10C                     __ptext49:
 14423                           	callstack 0
 14424  00A10C                     _actionQueueInit:
 14425                           	callstack 21
 14426                           
 14427                           ; BSR set to: 15
 14428                           ;actionQueue.c: 59: normalQueue.size = 64;
 14429                           
 14430                           ; BSR set to: 0
 14431                           ;incstack = 0
 14432  00A10C  0E40               	movlw	64
 14433  00A10E  0101               	movlb	1	; () banked
 14434  00A110  6FE8               	movwf	_normalQueue& (0+255),b
 14435                           
 14436                           ;actionQueue.c: 60: normalQueue.readIdx = 0;
 14437  00A112  0E00               	movlw	0
 14438  00A114  6FE9               	movwf	(_normalQueue+1)& (0+255),b
 14439                           
 14440                           ;actionQueue.c: 61: normalQueue.writeIdx = 0;
 14441  00A116  0E00               	movlw	0
 14442  00A118  6FEA               	movwf	(_normalQueue+2)& (0+255),b
 14443                           
 14444                           ; BSR set to: 1
 14445                           ;actionQueue.c: 62: normalQueue.queue = normalQueueBuf;
 14446  00A11A  0E88               	movlw	low _normalQueueBuf
 14447  00A11C  6FEB               	movwf	(_normalQueue+3)& (0+255),b
 14448  00A11E  0E03               	movlw	high _normalQueueBuf
 14449  00A120  6FEC               	movwf	(_normalQueue+4)& (0+255),b
 14450                           
 14451                           ; BSR set to: 1
 14452                           ;actionQueue.c: 64: expeditedQueue.size = 8;
 14453  00A122  0E08               	movlw	8
 14454  00A124  6FE3               	movwf	_expeditedQueue& (0+255),b
 14455                           
 14456                           ; BSR set to: 1
 14457                           ;actionQueue.c: 65: expeditedQueue.readIdx = 0;
 14458  00A126  0E00               	movlw	0
 14459  00A128  6FE4               	movwf	(_expeditedQueue+1)& (0+255),b
 14460                           
 14461                           ; BSR set to: 1
 14462                           ;actionQueue.c: 66: expeditedQueue.writeIdx = 0;
 14463  00A12A  0E00               	movlw	0
 14464  00A12C  6FE5               	movwf	(_expeditedQueue+2)& (0+255),b
 14465                           
 14466                           ;actionQueue.c: 67: expeditedQueue.queue = expeditedQueueBuf;
 14467  00A12E  0EC4               	movlw	low _expeditedQueueBuf
 14468  00A130  6FE6               	movwf	(_expeditedQueue+3)& (0+255),b
 14469  00A132  0E02               	movlw	high _expeditedQueueBuf
 14470  00A134  6FE7               	movwf	(_expeditedQueue+4)& (0+255),b
 14471                           
 14472                           ; BSR set to: 1
 14473                           ;actionQueue.c: 69: expedited = 0;
 14474  00A136  0E00               	movlw	0
 14475  00A138  6E1B               	movwf	_expedited^0,c
 14476                           
 14477                           ; BSR set to: 1
 14478  00A13A  0012               	return		;funcret
 14479  00A13C                     __end_of_actionQueueInit:
 14480                           	callstack 0
 14481                           
 14482 ;; *************** function _initStatusLeds *****************
 14483 ;; Defined at:
 14484 ;;		line 65 in file "../../github/CBUSlib/StatusLeds.c"
 14485 ;; Parameters:    Size  Location     Type
 14486 ;;		None
 14487 ;; Auto vars:     Size  Location     Type
 14488 ;;		None
 14489 ;; Return value:  Size  Location     Type
 14490 ;;                  1    wreg      void 
 14491 ;; Registers used:
 14492 ;;		wreg, status,2
 14493 ;; Tracked objects:
 14494 ;;		On entry : 3F/0
 14495 ;;		On exit  : 3F/1
 14496 ;;		Unchanged: 0/0
 14497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14498 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14499 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14500 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14501 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14502 ;;Total ram usage:        0 bytes
 14503 ;; Hardware stack levels used: 1
 14504 ;; Hardware stack levels required when called: 8
 14505 ;; This function calls:
 14506 ;;		Nothing
 14507 ;; This function is called by:
 14508 ;;		_main
 14509 ;; This function uses a non-reentrant model
 14510 ;;
 14511                           
 14512                           	psect	text50
 14513  00A498                     __ptext50:
 14514                           	callstack 0
 14515  00A498                     _initStatusLeds:
 14516                           	callstack 22
 14517                           
 14518                           ; BSR set to: 0
 14519                           ;StatusLeds.c: 67: TRISBbits.TRISB6 = 0;
 14520                           
 14521                           ; BSR set to: 1
 14522                           ;incstack = 0
 14523  00A498  9C93               	bcf	147,6,c	;volatile
 14524                           
 14525                           ;StatusLeds.c: 68: TRISBbits.TRISB7 = 0;
 14526  00A49A  9E93               	bcf	147,7,c	;volatile
 14527                           
 14528                           ;StatusLeds.c: 69: LATBbits.LATB6 = 0;
 14529  00A49C  9C8A               	bcf	138,6,c	;volatile
 14530                           
 14531                           ;StatusLeds.c: 70: LATBbits.LATB7 = 0;
 14532  00A49E  9E8A               	bcf	138,7,c	;volatile
 14533                           
 14534                           ; BSR set to: 0
 14535                           ;StatusLeds.c: 71: flashState = flNone;
 14536  00A4A0  0E00               	movlw	0
 14537  00A4A2  0101               	movlb	1	; () banked
 14538  00A4A4  6FD3               	movwf	_flashState& (0+255),b
 14539                           
 14540                           ;StatusLeds.c: 72: flickerTime.Val = 0;
 14541  00A4A6  0E00               	movlw	0
 14542  00A4A8  6FA0               	movwf	_flickerTime& (0+255),b
 14543  00A4AA  0E00               	movlw	0
 14544  00A4AC  6FA1               	movwf	(_flickerTime+1)& (0+255),b
 14545  00A4AE  0E00               	movlw	0
 14546  00A4B0  6FA2               	movwf	(_flickerTime+2)& (0+255),b
 14547  00A4B2  0E00               	movlw	0
 14548  00A4B4  6FA3               	movwf	(_flickerTime+3)& (0+255),b
 14549                           
 14550                           ; BSR set to: 1
 14551  00A4B6  0012               	return		;funcret
 14552  00A4B8                     __end_of_initStatusLeds:
 14553                           	callstack 0
 14554                           
 14555 ;; *************** function _initRomOps *****************
 14556 ;; Defined at:
 14557 ;;		line 88 in file "../../github/CBUSlib/romops.c"
 14558 ;; Parameters:    Size  Location     Type
 14559 ;;		None
 14560 ;; Auto vars:     Size  Location     Type
 14561 ;;		None
 14562 ;; Return value:  Size  Location     Type
 14563 ;;                  1    wreg      void 
 14564 ;; Registers used:
 14565 ;;		wreg, status,2
 14566 ;; Tracked objects:
 14567 ;;		On entry : 3F/0
 14568 ;;		On exit  : 3F/1
 14569 ;;		Unchanged: 0/0
 14570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14571 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14572 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14573 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14574 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14575 ;;Total ram usage:        0 bytes
 14576 ;; Hardware stack levels used: 1
 14577 ;; Hardware stack levels required when called: 8
 14578 ;; This function calls:
 14579 ;;		Nothing
 14580 ;; This function is called by:
 14581 ;;		_main
 14582 ;; This function uses a non-reentrant model
 14583 ;;
 14584                           
 14585                           	psect	text51
 14586  00A690                     __ptext51:
 14587                           	callstack 0
 14588  00A690                     _initRomOps:
 14589                           	callstack 22
 14590                           
 14591                           ; BSR set to: 0
 14592                           ;romops.c: 91: flashFlags.asByte = 0;
 14593                           
 14594                           ; BSR set to: 1
 14595                           ;incstack = 0
 14596  00A690  0E00               	movlw	0
 14597  00A692  6E05               	movwf	_flashFlags^0,c
 14598                           
 14599                           ; BSR set to: 0
 14600                           ;romops.c: 92: flashblock = 0xFFFF;
 14601  00A694  0101               	movlb	1	; () banked
 14602  00A696  69F6               	setf	_flashblock& (0+255),b
 14603  00A698  69F7               	setf	(_flashblock+1)& (0+255),b
 14604                           
 14605                           ; BSR set to: 1
 14606  00A69A  0012               	return		;funcret
 14607  00A69C                     __end_of_initRomOps:
 14608                           	callstack 0
 14609                           
 14610 ;; *************** function _doTimedResponse *****************
 14611 ;; Defined at:
 14612 ;;		line 83 in file "../../github/CBUSlib/timedResponse.c"
 14613 ;; Parameters:    Size  Location     Type
 14614 ;;		None
 14615 ;; Auto vars:     Size  Location     Type
 14616 ;;  n               2  115[BANK0 ] unsigned int 
 14617 ;; Return value:  Size  Location     Type
 14618 ;;                  1    wreg      void 
 14619 ;; Registers used:
 14620 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14621 ;; Tracked objects:
 14622 ;;		On entry : 3F/0
 14623 ;;		On exit  : 3E/0
 14624 ;;		Unchanged: 0/0
 14625 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14626 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14627 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14628 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14629 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14630 ;;Total ram usage:        2 bytes
 14631 ;; Hardware stack levels used: 1
 14632 ;; Hardware stack levels required when called: 18
 14633 ;; This function calls:
 14634 ;;		_APP_doSOD
 14635 ;;		_cbusSendOpcMyNN
 14636 ;;		_getEN
 14637 ;;		_getNN
 14638 ;;		_tableIndexToEvtIdx
 14639 ;;		_validStart
 14640 ;; This function is called by:
 14641 ;;		_main
 14642 ;; This function uses a non-reentrant model
 14643 ;;
 14644                           
 14645                           	psect	text52
 14646  008A3A                     __ptext52:
 14647                           	callstack 0
 14648  008A3A                     _doTimedResponse:
 14649                           	callstack 12
 14650                           
 14651                           ; BSR set to: 0
 14652                           ;timedResponse.c: 85: switch (timedResponse) {
 14653                           
 14654                           ; BSR set to: 1
 14655                           ;incstack = 0
 14656  008A3A  D03B               	goto	l21605
 14657  008A3C                     l21571:
 14658                           
 14659                           ;timedResponse.c: 90: timedResponse = 0;
 14660  008A3C  0E00               	movlw	0
 14661  008A3E  6E14               	movwf	_timedResponse^0,c
 14662                           
 14663                           ;timedResponse.c: 91: timedResponseStep = 0;
 14664  008A40  0E00               	movlw	0
 14665  008A42  6E13               	movwf	_timedResponseStep^0,c
 14666  008A44  0012               	return	
 14667  008A46                     l21577:
 14668                           
 14669                           ; BSR set to: 0
 14670  008A46  5013               	movf	_timedResponseStep^0,w,c
 14671  008A48  ECDC  F01E         	call	_APP_doSOD
 14672                           
 14673                           ; Switch size 1, requested type "simple"
 14674                           ; Number of cases is 2, Range of values is 0 to 1
 14675                           ; switch strategies available:
 14676                           ; Name         Instructions Cycles
 14677                           ; simple_byte            7     4 (average)
 14678                           ;	Chosen strategy is simple_byte
 14679  008A4C  0A00               	xorlw	0	; case 0
 14680  008A4E  B4D8               	btfsc	status,2,c
 14681  008A50  D7F5               	goto	l21571
 14682  008A52  0A01               	xorlw	1	; case 1
 14683  008A54  B4D8               	btfsc	status,2,c
 14684  008A56  0012               	return	
 14685  008A58  D033               	goto	l21607
 14686  008A5A                     l21579:
 14687                           
 14688                           ; BSR set to: 0
 14689                           ;timedResponse.c: 102: if (timedResponseStep >= 255U) {
 14690  008A5A  2813               	incf	_timedResponseStep^0,w,c
 14691  008A5C  B4D8               	btfsc	status,2,c
 14692  008A5E  D7EE               	goto	l21571
 14693                           
 14694                           ; BSR set to: 0
 14695                           ;timedResponse.c: 106: };timedResponse.c: 108: if (validStart(timedResponseStep)) {
 14696  008A60  5013               	movf	_timedResponseStep^0,w,c
 14697  008A62  ECFE  F050         	call	_validStart
 14698  008A66  0900               	iorlw	0
 14699  008A68  B4D8               	btfsc	status,2,c
 14700  008A6A  D02A               	goto	l21607
 14701                           
 14702                           ; BSR set to: 0
 14703                           ;timedResponse.c: 109: WORD n = getNN(timedResponseStep);
 14704  008A6C  5013               	movf	_timedResponseStep^0,w,c
 14705  008A6E  ECA8  F043         	call	_getNN
 14706  008A72  C07D  F0D3         	movff	?_getNN,doTimedResponse@n
 14707  008A76  C07E  F0D4         	movff	?_getNN+1,doTimedResponse@n+1
 14708                           
 14709                           ; BSR set to: 0
 14710                           ;timedResponse.c: 110: cbusMsg[d3] = n >> 8;
 14711  008A7A  C0D4  F025         	movff	doTimedResponse@n+1,_cbusMsg+9
 14712                           
 14713                           ; BSR set to: 0
 14714                           ;timedResponse.c: 111: cbusMsg[d4] = n & 0xFF;
 14715  008A7E  C0D3  F026         	movff	doTimedResponse@n,_cbusMsg+10
 14716                           
 14717                           ;timedResponse.c: 113: n = getEN(timedResponseStep);
 14718  008A82  5013               	movf	_timedResponseStep^0,w,c
 14719  008A84  EC1F  F048         	call	_getEN
 14720  008A88  C07D  F0D3         	movff	?_getEN,doTimedResponse@n
 14721  008A8C  C07E  F0D4         	movff	?_getEN+1,doTimedResponse@n+1
 14722                           
 14723                           ; BSR set to: 0
 14724                           ;timedResponse.c: 114: cbusMsg[d5] = n >> 8;
 14725  008A90  C0D4  F027         	movff	doTimedResponse@n+1,_cbusMsg+11
 14726                           
 14727                           ; BSR set to: 0
 14728                           ;timedResponse.c: 115: cbusMsg[d6] = n & 0xFF;
 14729  008A94  C0D3  F028         	movff	doTimedResponse@n,_cbusMsg+12
 14730                           
 14731                           ; BSR set to: 0
 14732                           ;timedResponse.c: 117: cbusMsg[d7] = tableIndexToEvtIdx(timedResponseStep);
 14733  008A98  5013               	movf	_timedResponseStep^0,w,c
 14734  008A9A  EC72  F053         	call	_tableIndexToEvtIdx
 14735  008A9E  6E29               	movwf	(_cbusMsg+13)^0,c
 14736                           
 14737                           ; BSR set to: 0
 14738                           ;timedResponse.c: 118: if (!cbusSendOpcMyNN( 0, 0xF2, cbusMsg )) {
 14739  008AA0  0EF2               	movlw	242
 14740  008AA2  6F91               	movwf	cbusSendOpcMyNN@opc& (0+255),b
 14741  008AA4  0E1C               	movlw	low _cbusMsg
 14742  008AA6  6F92               	movwf	cbusSendOpcMyNN@msg& (0+255),b
 14743  008AA8  0E00               	movlw	0
 14744  008AAA  EC6B  F052         	call	_cbusSendOpcMyNN
 14745  008AAE  0900               	iorlw	0
 14746  008AB0  D7D1               	goto	L4
 14747  008AB2                     l21605:
 14748                           
 14749                           ; BSR set to: 0
 14750  008AB2  5014               	movf	_timedResponse^0,w,c
 14751                           
 14752                           ; Switch size 1, requested type "simple"
 14753                           ; Number of cases is 2, Range of values is 1 to 2
 14754                           ; switch strategies available:
 14755                           ; Name         Instructions Cycles
 14756                           ; simple_byte            7     4 (average)
 14757                           ;	Chosen strategy is simple_byte
 14758  008AB4  0A01               	xorlw	1	; case 1
 14759  008AB6  B4D8               	btfsc	status,2,c
 14760  008AB8  D7C6               	goto	l21577
 14761  008ABA  0A03               	xorlw	3	; case 2
 14762  008ABC  B4D8               	btfsc	status,2,c
 14763  008ABE  D7CD               	goto	l21579
 14764  008AC0                     l21607:
 14765                           
 14766                           ;timedResponse.c: 125: timedResponseStep++;
 14767  008AC0  2A13               	incf	_timedResponseStep^0,f,c
 14768  008AC2  0012               	return		;funcret
 14769  008AC4                     __end_of_doTimedResponse:
 14770                           	callstack 0
 14771                           
 14772 ;; *************** function _tableIndexToEvtIdx *****************
 14773 ;; Defined at:
 14774 ;;		line 847 in file "../../github/CBUSlib/events.c"
 14775 ;; Parameters:    Size  Location     Type
 14776 ;;  tableIndex      1    wreg     unsigned char 
 14777 ;; Auto vars:     Size  Location     Type
 14778 ;;  tableIndex      1   17[BANK0 ] unsigned char 
 14779 ;; Return value:  Size  Location     Type
 14780 ;;                  1    wreg      unsigned char 
 14781 ;; Registers used:
 14782 ;;		wreg, status,2, status,0
 14783 ;; Tracked objects:
 14784 ;;		On entry : 3F/0
 14785 ;;		On exit  : 3F/0
 14786 ;;		Unchanged: 0/0
 14787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14788 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14789 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14790 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14791 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14792 ;;Total ram usage:        1 bytes
 14793 ;; Hardware stack levels used: 1
 14794 ;; Hardware stack levels required when called: 8
 14795 ;; This function calls:
 14796 ;;		Nothing
 14797 ;; This function is called by:
 14798 ;;		_doTimedResponse
 14799 ;; This function uses a non-reentrant model
 14800 ;;
 14801                           
 14802                           	psect	text53
 14803  00A6E4                     __ptext53:
 14804                           	callstack 0
 14805  00A6E4                     _tableIndexToEvtIdx:
 14806                           	callstack 21
 14807                           
 14808                           ;incstack = 0
 14809                           ;tableIndexToEvtIdx@tableIndex stored from wreg
 14810  00A6E4  6F71               	movwf	tableIndexToEvtIdx@tableIndex& (0+255),b
 14811                           
 14812                           ;events.c: 848: return tableIndex+1U;
 14813  00A6E6  0100               	movlb	0	; () banked
 14814  00A6E8  2971               	incf	tableIndexToEvtIdx@tableIndex& (0+255),w,b
 14815                           
 14816                           ; BSR set to: 0
 14817  00A6EA  0012               	return		;funcret
 14818  00A6EC                     __end_of_tableIndexToEvtIdx:
 14819                           	callstack 0
 14820                           
 14821 ;; *************** function _APP_doSOD *****************
 14822 ;; Defined at:
 14823 ;;		line 492 in file "../../github/CANMIOfirmware/mioEvents.c"
 14824 ;; Parameters:    Size  Location     Type
 14825 ;;  step            1    wreg     unsigned char 
 14826 ;; Auto vars:     Size  Location     Type
 14827 ;;  step            1  105[BANK0 ] unsigned char 
 14828 ;;  io              1  114[BANK0 ] unsigned char 
 14829 ;;  happeningInd    1  113[BANK0 ] unsigned char 
 14830 ;;  value           1  112[BANK0 ] unsigned char 
 14831 ;;  flags           1  111[BANK0 ] unsigned char 
 14832 ;;  event_invert    1  110[BANK0 ] unsigned char 
 14833 ;;  disable_off     1  109[BANK0 ] unsigned char 
 14834 ;;  disable_SOD_    1  108[BANK0 ] unsigned char 
 14835 ;;  send_off_ok     1  107[BANK0 ] unsigned char 
 14836 ;;  send_on_ok      1  106[BANK0 ] unsigned char 
 14837 ;; Return value:  Size  Location     Type
 14838 ;;                  1    wreg      unsigned char 
 14839 ;; Registers used:
 14840 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14841 ;; Tracked objects:
 14842 ;;		On entry : 3F/0
 14843 ;;		On exit  : 3E/0
 14844 ;;		Unchanged: 0/0
 14845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14846 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14847 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14848 ;;      Temps:          0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14849 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14850 ;;Total ram usage:       22 bytes
 14851 ;; Hardware stack levels used: 1
 14852 ;; Hardware stack levels required when called: 17
 14853 ;; This function calls:
 14854 ;;		_ee_read
 14855 ;;		_sendInvertedProducedEvent
 14856 ;; This function is called by:
 14857 ;;		_doTimedResponse
 14858 ;; This function uses a non-reentrant model
 14859 ;;
 14860                           
 14861                           	psect	text54
 14862  003DB8                     __ptext54:
 14863                           	callstack 0
 14864  003DB8                     _APP_doSOD:
 14865                           	callstack 12
 14866                           
 14867                           ; BSR set to: 0
 14868                           ;incstack = 0
 14869                           ;APP_doSOD@step stored from wreg
 14870  003DB8  6FC9               	movwf	APP_doSOD@step& (0+255),b
 14871                           
 14872                           ;mioEvents.c: 493: unsigned char io;;mioEvents.c: 494: unsigned char happeningIndex;;mio
      +                          Events.c: 495: BOOL disable_off;;mioEvents.c: 496: BOOL send_on_ok;;mioEvents.c: 497: BO
      +                          OL send_off_ok;;mioEvents.c: 498: BOOL event_inverted;;mioEvents.c: 499: BOOL disable_SO
      +                          D_response;;mioEvents.c: 500: unsigned char flags;;mioEvents.c: 501: unsigned char value
      +                          ;;mioEvents.c: 505: io = step/4U;
 14873  003DBA  0100               	movlb	0	; () banked
 14874  003DBC  41C9               	rrncf	APP_doSOD@step& (0+255),w,b
 14875  003DBE  42E8               	rrncf	wreg,f,c
 14876  003DC0  0B3F               	andlw	63
 14877  003DC2  6FD2               	movwf	APP_doSOD@io& (0+255),b
 14878                           
 14879                           ;mioEvents.c: 506: if (io >= 16U) {
 14880  003DC4  0E0F               	movlw	15
 14881  003DC6  65D2               	cpfsgt	APP_doSOD@io& (0+255),b
 14882  003DC8  D002               	goto	l20477
 14883                           
 14884                           ; BSR set to: 0
 14885                           ;mioEvents.c: 507: return 0;
 14886  003DCA  0E00               	movlw	0
 14887  003DCC  0012               	return	
 14888  003DCE                     l20477:
 14889                           
 14890                           ; BSR set to: 0
 14891                           ;mioEvents.c: 508: };mioEvents.c: 509: happeningIndex = step%4U;
 14892  003DCE  51C9               	movf	APP_doSOD@step& (0+255),w,b
 14893  003DD0  0B03               	andlw	3
 14894  003DD2  6FD1               	movwf	APP_doSOD@happeningIndex& (0+255),b
 14895                           
 14896                           ; BSR set to: 0
 14897                           ;mioEvents.c: 510: flags = NV->io[io].flags;
 14898  003DD4  51D2               	movf	APP_doSOD@io& (0+255),w,b
 14899  003DD6  0D07               	mullw	7
 14900  003DD8  C0EC  F0BD         	movff	_NV,??_APP_doSOD
 14901  003DDC  C0ED  F0BE         	movff	_NV+1,??_APP_doSOD+1
 14902  003DE0  50F3               	movf	243,w,c
 14903  003DE2  27BD               	addwf	??_APP_doSOD& (0+255),f,b
 14904  003DE4  50F4               	movf	244,w,c
 14905  003DE6  23BE               	addwfc	(??_APP_doSOD+1)& (0+255),f,b
 14906  003DE8  0E11               	movlw	17
 14907  003DEA  25BD               	addwf	??_APP_doSOD& (0+255),w,b
 14908  003DEC  6ED9               	movwf	fsr2l,c
 14909  003DEE  0E00               	movlw	0
 14910  003DF0  21BE               	addwfc	(??_APP_doSOD+1)& (0+255),w,b
 14911  003DF2  6EDA               	movwf	fsr2h,c
 14912  003DF4  50DF               	movf	indf2,w,c
 14913  003DF6  6FCF               	movwf	APP_doSOD@flags& (0+255),b
 14914                           
 14915                           ; BSR set to: 0
 14916                           ;mioEvents.c: 511: disable_SOD_response = flags & 0x20U;
 14917  003DF8  51CF               	movf	APP_doSOD@flags& (0+255),w,b
 14918  003DFA  0B20               	andlw	32
 14919  003DFC  6FCC               	movwf	APP_doSOD@disable_SOD_response& (0+255),b
 14920                           
 14921                           ; BSR set to: 0
 14922                           ;mioEvents.c: 513: event_inverted = flags & 0x40U;
 14923  003DFE  51CF               	movf	APP_doSOD@flags& (0+255),w,b
 14924  003E00  0B40               	andlw	64
 14925  003E02  6FCE               	movwf	APP_doSOD@event_inverted& (0+255),b
 14926                           
 14927                           ; BSR set to: 0
 14928                           ;mioEvents.c: 514: disable_off = flags & 0x08U;
 14929  003E04  51CF               	movf	APP_doSOD@flags& (0+255),w,b
 14930  003E06  0B08               	andlw	8
 14931  003E08  6FCD               	movwf	APP_doSOD@disable_off& (0+255),b
 14932                           
 14933                           ; BSR set to: 0
 14934                           ;mioEvents.c: 515: send_on_ok = (unsigned char)!( disable_off && event_inverted );
 14935  003E0A  0E01               	movlw	1
 14936  003E0C  6FC7               	movwf	_APP_doSOD$1818& (0+255),b
 14937                           
 14938                           ; BSR set to: 0
 14939  003E0E  51CD               	movf	APP_doSOD@disable_off& (0+255),w,b
 14940  003E10  B4D8               	btfsc	status,2,c
 14941  003E12  D005               	goto	l20495
 14942                           
 14943                           ; BSR set to: 0
 14944  003E14  51CE               	movf	APP_doSOD@event_inverted& (0+255),w,b
 14945  003E16  B4D8               	btfsc	status,2,c
 14946  003E18  D002               	goto	l20495
 14947                           
 14948                           ; BSR set to: 0
 14949  003E1A  0E00               	movlw	0
 14950  003E1C  6FC7               	movwf	_APP_doSOD$1818& (0+255),b
 14951  003E1E                     l20495:
 14952                           
 14953                           ; BSR set to: 0
 14954  003E1E  C0C7  F0CA         	movff	_APP_doSOD$1818,APP_doSOD@send_on_ok
 14955                           
 14956                           ;mioEvents.c: 516: send_off_ok = (unsigned char)!( disable_off && !event_inverted);
 14957  003E22  0E01               	movlw	1
 14958  003E24  6FC8               	movwf	_APP_doSOD$1819& (0+255),b
 14959  003E26  51CD               	movf	APP_doSOD@disable_off& (0+255),w,b
 14960  003E28  B4D8               	btfsc	status,2,c
 14961  003E2A  D005               	goto	l20501
 14962                           
 14963                           ; BSR set to: 0
 14964  003E2C  51CE               	movf	APP_doSOD@event_inverted& (0+255),w,b
 14965  003E2E  A4D8               	btfss	status,2,c
 14966  003E30  D002               	goto	l20501
 14967                           
 14968                           ; BSR set to: 0
 14969  003E32  0E00               	movlw	0
 14970  003E34  6FC8               	movwf	_APP_doSOD$1819& (0+255),b
 14971  003E36                     l20501:
 14972                           
 14973                           ; BSR set to: 0
 14974  003E36  C0C8  F0CB         	movff	_APP_doSOD$1819,APP_doSOD@send_off_ok
 14975                           
 14976                           ; BSR set to: 0
 14977                           ;mioEvents.c: 517: value = 255U;
 14978  003E3A  69D0               	setf	APP_doSOD@value& (0+255),b
 14979                           
 14980                           ;mioEvents.c: 519: switch(NV->io[io].type) {
 14981  003E3C  D157               	goto	l20581
 14982  003E3E                     l20505:
 14983                           
 14984                           ; BSR set to: 0
 14985                           ;mioEvents.c: 521: if (disable_SOD_response) {
 14986  003E3E  51CC               	movf	APP_doSOD@disable_SOD_response& (0+255),w,b
 14987  003E40  B4D8               	btfsc	status,2,c
 14988  003E42  D018               	goto	l20519
 14989  003E44                     u25440:
 14990                           
 14991                           ;mioEvents.c: 522: return 2;
 14992  003E44  0E02               	movlw	2
 14993  003E46  0012               	return	
 14994  003E48                     l20511:
 14995                           
 14996                           ; BSR set to: 0
 14997                           ;mioEvents.c: 527: value = outputState[io];
 14998  003E48  0E50               	movlw	low _outputState
 14999  003E4A  25D2               	addwf	APP_doSOD@io& (0+255),w,b
 15000  003E4C  6ED9               	movwf	fsr2l,c
 15001  003E4E  6ADA               	clrf	fsr2h,c
 15002  003E50  0E01               	movlw	high _outputState
 15003  003E52  22DA               	addwfc	fsr2h,f,c
 15004  003E54  50DF               	movf	indf2,w,c
 15005  003E56  D134               	goto	u25680
 15006  003E58                     l20513:
 15007                           
 15008                           ; BSR set to: 0
 15009                           ;mioEvents.c: 531: if (disable_off) {
 15010  003E58  51CD               	movf	APP_doSOD@disable_off& (0+255),w,b
 15011  003E5A  B4D8               	btfsc	status,2,c
 15012  003E5C  D16D               	goto	l20583
 15013                           
 15014                           ; BSR set to: 0
 15015                           ;mioEvents.c: 532: value = (unsigned char)(outputState[io]==0);
 15016  003E5E  0E50               	movlw	low _outputState
 15017  003E60  25D2               	addwf	APP_doSOD@io& (0+255),w,b
 15018  003E62  6ED9               	movwf	fsr2l,c
 15019  003E64  6ADA               	clrf	fsr2h,c
 15020  003E66  0E01               	movlw	high _outputState
 15021  003E68  22DA               	addwfc	fsr2h,f,c
 15022  003E6A  50DF               	movf	indf2,w,c
 15023  003E6C                     L9:
 15024  003E6C  B4D8               	btfsc	status,2,c
 15025  003E6E  D134               	goto	u25691
 15026  003E70  0E00               	movlw	0
 15027  003E72  D126               	goto	u25680
 15028  003E74                     l20519:
 15029                           
 15030                           ; BSR set to: 0
 15031  003E74  51D1               	movf	APP_doSOD@happeningIndex& (0+255),w,b
 15032                           
 15033                           ; Switch size 1, requested type "simple"
 15034                           ; Number of cases is 2, Range of values is 0 to 1
 15035                           ; switch strategies available:
 15036                           ; Name         Instructions Cycles
 15037                           ; simple_byte            7     4 (average)
 15038                           ;	Chosen strategy is simple_byte
 15039  003E76  0A00               	xorlw	0	; case 0
 15040  003E78  B4D8               	btfsc	status,2,c
 15041  003E7A  D7E6               	goto	l20511
 15042  003E7C  0A01               	xorlw	1	; case 1
 15043  003E7E  B4D8               	btfsc	status,2,c
 15044  003E80  D7EB               	goto	l20513
 15045  003E82  D15A               	goto	l20583
 15046  003E84                     l20521:
 15047                           
 15048                           ; BSR set to: 0
 15049                           ;mioEvents.c: 540: value = (unsigned char)(ee_read(((WORD)(((BYTE*)(0x3FF-40)))-17)+io)!
      +                          =2U);
 15050  003E84  0EC6               	movlw	198
 15051  003E86  25D2               	addwf	APP_doSOD@io& (0+255),w,b
 15052  003E88  6F71               	movwf	ee_read@addr& (0+255),b
 15053  003E8A  6B72               	clrf	(ee_read@addr+1)& (0+255),b
 15054  003E8C  0E03               	movlw	3
 15055  003E8E  2372               	addwfc	(ee_read@addr+1)& (0+255),f,b
 15056  003E90  EC97  F052         	call	_ee_read	;wreg free
 15057  003E94  0A02               	xorlw	2
 15058  003E96  B4D8               	btfsc	status,2,c
 15059  003E98  D002               	goto	u25480
 15060  003E9A  0E01               	movlw	1
 15061  003E9C  D001               	goto	u25490
 15062  003E9E                     u25480:
 15063  003E9E  0E00               	movlw	0
 15064  003EA0                     u25490:
 15065  003EA0  0100               	movlb	0	; () banked
 15066  003EA2  D10E               	goto	u25680
 15067  003EA4                     l20525:
 15068                           
 15069                           ; BSR set to: 0
 15070  003EA4  51D1               	movf	APP_doSOD@happeningIndex& (0+255),w,b
 15071                           
 15072                           ; Switch size 1, requested type "simple"
 15073                           ; Number of cases is 1, Range of values is 0 to 0
 15074                           ; switch strategies available:
 15075                           ; Name         Instructions Cycles
 15076                           ; simple_byte            4     3 (average)
 15077                           ;	Chosen strategy is simple_byte
 15078  003EA6  0A00               	xorlw	0	; case 0
 15079  003EA8  B4D8               	btfsc	status,2,c
 15080  003EAA  D7EC               	goto	l20521
 15081  003EAC  D145               	goto	l20583
 15082  003EAE                     l20527:
 15083                           
 15084                           ; BSR set to: 0
 15085                           ;mioEvents.c: 548: value = (unsigned char)(currentPos[io] == NV->io[io].nv_io.nv_servo.s
      +                          ervo_start_pos);
 15086  003EAE  51D2               	movf	APP_doSOD@io& (0+255),w,b
 15087  003EB0  0D07               	mullw	7
 15088  003EB2  C0EC  F0BD         	movff	_NV,??_APP_doSOD
 15089  003EB6  C0ED  F0BE         	movff	_NV+1,??_APP_doSOD+1
 15090  003EBA  50F3               	movf	243,w,c
 15091  003EBC  27BD               	addwf	??_APP_doSOD& (0+255),f,b
 15092  003EBE  50F4               	movf	244,w,c
 15093  003EC0  23BE               	addwfc	(??_APP_doSOD+1)& (0+255),f,b
 15094  003EC2  0E12               	movlw	18
 15095  003EC4  D00D               	goto	L10
 15096  003EC6                     u25510:
 15097  003EC6  6FD0               	movwf	APP_doSOD@value& (0+255),b
 15098                           
 15099                           ;mioEvents.c: 549: break;
 15100  003EC8  D063               	goto	l20537
 15101  003ECA                     l20529:
 15102                           
 15103                           ; BSR set to: 0
 15104                           ;mioEvents.c: 551: value = (unsigned char)(currentPos[io] == NV->io[io].nv_io.nv_servo.s
      +                          ervo_end_pos);
 15105  003ECA  51D2               	movf	APP_doSOD@io& (0+255),w,b
 15106  003ECC  0D07               	mullw	7
 15107  003ECE  C0EC  F0BD         	movff	_NV,??_APP_doSOD
 15108  003ED2  C0ED  F0BE         	movff	_NV+1,??_APP_doSOD+1
 15109  003ED6  50F3               	movf	243,w,c
 15110  003ED8  27BD               	addwf	??_APP_doSOD& (0+255),f,b
 15111  003EDA  50F4               	movf	244,w,c
 15112  003EDC  23BE               	addwfc	(??_APP_doSOD+1)& (0+255),f,b
 15113  003EDE  0E13               	movlw	19
 15114  003EE0                     L10:
 15115  003EE0  25BD               	addwf	??_APP_doSOD& (0+255),w,b
 15116  003EE2  6ED9               	movwf	fsr2l,c
 15117  003EE4  0E00               	movlw	0
 15118  003EE6  21BE               	addwfc	(??_APP_doSOD+1)& (0+255),w,b
 15119  003EE8  6EDA               	movwf	fsr2h,c
 15120  003EEA  0E80               	movlw	low _currentPos
 15121  003EEC  25D2               	addwf	APP_doSOD@io& (0+255),w,b
 15122  003EEE  6EE1               	movwf	fsr1l,c
 15123  003EF0  6AE2               	clrf	fsr1h,c
 15124  003EF2  0E01               	movlw	high _currentPos
 15125  003EF4  22E2               	addwfc	fsr1h,f,c
 15126  003EF6  50DE               	movf	postinc2,w,c
 15127  003EF8  18E6               	xorwf	postinc1,w,c
 15128  003EFA  A4D8               	btfss	status,2,c
 15129  003EFC  D0C3               	goto	u25640
 15130  003EFE  D093               	goto	u25611
 15131  003F00                     l20531:
 15132                           
 15133                           ; BSR set to: 0
 15134                           ;mioEvents.c: 555: value = (unsigned char)((currentPos[io] >= (NV->io[io].nv_io.nv_servo
      +                          .servo_end_pos)/2U +;mioEvents.c: 556: (NV->io[io].nv_io.nv_servo.servo_start_pos)/2U));
 15135  003F00  51D2               	movf	APP_doSOD@io& (0+255),w,b
 15136  003F02  0D07               	mullw	7
 15137  003F04  C0EC  F0BD         	movff	_NV,??_APP_doSOD
 15138  003F08  C0ED  F0BE         	movff	_NV+1,??_APP_doSOD+1
 15139  003F0C  50F3               	movf	243,w,c
 15140  003F0E  27BD               	addwf	??_APP_doSOD& (0+255),f,b
 15141  003F10  50F4               	movf	244,w,c
 15142  003F12  23BE               	addwfc	(??_APP_doSOD+1)& (0+255),f,b
 15143  003F14  0E13               	movlw	19
 15144  003F16  25BD               	addwf	??_APP_doSOD& (0+255),w,b
 15145  003F18  6ED9               	movwf	fsr2l,c
 15146  003F1A  0E00               	movlw	0
 15147  003F1C  21BE               	addwfc	(??_APP_doSOD+1)& (0+255),w,b
 15148  003F1E  6EDA               	movwf	fsr2h,c
 15149  003F20  50DF               	movf	indf2,w,c
 15150  003F22  6FBF               	movwf	(??_APP_doSOD+2)& (0+255),b
 15151  003F24  90D8               	bcf	status,0,c
 15152  003F26  31BF               	rrcf	(??_APP_doSOD+2)& (0+255),w,b
 15153  003F28  6FC0               	movwf	(??_APP_doSOD+3)& (0+255),b
 15154  003F2A  6BC1               	clrf	(??_APP_doSOD+4)& (0+255),b
 15155  003F2C  51D2               	movf	APP_doSOD@io& (0+255),w,b
 15156  003F2E  0D07               	mullw	7
 15157  003F30  C0EC  F0C2         	movff	_NV,??_APP_doSOD+5
 15158  003F34  C0ED  F0C3         	movff	_NV+1,??_APP_doSOD+6
 15159  003F38  50F3               	movf	243,w,c
 15160  003F3A  27C2               	addwf	(??_APP_doSOD+5)& (0+255),f,b
 15161  003F3C  50F4               	movf	244,w,c
 15162  003F3E  23C3               	addwfc	(??_APP_doSOD+6)& (0+255),f,b
 15163  003F40  0E12               	movlw	18
 15164  003F42  25C2               	addwf	(??_APP_doSOD+5)& (0+255),w,b
 15165  003F44  6ED9               	movwf	fsr2l,c
 15166  003F46  0E00               	movlw	0
 15167  003F48  21C3               	addwfc	(??_APP_doSOD+6)& (0+255),w,b
 15168  003F4A  6EDA               	movwf	fsr2h,c
 15169  003F4C  50DF               	movf	indf2,w,c
 15170  003F4E  6FC4               	movwf	(??_APP_doSOD+7)& (0+255),b
 15171  003F50  90D8               	bcf	status,0,c
 15172  003F52  33C4               	rrcf	(??_APP_doSOD+7)& (0+255),f,b
 15173  003F54  51C4               	movf	(??_APP_doSOD+7)& (0+255),w,b
 15174  003F56  27C0               	addwf	(??_APP_doSOD+3)& (0+255),f,b
 15175  003F58  0E00               	movlw	0
 15176  003F5A  23C1               	addwfc	(??_APP_doSOD+4)& (0+255),f,b
 15177  003F5C  0E80               	movlw	low _currentPos
 15178  003F5E  25D2               	addwf	APP_doSOD@io& (0+255),w,b
 15179  003F60  6ED9               	movwf	fsr2l,c
 15180  003F62  6ADA               	clrf	fsr2h,c
 15181  003F64  0E01               	movlw	high _currentPos
 15182  003F66  22DA               	addwfc	fsr2h,f,c
 15183  003F68  50DF               	movf	indf2,w,c
 15184  003F6A  6FC5               	movwf	(??_APP_doSOD+8)& (0+255),b
 15185  003F6C  6BC6               	clrf	(??_APP_doSOD+9)& (0+255),b
 15186  003F6E  51C0               	movf	(??_APP_doSOD+3)& (0+255),w,b
 15187  003F70  5DC5               	subwf	(??_APP_doSOD+8)& (0+255),w,b
 15188  003F72  51C1               	movf	(??_APP_doSOD+4)& (0+255),w,b
 15189  003F74  59C6               	subwfb	(??_APP_doSOD+9)& (0+255),w,b
 15190  003F76  A0D8               	btfss	status,0,c
 15191  003F78  D085               	goto	u25640
 15192  003F7A  D055               	goto	u25611
 15193  003F7C                     l20535:
 15194                           
 15195                           ; BSR set to: 0
 15196  003F7C  51D1               	movf	APP_doSOD@happeningIndex& (0+255),w,b
 15197                           
 15198                           ; Switch size 1, requested type "simple"
 15199                           ; Number of cases is 3, Range of values is 0 to 2
 15200                           ; switch strategies available:
 15201                           ; Name         Instructions Cycles
 15202                           ; simple_byte           10     6 (average)
 15203                           ;	Chosen strategy is simple_byte
 15204  003F7E  0A00               	xorlw	0	; case 0
 15205  003F80  B4D8               	btfsc	status,2,c
 15206  003F82  D795               	goto	l20527
 15207  003F84  0A01               	xorlw	1	; case 1
 15208  003F86  B4D8               	btfsc	status,2,c
 15209  003F88  D7BB               	goto	l20531
 15210  003F8A  0A03               	xorlw	3	; case 2
 15211  003F8C  B4D8               	btfsc	status,2,c
 15212  003F8E  D79D               	goto	l20529
 15213  003F90                     l20537:
 15214                           
 15215                           ; BSR set to: 0
 15216                           ;mioEvents.c: 559: send_on_ok = 1;
 15217  003F90  0E01               	movlw	1
 15218  003F92  6FCA               	movwf	APP_doSOD@send_on_ok& (0+255),b
 15219                           
 15220                           ;mioEvents.c: 560: send_off_ok = 1;
 15221  003F94  0E01               	movlw	1
 15222  003F96  6FCB               	movwf	APP_doSOD@send_off_ok& (0+255),b
 15223                           
 15224                           ;mioEvents.c: 561: break;
 15225  003F98  D0CF               	goto	l20583
 15226  003F9A                     l20539:
 15227                           
 15228                           ; BSR set to: 0
 15229                           ;mioEvents.c: 566: value = ee_read(((WORD)(((BYTE*)(0x3FF-40)))-17)+io);
 15230  003F9A  0EC6               	movlw	198
 15231  003F9C  25D2               	addwf	APP_doSOD@io& (0+255),w,b
 15232  003F9E  6F71               	movwf	ee_read@addr& (0+255),b
 15233  003FA0  6B72               	clrf	(ee_read@addr+1)& (0+255),b
 15234  003FA2  0E03               	movlw	3
 15235  003FA4  2372               	addwfc	(ee_read@addr+1)& (0+255),f,b
 15236  003FA6  EC97  F052         	call	_ee_read	;wreg free
 15237  003FAA  0100               	movlb	0	; () banked
 15238  003FAC  D78C               	goto	u25510
 15239  003FAE                     l20543:
 15240                           
 15241                           ; BSR set to: 0
 15242  003FAE  51D1               	movf	APP_doSOD@happeningIndex& (0+255),w,b
 15243                           
 15244                           ; Switch size 1, requested type "simple"
 15245                           ; Number of cases is 1, Range of values is 0 to 0
 15246                           ; switch strategies available:
 15247                           ; Name         Instructions Cycles
 15248                           ; simple_byte            4     3 (average)
 15249                           ;	Chosen strategy is simple_byte
 15250  003FB0  0A00               	xorlw	0	; case 0
 15251  003FB2  B4D8               	btfsc	status,2,c
 15252  003FB4  D7F2               	goto	l20539
 15253  003FB6  D7EC               	goto	l20537
 15254  003FB8                     l20547:
 15255                           
 15256                           ; BSR set to: 0
 15257                           ;mioEvents.c: 577: value = (unsigned char)(currentPos[io] == NV->io[io].nv_io.nv_multi.m
      +                          ulti_pos1);
 15258  003FB8  51D2               	movf	APP_doSOD@io& (0+255),w,b
 15259  003FBA  0D07               	mullw	7
 15260  003FBC  C0EC  F0BD         	movff	_NV,??_APP_doSOD
 15261  003FC0  C0ED  F0BE         	movff	_NV+1,??_APP_doSOD+1
 15262  003FC4  50F3               	movf	243,w,c
 15263  003FC6  27BD               	addwf	??_APP_doSOD& (0+255),f,b
 15264  003FC8  50F4               	movf	244,w,c
 15265  003FCA  23BE               	addwfc	(??_APP_doSOD+1)& (0+255),f,b
 15266  003FCC  0E13               	movlw	19
 15267  003FCE  D04B               	goto	L8
 15268  003FD0                     l20549:
 15269                           
 15270                           ; BSR set to: 0
 15271                           ;mioEvents.c: 580: value = (unsigned char)(currentPos[io] == NV->io[io].nv_io.nv_multi.m
      +                          ulti_pos2);
 15272  003FD0  51D2               	movf	APP_doSOD@io& (0+255),w,b
 15273  003FD2  0D07               	mullw	7
 15274  003FD4  C0EC  F0BD         	movff	_NV,??_APP_doSOD
 15275  003FD8  C0ED  F0BE         	movff	_NV+1,??_APP_doSOD+1
 15276  003FDC  50F3               	movf	243,w,c
 15277  003FDE  27BD               	addwf	??_APP_doSOD& (0+255),f,b
 15278  003FE0  50F4               	movf	244,w,c
 15279  003FE2  23BE               	addwfc	(??_APP_doSOD+1)& (0+255),f,b
 15280  003FE4  0E14               	movlw	20
 15281  003FE6  D03F               	goto	L8
 15282  003FE8                     l20551:
 15283                           
 15284                           ; BSR set to: 0
 15285                           ;mioEvents.c: 584: if (NV->io[io].nv_io.nv_multi.multi_num_pos > 2U) {
 15286  003FE8  51D2               	movf	APP_doSOD@io& (0+255),w,b
 15287  003FEA  0D07               	mullw	7
 15288  003FEC  C0EC  F0BD         	movff	_NV,??_APP_doSOD
 15289  003FF0  C0ED  F0BE         	movff	_NV+1,??_APP_doSOD+1
 15290  003FF4  50F3               	movf	243,w,c
 15291  003FF6  27BD               	addwf	??_APP_doSOD& (0+255),f,b
 15292  003FF8  50F4               	movf	244,w,c
 15293  003FFA  23BE               	addwfc	(??_APP_doSOD+1)& (0+255),f,b
 15294  003FFC  0E12               	movlw	18
 15295  003FFE  25BD               	addwf	??_APP_doSOD& (0+255),w,b
 15296  004000  6ED9               	movwf	fsr2l,c
 15297  004002  0E00               	movlw	0
 15298  004004  21BE               	addwfc	(??_APP_doSOD+1)& (0+255),w,b
 15299  004006  6EDA               	movwf	fsr2h,c
 15300  004008  0E02               	movlw	2
 15301  00400A  64DF               	cpfsgt	indf2,c
 15302  00400C  D7C1               	goto	l20537
 15303                           
 15304                           ; BSR set to: 0
 15305                           ;mioEvents.c: 585: value = (unsigned char)(currentPos[io] == NV->io[io].nv_io.nv_multi.m
      +                          ulti_pos3);
 15306  00400E  51D2               	movf	APP_doSOD@io& (0+255),w,b
 15307  004010  0D07               	mullw	7
 15308  004012  C0EC  F0BD         	movff	_NV,??_APP_doSOD
 15309  004016  C0ED  F0BE         	movff	_NV+1,??_APP_doSOD+1
 15310  00401A  50F3               	movf	243,w,c
 15311  00401C  27BD               	addwf	??_APP_doSOD& (0+255),f,b
 15312  00401E  50F4               	movf	244,w,c
 15313  004020  23BE               	addwfc	(??_APP_doSOD+1)& (0+255),f,b
 15314  004022  0E15               	movlw	21
 15315  004024  D020               	goto	L8
 15316  004026                     u25611:
 15317  004026  0E01               	movlw	1
 15318  004028  D74E               	goto	u25510
 15319  00402A                     l20555:
 15320                           
 15321                           ; BSR set to: 0
 15322                           ;mioEvents.c: 589: if (NV->io[io].nv_io.nv_multi.multi_num_pos > 3U) {
 15323  00402A  51D2               	movf	APP_doSOD@io& (0+255),w,b
 15324  00402C  0D07               	mullw	7
 15325  00402E  C0EC  F0BD         	movff	_NV,??_APP_doSOD
 15326  004032  C0ED  F0BE         	movff	_NV+1,??_APP_doSOD+1
 15327  004036  50F3               	movf	243,w,c
 15328  004038  27BD               	addwf	??_APP_doSOD& (0+255),f,b
 15329  00403A  50F4               	movf	244,w,c
 15330  00403C  23BE               	addwfc	(??_APP_doSOD+1)& (0+255),f,b
 15331  00403E  0E12               	movlw	18
 15332  004040  25BD               	addwf	??_APP_doSOD& (0+255),w,b
 15333  004042  6ED9               	movwf	fsr2l,c
 15334  004044  0E00               	movlw	0
 15335  004046  21BE               	addwfc	(??_APP_doSOD+1)& (0+255),w,b
 15336  004048  6EDA               	movwf	fsr2h,c
 15337  00404A  0E03               	movlw	3
 15338  00404C  64DF               	cpfsgt	indf2,c
 15339  00404E  D7A0               	goto	l20537
 15340                           
 15341                           ; BSR set to: 0
 15342                           ;mioEvents.c: 590: value = (unsigned char)(currentPos[io] == NV->io[io].nv_io.nv_multi.m
      +                          ulti_pos4);
 15343  004050  51D2               	movf	APP_doSOD@io& (0+255),w,b
 15344  004052  0D07               	mullw	7
 15345  004054  C0EC  F0BD         	movff	_NV,??_APP_doSOD
 15346  004058  C0ED  F0BE         	movff	_NV+1,??_APP_doSOD+1
 15347  00405C  50F3               	movf	243,w,c
 15348  00405E  27BD               	addwf	??_APP_doSOD& (0+255),f,b
 15349  004060  50F4               	movf	244,w,c
 15350  004062  23BE               	addwfc	(??_APP_doSOD+1)& (0+255),f,b
 15351  004064  0E16               	movlw	22
 15352  004066                     L8:
 15353  004066  25BD               	addwf	??_APP_doSOD& (0+255),w,b
 15354  004068  6ED9               	movwf	fsr2l,c
 15355  00406A  0E00               	movlw	0
 15356  00406C  21BE               	addwfc	(??_APP_doSOD+1)& (0+255),w,b
 15357  00406E  6EDA               	movwf	fsr2h,c
 15358  004070  0E80               	movlw	low _currentPos
 15359  004072  25D2               	addwf	APP_doSOD@io& (0+255),w,b
 15360  004074  6EE1               	movwf	fsr1l,c
 15361  004076  6AE2               	clrf	fsr1h,c
 15362  004078  0E01               	movlw	high _currentPos
 15363  00407A  22E2               	addwfc	fsr1h,f,c
 15364  00407C  50DE               	movf	postinc2,w,c
 15365  00407E  18E6               	xorwf	postinc1,w,c
 15366  004080  B4D8               	btfsc	status,2,c
 15367  004082  D7D1               	goto	u25611
 15368  004084                     u25640:
 15369  004084  0E00               	movlw	0
 15370  004086  D71F               	goto	u25510
 15371  004088                     l20561:
 15372                           
 15373                           ; BSR set to: 0
 15374  004088  51D1               	movf	APP_doSOD@happeningIndex& (0+255),w,b
 15375                           
 15376                           ; Switch size 1, requested type "simple"
 15377                           ; Number of cases is 4, Range of values is 0 to 3
 15378                           ; switch strategies available:
 15379                           ; Name         Instructions Cycles
 15380                           ; simple_byte           13     7 (average)
 15381                           ;	Chosen strategy is simple_byte
 15382  00408A  0A00               	xorlw	0	; case 0
 15383  00408C  B4D8               	btfsc	status,2,c
 15384  00408E  D794               	goto	l20547
 15385  004090  0A01               	xorlw	1	; case 1
 15386  004092  B4D8               	btfsc	status,2,c
 15387  004094  D79D               	goto	l20549
 15388  004096  0A03               	xorlw	3	; case 2
 15389  004098  B4D8               	btfsc	status,2,c
 15390  00409A  D7A6               	goto	l20551
 15391  00409C  0A01               	xorlw	1	; case 3
 15392  00409E  B4D8               	btfsc	status,2,c
 15393  0040A0  D7C4               	goto	l20555
 15394  0040A2  D776               	goto	l20537
 15395  0040A4                     l20565:
 15396                           
 15397                           ; BSR set to: 0
 15398                           ;mioEvents.c: 601: case 6U:;mioEvents.c: 602: if (disable_SOD_response) {
 15399  0040A4  51CC               	movf	APP_doSOD@disable_SOD_response& (0+255),w,b
 15400  0040A6  A4D8               	btfss	status,2,c
 15401  0040A8  D6CD               	goto	u25440
 15402  0040AA  D018               	goto	l20577
 15403  0040AC                     l20571:
 15404                           
 15405                           ; BSR set to: 0
 15406                           ;mioEvents.c: 607: value = (unsigned char)(analogueState[io].eventState == 1U);
 15407  0040AC  0E90               	movlw	low _analogueState
 15408  0040AE  25D2               	addwf	APP_doSOD@io& (0+255),w,b
 15409  0040B0  6ED9               	movwf	fsr2l,c
 15410  0040B2  6ADA               	clrf	fsr2h,c
 15411  0040B4  0E01               	movlw	high _analogueState
 15412  0040B6  22DA               	addwfc	fsr2h,f,c
 15413  0040B8  50DF               	movf	223,w,c
 15414  0040BA  0B03               	andlw	3
 15415  0040BC  06E8               	decf	wreg,f,c
 15416  0040BE  D6D6               	goto	L9
 15417  0040C0                     u25680:
 15418  0040C0  6FD0               	movwf	APP_doSOD@value& (0+255),b
 15419                           
 15420                           ;mioEvents.c: 608: break;
 15421  0040C2  D03A               	goto	l20583
 15422  0040C4                     l20573:
 15423                           
 15424                           ; BSR set to: 0
 15425                           ;mioEvents.c: 610: value = (unsigned char)(analogueState[io].eventState == 2U);
 15426  0040C4  0E90               	movlw	low _analogueState
 15427  0040C6  25D2               	addwf	APP_doSOD@io& (0+255),w,b
 15428  0040C8  6ED9               	movwf	fsr2l,c
 15429  0040CA  6ADA               	clrf	fsr2h,c
 15430  0040CC  0E01               	movlw	high _analogueState
 15431  0040CE  22DA               	addwfc	fsr2h,f,c
 15432  0040D0  50DF               	movf	223,w,c
 15433  0040D2  0B03               	andlw	3
 15434  0040D4  0A02               	xorlw	2
 15435  0040D6  D6CA               	goto	L9
 15436  0040D8                     u25691:
 15437  0040D8  0E01               	movlw	1
 15438  0040DA  D7F2               	goto	u25680
 15439  0040DC                     l20577:
 15440                           
 15441                           ; BSR set to: 0
 15442  0040DC  51D1               	movf	APP_doSOD@happeningIndex& (0+255),w,b
 15443                           
 15444                           ; Switch size 1, requested type "simple"
 15445                           ; Number of cases is 2, Range of values is 0 to 1
 15446                           ; switch strategies available:
 15447                           ; Name         Instructions Cycles
 15448                           ; simple_byte            7     4 (average)
 15449                           ;	Chosen strategy is simple_byte
 15450  0040DE  0A00               	xorlw	0	; case 0
 15451  0040E0  B4D8               	btfsc	status,2,c
 15452  0040E2  D7E4               	goto	l20571
 15453  0040E4  0A01               	xorlw	1	; case 1
 15454  0040E6  B4D8               	btfsc	status,2,c
 15455  0040E8  D7ED               	goto	l20573
 15456  0040EA  D026               	goto	l20583
 15457  0040EC                     l20581:
 15458                           
 15459                           ; BSR set to: 0
 15460  0040EC  51D2               	movf	APP_doSOD@io& (0+255),w,b
 15461  0040EE  0D07               	mullw	7
 15462  0040F0  C0EC  F0BD         	movff	_NV,??_APP_doSOD
 15463  0040F4  C0ED  F0BE         	movff	_NV+1,??_APP_doSOD+1
 15464  0040F8  50F3               	movf	243,w,c
 15465  0040FA  27BD               	addwf	??_APP_doSOD& (0+255),f,b
 15466  0040FC  50F4               	movf	244,w,c
 15467  0040FE  23BE               	addwfc	(??_APP_doSOD+1)& (0+255),f,b
 15468  004100  0E10               	movlw	16
 15469  004102  25BD               	addwf	??_APP_doSOD& (0+255),w,b
 15470  004104  6ED9               	movwf	fsr2l,c
 15471  004106  0E00               	movlw	0
 15472  004108  21BE               	addwfc	(??_APP_doSOD+1)& (0+255),w,b
 15473  00410A  6EDA               	movwf	fsr2h,c
 15474  00410C  50DF               	movf	indf2,w,c
 15475                           
 15476                           ; Switch size 1, requested type "simple"
 15477                           ; Number of cases is 7, Range of values is 0 to 6
 15478                           ; switch strategies available:
 15479                           ; Name         Instructions Cycles
 15480                           ; simple_byte           22    12 (average)
 15481                           ;	Chosen strategy is simple_byte
 15482  00410E  0A00               	xorlw	0	; case 0
 15483  004110  B4D8               	btfsc	status,2,c
 15484  004112  D695               	goto	l20505
 15485  004114  0A01               	xorlw	1	; case 1
 15486  004116  B4D8               	btfsc	status,2,c
 15487  004118  D6C5               	goto	l20525
 15488  00411A  0A03               	xorlw	3	; case 2
 15489  00411C  B4D8               	btfsc	status,2,c
 15490  00411E  D72E               	goto	l20535
 15491  004120  0A01               	xorlw	1	; case 3
 15492  004122  B4D8               	btfsc	status,2,c
 15493  004124  D744               	goto	l20543
 15494  004126  0A07               	xorlw	7	; case 4
 15495  004128  B4D8               	btfsc	status,2,c
 15496  00412A  D7AE               	goto	l20561
 15497  00412C  0A01               	xorlw	1	; case 5
 15498  00412E  B4D8               	btfsc	status,2,c
 15499  004130  D7B9               	goto	l20565
 15500  004132  0A03               	xorlw	3	; case 6
 15501  004134  B4D8               	btfsc	status,2,c
 15502  004136  D7B6               	goto	l20565
 15503  004138                     l20583:
 15504                           
 15505                           ; BSR set to: 0
 15506                           ;mioEvents.c: 616: if (value != 255) {
 15507  004138  29D0               	incf	APP_doSOD@value& (0+255),w,b
 15508  00413A  B4D8               	btfsc	status,2,c
 15509  00413C  D683               	goto	u25440
 15510                           
 15511                           ; BSR set to: 0
 15512                           ;mioEvents.c: 617: if (!sendInvertedProducedEvent((8U + 4U*(io))+happeningIndex, value, 
      +                          event_inverted, send_on_ok, send_off_ok)) {
 15513  00413E  C0D0  F0B5         	movff	APP_doSOD@value,sendInvertedProducedEvent@state
 15514  004142  C0CE  F0B6         	movff	APP_doSOD@event_inverted,sendInvertedProducedEvent@invert
 15515  004146  C0CA  F0B7         	movff	APP_doSOD@send_on_ok,sendInvertedProducedEvent@can_send_on
 15516  00414A  C0CB  F0B8         	movff	APP_doSOD@send_off_ok,sendInvertedProducedEvent@can_send_off
 15517  00414E  51D2               	movf	APP_doSOD@io& (0+255),w,b
 15518  004150  0D04               	mullw	4
 15519  004152  50F3               	movf	243,w,c
 15520  004154  25D1               	addwf	APP_doSOD@happeningIndex& (0+255),w,b
 15521  004156  0F08               	addlw	8
 15522  004158  EC91  F04D         	call	_sendInvertedProducedEvent
 15523  00415C  0900               	iorlw	0
 15524  00415E  A4D8               	btfss	status,2,c
 15525  004160  D671               	goto	u25440
 15526                           
 15527                           ;mioEvents.c: 618: return 1;
 15528  004162  0E01               	movlw	1
 15529  004164  0012               	return		;funcret
 15530  004166                     __end_of_APP_doSOD:
 15531                           	callstack 0
 15532                           
 15533 ;; *************** function _sendInvertedProducedEvent *****************
 15534 ;; Defined at:
 15535 ;;		line 634 in file "../../github/CANMIOfirmware/mioEvents.c"
 15536 ;; Parameters:    Size  Location     Type
 15537 ;;  happening       1    wreg     unsigned char 
 15538 ;;  state           1   85[BANK0 ] unsigned char 
 15539 ;;  invert          1   86[BANK0 ] unsigned char 
 15540 ;;  can_send_on     1   87[BANK0 ] unsigned char 
 15541 ;;  can_send_off    1   88[BANK0 ] unsigned char 
 15542 ;; Auto vars:     Size  Location     Type
 15543 ;;  happening       1   89[BANK0 ] unsigned char 
 15544 ;;  state_to_sen    1   92[BANK0 ] unsigned char 
 15545 ;; Return value:  Size  Location     Type
 15546 ;;                  1    wreg      unsigned char 
 15547 ;; Registers used:
 15548 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15549 ;; Tracked objects:
 15550 ;;		On entry : 3F/0
 15551 ;;		On exit  : 3E/0
 15552 ;;		Unchanged: 0/0
 15553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 15554 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15555 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15556 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15557 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15558 ;;Total ram usage:        8 bytes
 15559 ;; Hardware stack levels used: 1
 15560 ;; Hardware stack levels required when called: 16
 15561 ;; This function calls:
 15562 ;;		_sendProducedEvent
 15563 ;; This function is called by:
 15564 ;;		_startDigitalOutput
 15565 ;;		_APP_doSOD
 15566 ;; This function uses a non-reentrant model
 15567 ;;
 15568                           
 15569                           	psect	text55
 15570  009B22                     __ptext55:
 15571                           	callstack 0
 15572  009B22                     _sendInvertedProducedEvent:
 15573                           	callstack 11
 15574                           
 15575                           ;incstack = 0
 15576                           ;sendInvertedProducedEvent@happening stored from wreg
 15577  009B22  6FB9               	movwf	sendInvertedProducedEvent@happening& (0+255),b
 15578                           
 15579                           ;mioEvents.c: 636: BOOL state_to_send = (unsigned char)(invert?!state:state);
 15580  009B24  0100               	movlb	0	; () banked
 15581  009B26  51B6               	movf	sendInvertedProducedEvent@invert& (0+255),w,b
 15582  009B28  A4D8               	btfss	status,2,c
 15583  009B2A  D003               	goto	l19257
 15584                           
 15585                           ; BSR set to: 0
 15586  009B2C  C0B5  F0BA         	movff	sendInvertedProducedEvent@state,_sendInvertedProducedEvent$1832
 15587  009B30  D007               	goto	L11
 15588  009B32                     l19257:
 15589                           
 15590                           ; BSR set to: 0
 15591  009B32  51B5               	movf	sendInvertedProducedEvent@state& (0+255),w,b
 15592  009B34  A4D8               	btfss	status,2,c
 15593  009B36  D002               	goto	u23740
 15594  009B38  0E01               	movlw	1
 15595  009B3A  D001               	goto	u23750
 15596  009B3C                     u23740:
 15597  009B3C  0E00               	movlw	0
 15598  009B3E                     u23750:
 15599  009B3E  6FBA               	movwf	_sendInvertedProducedEvent$1832& (0+255),b
 15600  009B40                     L11:
 15601  009B40  6BBB               	clrf	(_sendInvertedProducedEvent$1832+1)& (0+255),b
 15602                           
 15603                           ; BSR set to: 0
 15604  009B42  C0BA  F0BC         	movff	_sendInvertedProducedEvent$1832,sendInvertedProducedEvent@state_to_send
 15605                           
 15606                           ;mioEvents.c: 637: if ((state_to_send && can_send_on) || (!state_to_send && can_send_off
      +                          )) {
 15607  009B46  51BC               	movf	sendInvertedProducedEvent@state_to_send& (0+255),w,b
 15608  009B48  B4D8               	btfsc	status,2,c
 15609  009B4A  D003               	goto	u23770
 15610                           
 15611                           ; BSR set to: 0
 15612  009B4C  51B7               	movf	sendInvertedProducedEvent@can_send_on& (0+255),w,b
 15613  009B4E  A4D8               	btfss	status,2,c
 15614  009B50  D006               	goto	u23790
 15615  009B52                     u23770:
 15616                           
 15617                           ; BSR set to: 0
 15618  009B52  51BC               	movf	sendInvertedProducedEvent@state_to_send& (0+255),w,b
 15619  009B54  A4D8               	btfss	status,2,c
 15620  009B56  D009               	goto	l19273
 15621                           
 15622                           ; BSR set to: 0
 15623  009B58  51B8               	movf	sendInvertedProducedEvent@can_send_off& (0+255),w,b
 15624  009B5A  B4D8               	btfsc	status,2,c
 15625  009B5C  D006               	goto	l19273
 15626  009B5E                     u23790:
 15627                           
 15628                           ; BSR set to: 0
 15629                           ;mioEvents.c: 638: return sendProducedEvent(happening, state_to_send);
 15630  009B5E  C0BC  F0AE         	movff	sendInvertedProducedEvent@state_to_send,sendProducedEvent@on
 15631  009B62  51B9               	movf	sendInvertedProducedEvent@happening& (0+255),w,b
 15632  009B64  EC54  F03C         	call	_sendProducedEvent
 15633  009B68  0012               	return	
 15634  009B6A                     l19273:
 15635                           
 15636                           ; BSR set to: 0
 15637                           ;mioEvents.c: 640: return 1;
 15638  009B6A  0E01               	movlw	1
 15639  009B6C  0012               	return		;funcret
 15640  009B6E                     __end_of_sendInvertedProducedEvent:
 15641                           	callstack 0
 15642                           
 15643 ;; *************** function _sendProducedEvent *****************
 15644 ;; Defined at:
 15645 ;;		line 109 in file "../../github/CBUSlib/happeningsActions.c"
 15646 ;; Parameters:    Size  Location     Type
 15647 ;;  happening       1    wreg     unsigned char 
 15648 ;;  on              1   78[BANK0 ] unsigned char 
 15649 ;; Auto vars:     Size  Location     Type
 15650 ;;  happening       1   84[BANK0 ] unsigned char 
 15651 ;;  thisByte        1   83[BANK0 ] unsigned char 
 15652 ;;  thisBit         1   82[BANK0 ] unsigned char 
 15653 ;;  status          1   81[BANK0 ] unsigned char 
 15654 ;; Return value:  Size  Location     Type
 15655 ;;                  1    wreg      unsigned char 
 15656 ;; Registers used:
 15657 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15658 ;; Tracked objects:
 15659 ;;		On entry : 3F/0
 15660 ;;		On exit  : 3E/0
 15661 ;;		Unchanged: 0/0
 15662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 15663 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15664 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15665 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15666 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15667 ;;Total ram usage:        7 bytes
 15668 ;; Hardware stack levels used: 1
 15669 ;; Hardware stack levels required when called: 15
 15670 ;; This function calls:
 15671 ;;		_cbusSendEvent
 15672 ;;		_ee_read
 15673 ;;		_ee_write
 15674 ;;		_getDefaultProducedEvent
 15675 ;;		_getProducedEvent
 15676 ;; This function is called by:
 15677 ;;		_pollAnalogue
 15678 ;;		_processOutputs
 15679 ;;		_inputScan
 15680 ;;		_main
 15681 ;;		_sendInvertedProducedEvent
 15682 ;;		_pollServos
 15683 ;; This function uses a non-reentrant model
 15684 ;;
 15685                           
 15686                           	psect	text56
 15687  0078A8                     __ptext56:
 15688                           	callstack 0
 15689  0078A8                     _sendProducedEvent:
 15690                           	callstack 13
 15691                           
 15692                           ;incstack = 0
 15693                           ;sendProducedEvent@happening stored from wreg
 15694  0078A8  6FB4               	movwf	sendProducedEvent@happening& (0+255),b
 15695                           
 15696                           ;happeningsActions.c: 111: unsigned char thisBit = (unsigned char)(happening & 0x7);
 15697  0078AA  0100               	movlb	0	; () banked
 15698  0078AC  51B4               	movf	sendProducedEvent@happening& (0+255),w,b
 15699  0078AE  0B07               	andlw	7
 15700  0078B0  6FB2               	movwf	sendProducedEvent@thisBit& (0+255),b
 15701                           
 15702                           ;happeningsActions.c: 112: unsigned char thisByte = (unsigned char)(happening >> 3);
 15703  0078B2  39B4               	swapf	sendProducedEvent@happening& (0+255),w,b
 15704  0078B4  46E8               	rlncf	wreg,f,c
 15705  0078B6  0B1F               	andlw	31
 15706  0078B8  6FB3               	movwf	sendProducedEvent@thisByte& (0+255),b
 15707                           
 15708                           ; BSR set to: 0
 15709                           ;happeningsActions.c: 113: unsigned char status = ee_read((WORD)(((BYTE*)(0x3FF-39))+thi
      +                          sByte));
 15710  0078BA  0ED8               	movlw	216
 15711  0078BC  25B3               	addwf	sendProducedEvent@thisByte& (0+255),w,b
 15712  0078BE  6F71               	movwf	ee_read@addr& (0+255),b
 15713  0078C0  6B72               	clrf	(ee_read@addr+1)& (0+255),b
 15714  0078C2  0E03               	movlw	3
 15715  0078C4  2372               	addwfc	(ee_read@addr+1)& (0+255),f,b
 15716  0078C6  EC97  F052         	call	_ee_read	;wreg free
 15717  0078CA  0100               	movlb	0	; () banked
 15718  0078CC  6FB1               	movwf	sendProducedEvent@status& (0+255),b
 15719                           
 15720                           ; BSR set to: 0
 15721                           ;happeningsActions.c: 114: if (on) {
 15722  0078CE  51AE               	movf	sendProducedEvent@on& (0+255),w,b
 15723  0078D0  B4D8               	btfsc	status,2,c
 15724  0078D2  D00E               	goto	l18835
 15725                           
 15726                           ; BSR set to: 0
 15727                           ;happeningsActions.c: 115: status |= (unsigned char)(1U<<thisBit);
 15728  0078D4  C0B2  F0AF         	movff	sendProducedEvent@thisBit,??_sendProducedEvent
 15729  0078D8  0E01               	movlw	1
 15730  0078DA  6FB0               	movwf	(??_sendProducedEvent+1)& (0+255),b
 15731  0078DC  2BAF               	incf	??_sendProducedEvent& (0+255),f,b
 15732  0078DE  D002               	goto	u23334
 15733  0078E0                     u23335:
 15734  0078E0  90D8               	bcf	status,0,c
 15735  0078E2  37B0               	rlcf	(??_sendProducedEvent+1)& (0+255),f,b
 15736  0078E4                     u23334:
 15737  0078E4  2FAF               	decfsz	??_sendProducedEvent& (0+255),f,b
 15738  0078E6  D7FC               	goto	u23335
 15739  0078E8  0100               	movlb	0	; () banked
 15740  0078EA  51B0               	movf	(??_sendProducedEvent+1)& (0+255),w,b
 15741  0078EC  13B1               	iorwf	sendProducedEvent@status& (0+255),f,b
 15742                           
 15743                           ;happeningsActions.c: 116: } else {
 15744  0078EE  D00E               	goto	l18837
 15745  0078F0                     l18835:
 15746                           
 15747                           ; BSR set to: 0
 15748                           ;happeningsActions.c: 117: status &= (unsigned char)(~(1U<<thisBit));
 15749  0078F0  C0B2  F0AF         	movff	sendProducedEvent@thisBit,??_sendProducedEvent
 15750  0078F4  0E01               	movlw	1
 15751  0078F6  6FB0               	movwf	(??_sendProducedEvent+1)& (0+255),b
 15752  0078F8  2BAF               	incf	??_sendProducedEvent& (0+255),f,b
 15753  0078FA  D002               	goto	u23344
 15754  0078FC                     u23345:
 15755  0078FC  90D8               	bcf	status,0,c
 15756  0078FE  37B0               	rlcf	(??_sendProducedEvent+1)& (0+255),f,b
 15757  007900                     u23344:
 15758  007900  2FAF               	decfsz	??_sendProducedEvent& (0+255),f,b
 15759  007902  D7FC               	goto	u23345
 15760  007904  0100               	movlb	0	; () banked
 15761  007906  51B0               	movf	(??_sendProducedEvent+1)& (0+255),w,b
 15762  007908  0AFF               	xorlw	255
 15763  00790A  17B1               	andwf	sendProducedEvent@status& (0+255),f,b
 15764  00790C                     l18837:
 15765                           
 15766                           ; BSR set to: 0
 15767                           ;happeningsActions.c: 118: };happeningsActions.c: 119: ee_write((WORD)(((BYTE*)(0x3FF-39
      +                          ))+thisByte), status);
 15768  00790C  0ED8               	movlw	216
 15769  00790E  25B3               	addwf	sendProducedEvent@thisByte& (0+255),w,b
 15770  007910  6F73               	movwf	ee_write@addr& (0+255),b
 15771  007912  6B74               	clrf	(ee_write@addr+1)& (0+255),b
 15772  007914  0E03               	movlw	3
 15773  007916  2374               	addwfc	(ee_write@addr+1)& (0+255),f,b
 15774  007918  C0B1  F075         	movff	sendProducedEvent@status,ee_write@data
 15775  00791C  EC1D  F04D         	call	_ee_write	;wreg free
 15776                           
 15777                           ; BSR set to: 0
 15778                           ;happeningsActions.c: 122: if (getProducedEvent(happening)) {
 15779  007920  51B4               	movf	sendProducedEvent@happening& (0+255),w,b
 15780  007922  ECBE  F04A         	call	_getProducedEvent
 15781  007926  0900               	iorlw	0
 15782  007928  B4D8               	btfsc	status,2,c
 15783  00792A  D00E               	goto	l18845
 15784                           
 15785                           ; BSR set to: 0
 15786                           ;happeningsActions.c: 123: return cbusSendEvent( 0, producedEvent.NN, producedEvent.EN, 
      +                          on );
 15787  00792C  C1A8  F09E         	movff	_producedEvent,cbusSendEvent@eventNode
 15788  007930  C1A9  F09F         	movff	_producedEvent+1,cbusSendEvent@eventNode+1
 15789  007934  C1AA  F0A0         	movff	_producedEvent+2,cbusSendEvent@eventNum
 15790  007938  C1AB  F0A1         	movff	_producedEvent+3,cbusSendEvent@eventNum+1
 15791  00793C  C0AE  F0A2         	movff	sendProducedEvent@on,cbusSendEvent@onEvent
 15792  007940  0E00               	movlw	0
 15793  007942  ECA0  F051         	call	_cbusSendEvent
 15794  007946  0012               	return	
 15795  007948                     l18845:
 15796                           
 15797                           ; BSR set to: 0
 15798                           ;happeningsActions.c: 124: };happeningsActions.c: 127: if (getDefaultProducedEvent(happe
      +                          ning)) {
 15799  007948  51B4               	movf	sendProducedEvent@happening& (0+255),w,b
 15800  00794A  EC8F  F053         	call	_getDefaultProducedEvent
 15801  00794E  0900               	iorlw	0
 15802  007950  B4D8               	btfsc	status,2,c
 15803  007952  D013               	goto	l18853
 15804                           
 15805                           ; BSR set to: 0
 15806                           ;happeningsActions.c: 128: if (producedEvent.EN != 0)
 15807  007954  0101               	movlb	1	; () banked
 15808  007956  51AA               	movf	(_producedEvent+2)& (0+255),w,b
 15809  007958  11AB               	iorwf	(_producedEvent+3)& (0+255),w,b
 15810  00795A  B4D8               	btfsc	status,2,c
 15811  00795C  D00E               	goto	l18853
 15812                           
 15813                           ; BSR set to: 1
 15814                           ;happeningsActions.c: 129: return cbusSendEvent( 0, producedEvent.NN, producedEvent.EN, 
      +                          on );
 15815  00795E  C1A8  F09E         	movff	_producedEvent,cbusSendEvent@eventNode
 15816  007962  C1A9  F09F         	movff	_producedEvent+1,cbusSendEvent@eventNode+1
 15817  007966  C1AA  F0A0         	movff	_producedEvent+2,cbusSendEvent@eventNum
 15818  00796A  C1AB  F0A1         	movff	_producedEvent+3,cbusSendEvent@eventNum+1
 15819  00796E  C0AE  F0A2         	movff	sendProducedEvent@on,cbusSendEvent@onEvent
 15820  007972  0E00               	movlw	0
 15821  007974  ECA0  F051         	call	_cbusSendEvent
 15822  007978  0012               	return	
 15823  00797A                     l18853:
 15824                           
 15825                           ;happeningsActions.c: 131: return 1;
 15826  00797A  0E01               	movlw	1
 15827  00797C  0012               	return		;funcret
 15828  00797E                     __end_of_sendProducedEvent:
 15829                           	callstack 0
 15830                           
 15831 ;; *************** function _getProducedEvent *****************
 15832 ;; Defined at:
 15833 ;;		line 78 in file "../../github/CBUSlib/happeningsActions.c"
 15834 ;; Parameters:    Size  Location     Type
 15835 ;;  happening       1    wreg     unsigned char 
 15836 ;; Auto vars:     Size  Location     Type
 15837 ;;  happening       1   41[BANK0 ] unsigned char 
 15838 ;; Return value:  Size  Location     Type
 15839 ;;                  1    wreg      unsigned char 
 15840 ;; Registers used:
 15841 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15842 ;; Tracked objects:
 15843 ;;		On entry : 3F/0
 15844 ;;		On exit  : 3F/0
 15845 ;;		Unchanged: 0/0
 15846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 15847 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15848 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15849 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15850 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15851 ;;Total ram usage:        2 bytes
 15852 ;; Hardware stack levels used: 1
 15853 ;; Hardware stack levels required when called: 14
 15854 ;; This function calls:
 15855 ;;		_getEN
 15856 ;;		_getNN
 15857 ;; This function is called by:
 15858 ;;		_initialise
 15859 ;;		_sendProducedEvent
 15860 ;; This function uses a non-reentrant model
 15861 ;;
 15862                           
 15863                           	psect	text57
 15864  00957C                     __ptext57:
 15865                           	callstack 0
 15866  00957C                     _getProducedEvent:
 15867                           	callstack 13
 15868                           
 15869                           ;incstack = 0
 15870                           ;getProducedEvent@happening stored from wreg
 15871  00957C  6F89               	movwf	getProducedEvent@happening& (0+255),b
 15872                           
 15873                           ;happeningsActions.c: 82: if ((happening < 1U) || (happening >= 1U + (8U + 16U * 4U))) r
      +                          eturn 0;
 15874  00957E  0100               	movlb	0	; () banked
 15875  009580  5189               	movf	getProducedEvent@happening& (0+255),w,b
 15876  009582  B4D8               	btfsc	status,2,c
 15877  009584  D003               	goto	u23070
 15878                           
 15879                           ; BSR set to: 0
 15880  009586  0E48               	movlw	72
 15881  009588  6589               	cpfsgt	getProducedEvent@happening& (0+255),b
 15882  00958A  D002               	goto	l18591
 15883  00958C                     u23070:
 15884                           
 15885                           ; BSR set to: 0
 15886  00958C  0E00               	movlw	0
 15887  00958E  0012               	return	
 15888  009590                     l18591:
 15889                           
 15890                           ; BSR set to: 0
 15891                           ;happeningsActions.c: 84: if (happening2Event[happening-1U] == 0xff) return 0;
 15892  009590  0EFF               	movlw	low (_happening2Event+65535)
 15893  009592  2589               	addwf	getProducedEvent@happening& (0+255),w,b
 15894  009594  6ED9               	movwf	fsr2l,c
 15895  009596  6ADA               	clrf	fsr2h,c
 15896  009598  0E02               	movlw	high (_happening2Event+65535)
 15897  00959A  22DA               	addwfc	fsr2h,f,c
 15898  00959C  28DE               	incf	postinc2,w,c
 15899  00959E  B4D8               	btfsc	status,2,c
 15900  0095A0  D7F5               	goto	u23070
 15901                           
 15902                           ; BSR set to: 0
 15903                           ;happeningsActions.c: 85: producedEvent.NN = getNN(happening2Event[happening-1U]);
 15904  0095A2  0EFF               	movlw	low (_happening2Event+65535)
 15905  0095A4  2589               	addwf	getProducedEvent@happening& (0+255),w,b
 15906  0095A6  6ED9               	movwf	fsr2l,c
 15907  0095A8  6ADA               	clrf	fsr2h,c
 15908  0095AA  0E02               	movlw	high (_happening2Event+65535)
 15909  0095AC  22DA               	addwfc	fsr2h,f,c
 15910  0095AE  50DF               	movf	indf2,w,c
 15911  0095B0  ECA8  F043         	call	_getNN
 15912  0095B4  C07D  F1A8         	movff	?_getNN,_producedEvent
 15913  0095B8  C07E  F1A9         	movff	?_getNN+1,_producedEvent+1
 15914                           
 15915                           ;happeningsActions.c: 86: producedEvent.EN = getEN(happening2Event[happening-1U]);
 15916  0095BC  0EFF               	movlw	low (_happening2Event+65535)
 15917  0095BE  2589               	addwf	getProducedEvent@happening& (0+255),w,b
 15918  0095C0  6ED9               	movwf	fsr2l,c
 15919  0095C2  6ADA               	clrf	fsr2h,c
 15920  0095C4  0E02               	movlw	high (_happening2Event+65535)
 15921  0095C6  22DA               	addwfc	fsr2h,f,c
 15922  0095C8  50DF               	movf	indf2,w,c
 15923  0095CA  EC1F  F048         	call	_getEN
 15924  0095CE  C07D  F1AA         	movff	?_getEN,_producedEvent+2
 15925  0095D2  C07E  F1AB         	movff	?_getEN+1,_producedEvent+3
 15926                           
 15927                           ; BSR set to: 0
 15928                           ;happeningsActions.c: 87: return 1;
 15929  0095D6  0E01               	movlw	1
 15930                           
 15931                           ; BSR set to: 0
 15932  0095D8  0012               	return		;funcret
 15933  0095DA                     __end_of_getProducedEvent:
 15934                           	callstack 0
 15935                           
 15936 ;; *************** function _getDefaultProducedEvent *****************
 15937 ;; Defined at:
 15938 ;;		line 189 in file "../../github/CANMIOfirmware/mioEvents.c"
 15939 ;; Parameters:    Size  Location     Type
 15940 ;;  paction         1    wreg     unsigned char 
 15941 ;; Auto vars:     Size  Location     Type
 15942 ;;  paction         1    0[COMRAM] unsigned char 
 15943 ;; Return value:  Size  Location     Type
 15944 ;;                  1    wreg      unsigned char 
 15945 ;; Registers used:
 15946 ;;		wreg
 15947 ;; Tracked objects:
 15948 ;;		On entry : 3F/0
 15949 ;;		On exit  : 3F/0
 15950 ;;		Unchanged: 3F/0
 15951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 15952 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15953 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15954 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15955 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15956 ;;Total ram usage:        0 bytes
 15957 ;; Hardware stack levels used: 1
 15958 ;; Hardware stack levels required when called: 8
 15959 ;; This function calls:
 15960 ;;		Nothing
 15961 ;; This function is called by:
 15962 ;;		_sendProducedEvent
 15963 ;; This function uses a non-reentrant model
 15964 ;;
 15965                           
 15966                           	psect	text58
 15967  00A71E                     __ptext58:
 15968                           	callstack 0
 15969  00A71E                     _getDefaultProducedEvent:
 15970                           	callstack 19
 15971                           
 15972                           ; BSR set to: 0
 15973                           ;mioEvents.c: 190: return 0;
 15974                           
 15975                           ; BSR set to: 0
 15976                           ;incstack = 0
 15977  00A71E  0E00               	movlw	0
 15978                           
 15979                           ; BSR set to: 0
 15980  00A720  0012               	return		;funcret
 15981  00A722                     __end_of_getDefaultProducedEvent:
 15982                           	callstack 0
 15983                           
 15984 ;; *************** function _cbusSendEvent *****************
 15985 ;; Defined at:
 15986 ;;		line 198 in file "../../github/CBUSlib/cbus.c"
 15987 ;; Parameters:    Size  Location     Type
 15988 ;;  cbusNum         1    wreg     unsigned char 
 15989 ;;  eventNode       2   62[BANK0 ] unsigned int 
 15990 ;;  eventNum        2   64[BANK0 ] unsigned int 
 15991 ;;  onEvent         1   66[BANK0 ] unsigned char 
 15992 ;; Auto vars:     Size  Location     Type
 15993 ;;  cbusNum         1   77[BANK0 ] unsigned char 
 15994 ;;  msg            10   67[BANK0 ] unsigned char [10]
 15995 ;; Return value:  Size  Location     Type
 15996 ;;                  1    wreg      unsigned char 
 15997 ;; Registers used:
 15998 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15999 ;; Tracked objects:
 16000 ;;		On entry : 3E/0
 16001 ;;		On exit  : 3F/0
 16002 ;;		Unchanged: 0/0
 16003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 16004 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16005 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16006 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16007 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16008 ;;Total ram usage:       16 bytes
 16009 ;; Hardware stack levels used: 1
 16010 ;; Hardware stack levels required when called: 14
 16011 ;; This function calls:
 16012 ;;		_cbusSendEventWithData
 16013 ;; This function is called by:
 16014 ;;		_sendProducedEvent
 16015 ;; This function uses a non-reentrant model
 16016 ;;
 16017                           
 16018                           	psect	text59
 16019  00A340                     __ptext59:
 16020                           	callstack 0
 16021  00A340                     _cbusSendEvent:
 16022                           	callstack 13
 16023                           
 16024                           ; BSR set to: 0
 16025                           ;incstack = 0
 16026                           ;cbusSendEvent@cbusNum stored from wreg
 16027  00A340  0100               	movlb	0	; () banked
 16028  00A342  6FAD               	movwf	cbusSendEvent@cbusNum& (0+255),b
 16029                           
 16030                           ;cbus.c: 200: BYTE msg[d0+4];;cbus.c: 202: return cbusSendEventWithData( cbusNum, eventN
      +                          ode, eventNum, onEvent, msg, 0);
 16031  00A344  C09E  F093         	movff	cbusSendEvent@eventNode,cbusSendEventWithData@eventNode
 16032  00A348  C09F  F094         	movff	cbusSendEvent@eventNode+1,cbusSendEventWithData@eventNode+1
 16033  00A34C  C0A0  F095         	movff	cbusSendEvent@eventNum,cbusSendEventWithData@eventNum
 16034  00A350  C0A1  F096         	movff	cbusSendEvent@eventNum+1,cbusSendEventWithData@eventNum+1
 16035  00A354  C0A2  F097         	movff	cbusSendEvent@onEvent,cbusSendEventWithData@onEvent
 16036  00A358  0EA3               	movlw	low cbusSendEvent@msg
 16037  00A35A  0100               	movlb	0	; () banked
 16038  00A35C  6F98               	movwf	cbusSendEventWithData@msg& (0+255),b
 16039  00A35E  0E00               	movlw	0
 16040  00A360  6F99               	movwf	cbusSendEventWithData@datalen& (0+255),b
 16041  00A362  51AD               	movf	cbusSendEvent@cbusNum& (0+255),w,b
 16042  00A364  EC63  F03F         	call	_cbusSendEventWithData
 16043                           
 16044                           ; BSR set to: 0
 16045  00A368  0012               	return		;funcret
 16046  00A36A                     __end_of_cbusSendEvent:
 16047                           	callstack 0
 16048                           
 16049 ;; *************** function _cbusSendEventWithData *****************
 16050 ;; Defined at:
 16051 ;;		line 218 in file "../../github/CBUSlib/cbus.c"
 16052 ;; Parameters:    Size  Location     Type
 16053 ;;  cbusNum         1    wreg     unsigned char 
 16054 ;;  eventNode       2   51[BANK0 ] unsigned int 
 16055 ;;  eventNum        2   53[BANK0 ] unsigned int 
 16056 ;;  onEvent         1   55[BANK0 ] unsigned char 
 16057 ;;  msg             1   56[BANK0 ] PTR unsigned char 
 16058 ;;		 -> cbusSendEvent@msg(10), cbusSendMyEvent@msg(10), 
 16059 ;;  datalen         1   57[BANK0 ] unsigned char 
 16060 ;; Auto vars:     Size  Location     Type
 16061 ;;  cbusNum         1   61[BANK0 ] unsigned char 
 16062 ;;  ret             1   60[BANK0 ] unsigned char 
 16063 ;; Return value:  Size  Location     Type
 16064 ;;                  1    wreg      unsigned char 
 16065 ;; Registers used:
 16066 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16067 ;; Tracked objects:
 16068 ;;		On entry : 3F/0
 16069 ;;		On exit  : 3F/0
 16070 ;;		Unchanged: 0/0
 16071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 16072 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16073 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16074 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16075 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16076 ;;Total ram usage:       11 bytes
 16077 ;; Hardware stack levels used: 1
 16078 ;; Hardware stack levels required when called: 13
 16079 ;; This function calls:
 16080 ;;		_canQueueRx
 16081 ;;		_cbusSendMsgNN
 16082 ;; This function is called by:
 16083 ;;		_cbusSendEvent
 16084 ;; This function uses a non-reentrant model
 16085 ;;
 16086                           
 16087                           	psect	text60
 16088  007EC6                     __ptext60:
 16089                           	callstack 0
 16090  007EC6                     _cbusSendEventWithData:
 16091                           	callstack 13
 16092                           
 16093                           ; BSR set to: 0
 16094                           ;incstack = 0
 16095                           ;cbusSendEventWithData@cbusNum stored from wreg
 16096  007EC6  6F9D               	movwf	cbusSendEventWithData@cbusNum& (0+255),b
 16097                           
 16098                           ;cbus.c: 220: BOOL ret;;cbus.c: 221: msg[d0] = 0x90;
 16099  007EC8  0100               	movlb	0	; () banked
 16100  007ECA  5198               	movf	cbusSendEventWithData@msg& (0+255),w,b
 16101  007ECC  6ED9               	movwf	fsr2l,c
 16102  007ECE  6ADA               	clrf	fsr2h,c
 16103  007ED0  0E06               	movlw	6
 16104  007ED2  26D9               	addwf	fsr2l,f,c
 16105  007ED4  0E90               	movlw	144
 16106  007ED6  6EDF               	movwf	indf2,c
 16107                           
 16108                           ; BSR set to: 0
 16109                           ;cbus.c: 223: if (eventNode == 0)
 16110  007ED8  5193               	movf	cbusSendEventWithData@eventNode& (0+255),w,b
 16111  007EDA  1194               	iorwf	(cbusSendEventWithData@eventNode+1)& (0+255),w,b
 16112  007EDC  A4D8               	btfss	status,2,c
 16113  007EDE  D00B               	goto	l18547
 16114                           
 16115                           ; BSR set to: 0
 16116                           ;cbus.c: 224: {;cbus.c: 225: msg[d0] |= 0x08;
 16117  007EE0  5198               	movf	cbusSendEventWithData@msg& (0+255),w,b
 16118  007EE2  6ED9               	movwf	fsr2l,c
 16119  007EE4  6ADA               	clrf	fsr2h,c
 16120  007EE6  0E06               	movlw	6
 16121  007EE8  26D9               	addwf	fsr2l,f,c
 16122  007EEA  0E00               	movlw	0
 16123  007EEC  86DB               	bsf	plusw2,3,c
 16124                           
 16125                           ; BSR set to: 0
 16126                           ;cbus.c: 226: eventNode = nodeID;
 16127  007EEE  C001  F093         	movff	_nodeID,cbusSendEventWithData@eventNode
 16128  007EF2  C002  F094         	movff	_nodeID+1,cbusSendEventWithData@eventNode+1
 16129  007EF6                     l18547:
 16130                           
 16131                           ; BSR set to: 0
 16132                           ;cbus.c: 227: };cbus.c: 229: if (!onEvent)
 16133  007EF6  5197               	movf	cbusSendEventWithData@onEvent& (0+255),w,b
 16134  007EF8  A4D8               	btfss	status,2,c
 16135  007EFA  D007               	goto	l18551
 16136                           
 16137                           ; BSR set to: 0
 16138                           ;cbus.c: 230: msg[d0] |= 0x01;
 16139  007EFC  5198               	movf	cbusSendEventWithData@msg& (0+255),w,b
 16140  007EFE  6ED9               	movwf	fsr2l,c
 16141  007F00  6ADA               	clrf	fsr2h,c
 16142  007F02  0E06               	movlw	6
 16143  007F04  26D9               	addwf	fsr2l,f,c
 16144  007F06  0E00               	movlw	0
 16145  007F08  80DB               	bsf	plusw2,0,c
 16146  007F0A                     l18551:
 16147                           
 16148                           ; BSR set to: 0
 16149                           ;cbus.c: 232: if (datalen > 0)
 16150  007F0A  5199               	movf	cbusSendEventWithData@datalen& (0+255),w,b
 16151  007F0C  B4D8               	btfsc	status,2,c
 16152  007F0E  D00F               	goto	l1757
 16153                           
 16154                           ; BSR set to: 0
 16155                           ;cbus.c: 233: msg[d0] |= (unsigned char)(datalen << 5U);
 16156  007F10  C099  F09A         	movff	cbusSendEventWithData@datalen,??_cbusSendEventWithData
 16157  007F14  0E05               	movlw	5
 16158  007F16  6F9B               	movwf	(??_cbusSendEventWithData+1)& (0+255),b
 16159  007F18                     u23015:
 16160  007F18  90D8               	bcf	status,0,c
 16161  007F1A  379A               	rlcf	??_cbusSendEventWithData& (0+255),f,b
 16162  007F1C  2F9B               	decfsz	(??_cbusSendEventWithData+1)& (0+255),f,b
 16163  007F1E  D7FC               	goto	u23015
 16164  007F20  5198               	movf	cbusSendEventWithData@msg& (0+255),w,b
 16165  007F22  6ED9               	movwf	fsr2l,c
 16166  007F24  6ADA               	clrf	fsr2h,c
 16167  007F26  0E06               	movlw	6
 16168  007F28  26D9               	addwf	fsr2l,f,c
 16169  007F2A  519A               	movf	??_cbusSendEventWithData& (0+255),w,b
 16170  007F2C  12DF               	iorwf	indf2,f,c
 16171  007F2E                     l1757:
 16172                           
 16173                           ; BSR set to: 0
 16174                           ;cbus.c: 235: msg[d3] = eventNum>>8;
 16175  007F2E  5198               	movf	cbusSendEventWithData@msg& (0+255),w,b
 16176  007F30  6ED9               	movwf	fsr2l,c
 16177  007F32  6ADA               	clrf	fsr2h,c
 16178  007F34  0E09               	movlw	9
 16179  007F36  26D9               	addwf	fsr2l,f,c
 16180  007F38  C096  FFDF         	movff	cbusSendEventWithData@eventNum+1,indf2
 16181                           
 16182                           ;cbus.c: 236: msg[d4] = eventNum & 0xFF;
 16183  007F3C  5198               	movf	cbusSendEventWithData@msg& (0+255),w,b
 16184  007F3E  6ED9               	movwf	fsr2l,c
 16185  007F40  6ADA               	clrf	fsr2h,c
 16186  007F42  0E0A               	movlw	10
 16187  007F44  26D9               	addwf	fsr2l,f,c
 16188  007F46  C095  FFDF         	movff	cbusSendEventWithData@eventNum,indf2
 16189                           
 16190                           ; BSR set to: 0
 16191                           ;cbus.c: 238: ret = cbusSendMsgNN( cbusNum, eventNode, msg );
 16192  007F4A  C093  F08F         	movff	cbusSendEventWithData@eventNode,cbusSendMsgNN@eventNode
 16193  007F4E  C094  F090         	movff	cbusSendEventWithData@eventNode+1,cbusSendMsgNN@eventNode+1
 16194  007F52  C098  F091         	movff	cbusSendEventWithData@msg,cbusSendMsgNN@msg
 16195  007F56  519D               	movf	cbusSendEventWithData@cbusNum& (0+255),w,b
 16196  007F58  EC52  F04F         	call	_cbusSendMsgNN
 16197  007F5C  6F9C               	movwf	cbusSendEventWithData@ret& (0+255),b
 16198                           
 16199                           ; BSR set to: 0
 16200                           ;cbus.c: 241: if ((cbusNum == 0) || (cbusNum == 0xFF) )
 16201  007F5E  519D               	movf	cbusSendEventWithData@cbusNum& (0+255),w,b
 16202  007F60  B4D8               	btfsc	status,2,c
 16203  007F62  D003               	goto	u23030
 16204                           
 16205                           ; BSR set to: 0
 16206  007F64  299D               	incf	cbusSendEventWithData@cbusNum& (0+255),w,b
 16207  007F66  A4D8               	btfss	status,2,c
 16208  007F68  D004               	goto	l18563
 16209  007F6A                     u23030:
 16210                           
 16211                           ; BSR set to: 0
 16212                           ;cbus.c: 242: canQueueRx( (CanPacket*)msg );
 16213  007F6A  C098  F07F         	movff	cbusSendEventWithData@msg,canQueueRx@msg
 16214  007F6E  EC38  F053         	call	_canQueueRx	;wreg free
 16215  007F72                     l18563:
 16216                           
 16217                           ;cbus.c: 245: return ret;
 16218  007F72  0100               	movlb	0	; () banked
 16219  007F74  519C               	movf	cbusSendEventWithData@ret& (0+255),w,b
 16220                           
 16221                           ; BSR set to: 0
 16222  007F76  0012               	return		;funcret
 16223  007F78                     __end_of_cbusSendEventWithData:
 16224                           	callstack 0
 16225                           
 16226 ;; *************** function _canQueueRx *****************
 16227 ;; Defined at:
 16228 ;;		line 416 in file "../../github/CBUSlib/can18.c"
 16229 ;; Parameters:    Size  Location     Type
 16230 ;;  msg             1   31[BANK0 ] PTR struct .
 16231 ;;		 -> cbusSendDataEvent@msg(14), cbusSendEvent@msg(10), cbusSendMyEvent@msg(10), 
 16232 ;; Auto vars:     Size  Location     Type
 16233 ;;		None
 16234 ;; Return value:  Size  Location     Type
 16235 ;;                  1    wreg      unsigned char 
 16236 ;; Registers used:
 16237 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16238 ;; Tracked objects:
 16239 ;;		On entry : 3F/0
 16240 ;;		On exit  : 3F/1
 16241 ;;		Unchanged: 0/0
 16242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 16243 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16244 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16245 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16246 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16247 ;;Total ram usage:        1 bytes
 16248 ;; Hardware stack levels used: 1
 16249 ;; Hardware stack levels required when called: 10
 16250 ;; This function calls:
 16251 ;;		_insertIntoRxFifo
 16252 ;; This function is called by:
 16253 ;;		_cbusSendEventWithData
 16254 ;; This function uses a non-reentrant model
 16255 ;;
 16256                           
 16257                           	psect	text61
 16258  00A670                     __ptext61:
 16259                           	callstack 0
 16260  00A670                     _canQueueRx:
 16261                           	callstack 15
 16262                           
 16263                           ; BSR set to: 0
 16264                           ;can18.c: 419: PIE5bits.FIFOWMIE = 0;
 16265                           
 16266                           ; BSR set to: 0
 16267                           ;incstack = 0
 16268  00A670  9076               	bcf	118,0,c	;volatile
 16269                           
 16270                           ; BSR set to: 0
 16271                           ;can18.c: 420: insertIntoRxFifo( msg );
 16272  00A672  C07F  F07C         	movff	canQueueRx@msg,insertIntoRxFifo@ptr
 16273  00A676  6B7D               	clrf	(insertIntoRxFifo@ptr+1)& (0+255),b
 16274  00A678  EC2C  F04A         	call	_insertIntoRxFifo	;wreg free
 16275                           
 16276                           ; BSR set to: 1
 16277                           ;can18.c: 421: PIE5bits.FIFOWMIE = 1;
 16278  00A67C  8076               	bsf	118,0,c	;volatile
 16279                           
 16280                           ; BSR set to: 1
 16281  00A67E  0012               	return		;funcret
 16282  00A680                     __end_of_canQueueRx:
 16283                           	callstack 0
 16284                           
 16285 ;; *************** function _insertIntoRxFifo *****************
 16286 ;; Defined at:
 16287 ;;		line 561 in file "../../github/CBUSlib/can18.c"
 16288 ;; Parameters:    Size  Location     Type
 16289 ;;  ptr             2   28[BANK0 ] PTR struct .
 16290 ;;		 -> cbusSendDataEvent@msg(14), cbusSendEvent@msg(10), cbusSendMyEvent@msg(10), B5CON(1), 
 16291 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 16292 ;;		 -> B0CON(1), RXB1CON(1), RXB0CON(1), 
 16293 ;; Auto vars:     Size  Location     Type
 16294 ;;		None
 16295 ;; Return value:  Size  Location     Type
 16296 ;;                  1    wreg      unsigned char 
 16297 ;; Registers used:
 16298 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16299 ;; Tracked objects:
 16300 ;;		On entry : 3F/0
 16301 ;;		On exit  : 3F/1
 16302 ;;		Unchanged: 0/0
 16303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 16304 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16305 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16306 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16307 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16308 ;;Total ram usage:        3 bytes
 16309 ;; Hardware stack levels used: 1
 16310 ;; Hardware stack levels required when called: 9
 16311 ;; This function calls:
 16312 ;;		_memcpy
 16313 ;; This function is called by:
 16314 ;;		_canQueueRx
 16315 ;; This function uses a non-reentrant model
 16316 ;;
 16317                           
 16318                           	psect	text62
 16319  009458                     __ptext62:
 16320                           	callstack 0
 16321  009458                     _insertIntoRxFifo:
 16322                           	callstack 15
 16323                           
 16324                           ; BSR set to: 0
 16325                           ;can18.c: 564: memcpy(canRxFifo[rxIndexNextFree].buffer, ptr, ptr->buffer[dlc] + 6U);
 16326                           
 16327                           ; BSR set to: 1
 16328                           ;incstack = 0
 16329  009458  500F               	movf	_rxIndexNextFree^0,w,c
 16330  00945A  0D10               	mullw	16
 16331  00945C  0E00               	movlw	low _canRxFifo
 16332  00945E  24F3               	addwf	243,w,c
 16333  009460  6F71               	movwf	memcpy@d1& (0+255),b
 16334  009462  0E05               	movlw	high _canRxFifo
 16335  009464  20F4               	addwfc	prodh,w,c
 16336  009466  6F72               	movwf	(memcpy@d1+1)& (0+255),b
 16337  009468  C07C  F073         	movff	insertIntoRxFifo@ptr,memcpy@s1
 16338  00946C  C07D  F074         	movff	insertIntoRxFifo@ptr+1,memcpy@s1+1
 16339  009470  EE20 F005          	lfsr	2,5
 16340  009474  517C               	movf	insertIntoRxFifo@ptr& (0+255),w,b
 16341  009476  26D9               	addwf	fsr2l,f,c
 16342  009478  517D               	movf	(insertIntoRxFifo@ptr+1)& (0+255),w,b
 16343  00947A  22DA               	addwfc	fsr2h,f,c
 16344  00947C  50DF               	movf	indf2,w,c
 16345  00947E  6F7E               	movwf	??_insertIntoRxFifo& (0+255),b
 16346  009480  0E06               	movlw	6
 16347  009482  257E               	addwf	??_insertIntoRxFifo& (0+255),w,b
 16348  009484  6F75               	movwf	memcpy@n& (0+255),b
 16349  009486  6B76               	clrf	(memcpy@n+1)& (0+255),b
 16350  009488  0E00               	movlw	0
 16351  00948A  2376               	addwfc	(memcpy@n+1)& (0+255),f,b
 16352  00948C  EC6B  F04E         	call	_memcpy	;wreg free
 16353                           
 16354                           ; BSR set to: 0
 16355                           ;can18.c: 565: rxFifoUsage++;
 16356  009490  0101               	movlb	1	; () banked
 16357  009492  2BD8               	incf	_rxFifoUsage& (0+255),f,b
 16358                           
 16359                           ; BSR set to: 1
 16360                           ;can18.c: 567: if (++rxIndexNextFree >= 16U)
 16361  009494  2A0F               	incf	_rxIndexNextFree^0,f,c
 16362  009496  0E0F               	movlw	15
 16363  009498  640F               	cpfsgt	_rxIndexNextFree^0,c
 16364  00949A  D002               	goto	l18201
 16365                           
 16366                           ; BSR set to: 1
 16367                           ;can18.c: 568: {;can18.c: 569: rxIndexNextFree = 0;
 16368  00949C  0E00               	movlw	0
 16369  00949E  6E0F               	movwf	_rxIndexNextFree^0,c
 16370  0094A0                     l18201:
 16371                           
 16372                           ; BSR set to: 1
 16373                           ;can18.c: 570: };can18.c: 572: if (rxIndexNextFree == rxIndexNextUsed)
 16374  0094A0  500E               	movf	_rxIndexNextUsed^0,w,c
 16375  0094A2  180F               	xorwf	_rxIndexNextFree^0,w,c
 16376  0094A4  A4D8               	btfss	status,2,c
 16377  0094A6  0012               	return	
 16378                           
 16379                           ; BSR set to: 1
 16380                           ;can18.c: 573: {;can18.c: 574: rxOflowCount++;
 16381  0094A8  2BDA               	incf	_rxOflowCount& (0+255),f,b
 16382                           
 16383                           ; BSR set to: 1
 16384                           ;can18.c: 575: if (rxIndexNextFree == 0)
 16385  0094AA  500F               	movf	_rxIndexNextFree^0,w,c
 16386  0094AC  A4D8               	btfss	status,2,c
 16387  0094AE  D003               	goto	l18209
 16388                           
 16389                           ; BSR set to: 1
 16390                           ;can18.c: 576: rxIndexNextFree = 16U - 1;
 16391  0094B0  0E0F               	movlw	15
 16392  0094B2  6E0F               	movwf	_rxIndexNextFree^0,c
 16393  0094B4  0012               	return	
 16394  0094B6                     l18209:
 16395                           
 16396                           ; BSR set to: 1
 16397                           ;can18.c: 577: else;can18.c: 578: rxIndexNextFree--;
 16398  0094B6  060F               	decf	_rxIndexNextFree^0,f,c
 16399                           
 16400                           ; BSR set to: 1
 16401  0094B8  0012               	return		;funcret
 16402  0094BA                     __end_of_insertIntoRxFifo:
 16403                           	callstack 0
 16404                           
 16405 ;; *************** function _checkFlashing *****************
 16406 ;; Defined at:
 16407 ;;		line 127 in file "../../github/CBUSlib/StatusLeds.c"
 16408 ;; Parameters:    Size  Location     Type
 16409 ;;		None
 16410 ;; Auto vars:     Size  Location     Type
 16411 ;;		None
 16412 ;; Return value:  Size  Location     Type
 16413 ;;                  1    wreg      void 
 16414 ;; Registers used:
 16415 ;;		wreg, status,2, status,0, cstack
 16416 ;; Tracked objects:
 16417 ;;		On entry : 3D/2
 16418 ;;		On exit  : 3E/0
 16419 ;;		Unchanged: 0/0
 16420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 16421 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16422 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16423 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16424 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16425 ;;Total ram usage:        4 bytes
 16426 ;; Hardware stack levels used: 1
 16427 ;; Hardware stack levels required when called: 10
 16428 ;; This function calls:
 16429 ;;		_doFLiMFlash
 16430 ;;		_tickGet
 16431 ;; This function is called by:
 16432 ;;		_main
 16433 ;; This function uses a non-reentrant model
 16434 ;;
 16435                           
 16436                           	psect	text63
 16437  00734A                     __ptext63:
 16438                           	callstack 0
 16439  00734A                     _checkFlashing:
 16440                           	callstack 20
 16441                           
 16442                           ;StatusLeds.c: 129: switch (flashState)
 16443                           
 16444                           ; BSR set to: 1
 16445                           ;incstack = 0
 16446  00734A  D042               	goto	l21621
 16447  00734C                     l21611:
 16448                           
 16449                           ; BSR set to: 1
 16450                           ;StatusLeds.c: 132: if ((tickGet() - flashTime.Val) > (62500/2))
 16451  00734C  ECA3  F04B         	call	_tickGet	;wreg free
 16452  007350  0101               	movlb	1	; () banked
 16453  007352  51A4               	movf	_flashTime& (0+255),w,b
 16454  007354  0100               	movlb	0	; () banked
 16455  007356  5D71               	subwf	?_tickGet& (0+255),w,b
 16456  007358  6F7C               	movwf	??_checkFlashing& (0+255),b
 16457  00735A  0101               	movlb	1	; () banked
 16458  00735C  51A5               	movf	(_flashTime+1)& (0+255),w,b
 16459  00735E  0100               	movlb	0	; () banked
 16460  007360  5972               	subwfb	(?_tickGet+1)& (0+255),w,b
 16461  007362  6F7D               	movwf	(??_checkFlashing+1)& (0+255),b
 16462  007364  0101               	movlb	1	; () banked
 16463  007366  51A6               	movf	(_flashTime+2)& (0+255),w,b
 16464  007368  0100               	movlb	0	; () banked
 16465  00736A  5973               	subwfb	(?_tickGet+2)& (0+255),w,b
 16466  00736C  6F7E               	movwf	(??_checkFlashing+2)& (0+255),b
 16467  00736E  0101               	movlb	1	; () banked
 16468  007370  51A7               	movf	(_flashTime+3)& (0+255),w,b
 16469  007372  0100               	movlb	0	; () banked
 16470  007374  5974               	subwfb	(?_tickGet+3)& (0+255),w,b
 16471  007376  6F7F               	movwf	(??_checkFlashing+3)& (0+255),b
 16472  007378  517F               	movf	(??_checkFlashing+3)& (0+255),w,b
 16473  00737A  117E               	iorwf	(??_checkFlashing+2)& (0+255),w,b
 16474  00737C  E106               	bnz	u27800
 16475  00737E  0E13               	movlw	19
 16476  007380  5D7C               	subwf	??_checkFlashing& (0+255),w,b
 16477  007382  0E7A               	movlw	122
 16478  007384  597D               	subwfb	(??_checkFlashing+1)& (0+255),w,b
 16479  007386  A0D8               	btfss	status,0,c
 16480  007388  D053               	goto	l21639
 16481  00738A                     u27800:
 16482  00738A                     l21613:
 16483                           
 16484                           ; BSR set to: 0
 16485                           ;StatusLeds.c: 133: doFLiMFlash();
 16486  00738A  EC1E  F050         	call	_doFLiMFlash	;wreg free
 16487  00738E  D050               	goto	l21639
 16488  007390                     l21615:
 16489                           
 16490                           ; BSR set to: 1
 16491                           ;StatusLeds.c: 137: if ((tickGet() - flashTime.Val) > (62500/2)/3)
 16492  007390  ECA3  F04B         	call	_tickGet	;wreg free
 16493  007394  0101               	movlb	1	; () banked
 16494  007396  51A4               	movf	_flashTime& (0+255),w,b
 16495  007398  0100               	movlb	0	; () banked
 16496  00739A  5D71               	subwf	?_tickGet& (0+255),w,b
 16497  00739C  6F7C               	movwf	??_checkFlashing& (0+255),b
 16498  00739E  0101               	movlb	1	; () banked
 16499  0073A0  51A5               	movf	(_flashTime+1)& (0+255),w,b
 16500  0073A2  0100               	movlb	0	; () banked
 16501  0073A4  5972               	subwfb	(?_tickGet+1)& (0+255),w,b
 16502  0073A6  6F7D               	movwf	(??_checkFlashing+1)& (0+255),b
 16503  0073A8  0101               	movlb	1	; () banked
 16504  0073AA  51A6               	movf	(_flashTime+2)& (0+255),w,b
 16505  0073AC  0100               	movlb	0	; () banked
 16506  0073AE  5973               	subwfb	(?_tickGet+2)& (0+255),w,b
 16507  0073B0  6F7E               	movwf	(??_checkFlashing+2)& (0+255),b
 16508  0073B2  0101               	movlb	1	; () banked
 16509  0073B4  51A7               	movf	(_flashTime+3)& (0+255),w,b
 16510  0073B6  0100               	movlb	0	; () banked
 16511  0073B8  5974               	subwfb	(?_tickGet+3)& (0+255),w,b
 16512  0073BA  6F7F               	movwf	(??_checkFlashing+3)& (0+255),b
 16513  0073BC  517F               	movf	(??_checkFlashing+3)& (0+255),w,b
 16514  0073BE  117E               	iorwf	(??_checkFlashing+2)& (0+255),w,b
 16515  0073C0  E1E4               	bnz	l21613
 16516  0073C2  0EB1               	movlw	177
 16517  0073C4  5D7C               	subwf	??_checkFlashing& (0+255),w,b
 16518  0073C6  0E28               	movlw	40
 16519  0073C8  597D               	subwfb	(??_checkFlashing+1)& (0+255),w,b
 16520  0073CA  B0D8               	btfsc	status,0,c
 16521  0073CC  D7DE               	goto	u27800
 16522  0073CE  D030               	goto	l21639
 16523  0073D0                     l21621:
 16524  0073D0  0101               	movlb	1	; () banked
 16525  0073D2  51D3               	movf	_flashState& (0+255),w,b
 16526                           
 16527                           ; Switch size 1, requested type "simple"
 16528                           ; Number of cases is 2, Range of values is 1 to 2
 16529                           ; switch strategies available:
 16530                           ; Name         Instructions Cycles
 16531                           ; simple_byte            7     4 (average)
 16532                           ;	Chosen strategy is simple_byte
 16533  0073D4  0A01               	xorlw	1	; case 1
 16534  0073D6  B4D8               	btfsc	status,2,c
 16535  0073D8  D7B9               	goto	l21611
 16536  0073DA  0A03               	xorlw	3	; case 2
 16537  0073DC  B4D8               	btfsc	status,2,c
 16538  0073DE  D7D8               	goto	l21615
 16539  0073E0  D027               	goto	l21639
 16540  0073E2                     l21623:
 16541                           
 16542                           ; BSR set to: 1
 16543                           ;StatusLeds.c: 144: if (flimState == fsSLiM) {
 16544  0073E2  5016               	movf	_flimState^0,w,c
 16545  0073E4  A4D8               	btfss	status,2,c
 16546  0073E6  D002               	goto	l2568
 16547                           
 16548                           ; BSR set to: 1
 16549                           ;StatusLeds.c: 145: LATBbits.LATB6 = 1;
 16550  0073E8  8C8A               	bsf	138,6,c	;volatile
 16551                           
 16552                           ;StatusLeds.c: 146: } else {
 16553  0073EA  D001               	goto	l21627
 16554  0073EC                     l2568:
 16555                           
 16556                           ; BSR set to: 1
 16557                           ;StatusLeds.c: 147: LATBbits.LATB7 = 1;
 16558  0073EC  8E8A               	bsf	138,7,c	;volatile
 16559  0073EE                     l21627:
 16560                           
 16561                           ; BSR set to: 1
 16562                           ;StatusLeds.c: 148: };StatusLeds.c: 149: flickerState = flickOn;
 16563  0073EE  0E02               	movlw	2
 16564  0073F0  6FD2               	movwf	_flickerState& (0+255),b
 16565                           
 16566                           ;StatusLeds.c: 150: break;
 16567  0073F2  0012               	return	
 16568  0073F4                     l21629:
 16569                           
 16570                           ; BSR set to: 1
 16571                           ;StatusLeds.c: 153: if (tickGet() >= flickerTime.Val) {
 16572  0073F4  ECA3  F04B         	call	_tickGet	;wreg free
 16573  0073F8  0101               	movlb	1	; () banked
 16574  0073FA  51A0               	movf	_flickerTime& (0+255),w,b
 16575  0073FC  0100               	movlb	0	; () banked
 16576  0073FE  5D71               	subwf	?_tickGet& (0+255),w,b
 16577  007400  0101               	movlb	1	; () banked
 16578  007402  51A1               	movf	(_flickerTime+1)& (0+255),w,b
 16579  007404  0100               	movlb	0	; () banked
 16580  007406  5972               	subwfb	(?_tickGet+1)& (0+255),w,b
 16581  007408  0101               	movlb	1	; () banked
 16582  00740A  51A2               	movf	(_flickerTime+2)& (0+255),w,b
 16583  00740C  0100               	movlb	0	; () banked
 16584  00740E  5973               	subwfb	(?_tickGet+2)& (0+255),w,b
 16585  007410  0101               	movlb	1	; () banked
 16586  007412  51A3               	movf	(_flickerTime+3)& (0+255),w,b
 16587  007414  0100               	movlb	0	; () banked
 16588  007416  5974               	subwfb	(?_tickGet+3)& (0+255),w,b
 16589  007418  A0D8               	btfss	status,0,c
 16590  00741A  0012               	return	
 16591                           
 16592                           ; BSR set to: 0
 16593                           ;StatusLeds.c: 155: if (flimState == fsSLiM) {
 16594  00741C  5016               	movf	_flimState^0,w,c
 16595  00741E  A4D8               	btfss	status,2,c
 16596  007420  D002               	goto	l2573
 16597                           
 16598                           ; BSR set to: 0
 16599                           ;StatusLeds.c: 156: LATBbits.LATB6 = 0;
 16600  007422  9C8A               	bcf	138,6,c	;volatile
 16601                           
 16602                           ;StatusLeds.c: 157: } else {
 16603  007424  D001               	goto	l21635
 16604  007426                     l2573:
 16605                           
 16606                           ; BSR set to: 0
 16607                           ;StatusLeds.c: 158: LATBbits.LATB7 = 0;
 16608  007426  9E8A               	bcf	138,7,c	;volatile
 16609  007428                     l21635:
 16610                           
 16611                           ; BSR set to: 0
 16612                           ;StatusLeds.c: 159: };StatusLeds.c: 160: flickerState = flickOff;
 16613  007428  0E00               	movlw	0
 16614  00742A  0101               	movlb	1	; () banked
 16615  00742C  6FD2               	movwf	_flickerState& (0+255),b
 16616  00742E  0012               	return	
 16617  007430                     l21639:
 16618  007430  0101               	movlb	1	; () banked
 16619  007432  51D2               	movf	_flickerState& (0+255),w,b
 16620                           
 16621                           ; Switch size 1, requested type "simple"
 16622                           ; Number of cases is 2, Range of values is 1 to 2
 16623                           ; switch strategies available:
 16624                           ; Name         Instructions Cycles
 16625                           ; simple_byte            7     4 (average)
 16626                           ;	Chosen strategy is simple_byte
 16627  007434  0A01               	xorlw	1	; case 1
 16628  007436  B4D8               	btfsc	status,2,c
 16629  007438  D7D4               	goto	l21623
 16630  00743A  0A03               	xorlw	3	; case 2
 16631  00743C  A4D8               	btfss	status,2,c
 16632  00743E  0012               	return	
 16633  007440  D7D9               	goto	l21629
 16634  007442                     __end_of_checkFlashing:
 16635                           	callstack 0
 16636                           
 16637 ;; *************** function _checkCBUS *****************
 16638 ;; Defined at:
 16639 ;;		line 626 in file "../../github/CANMIOfirmware/main.c"
 16640 ;; Parameters:    Size  Location     Type
 16641 ;;		None
 16642 ;; Auto vars:     Size  Location     Type
 16643 ;;  msg            20    0[BANK2 ] unsigned char [20]
 16644 ;; Return value:  Size  Location     Type
 16645 ;;                  1    wreg      unsigned char 
 16646 ;; Registers used:
 16647 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16648 ;; Tracked objects:
 16649 ;;		On entry : 0/0
 16650 ;;		On exit  : 0/0
 16651 ;;		Unchanged: 0/0
 16652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 16653 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16654 ;;      Locals:         0       0       0      20       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16655 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16656 ;;      Totals:         0       0       0      20       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16657 ;;Total ram usage:       20 bytes
 16658 ;; Hardware stack levels used: 1
 16659 ;; Hardware stack levels required when called: 27
 16660 ;; This function calls:
 16661 ;;		_cbusMsgReceived
 16662 ;;		_cbusSendOpcMyNN
 16663 ;;		_factoryReset
 16664 ;;		_longFlicker
 16665 ;;		_parseCBUSMsg
 16666 ;;		_shortFlicker
 16667 ;;		_thisNN
 16668 ;; This function is called by:
 16669 ;;		_main
 16670 ;; This function uses a non-reentrant model
 16671 ;;
 16672                           
 16673                           	psect	text64
 16674  008D68                     __ptext64:
 16675                           	callstack 0
 16676  008D68                     _checkCBUS:
 16677                           	callstack 3
 16678                           
 16679                           ;main.c: 627: BYTE msg[20];;main.c: 629: if (cbusMsgReceived( 0, (BYTE *)msg )) {
 16680                           
 16681                           ;incstack = 0
 16682  008D68  0ECC               	movlw	low checkCBUS@msg
 16683  008D6A  0100               	movlb	0	; () banked
 16684  008D6C  6FA1               	movwf	cbusMsgReceived@msg& (0+255),b
 16685  008D6E  0E02               	movlw	high checkCBUS@msg
 16686  008D70  6FA2               	movwf	(cbusMsgReceived@msg+1)& (0+255),b
 16687  008D72  0E00               	movlw	0
 16688  008D74  EC89  F052         	call	_cbusMsgReceived
 16689  008D78  0900               	iorlw	0
 16690  008D7A  B4D8               	btfsc	status,2,c
 16691  008D7C  0012               	return	
 16692                           
 16693                           ; BSR set to: 0
 16694                           ;main.c: 630: shortFlicker();
 16695  008D7E  EC57  F048         	call	_shortFlicker	;wreg free
 16696                           
 16697                           ; BSR set to: 1
 16698                           ;main.c: 631: if (parseCBUSMsg(msg)) {
 16699  008D82  0ECC               	movlw	low checkCBUS@msg
 16700  008D84  0100               	movlb	0	; () banked
 16701  008D86  6FE4               	movwf	parseCBUSMsg@msg& (0+255),b
 16702  008D88  0E02               	movlw	high checkCBUS@msg
 16703  008D8A  6FE5               	movwf	(parseCBUSMsg@msg+1)& (0+255),b
 16704  008D8C  ECB7  F04D         	call	_parseCBUSMsg	;wreg free
 16705  008D90  0900               	iorlw	0
 16706  008D92  B4D8               	btfsc	status,2,c
 16707  008D94  D003               	goto	l21365
 16708                           
 16709                           ; BSR set to: 0
 16710                           ;main.c: 632: longFlicker();
 16711  008D96  ECE6  F050         	call	_longFlicker	;wreg free
 16712  008D9A  0012               	return	
 16713  008D9C                     l21365:
 16714                           
 16715                           ; BSR set to: 0
 16716                           ;main.c: 634: };main.c: 635: if (thisNN(msg)) {
 16717  008D9C  0ECC               	movlw	low checkCBUS@msg
 16718  008D9E  6F71               	movwf	thisNN@rx_ptr& (0+255),b
 16719  008DA0  0E02               	movlw	high checkCBUS@msg
 16720  008DA2  6F72               	movwf	(thisNN@rx_ptr+1)& (0+255),b
 16721  008DA4  EC96  F049         	call	_thisNN	;wreg free
 16722  008DA8  0900               	iorlw	0
 16723  008DAA  B4D8               	btfsc	status,2,c
 16724  008DAC  0012               	return	
 16725  008DAE  D014               	goto	l21379
 16726  008DB0                     l21369:
 16727                           
 16728                           ; BSR set to: 2
 16729                           ;main.c: 639: if (flimState == fsFLiMLearn) {
 16730  008DB0  0E07               	movlw	7
 16731  008DB2  1816               	xorwf	_flimState^0,w,c
 16732  008DB4  A4D8               	btfss	status,2,c
 16733  008DB6  D003               	goto	l21373
 16734                           
 16735                           ; BSR set to: 2
 16736                           ;main.c: 640: factoryReset();
 16737  008DB8  EC69  F053         	call	_factoryReset	;wreg free
 16738                           
 16739                           ;main.c: 641: }
 16740  008DBC  0012               	return	
 16741  008DBE                     l21373:
 16742                           
 16743                           ; BSR set to: 2
 16744                           ;main.c: 642: else;main.c: 643: {;main.c: 644: cbusMsg[d3] = 2;
 16745  008DBE  0E02               	movlw	2
 16746  008DC0  6E25               	movwf	(_cbusMsg+9)^0,c
 16747                           
 16748                           ; BSR set to: 2
 16749                           ;main.c: 645: cbusSendOpcMyNN( 0, 0x6F, cbusMsg);
 16750  008DC2  0E6F               	movlw	111
 16751  008DC4  0100               	movlb	0	; () banked
 16752  008DC6  6F91               	movwf	cbusSendOpcMyNN@opc& (0+255),b
 16753  008DC8  0E1C               	movlw	low _cbusMsg
 16754  008DCA  6F92               	movwf	cbusSendOpcMyNN@msg& (0+255),b
 16755  008DCC  0E00               	movlw	0
 16756  008DCE  EC6B  F052         	call	_cbusSendOpcMyNN
 16757  008DD2  0012               	return	
 16758  008DD4                     l594:
 16759                           
 16760                           ; BSR set to: 2
 16761  008DD4  00FF               	reset		;# 
 16762                           
 16763                           ;main.c: 652: }
 16764  008DD6  0012               	return	
 16765  008DD8                     l21379:
 16766                           
 16767                           ; BSR set to: 0
 16768  008DD8  0102               	movlb	2	; () banked
 16769  008DDA  51D2               	movf	(checkCBUS@msg+6)& (0+255),w,b
 16770                           
 16771                           ; Switch size 1, requested type "simple"
 16772                           ; Number of cases is 2, Range of values is 79 to 94
 16773                           ; switch strategies available:
 16774                           ; Name         Instructions Cycles
 16775                           ; simple_byte            7     4 (average)
 16776                           ;	Chosen strategy is simple_byte
 16777  008DDC  0A4F               	xorlw	79	; case 79
 16778  008DDE  B4D8               	btfsc	status,2,c
 16779  008DE0  D7E7               	goto	l21369
 16780  008DE2  0A11               	xorlw	17	; case 94
 16781  008DE4  A4D8               	btfss	status,2,c
 16782  008DE6  0012               	return	
 16783  008DE8  D7F5               	goto	l594
 16784  008DEA                     __end_of_checkCBUS:
 16785                           	callstack 0
 16786                           
 16787 ;; *************** function _shortFlicker *****************
 16788 ;; Defined at:
 16789 ;;		line 169 in file "../../github/CBUSlib/StatusLeds.c"
 16790 ;; Parameters:    Size  Location     Type
 16791 ;;		None
 16792 ;; Auto vars:     Size  Location     Type
 16793 ;;		None
 16794 ;; Return value:  Size  Location     Type
 16795 ;;                  1    wreg      void 
 16796 ;; Registers used:
 16797 ;;		wreg, status,2, status,0, cstack
 16798 ;; Tracked objects:
 16799 ;;		On entry : 3F/0
 16800 ;;		On exit  : 3F/1
 16801 ;;		Unchanged: 0/0
 16802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 16803 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16804 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16805 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16806 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16807 ;;Total ram usage:        4 bytes
 16808 ;; Hardware stack levels used: 1
 16809 ;; Hardware stack levels required when called: 9
 16810 ;; This function calls:
 16811 ;;		_tickGet
 16812 ;; This function is called by:
 16813 ;;		_checkCBUS
 16814 ;; This function uses a non-reentrant model
 16815 ;;
 16816                           
 16817                           	psect	text65
 16818  0090AE                     __ptext65:
 16819                           	callstack 0
 16820  0090AE                     _shortFlicker:
 16821                           	callstack 20
 16822                           
 16823                           ; BSR set to: 0
 16824                           ;StatusLeds.c: 170: if (flickerTime.Val < tickGet() + (62500/10)) {
 16825                           
 16826                           ;incstack = 0
 16827  0090AE  ECA3  F04B         	call	_tickGet	;wreg free
 16828  0090B2  0E6A               	movlw	106
 16829  0090B4  2571               	addwf	?_tickGet& (0+255),w,b
 16830  0090B6  6F7B               	movwf	??_shortFlicker& (0+255),b
 16831  0090B8  0E18               	movlw	24
 16832  0090BA  2172               	addwfc	(?_tickGet+1)& (0+255),w,b
 16833  0090BC  6F7C               	movwf	(??_shortFlicker+1)& (0+255),b
 16834  0090BE  0E00               	movlw	0
 16835  0090C0  2173               	addwfc	(?_tickGet+2)& (0+255),w,b
 16836  0090C2  6F7D               	movwf	(??_shortFlicker+2)& (0+255),b
 16837  0090C4  0E00               	movlw	0
 16838  0090C6  2174               	addwfc	(?_tickGet+3)& (0+255),w,b
 16839  0090C8  6F7E               	movwf	(??_shortFlicker+3)& (0+255),b
 16840  0090CA  517B               	movf	??_shortFlicker& (0+255),w,b
 16841  0090CC  0101               	movlb	1	; () banked
 16842  0090CE  5DA0               	subwf	_flickerTime& (0+255),w,b
 16843  0090D0  0100               	movlb	0	; () banked
 16844  0090D2  517C               	movf	(??_shortFlicker+1)& (0+255),w,b
 16845  0090D4  0101               	movlb	1	; () banked
 16846  0090D6  59A1               	subwfb	(_flickerTime+1)& (0+255),w,b
 16847  0090D8  0100               	movlb	0	; () banked
 16848  0090DA  517D               	movf	(??_shortFlicker+2)& (0+255),w,b
 16849  0090DC  0101               	movlb	1	; () banked
 16850  0090DE  59A2               	subwfb	(_flickerTime+2)& (0+255),w,b
 16851  0090E0  0100               	movlb	0	; () banked
 16852  0090E2  517E               	movf	(??_shortFlicker+3)& (0+255),w,b
 16853  0090E4  0101               	movlb	1	; () banked
 16854  0090E6  59A3               	subwfb	(_flickerTime+3)& (0+255),w,b
 16855  0090E8  B0D8               	btfsc	status,0,c
 16856  0090EA  0012               	return	
 16857                           
 16858                           ; BSR set to: 1
 16859                           ;StatusLeds.c: 171: flickerTime.Val = tickGet() + (62500/10);
 16860  0090EC  ECA3  F04B         	call	_tickGet	;wreg free
 16861  0090F0  0E6A               	movlw	106
 16862  0090F2  2571               	addwf	?_tickGet& (0+255),w,b
 16863  0090F4  0101               	movlb	1	; () banked
 16864  0090F6  6FA0               	movwf	_flickerTime& (0+255),b
 16865  0090F8  0E18               	movlw	24
 16866  0090FA  0100               	movlb	0	; () banked
 16867  0090FC  2172               	addwfc	(?_tickGet+1)& (0+255),w,b
 16868  0090FE  0101               	movlb	1	; () banked
 16869  009100  6FA1               	movwf	(_flickerTime+1)& (0+255),b
 16870  009102  0E00               	movlw	0
 16871  009104  0100               	movlb	0	; () banked
 16872  009106  2173               	addwfc	(?_tickGet+2)& (0+255),w,b
 16873  009108  0101               	movlb	1	; () banked
 16874  00910A  6FA2               	movwf	(_flickerTime+2)& (0+255),b
 16875  00910C  0E00               	movlw	0
 16876  00910E  0100               	movlb	0	; () banked
 16877  009110  2174               	addwfc	(?_tickGet+3)& (0+255),w,b
 16878  009112  0101               	movlb	1	; () banked
 16879  009114  6FA3               	movwf	(_flickerTime+3)& (0+255),b
 16880                           
 16881                           ; BSR set to: 1
 16882                           ;StatusLeds.c: 172: flickerState = flickWaitingOn;
 16883  009116  0E01               	movlw	1
 16884  009118  6FD2               	movwf	_flickerState& (0+255),b
 16885                           
 16886                           ; BSR set to: 1
 16887  00911A  0012               	return		;funcret
 16888  00911C                     __end_of_shortFlicker:
 16889                           	callstack 0
 16890                           
 16891 ;; *************** function _parseCBUSMsg *****************
 16892 ;; Defined at:
 16893 ;;		line 301 in file "../../github/CBUSlib/FliM.c"
 16894 ;; Parameters:    Size  Location     Type
 16895 ;;  msg             2  132[BANK0 ] PTR unsigned char 
 16896 ;;		 -> checkCBUS@msg(20), 
 16897 ;; Auto vars:     Size  Location     Type
 16898 ;;		None
 16899 ;; Return value:  Size  Location     Type
 16900 ;;                  1    wreg      unsigned char 
 16901 ;; Registers used:
 16902 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16903 ;; Tracked objects:
 16904 ;;		On entry : 3F/0
 16905 ;;		On exit  : 3F/0
 16906 ;;		Unchanged: 0/0
 16907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 16908 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16909 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16910 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16911 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16912 ;;Total ram usage:        2 bytes
 16913 ;; Hardware stack levels used: 1
 16914 ;; Hardware stack levels required when called: 26
 16915 ;; This function calls:
 16916 ;;		_parseCbusEvent
 16917 ;;		_parseFLiMCmd
 16918 ;; This function is called by:
 16919 ;;		_checkCBUS
 16920 ;; This function uses a non-reentrant model
 16921 ;;
 16922                           
 16923                           	psect	text66
 16924  009B6E                     __ptext66:
 16925                           	callstack 0
 16926  009B6E                     _parseCBUSMsg:
 16927                           	callstack 3
 16928                           
 16929                           ; BSR set to: 0
 16930                           ;FliM.c: 305: if (((msg[d0] & 0b10010000) == 0b10010000) && ((~msg[d0] & 0b00000110)== 0
      +                          b00000110))
 16931                           
 16932                           ; BSR set to: 1
 16933                           ;incstack = 0
 16934  009B6E  EE20 F006          	lfsr	2,6
 16935  009B72  51E4               	movf	parseCBUSMsg@msg& (0+255),w,b
 16936  009B74  26D9               	addwf	fsr2l,f,c
 16937  009B76  51E5               	movf	(parseCBUSMsg@msg+1)& (0+255),w,b
 16938  009B78  22DA               	addwfc	fsr2h,f,c
 16939  009B7A  50DF               	movf	indf2,w,c
 16940  009B7C  0B90               	andlw	144
 16941  009B7E  0A90               	xorlw	144
 16942  009B80  A4D8               	btfss	status,2,c
 16943  009B82  D013               	goto	l20407
 16944                           
 16945                           ; BSR set to: 0
 16946  009B84  EE20 F006          	lfsr	2,6
 16947  009B88  51E4               	movf	parseCBUSMsg@msg& (0+255),w,b
 16948  009B8A  26D9               	addwf	fsr2l,f,c
 16949  009B8C  51E5               	movf	(parseCBUSMsg@msg+1)& (0+255),w,b
 16950  009B8E  22DA               	addwfc	fsr2h,f,c
 16951  009B90  50DF               	movf	indf2,w,c
 16952  009B92  0AFF               	xorlw	255
 16953  009B94  0B06               	andlw	6
 16954  009B96  0A06               	xorlw	6
 16955  009B98  A4D8               	btfss	status,2,c
 16956  009B9A  D007               	goto	l20407
 16957                           
 16958                           ; BSR set to: 0
 16959                           ;FliM.c: 306: {;FliM.c: 308: return parseCbusEvent(msg);
 16960  009B9C  C0E4  F09B         	movff	parseCBUSMsg@msg,parseCbusEvent@msg
 16961  009BA0  C0E5  F09C         	movff	parseCBUSMsg@msg+1,parseCbusEvent@msg+1
 16962  009BA4  ECC2  F040         	call	_parseCbusEvent	;wreg free
 16963  009BA8  0012               	return	
 16964  009BAA                     l20407:
 16965                           
 16966                           ; BSR set to: 0
 16967                           ;FliM.c: 309: };FliM.c: 312: return( parseFLiMCmd(msg));
 16968  009BAA  C0E4  F0E1         	movff	parseCBUSMsg@msg,parseFLiMCmd@rx_ptr
 16969  009BAE  C0E5  F0E2         	movff	parseCBUSMsg@msg+1,parseFLiMCmd@rx_ptr+1
 16970  009BB2  EC1E  F018         	call	_parseFLiMCmd	;wreg free
 16971                           
 16972                           ; BSR set to: 0
 16973  009BB6  0012               	return		;funcret
 16974  009BB8                     __end_of_parseCBUSMsg:
 16975                           	callstack 0
 16976                           
 16977 ;; *************** function _parseFLiMCmd *****************
 16978 ;; Defined at:
 16979 ;;		line 323 in file "../../github/CBUSlib/FliM.c"
 16980 ;; Parameters:    Size  Location     Type
 16981 ;;  rx_ptr          2  129[BANK0 ] PTR unsigned char 
 16982 ;;		 -> checkCBUS@msg(20), 
 16983 ;; Auto vars:     Size  Location     Type
 16984 ;;  cmdProcessed    1  131[BANK0 ] unsigned char 
 16985 ;; Return value:  Size  Location     Type
 16986 ;;                  1    wreg      unsigned char 
 16987 ;; Registers used:
 16988 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16989 ;; Tracked objects:
 16990 ;;		On entry : 3F/0
 16991 ;;		On exit  : 3F/0
 16992 ;;		Unchanged: 0/0
 16993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 16994 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16995 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16996 ;;      Temps:          0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16997 ;;      Totals:         0       3       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 16998 ;;Total ram usage:        9 bytes
 16999 ;; Hardware stack levels used: 1
 17000 ;; Hardware stack levels required when called: 25
 17001 ;; This function calls:
 17002 ;;		_QNNrespond
 17003 ;;		_doAreq
 17004 ;;		_doEnum
 17005 ;;		_doError
 17006 ;;		_doEvlrn
 17007 ;;		_doEvuln
 17008 ;;		_doNenrd
 17009 ;;		_doNerd
 17010 ;;		_doNnclr
 17011 ;;		_doNnevn
 17012 ;;		_doNvrd
 17013 ;;		_doNvset
 17014 ;;		_doReqev
 17015 ;;		_doReval
 17016 ;;		_doRqevn
 17017 ;;		_doRqmn
 17018 ;;		_doRqnp
 17019 ;;		_doRqnpn
 17020 ;;		_doSnn
 17021 ;;		_ee_write
 17022 ;;		_setNewCanId
 17023 ;;		_thisNN
 17024 ;; This function is called by:
 17025 ;;		_parseCBUSMsg
 17026 ;; This function uses a non-reentrant model
 17027 ;;
 17028                           
 17029                           	psect	text67
 17030  00303C                     __ptext67:
 17031                           	callstack 0
 17032  00303C                     _parseFLiMCmd:
 17033                           	callstack 3
 17034                           
 17035                           ; BSR set to: 0
 17036                           ;FliM.c: 326: BOOL cmdProcessed = 0;
 17037                           
 17038                           ; BSR set to: 0
 17039                           ;incstack = 0
 17040  00303C  0E00               	movlw	0
 17041  00303E  6FE3               	movwf	parseFLiMCmd@cmdProcessed& (0+255),b
 17042                           
 17043                           ; BSR set to: 0
 17044                           ;FliM.c: 332: if (flimState == fsFLiMLearn)
 17045  003040  0E07               	movlw	7
 17046  003042  1816               	xorwf	_flimState^0,w,c
 17047  003044  A4D8               	btfss	status,2,c
 17048  003046  D126               	goto	l20193
 17049                           
 17050                           ; BSR set to: 0
 17051                           ;FliM.c: 333: {;FliM.c: 334: cmdProcessed = 1;
 17052  003048  0E01               	movlw	1
 17053  00304A  6FE3               	movwf	parseFLiMCmd@cmdProcessed& (0+255),b
 17054                           
 17055                           ;FliM.c: 336: switch(rx_ptr[d0])
 17056  00304C  D106               	goto	l20191
 17057  00304E                     l20171:
 17058                           
 17059                           ; BSR set to: 0
 17060                           ;FliM.c: 339: if (thisNN(rx_ptr))
 17061  00304E  C0E1  F071         	movff	parseFLiMCmd@rx_ptr,thisNN@rx_ptr
 17062  003052  C0E2  F072         	movff	parseFLiMCmd@rx_ptr+1,thisNN@rx_ptr+1
 17063  003056  EC96  F049         	call	_thisNN	;wreg free
 17064  00305A  0900               	iorlw	0
 17065  00305C  A4D8               	btfss	status,2,c
 17066  00305E  D11A               	goto	l20193
 17067  003060                     l20175:
 17068                           
 17069                           ; BSR set to: 0
 17070                           ;FliM.c: 344: flimState = fsFLiM;
 17071  003060  0E01               	movlw	1
 17072  003062  6E16               	movwf	_flimState^0,c
 17073                           
 17074                           ;FliM.c: 345: break;
 17075  003064  D117               	goto	l20193
 17076  003066                     l20177:
 17077                           
 17078                           ; BSR set to: 0
 17079                           ;FliM.c: 349: doNnclr();
 17080  003066  ECB6  F050         	call	_doNnclr	;wreg free
 17081                           
 17082                           ;FliM.c: 350: break;
 17083  00306A  D114               	goto	l20193
 17084  00306C                     l20179:
 17085                           
 17086                           ; BSR set to: 0
 17087                           ;FliM.c: 354: doEvuln( (((WORD)rx_ptr[d1]) << 8) + rx_ptr[d2], (((WORD)rx_ptr[d3]) << 8)
      +                           + rx_ptr[d4]);
 17088  00306C  EE20 F008          	lfsr	2,8
 17089  003070  51E1               	movf	parseFLiMCmd@rx_ptr& (0+255),w,b
 17090  003072  26D9               	addwf	fsr2l,f,c
 17091  003074  51E2               	movf	(parseFLiMCmd@rx_ptr+1)& (0+255),w,b
 17092  003076  22DA               	addwfc	fsr2h,f,c
 17093  003078  50DF               	movf	indf2,w,c
 17094  00307A  0101               	movlb	1	; () banked
 17095  00307C  6FED               	movwf	??_parseFLiMCmd& (0+255),b
 17096  00307E  0100               	movlb	0	; () banked
 17097  003080  EE20 F007          	lfsr	2,7
 17098  003084  51E1               	movf	parseFLiMCmd@rx_ptr& (0+255),w,b
 17099  003086  26D9               	addwf	fsr2l,f,c
 17100  003088  51E2               	movf	(parseFLiMCmd@rx_ptr+1)& (0+255),w,b
 17101  00308A  22DA               	addwfc	fsr2h,f,c
 17102  00308C  50DF               	movf	indf2,w,c
 17103  00308E  0101               	movlb	1	; () banked
 17104  003090  6FEE               	movwf	(??_parseFLiMCmd+1)& (0+255),b
 17105  003092  51ED               	movf	??_parseFLiMCmd& (0+255),w,b
 17106  003094  0100               	movlb	0	; () banked
 17107  003096  6FA4               	movwf	doEvuln@nodeNumber& (0+255),b
 17108  003098  C1EE  F0A5         	movff	??_parseFLiMCmd+1,doEvuln@nodeNumber+1
 17109  00309C  EE20 F00A          	lfsr	2,10
 17110  0030A0  51E1               	movf	parseFLiMCmd@rx_ptr& (0+255),w,b
 17111  0030A2  26D9               	addwf	fsr2l,f,c
 17112  0030A4  51E2               	movf	(parseFLiMCmd@rx_ptr+1)& (0+255),w,b
 17113  0030A6  22DA               	addwfc	fsr2h,f,c
 17114  0030A8  50DF               	movf	indf2,w,c
 17115  0030AA  0101               	movlb	1	; () banked
 17116  0030AC  6FF0               	movwf	(??_parseFLiMCmd+3)& (0+255),b
 17117  0030AE  0100               	movlb	0	; () banked
 17118  0030B0  EE20 F009          	lfsr	2,9
 17119  0030B4  51E1               	movf	parseFLiMCmd@rx_ptr& (0+255),w,b
 17120  0030B6  26D9               	addwf	fsr2l,f,c
 17121  0030B8  51E2               	movf	(parseFLiMCmd@rx_ptr+1)& (0+255),w,b
 17122  0030BA  22DA               	addwfc	fsr2h,f,c
 17123  0030BC  50DF               	movf	indf2,w,c
 17124  0030BE  0101               	movlb	1	; () banked
 17125  0030C0  6FF1               	movwf	(??_parseFLiMCmd+4)& (0+255),b
 17126  0030C2  51F0               	movf	(??_parseFLiMCmd+3)& (0+255),w,b
 17127  0030C4  0100               	movlb	0	; () banked
 17128  0030C6  6FA6               	movwf	doEvuln@eventNumber& (0+255),b
 17129  0030C8  C1F1  F0A7         	movff	??_parseFLiMCmd+4,doEvuln@eventNumber+1
 17130  0030CC  ECFD  F052         	call	_doEvuln	;wreg free
 17131                           
 17132                           ;FliM.c: 355: break;
 17133  0030D0  D0E1               	goto	l20193
 17134  0030D2                     l20181:
 17135                           
 17136                           ; BSR set to: 0
 17137                           ;FliM.c: 359: doEvlrn( (((WORD)rx_ptr[d1]) << 8) + rx_ptr[d2] , (((WORD)rx_ptr[d3]) << 8
      +                          ) + rx_ptr[d4], rx_ptr[d5], rx_ptr[d6]);
 17138  0030D2  EE20 F008          	lfsr	2,8
 17139  0030D6  51E1               	movf	parseFLiMCmd@rx_ptr& (0+255),w,b
 17140  0030D8  26D9               	addwf	fsr2l,f,c
 17141  0030DA  51E2               	movf	(parseFLiMCmd@rx_ptr+1)& (0+255),w,b
 17142  0030DC  22DA               	addwfc	fsr2h,f,c
 17143  0030DE  50DF               	movf	indf2,w,c
 17144  0030E0  0101               	movlb	1	; () banked
 17145  0030E2  6FED               	movwf	??_parseFLiMCmd& (0+255),b
 17146  0030E4  0100               	movlb	0	; () banked
 17147  0030E6  EE20 F007          	lfsr	2,7
 17148  0030EA  51E1               	movf	parseFLiMCmd@rx_ptr& (0+255),w,b
 17149  0030EC  26D9               	addwf	fsr2l,f,c
 17150  0030EE  51E2               	movf	(parseFLiMCmd@rx_ptr+1)& (0+255),w,b
 17151  0030F0  22DA               	addwfc	fsr2h,f,c
 17152  0030F2  50DF               	movf	indf2,w,c
 17153  0030F4  0101               	movlb	1	; () banked
 17154  0030F6  6FEE               	movwf	(??_parseFLiMCmd+1)& (0+255),b
 17155  0030F8  51ED               	movf	??_parseFLiMCmd& (0+255),w,b
 17156  0030FA  0100               	movlb	0	; () banked
 17157  0030FC  6FD0               	movwf	doEvlrn@nodeNumber& (0+255),b
 17158  0030FE  C1EE  F0D1         	movff	??_parseFLiMCmd+1,doEvlrn@nodeNumber+1
 17159  003102  EE20 F00A          	lfsr	2,10
 17160  003106  51E1               	movf	parseFLiMCmd@rx_ptr& (0+255),w,b
 17161  003108  26D9               	addwf	fsr2l,f,c
 17162  00310A  51E2               	movf	(parseFLiMCmd@rx_ptr+1)& (0+255),w,b
 17163  00310C  22DA               	addwfc	fsr2h,f,c
 17164  00310E  50DF               	movf	indf2,w,c
 17165  003110  0101               	movlb	1	; () banked
 17166  003112  6FF0               	movwf	(??_parseFLiMCmd+3)& (0+255),b
 17167  003114  0100               	movlb	0	; () banked
 17168  003116  EE20 F009          	lfsr	2,9
 17169  00311A  51E1               	movf	parseFLiMCmd@rx_ptr& (0+255),w,b
 17170  00311C  26D9               	addwf	fsr2l,f,c
 17171  00311E  51E2               	movf	(parseFLiMCmd@rx_ptr+1)& (0+255),w,b
 17172  003120  22DA               	addwfc	fsr2h,f,c
 17173  003122  50DF               	movf	indf2,w,c
 17174  003124  0101               	movlb	1	; () banked
 17175  003126  6FF1               	movwf	(??_parseFLiMCmd+4)& (0+255),b
 17176  003128  51F0               	movf	(??_parseFLiMCmd+3)& (0+255),w,b
 17177  00312A  0100               	movlb	0	; () banked
 17178  00312C  6FD2               	movwf	doEvlrn@eventNumber& (0+255),b
 17179  00312E  C1F1  F0D3         	movff	??_parseFLiMCmd+4,doEvlrn@eventNumber+1
 17180  003132  EE20 F00B          	lfsr	2,11
 17181  003136  51E1               	movf	parseFLiMCmd@rx_ptr& (0+255),w,b
 17182  003138  26D9               	addwf	fsr2l,f,c
 17183  00313A  51E2               	movf	(parseFLiMCmd@rx_ptr+1)& (0+255),w,b
 17184  00313C  22DA               	addwfc	fsr2h,f,c
 17185  00313E  50DF               	movf	indf2,w,c
 17186  003140  6FD4               	movwf	doEvlrn@evNum& (0+255),b
 17187  003142  EE20 F00C          	lfsr	2,12
 17188  003146  51E1               	movf	parseFLiMCmd@rx_ptr& (0+255),w,b
 17189  003148  26D9               	addwf	fsr2l,f,c
 17190  00314A  51E2               	movf	(parseFLiMCmd@rx_ptr+1)& (0+255),w,b
 17191  00314C  22DA               	addwfc	fsr2h,f,c
 17192  00314E  50DF               	movf	indf2,w,c
 17193  003150  6FD5               	movwf	doEvlrn@evVal& (0+255),b
 17194  003152  ECFA  F048         	call	_doEvlrn	;wreg free
 17195                           
 17196                           ;FliM.c: 360: break;
 17197  003156  D09E               	goto	l20193
 17198  003158                     l20183:
 17199                           
 17200                           ; BSR set to: 0
 17201                           ;FliM.c: 364: doEvlrn((((WORD)rx_ptr[d1]) << 8) + rx_ptr[d2] , (((WORD)rx_ptr[d3]) << 8)
      +                           + rx_ptr[d4], rx_ptr[d6], rx_ptr[d7]);
 17202  003158  EE20 F008          	lfsr	2,8
 17203  00315C  51E1               	movf	parseFLiMCmd@rx_ptr& (0+255),w,b
 17204  00315E  26D9               	addwf	fsr2l,f,c
 17205  003160  51E2               	movf	(parseFLiMCmd@rx_ptr+1)& (0+255),w,b
 17206  003162  22DA               	addwfc	fsr2h,f,c
 17207  003164  50DF               	movf	indf2,w,c
 17208  003166  0101               	movlb	1	; () banked
 17209  003168  6FED               	movwf	??_parseFLiMCmd& (0+255),b
 17210  00316A  0100               	movlb	0	; () banked
 17211  00316C  EE20 F007          	lfsr	2,7
 17212  003170  51E1               	movf	parseFLiMCmd@rx_ptr& (0+255),w,b
 17213  003172  26D9               	addwf	fsr2l,f,c
 17214  003174  51E2               	movf	(parseFLiMCmd@rx_ptr+1)& (0+255),w,b
 17215  003176  22DA               	addwfc	fsr2h,f,c
 17216  003178  50DF               	movf	indf2,w,c
 17217  00317A  0101               	movlb	1	; () banked
 17218  00317C  6FEE               	movwf	(??_parseFLiMCmd+1)& (0+255),b
 17219  00317E  51ED               	movf	??_parseFLiMCmd& (0+255),w,b
 17220  003180  0100               	movlb	0	; () banked
 17221  003182  6FD0               	movwf	doEvlrn@nodeNumber& (0+255),b
 17222  003184  C1EE  F0D1         	movff	??_parseFLiMCmd+1,doEvlrn@nodeNumber+1
 17223  003188  EE20 F00A          	lfsr	2,10
 17224  00318C  51E1               	movf	parseFLiMCmd@rx_ptr& (0+255),w,b
 17225  00318E  26D9               	addwf	fsr2l,f,c
 17226  003190  51E2               	movf	(parseFLiMCmd@rx_ptr+1)& (0+255),w,b
 17227  003192  22DA               	addwfc	fsr2h,f,c
 17228  003194  50DF               	movf	indf2,w,c
 17229  003196  0101               	movlb	1	; () banked
 17230  003198  6FF0               	movwf	(??_parseFLiMCmd+3)& (0+255),b
 17231  00319A  0100               	movlb	0	; () banked
 17232  00319C  EE20 F009          	lfsr	2,9
 17233  0031A0  51E1               	movf	parseFLiMCmd@rx_ptr& (0+255),w,b
 17234  0031A2  26D9               	addwf	fsr2l,f,c
 17235  0031A4  51E2               	movf	(parseFLiMCmd@rx_ptr+1)& (0+255),w,b
 17236  0031A6  22DA               	addwfc	fsr2h,f,c
 17237  0031A8  50DF               	movf	indf2,w,c
 17238  0031AA  0101               	movlb	1	; () banked
 17239  0031AC  6FF1               	movwf	(??_parseFLiMCmd+4)& (0+255),b
 17240  0031AE  51F0               	movf	(??_parseFLiMCmd+3)& (0+255),w,b
 17241  0031B0  0100               	movlb	0	; () banked
 17242  0031B2  6FD2               	movwf	doEvlrn@eventNumber& (0+255),b
 17243  0031B4  C1F1  F0D3         	movff	??_parseFLiMCmd+4,doEvlrn@eventNumber+1
 17244  0031B8  EE20 F00C          	lfsr	2,12
 17245  0031BC  51E1               	movf	parseFLiMCmd@rx_ptr& (0+255),w,b
 17246  0031BE  26D9               	addwf	fsr2l,f,c
 17247  0031C0  51E2               	movf	(parseFLiMCmd@rx_ptr+1)& (0+255),w,b
 17248  0031C2  22DA               	addwfc	fsr2h,f,c
 17249  0031C4  50DF               	movf	indf2,w,c
 17250  0031C6  6FD4               	movwf	doEvlrn@evNum& (0+255),b
 17251  0031C8  EE20 F00D          	lfsr	2,13
 17252  0031CC  51E1               	movf	parseFLiMCmd@rx_ptr& (0+255),w,b
 17253  0031CE  26D9               	addwf	fsr2l,f,c
 17254  0031D0  51E2               	movf	(parseFLiMCmd@rx_ptr+1)& (0+255),w,b
 17255  0031D2  22DA               	addwfc	fsr2h,f,c
 17256  0031D4  50DF               	movf	indf2,w,c
 17257  0031D6  6FD5               	movwf	doEvlrn@evVal& (0+255),b
 17258  0031D8  ECFA  F048         	call	_doEvlrn	;wreg free
 17259                           
 17260                           ;FliM.c: 365: break;
 17261  0031DC  D05B               	goto	l20193
 17262  0031DE                     l20185:
 17263                           
 17264                           ; BSR set to: 0
 17265                           ;FliM.c: 369: doReqev((((WORD)rx_ptr[d1]) << 8) + rx_ptr[d2] , (((WORD)rx_ptr[d3]) << 8)
      +                           + rx_ptr[d4], rx_ptr[d5]);
 17266  0031DE  EE20 F008          	lfsr	2,8
 17267  0031E2  51E1               	movf	parseFLiMCmd@rx_ptr& (0+255),w,b
 17268  0031E4  26D9               	addwf	fsr2l,f,c
 17269  0031E6  51E2               	movf	(parseFLiMCmd@rx_ptr+1)& (0+255),w,b
 17270  0031E8  22DA               	addwfc	fsr2h,f,c
 17271  0031EA  50DF               	movf	indf2,w,c
 17272  0031EC  0101               	movlb	1	; () banked
 17273  0031EE  6FED               	movwf	??_parseFLiMCmd& (0+255),b
 17274  0031F0  0100               	movlb	0	; () banked
 17275  0031F2  EE20 F007          	lfsr	2,7
 17276  0031F6  51E1               	movf	parseFLiMCmd@rx_ptr& (0+255),w,b
 17277  0031F8  26D9               	addwf	fsr2l,f,c
 17278  0031FA  51E2               	movf	(parseFLiMCmd@rx_ptr+1)& (0+255),w,b
 17279  0031FC  22DA               	addwfc	fsr2h,f,c
 17280  0031FE  50DF               	movf	indf2,w,c
 17281  003200  0101               	movlb	1	; () banked
 17282  003202  6FEE               	movwf	(??_parseFLiMCmd+1)& (0+255),b
 17283  003204  51ED               	movf	??_parseFLiMCmd& (0+255),w,b
 17284  003206  0100               	movlb	0	; () banked
 17285  003208  6F9B               	movwf	doReqev@nodeNumber& (0+255),b
 17286  00320A  C1EE  F09C         	movff	??_parseFLiMCmd+1,doReqev@nodeNumber+1
 17287  00320E  EE20 F00A          	lfsr	2,10
 17288  003212  51E1               	movf	parseFLiMCmd@rx_ptr& (0+255),w,b
 17289  003214  26D9               	addwf	fsr2l,f,c
 17290  003216  51E2               	movf	(parseFLiMCmd@rx_ptr+1)& (0+255),w,b
 17291  003218  22DA               	addwfc	fsr2h,f,c
 17292  00321A  50DF               	movf	indf2,w,c
 17293  00321C  0101               	movlb	1	; () banked
 17294  00321E  6FF0               	movwf	(??_parseFLiMCmd+3)& (0+255),b
 17295  003220  0100               	movlb	0	; () banked
 17296  003222  EE20 F009          	lfsr	2,9
 17297  003226  51E1               	movf	parseFLiMCmd@rx_ptr& (0+255),w,b
 17298  003228  26D9               	addwf	fsr2l,f,c
 17299  00322A  51E2               	movf	(parseFLiMCmd@rx_ptr+1)& (0+255),w,b
 17300  00322C  22DA               	addwfc	fsr2h,f,c
 17301  00322E  50DF               	movf	indf2,w,c
 17302  003230  0101               	movlb	1	; () banked
 17303  003232  6FF1               	movwf	(??_parseFLiMCmd+4)& (0+255),b
 17304  003234  51F0               	movf	(??_parseFLiMCmd+3)& (0+255),w,b
 17305  003236  0100               	movlb	0	; () banked
 17306  003238  6F9D               	movwf	doReqev@eventNumber& (0+255),b
 17307  00323A  C1F1  F09E         	movff	??_parseFLiMCmd+4,doReqev@eventNumber+1
 17308  00323E  EE20 F00B          	lfsr	2,11
 17309  003242  51E1               	movf	parseFLiMCmd@rx_ptr& (0+255),w,b
 17310  003244  26D9               	addwf	fsr2l,f,c
 17311  003246  51E2               	movf	(parseFLiMCmd@rx_ptr+1)& (0+255),w,b
 17312  003248  22DA               	addwfc	fsr2h,f,c
 17313  00324A  50DF               	movf	indf2,w,c
 17314  00324C  6F9F               	movwf	doReqev@evNum& (0+255),b
 17315  00324E  EC6B  F040         	call	_doReqev	;wreg free
 17316                           
 17317                           ;FliM.c: 370: break;
 17318  003252  D020               	goto	l20193
 17319  003254                     l20187:
 17320                           
 17321                           ; BSR set to: 0
 17322                           ;FliM.c: 373: cmdProcessed = 0;
 17323  003254  0E00               	movlw	0
 17324  003256  6FE3               	movwf	parseFLiMCmd@cmdProcessed& (0+255),b
 17325                           
 17326                           ;FliM.c: 374: break;
 17327  003258  D01D               	goto	l20193
 17328  00325A                     l20191:
 17329                           
 17330                           ; BSR set to: 0
 17331  00325A  EE20 F006          	lfsr	2,6
 17332  00325E  51E1               	movf	parseFLiMCmd@rx_ptr& (0+255),w,b
 17333  003260  26D9               	addwf	fsr2l,f,c
 17334  003262  51E2               	movf	(parseFLiMCmd@rx_ptr+1)& (0+255),w,b
 17335  003264  22DA               	addwfc	fsr2h,f,c
 17336  003266  50DF               	movf	indf2,w,c
 17337                           
 17338                           ; Switch size 1, requested type "simple"
 17339                           ; Number of cases is 7, Range of values is 83 to 245
 17340                           ; switch strategies available:
 17341                           ; Name         Instructions Cycles
 17342                           ; simple_byte           22    12 (average)
 17343                           ;	Chosen strategy is simple_byte
 17344  003268  0A53               	xorlw	83	; case 83
 17345  00326A  B4D8               	btfsc	status,2,c
 17346  00326C  D6F0               	goto	l20171
 17347  00326E  0A07               	xorlw	7	; case 84
 17348  003270  B4D8               	btfsc	status,2,c
 17349  003272  D6F6               	goto	l20175
 17350  003274  0A01               	xorlw	1	; case 85
 17351  003276  B4D8               	btfsc	status,2,c
 17352  003278  D6F6               	goto	l20177
 17353  00327A  0AC0               	xorlw	192	; case 149
 17354  00327C  B4D8               	btfsc	status,2,c
 17355  00327E  D6F6               	goto	l20179
 17356  003280  0A27               	xorlw	39	; case 178
 17357  003282  B4D8               	btfsc	status,2,c
 17358  003284  D7AC               	goto	l20185
 17359  003286  0A60               	xorlw	96	; case 210
 17360  003288  B4D8               	btfsc	status,2,c
 17361  00328A  D723               	goto	l20181
 17362  00328C  0A27               	xorlw	39	; case 245
 17363  00328E  B4D8               	btfsc	status,2,c
 17364  003290  D763               	goto	l20183
 17365  003292  D7E0               	goto	l20187
 17366  003294                     l20193:
 17367                           
 17368                           ; BSR set to: 0
 17369                           ;FliM.c: 376: };FliM.c: 378: if (!cmdProcessed && thisNN(rx_ptr))
 17370  003294  51E3               	movf	parseFLiMCmd@cmdProcessed& (0+255),w,b
 17371  003296  A4D8               	btfss	status,2,c
 17372  003298  D102               	goto	l20241
 17373                           
 17374                           ; BSR set to: 0
 17375  00329A  C0E1  F071         	movff	parseFLiMCmd@rx_ptr,thisNN@rx_ptr
 17376  00329E  C0E2  F072         	movff	parseFLiMCmd@rx_ptr+1,thisNN@rx_ptr+1
 17377  0032A2  EC96  F049         	call	_thisNN	;wreg free
 17378  0032A6  0900               	iorlw	0
 17379  0032A8  B4D8               	btfsc	status,2,c
 17380  0032AA  D0F9               	goto	l20241
 17381                           
 17382                           ; BSR set to: 0
 17383                           ;FliM.c: 379: {;FliM.c: 380: cmdProcessed = 1;
 17384  0032AC  0E01               	movlw	1
 17385  0032AE  6FE3               	movwf	parseFLiMCmd@cmdProcessed& (0+255),b
 17386                           
 17387                           ;FliM.c: 382: switch(rx_ptr[d0])
 17388  0032B0  D0C4               	goto	l20239
 17389  0032B2                     l20199:
 17390                           
 17391                           ; BSR set to: 0
 17392                           ;FliM.c: 386: doRqnpn(rx_ptr[d3]);
 17393  0032B2  EE20 F009          	lfsr	2,9
 17394  0032B6  51E1               	movf	parseFLiMCmd@rx_ptr& (0+255),w,b
 17395  0032B8  26D9               	addwf	fsr2l,f,c
 17396  0032BA  51E2               	movf	(parseFLiMCmd@rx_ptr+1)& (0+255),w,b
 17397  0032BC  22DA               	addwfc	fsr2h,f,c
 17398  0032BE  50DF               	movf	indf2,w,c
 17399  0032C0  EC9A  F03A         	call	_doRqnpn
 17400                           
 17401                           ;FliM.c: 387: break;
 17402  0032C4  D0EC               	goto	l20241
 17403  0032C6                     l20201:
 17404                           
 17405                           ; BSR set to: 0
 17406                           ;FliM.c: 391: if (flimState == fsFLiM)
 17407  0032C6  0416               	decf	_flimState^0,w,c
 17408  0032C8  A4D8               	btfss	status,2,c
 17409  0032CA  D0E9               	goto	l20241
 17410                           
 17411                           ; BSR set to: 0
 17412                           ;FliM.c: 392: flimState = fsFLiMLearn;
 17413  0032CC  0E07               	movlw	7
 17414  0032CE  6E16               	movwf	_flimState^0,c
 17415  0032D0  D0E6               	goto	l20241
 17416  0032D2                     l20205:
 17417                           
 17418                           ; BSR set to: 0
 17419                           ;FliM.c: 397: doNnevn();
 17420  0032D2  EC25  F04E         	call	_doNnevn	;wreg free
 17421                           
 17422                           ;FliM.c: 398: break;
 17423  0032D6  D0E3               	goto	l20241
 17424  0032D8                     l20207:
 17425                           
 17426                           ; BSR set to: 0
 17427                           ;FliM.c: 402: doNerd();
 17428  0032D8  EC64  F053         	call	_doNerd	;wreg free
 17429                           
 17430                           ;FliM.c: 403: break;
 17431  0032DC  D0E0               	goto	l20241
 17432  0032DE                     l20209:
 17433                           
 17434                           ; BSR set to: 0
 17435                           ;FliM.c: 407: doNenrd(rx_ptr[d3]);
 17436  0032DE  EE20 F009          	lfsr	2,9
 17437  0032E2  51E1               	movf	parseFLiMCmd@rx_ptr& (0+255),w,b
 17438  0032E4  26D9               	addwf	fsr2l,f,c
 17439  0032E6  51E2               	movf	(parseFLiMCmd@rx_ptr+1)& (0+255),w,b
 17440  0032E8  22DA               	addwfc	fsr2h,f,c
 17441  0032EA  50DF               	movf	indf2,w,c
 17442  0032EC  EC8E  F04A         	call	_doNenrd
 17443                           
 17444                           ;FliM.c: 408: break;
 17445  0032F0  D0D6               	goto	l20241
 17446  0032F2                     l20211:
 17447                           
 17448                           ; BSR set to: 0
 17449                           ;FliM.c: 412: doRqevn();
 17450  0032F2  EC9E  F050         	call	_doRqevn	;wreg free
 17451                           
 17452                           ;FliM.c: 413: break;
 17453  0032F6  D0D3               	goto	l20241
 17454  0032F8                     l20213:
 17455                           
 17456                           ; BSR set to: 0
 17457                           ;FliM.c: 417: doNvrd(rx_ptr[d3]);
 17458  0032F8  EE20 F009          	lfsr	2,9
 17459  0032FC  51E1               	movf	parseFLiMCmd@rx_ptr& (0+255),w,b
 17460  0032FE  26D9               	addwf	fsr2l,f,c
 17461  003300  51E2               	movf	(parseFLiMCmd@rx_ptr+1)& (0+255),w,b
 17462  003302  22DA               	addwfc	fsr2h,f,c
 17463  003304  50DF               	movf	indf2,w,c
 17464  003306  ECDC  F04D         	call	_doNvrd
 17465                           
 17466                           ;FliM.c: 418: break;
 17467  00330A  D0C9               	goto	l20241
 17468  00330C                     l20215:
 17469                           
 17470                           ; BSR set to: 0
 17471                           ;FliM.c: 422: doNvset(rx_ptr[d3], rx_ptr[d4]);
 17472  00330C  EE20 F00A          	lfsr	2,10
 17473  003310  51E1               	movf	parseFLiMCmd@rx_ptr& (0+255),w,b
 17474  003312  26D9               	addwf	fsr2l,f,c
 17475  003314  51E2               	movf	(parseFLiMCmd@rx_ptr+1)& (0+255),w,b
 17476  003316  22DA               	addwfc	fsr2h,f,c
 17477  003318  50DF               	movf	indf2,w,c
 17478  00331A  6FDA               	movwf	doNvset@NVvalue& (0+255),b
 17479  00331C  EE20 F009          	lfsr	2,9
 17480  003320  51E1               	movf	parseFLiMCmd@rx_ptr& (0+255),w,b
 17481  003322  26D9               	addwf	fsr2l,f,c
 17482  003324  51E2               	movf	(parseFLiMCmd@rx_ptr+1)& (0+255),w,b
 17483  003326  22DA               	addwfc	fsr2h,f,c
 17484  003328  50DF               	movf	indf2,w,c
 17485  00332A  EC15  F042         	call	_doNvset
 17486                           
 17487                           ;FliM.c: 423: break;
 17488  00332E  D0B7               	goto	l20241
 17489  003330                     l20217:
 17490                           
 17491                           ; BSR set to: 0
 17492                           ;FliM.c: 427: doReval(rx_ptr[d3], rx_ptr[d4]);
 17493  003330  EE20 F00A          	lfsr	2,10
 17494  003334  51E1               	movf	parseFLiMCmd@rx_ptr& (0+255),w,b
 17495  003336  26D9               	addwf	fsr2l,f,c
 17496  003338  51E2               	movf	(parseFLiMCmd@rx_ptr+1)& (0+255),w,b
 17497  00333A  22DA               	addwfc	fsr2h,f,c
 17498  00333C  50DF               	movf	indf2,w,c
 17499  00333E  6F94               	movwf	doReval@evNum& (0+255),b
 17500  003340  EE20 F009          	lfsr	2,9
 17501  003344  51E1               	movf	parseFLiMCmd@rx_ptr& (0+255),w,b
 17502  003346  26D9               	addwf	fsr2l,f,c
 17503  003348  51E2               	movf	(parseFLiMCmd@rx_ptr+1)& (0+255),w,b
 17504  00334A  22DA               	addwfc	fsr2h,f,c
 17505  00334C  50DF               	movf	indf2,w,c
 17506  00334E  EC14  F040         	call	_doReval
 17507                           
 17508                           ;FliM.c: 428: break;
 17509  003352  D0A5               	goto	l20241
 17510  003354                     l20219:
 17511                           
 17512                           ; BSR set to: 0
 17513                           ;FliM.c: 433: ee_write((WORD)((BYTE*)(0x3FF)), 0xFF);
 17514  003354  0E03               	movlw	3
 17515  003356  6F74               	movwf	(ee_write@addr+1)& (0+255),b
 17516  003358  6973               	setf	ee_write@addr& (0+255),b
 17517  00335A  0EFF               	movlw	255
 17518  00335C  6F75               	movwf	ee_write@data& (0+255),b
 17519  00335E  EC1D  F04D         	call	_ee_write	;wreg free
 17520  003362  00FF               	reset		;# 
 17521                           
 17522                           ;FliM.c: 435: break;
 17523  003364  D09C               	goto	l20241
 17524  003366                     l20221:
 17525                           
 17526                           ; BSR set to: 0
 17527                           ;FliM.c: 439: if (! setNewCanId(rx_ptr[d3])) {
 17528  003366  EE20 F009          	lfsr	2,9
 17529  00336A  51E1               	movf	parseFLiMCmd@rx_ptr& (0+255),w,b
 17530  00336C  26D9               	addwf	fsr2l,f,c
 17531  00336E  51E2               	movf	(parseFLiMCmd@rx_ptr+1)& (0+255),w,b
 17532  003370  22DA               	addwfc	fsr2h,f,c
 17533  003372  50DF               	movf	indf2,w,c
 17534  003374  ECA7  F045         	call	_setNewCanId
 17535  003378  0900               	iorlw	0
 17536  00337A  A4D8               	btfss	status,2,c
 17537  00337C  D090               	goto	l20241
 17538                           
 17539                           ; BSR set to: 0
 17540                           ;FliM.c: 440: doError(7);
 17541  00337E  0E07               	movlw	7
 17542  003380  EC5C  F052         	call	_doError
 17543  003384  D08C               	goto	l20241
 17544  003386                     l20225:
 17545                           
 17546                           ; BSR set to: 0
 17547                           ;FliM.c: 445: doEnum(1);
 17548  003386  0E01               	movlw	1
 17549  003388  EC26  F053         	call	_doEnum
 17550                           
 17551                           ;FliM.c: 446: break;
 17552  00338C  D088               	goto	l20241
 17553  00338E                     l20227:
 17554                           
 17555                           ; BSR set to: 0
 17556                           ;FliM.c: 453: doAreq((((WORD)rx_ptr[d1]) << 8) + rx_ptr[d2] , (((WORD)rx_ptr[d3]) << 8) 
      +                          + rx_ptr[d4]);
 17557  00338E  EE20 F008          	lfsr	2,8
 17558  003392  51E1               	movf	parseFLiMCmd@rx_ptr& (0+255),w,b
 17559  003394  26D9               	addwf	fsr2l,f,c
 17560  003396  51E2               	movf	(parseFLiMCmd@rx_ptr+1)& (0+255),w,b
 17561  003398  22DA               	addwfc	fsr2h,f,c
 17562  00339A  50DF               	movf	indf2,w,c
 17563  00339C  0101               	movlb	1	; () banked
 17564  00339E  6FED               	movwf	??_parseFLiMCmd& (0+255),b
 17565  0033A0  0100               	movlb	0	; () banked
 17566  0033A2  EE20 F007          	lfsr	2,7
 17567  0033A6  51E1               	movf	parseFLiMCmd@rx_ptr& (0+255),w,b
 17568  0033A8  26D9               	addwf	fsr2l,f,c
 17569  0033AA  51E2               	movf	(parseFLiMCmd@rx_ptr+1)& (0+255),w,b
 17570  0033AC  22DA               	addwfc	fsr2h,f,c
 17571  0033AE  50DF               	movf	indf2,w,c
 17572  0033B0  0101               	movlb	1	; () banked
 17573  0033B2  6FEE               	movwf	(??_parseFLiMCmd+1)& (0+255),b
 17574  0033B4  51ED               	movf	??_parseFLiMCmd& (0+255),w,b
 17575  0033B6  0100               	movlb	0	; () banked
 17576  0033B8  6F9B               	movwf	doAreq@nodeNumber& (0+255),b
 17577  0033BA  C1EE  F09C         	movff	??_parseFLiMCmd+1,doAreq@nodeNumber+1
 17578  0033BE  EE20 F00A          	lfsr	2,10
 17579  0033C2  51E1               	movf	parseFLiMCmd@rx_ptr& (0+255),w,b
 17580  0033C4  26D9               	addwf	fsr2l,f,c
 17581  0033C6  51E2               	movf	(parseFLiMCmd@rx_ptr+1)& (0+255),w,b
 17582  0033C8  22DA               	addwfc	fsr2h,f,c
 17583  0033CA  50DF               	movf	indf2,w,c
 17584  0033CC  0101               	movlb	1	; () banked
 17585  0033CE  6FF0               	movwf	(??_parseFLiMCmd+3)& (0+255),b
 17586  0033D0  0100               	movlb	0	; () banked
 17587  0033D2  EE20 F009          	lfsr	2,9
 17588  0033D6  51E1               	movf	parseFLiMCmd@rx_ptr& (0+255),w,b
 17589  0033D8  26D9               	addwf	fsr2l,f,c
 17590  0033DA  51E2               	movf	(parseFLiMCmd@rx_ptr+1)& (0+255),w,b
 17591  0033DC  22DA               	addwfc	fsr2h,f,c
 17592  0033DE  50DF               	movf	indf2,w,c
 17593  0033E0  0101               	movlb	1	; () banked
 17594  0033E2  6FF1               	movwf	(??_parseFLiMCmd+4)& (0+255),b
 17595  0033E4  51F0               	movf	(??_parseFLiMCmd+3)& (0+255),w,b
 17596  0033E6  0100               	movlb	0	; () banked
 17597  0033E8  6F9D               	movwf	doAreq@eventNumber& (0+255),b
 17598  0033EA  C1F1  F09E         	movff	??_parseFLiMCmd+4,doAreq@eventNumber+1
 17599  0033EE  EC9A  F037         	call	_doAreq	;wreg free
 17600  0033F2                     l20229:
 17601                           
 17602                           ; BSR set to: 0
 17603                           ;FliM.c: 454: cmdProcessed = 1;
 17604  0033F2  0E01               	movlw	1
 17605  0033F4  D020               	goto	L12
 17606  0033F6                     l20231:
 17607                           
 17608                           ; BSR set to: 0
 17609                           ;FliM.c: 461: doAreq(0 , (((WORD)rx_ptr[d3]) << 8) + rx_ptr[d4]);
 17610  0033F6  0E00               	movlw	0
 17611  0033F8  6F9C               	movwf	(doAreq@nodeNumber+1)& (0+255),b
 17612  0033FA  0E00               	movlw	0
 17613  0033FC  6F9B               	movwf	doAreq@nodeNumber& (0+255),b
 17614  0033FE  EE20 F00A          	lfsr	2,10
 17615  003402  51E1               	movf	parseFLiMCmd@rx_ptr& (0+255),w,b
 17616  003404  26D9               	addwf	fsr2l,f,c
 17617  003406  51E2               	movf	(parseFLiMCmd@rx_ptr+1)& (0+255),w,b
 17618  003408  22DA               	addwfc	fsr2h,f,c
 17619  00340A  50DF               	movf	indf2,w,c
 17620  00340C  0101               	movlb	1	; () banked
 17621  00340E  6FED               	movwf	??_parseFLiMCmd& (0+255),b
 17622  003410  0100               	movlb	0	; () banked
 17623  003412  EE20 F009          	lfsr	2,9
 17624  003416  51E1               	movf	parseFLiMCmd@rx_ptr& (0+255),w,b
 17625  003418  26D9               	addwf	fsr2l,f,c
 17626  00341A  51E2               	movf	(parseFLiMCmd@rx_ptr+1)& (0+255),w,b
 17627  00341C  22DA               	addwfc	fsr2h,f,c
 17628  00341E  50DF               	movf	indf2,w,c
 17629  003420  0101               	movlb	1	; () banked
 17630  003422  6FEE               	movwf	(??_parseFLiMCmd+1)& (0+255),b
 17631  003424  51ED               	movf	??_parseFLiMCmd& (0+255),w,b
 17632  003426  0100               	movlb	0	; () banked
 17633  003428  6F9D               	movwf	doAreq@eventNumber& (0+255),b
 17634  00342A  C1EE  F09E         	movff	??_parseFLiMCmd+1,doAreq@eventNumber+1
 17635  00342E  EC9A  F037         	call	_doAreq	;wreg free
 17636  003432  D7DF               	goto	l20229
 17637  003434                     l20235:
 17638                           
 17639                           ; BSR set to: 0
 17640                           ;FliM.c: 466: cmdProcessed = 0;
 17641  003434  0E00               	movlw	0
 17642  003436                     L12:
 17643  003436  6FE3               	movwf	parseFLiMCmd@cmdProcessed& (0+255),b
 17644                           
 17645                           ;FliM.c: 467: break;
 17646  003438  D032               	goto	l20241
 17647  00343A                     l20239:
 17648                           
 17649                           ; BSR set to: 0
 17650  00343A  EE20 F006          	lfsr	2,6
 17651  00343E  51E1               	movf	parseFLiMCmd@rx_ptr& (0+255),w,b
 17652  003440  26D9               	addwf	fsr2l,f,c
 17653  003442  51E2               	movf	(parseFLiMCmd@rx_ptr+1)& (0+255),w,b
 17654  003444  22DA               	addwfc	fsr2h,f,c
 17655  003446  50DF               	movf	indf2,w,c
 17656                           
 17657                           ; Switch size 1, requested type "simple"
 17658                           ; Number of cases is 14, Range of values is 83 to 156
 17659                           ; switch strategies available:
 17660                           ; Name         Instructions Cycles
 17661                           ; simple_byte           43    22 (average)
 17662                           ;	Chosen strategy is simple_byte
 17663  003448  0A53               	xorlw	83	; case 83
 17664  00344A  B4D8               	btfsc	status,2,c
 17665  00344C  D73C               	goto	l20201
 17666  00344E  0A05               	xorlw	5	; case 86
 17667  003450  B4D8               	btfsc	status,2,c
 17668  003452  D73F               	goto	l20205
 17669  003454  0A01               	xorlw	1	; case 87
 17670  003456  B4D8               	btfsc	status,2,c
 17671  003458  D73F               	goto	l20207
 17672  00345A  0A0F               	xorlw	15	; case 88
 17673  00345C  B4D8               	btfsc	status,2,c
 17674  00345E  D749               	goto	l20211
 17675  003460  0A04               	xorlw	4	; case 92
 17676  003462  B4D8               	btfsc	status,2,c
 17677  003464  D777               	goto	l20219
 17678  003466  0A01               	xorlw	1	; case 93
 17679  003468  B4D8               	btfsc	status,2,c
 17680  00346A  D78D               	goto	l20225
 17681  00346C  0A2C               	xorlw	44	; case 113
 17682  00346E  B4D8               	btfsc	status,2,c
 17683  003470  D743               	goto	l20213
 17684  003472  0A03               	xorlw	3	; case 114
 17685  003474  B4D8               	btfsc	status,2,c
 17686  003476  D733               	goto	l20209
 17687  003478  0A01               	xorlw	1	; case 115
 17688  00347A  B4D8               	btfsc	status,2,c
 17689  00347C  D71A               	goto	l20199
 17690  00347E  0A06               	xorlw	6	; case 117
 17691  003480  B4D8               	btfsc	status,2,c
 17692  003482  D771               	goto	l20221
 17693  003484  0AE7               	xorlw	231	; case 146
 17694  003486  B4D8               	btfsc	status,2,c
 17695  003488  D782               	goto	l20227
 17696  00348A  0A04               	xorlw	4	; case 150
 17697  00348C  B4D8               	btfsc	status,2,c
 17698  00348E  D73E               	goto	l20215
 17699  003490  0A0C               	xorlw	12	; case 154
 17700  003492  B4D8               	btfsc	status,2,c
 17701  003494  D7B0               	goto	l20231
 17702  003496  0A06               	xorlw	6	; case 156
 17703  003498  B4D8               	btfsc	status,2,c
 17704  00349A  D74A               	goto	l20217
 17705  00349C  D7CB               	goto	l20235
 17706  00349E                     l20241:
 17707                           
 17708                           ;FliM.c: 469: };FliM.c: 471: if (!cmdProcessed)
 17709  00349E  0100               	movlb	0	; () banked
 17710  0034A0  51E3               	movf	parseFLiMCmd@cmdProcessed& (0+255),w,b
 17711  0034A2  B4D8               	btfsc	status,2,c
 17712  0034A4  D006               	goto	l20251
 17713  0034A6  D00F               	goto	l20253
 17714  0034A8                     l20245:
 17715                           
 17716                           ; BSR set to: 0
 17717                           ;FliM.c: 475: QNNrespond();
 17718  0034A8  EC7B  F04C         	call	_QNNrespond	;wreg free
 17719                           
 17720                           ; BSR set to: 0
 17721                           ;FliM.c: 476: cmdProcessed = 1;
 17722  0034AC  0E01               	movlw	1
 17723  0034AE  6FE3               	movwf	parseFLiMCmd@cmdProcessed& (0+255),b
 17724                           
 17725                           ;FliM.c: 477: break;
 17726  0034B0  D00A               	goto	l20253
 17727  0034B2                     l20251:
 17728                           
 17729                           ; BSR set to: 0
 17730  0034B2  EE20 F006          	lfsr	2,6
 17731  0034B6  51E1               	movf	parseFLiMCmd@rx_ptr& (0+255),w,b
 17732  0034B8  26D9               	addwf	fsr2l,f,c
 17733  0034BA  51E2               	movf	(parseFLiMCmd@rx_ptr+1)& (0+255),w,b
 17734  0034BC  22DA               	addwfc	fsr2h,f,c
 17735  0034BE  50DF               	movf	indf2,w,c
 17736                           
 17737                           ; Switch size 1, requested type "simple"
 17738                           ; Number of cases is 1, Range of values is 13 to 13
 17739                           ; switch strategies available:
 17740                           ; Name         Instructions Cycles
 17741                           ; simple_byte            4     3 (average)
 17742                           ;	Chosen strategy is simple_byte
 17743  0034C0  0A0D               	xorlw	13	; case 13
 17744  0034C2  B4D8               	btfsc	status,2,c
 17745  0034C4  D7F1               	goto	l20245
 17746  0034C6                     l20253:
 17747                           
 17748                           ; BSR set to: 0
 17749                           ;FliM.c: 479: };FliM.c: 484: if ((!cmdProcessed) && (flimState == fsFLiMSetup))
 17750  0034C6  51E3               	movf	parseFLiMCmd@cmdProcessed& (0+255),w,b
 17751  0034C8  A4D8               	btfss	status,2,c
 17752  0034CA  D028               	goto	l20271
 17753                           
 17754                           ; BSR set to: 0
 17755  0034CC  0E04               	movlw	4
 17756  0034CE  1816               	xorwf	_flimState^0,w,c
 17757  0034D0  A4D8               	btfss	status,2,c
 17758  0034D2  D024               	goto	l20271
 17759                           
 17760                           ; BSR set to: 0
 17761                           ;FliM.c: 485: {;FliM.c: 486: cmdProcessed = 1;
 17762  0034D4  0E01               	movlw	1
 17763  0034D6  6FE3               	movwf	parseFLiMCmd@cmdProcessed& (0+255),b
 17764                           
 17765                           ;FliM.c: 488: switch(rx_ptr[d0])
 17766  0034D8  D010               	goto	l20269
 17767  0034DA                     l20259:
 17768                           
 17769                           ; BSR set to: 0
 17770                           ;FliM.c: 492: doRqnp();
 17771  0034DA  EC8E  F048         	call	_doRqnp	;wreg free
 17772                           
 17773                           ;FliM.c: 493: break;
 17774  0034DE  D01E               	goto	l20271
 17775  0034E0                     l20261:
 17776                           
 17777                           ; BSR set to: 0
 17778                           ;FliM.c: 497: doRqmn();
 17779  0034E0  ECE6  F047         	call	_doRqmn	;wreg free
 17780                           
 17781                           ;FliM.c: 498: break;
 17782  0034E4  D01B               	goto	l20271
 17783  0034E6                     l20263:
 17784                           
 17785                           ; BSR set to: 0
 17786                           ;FliM.c: 502: doSnn(rx_ptr);
 17787  0034E6  C0E1  F09B         	movff	parseFLiMCmd@rx_ptr,doSnn@rx_ptr
 17788  0034EA  C0E2  F09C         	movff	parseFLiMCmd@rx_ptr+1,doSnn@rx_ptr+1
 17789  0034EE  EC1B  F04B         	call	_doSnn	;wreg free
 17790                           
 17791                           ;FliM.c: 503: break;
 17792  0034F2  D014               	goto	l20271
 17793  0034F4                     l20265:
 17794                           
 17795                           ; BSR set to: 0
 17796                           ;FliM.c: 507: cmdProcessed = 0;
 17797  0034F4  0E00               	movlw	0
 17798  0034F6  6FE3               	movwf	parseFLiMCmd@cmdProcessed& (0+255),b
 17799                           
 17800                           ;FliM.c: 508: break;
 17801  0034F8  D011               	goto	l20271
 17802  0034FA                     l20269:
 17803                           
 17804                           ; BSR set to: 0
 17805  0034FA  EE20 F006          	lfsr	2,6
 17806  0034FE  51E1               	movf	parseFLiMCmd@rx_ptr& (0+255),w,b
 17807  003500  26D9               	addwf	fsr2l,f,c
 17808  003502  51E2               	movf	(parseFLiMCmd@rx_ptr+1)& (0+255),w,b
 17809  003504  22DA               	addwfc	fsr2h,f,c
 17810  003506  50DF               	movf	indf2,w,c
 17811                           
 17812                           ; Switch size 1, requested type "simple"
 17813                           ; Number of cases is 3, Range of values is 16 to 66
 17814                           ; switch strategies available:
 17815                           ; Name         Instructions Cycles
 17816                           ; simple_byte           10     6 (average)
 17817                           ;	Chosen strategy is simple_byte
 17818  003508  0A10               	xorlw	16	; case 16
 17819  00350A  B4D8               	btfsc	status,2,c
 17820  00350C  D7E6               	goto	l20259
 17821  00350E  0A01               	xorlw	1	; case 17
 17822  003510  B4D8               	btfsc	status,2,c
 17823  003512  D7E6               	goto	l20261
 17824  003514  0A53               	xorlw	83	; case 66
 17825  003516  B4D8               	btfsc	status,2,c
 17826  003518  D7E6               	goto	l20263
 17827  00351A  D7EC               	goto	l20265
 17828  00351C                     l20271:
 17829                           
 17830                           ;FliM.c: 510: };FliM.c: 512: return( cmdProcessed );
 17831  00351C  0100               	movlb	0	; () banked
 17832  00351E  51E3               	movf	parseFLiMCmd@cmdProcessed& (0+255),w,b
 17833                           
 17834                           ; BSR set to: 0
 17835  003520  0012               	return		;funcret
 17836  003522                     __end_of_parseFLiMCmd:
 17837                           	callstack 0
 17838                           
 17839 ;; *************** function _thisNN *****************
 17840 ;; Defined at:
 17841 ;;		line 754 in file "../../github/CBUSlib/FliM.c"
 17842 ;; Parameters:    Size  Location     Type
 17843 ;;  rx_ptr          2   17[BANK0 ] PTR unsigned char 
 17844 ;;		 -> checkCBUS@msg(20), 
 17845 ;; Auto vars:     Size  Location     Type
 17846 ;;		None
 17847 ;; Return value:  Size  Location     Type
 17848 ;;                  1    wreg      unsigned char 
 17849 ;; Registers used:
 17850 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 17851 ;; Tracked objects:
 17852 ;;		On entry : 3F/0
 17853 ;;		On exit  : 3F/0
 17854 ;;		Unchanged: 0/0
 17855 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 17856 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17857 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17858 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17859 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17860 ;;Total ram usage:        6 bytes
 17861 ;; Hardware stack levels used: 1
 17862 ;; Hardware stack levels required when called: 8
 17863 ;; This function calls:
 17864 ;;		Nothing
 17865 ;; This function is called by:
 17866 ;;		_checkCBUS
 17867 ;;		_parseFLiMCmd
 17868 ;; This function uses a non-reentrant model
 17869 ;;
 17870                           
 17871                           	psect	text68
 17872  00932C                     __ptext68:
 17873                           	callstack 0
 17874  00932C                     _thisNN:
 17875                           	callstack 21
 17876                           
 17877                           ; BSR set to: 0
 17878                           ;FliM.c: 756: if (((rx_ptr[d0] >> 5) >= 2) && (((WORD)(rx_ptr[d1])<<8) + rx_ptr[d2]) == 
      +                          nodeID)
 17879                           
 17880                           ; BSR set to: 0
 17881                           ;incstack = 0
 17882  00932C  EE20 F006          	lfsr	2,6
 17883  009330  5171               	movf	thisNN@rx_ptr& (0+255),w,b
 17884  009332  26D9               	addwf	fsr2l,f,c
 17885  009334  5172               	movf	(thisNN@rx_ptr+1)& (0+255),w,b
 17886  009336  22DA               	addwfc	fsr2h,f,c
 17887  009338  50DF               	movf	indf2,w,c
 17888  00933A  6F73               	movwf	??_thisNN& (0+255),b
 17889  00933C  0E05               	movlw	5
 17890  00933E  6F74               	movwf	(??_thisNN+1)& (0+255),b
 17891  009340                     u23805:
 17892  009340  90D8               	bcf	status,0,c
 17893  009342  3373               	rrcf	??_thisNN& (0+255),f,b
 17894  009344  2F74               	decfsz	(??_thisNN+1)& (0+255),f,b
 17895  009346  D7FC               	goto	u23805
 17896  009348  0E01               	movlw	1
 17897  00934A  6573               	cpfsgt	??_thisNN& (0+255),b
 17898  00934C  D020               	goto	l19289
 17899                           
 17900                           ; BSR set to: 0
 17901  00934E  EE20 F007          	lfsr	2,7
 17902  009352  5171               	movf	thisNN@rx_ptr& (0+255),w,b
 17903  009354  26D9               	addwf	fsr2l,f,c
 17904  009356  5172               	movf	(thisNN@rx_ptr+1)& (0+255),w,b
 17905  009358  22DA               	addwfc	fsr2h,f,c
 17906  00935A  50DF               	movf	indf2,w,c
 17907  00935C  6F73               	movwf	??_thisNN& (0+255),b
 17908  00935E  5173               	movf	??_thisNN& (0+255),w,b
 17909  009360  6F75               	movwf	(??_thisNN+2)& (0+255),b
 17910  009362  6B74               	clrf	(??_thisNN+1)& (0+255),b
 17911  009364  EE20 F008          	lfsr	2,8
 17912  009368  5171               	movf	thisNN@rx_ptr& (0+255),w,b
 17913  00936A  26D9               	addwf	fsr2l,f,c
 17914  00936C  5172               	movf	(thisNN@rx_ptr+1)& (0+255),w,b
 17915  00936E  22DA               	addwfc	fsr2h,f,c
 17916  009370  50DF               	movf	indf2,w,c
 17917  009372  6F76               	movwf	(??_thisNN+3)& (0+255),b
 17918  009374  5176               	movf	(??_thisNN+3)& (0+255),w,b
 17919  009376  2774               	addwf	(??_thisNN+1)& (0+255),f,b
 17920  009378  0E00               	movlw	0
 17921  00937A  2375               	addwfc	(??_thisNN+2)& (0+255),f,b
 17922  00937C  5001               	movf	_nodeID^0,w,c
 17923  00937E  1974               	xorwf	(??_thisNN+1)& (0+255),w,b
 17924  009380  E106               	bnz	l19289
 17925  009382  5002               	movf	(_nodeID+1)^0,w,c
 17926  009384  1975               	xorwf	(??_thisNN+2)& (0+255),w,b
 17927  009386  A4D8               	btfss	status,2,c
 17928  009388  D002               	goto	l19289
 17929                           
 17930                           ; BSR set to: 0
 17931                           ;FliM.c: 757: return 1;
 17932  00938A  0E01               	movlw	1
 17933  00938C  0012               	return	
 17934  00938E                     l19289:
 17935                           
 17936                           ; BSR set to: 0
 17937                           ;FliM.c: 758: else;FliM.c: 759: return 0;
 17938  00938E  0E00               	movlw	0
 17939                           
 17940                           ; BSR set to: 0
 17941  009390  0012               	return		;funcret
 17942  009392                     __end_of_thisNN:
 17943                           	callstack 0
 17944                           
 17945 ;; *************** function _doSnn *****************
 17946 ;; Defined at:
 17947 ;;		line 717 in file "../../github/CBUSlib/FliM.c"
 17948 ;; Parameters:    Size  Location     Type
 17949 ;;  rx_ptr          2   59[BANK0 ] PTR unsigned char 
 17950 ;;		 -> checkCBUS@msg(20), 
 17951 ;; Auto vars:     Size  Location     Type
 17952 ;;		None
 17953 ;; Return value:  Size  Location     Type
 17954 ;;                  1    wreg      void 
 17955 ;; Registers used:
 17956 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17957 ;; Tracked objects:
 17958 ;;		On entry : 3F/0
 17959 ;;		On exit  : 3F/1
 17960 ;;		Unchanged: 0/0
 17961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 17962 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17963 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17964 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17965 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 17966 ;;Total ram usage:        3 bytes
 17967 ;; Hardware stack levels used: 1
 17968 ;; Hardware stack levels required when called: 17
 17969 ;; This function calls:
 17970 ;;		_SaveNodeDetails
 17971 ;;		_cbusSendOpcMyNN
 17972 ;;		_setFLiMLed
 17973 ;; This function is called by:
 17974 ;;		_parseFLiMCmd
 17975 ;; This function uses a non-reentrant model
 17976 ;;
 17977                           
 17978                           	psect	text69
 17979  009636                     __ptext69:
 17980                           	callstack 0
 17981  009636                     _doSnn:
 17982                           	callstack 10
 17983                           
 17984                           ; BSR set to: 0
 17985                           ;FliM.c: 721: nodeID = rx_ptr[d1];
 17986                           
 17987                           ; BSR set to: 0
 17988                           ;incstack = 0
 17989  009636  EE20 F007          	lfsr	2,7
 17990  00963A  519B               	movf	doSnn@rx_ptr& (0+255),w,b
 17991  00963C  26D9               	addwf	fsr2l,f,c
 17992  00963E  519C               	movf	(doSnn@rx_ptr+1)& (0+255),w,b
 17993  009640  22DA               	addwfc	fsr2h,f,c
 17994  009642  50DF               	movf	indf2,w,c
 17995  009644  6F9D               	movwf	??_doSnn& (0+255),b
 17996  009646  519D               	movf	??_doSnn& (0+255),w,b
 17997  009648  6E01               	movwf	_nodeID^0,c
 17998  00964A  6A02               	clrf	(_nodeID+1)^0,c
 17999                           
 18000                           ; BSR set to: 0
 18001                           ;FliM.c: 722: nodeID <<= 8;
 18002  00964C  5001               	movf	_nodeID^0,w,c
 18003  00964E  6E02               	movwf	(_nodeID+1)^0,c
 18004  009650  6A01               	clrf	_nodeID^0,c
 18005                           
 18006                           ; BSR set to: 0
 18007                           ;FliM.c: 723: nodeID += rx_ptr[d2];
 18008  009652  EE20 F008          	lfsr	2,8
 18009  009656  519B               	movf	doSnn@rx_ptr& (0+255),w,b
 18010  009658  26D9               	addwf	fsr2l,f,c
 18011  00965A  519C               	movf	(doSnn@rx_ptr+1)& (0+255),w,b
 18012  00965C  22DA               	addwfc	fsr2h,f,c
 18013  00965E  50DF               	movf	indf2,w,c
 18014  009660  6F9D               	movwf	??_doSnn& (0+255),b
 18015  009662  519D               	movf	??_doSnn& (0+255),w,b
 18016  009664  2601               	addwf	_nodeID^0,f,c
 18017  009666  0E00               	movlw	0
 18018  009668  2202               	addwfc	(_nodeID+1)^0,f,c
 18019                           
 18020                           ;FliM.c: 724: flimState = fsFLiM;
 18021  00966A  0E01               	movlw	1
 18022  00966C  6E16               	movwf	_flimState^0,c
 18023                           
 18024                           ; BSR set to: 0
 18025                           ;FliM.c: 728: SaveNodeDetails(nodeID, fsFLiM);
 18026  00966E  C001  F098         	movff	_nodeID,SaveNodeDetails@nodeID
 18027  009672  C002  F099         	movff	_nodeID+1,SaveNodeDetails@nodeID+1
 18028  009676  0E01               	movlw	1
 18029  009678  6F9A               	movwf	SaveNodeDetails@flimState& (0+255),b
 18030  00967A  ECB5  F051         	call	_SaveNodeDetails	;wreg free
 18031                           
 18032                           ; BSR set to: 0
 18033                           ;FliM.c: 732: cbusSendOpcMyNN( 0, 0x52, cbusMsg );
 18034  00967E  0E52               	movlw	82
 18035  009680  6F91               	movwf	cbusSendOpcMyNN@opc& (0+255),b
 18036  009682  0E1C               	movlw	low _cbusMsg
 18037  009684  6F92               	movwf	cbusSendOpcMyNN@msg& (0+255),b
 18038  009686  0E00               	movlw	0
 18039  009688  EC6B  F052         	call	_cbusSendOpcMyNN
 18040                           
 18041                           ; BSR set to: 0
 18042                           ;FliM.c: 733: setFLiMLed();
 18043  00968C  EC54  F053         	call	_setFLiMLed	;wreg free
 18044                           
 18045                           ; BSR set to: 1
 18046  009690  0012               	return		;funcret
 18047  009692                     __end_of_doSnn:
 18048                           	callstack 0
 18049                           
 18050 ;; *************** function _doRqnpn *****************
 18051 ;; Defined at:
 18052 ;;		line 554 in file "../../github/CBUSlib/FliM.c"
 18053 ;; Parameters:    Size  Location     Type
 18054 ;;  idx             1    wreg     unsigned char 
 18055 ;; Auto vars:     Size  Location     Type
 18056 ;;  idx             1   62[BANK0 ] unsigned char 
 18057 ;;  paramptr        3   59[BANK0 ] PTR struct .
 18058 ;;		 -> FLiMparams(20), 
 18059 ;; Return value:  Size  Location     Type
 18060 ;;                  1    wreg      void 
 18061 ;; Registers used:
 18062 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18063 ;; Tracked objects:
 18064 ;;		On entry : 3F/0
 18065 ;;		On exit  : 3F/0
 18066 ;;		Unchanged: 0/0
 18067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 18068 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18069 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18070 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18071 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18072 ;;Total ram usage:       11 bytes
 18073 ;; Hardware stack levels used: 1
 18074 ;; Hardware stack levels required when called: 14
 18075 ;; This function calls:
 18076 ;;		_cbusSendMsgNN
 18077 ;;		_doError
 18078 ;;		_readCPUType
 18079 ;; This function is called by:
 18080 ;;		_parseFLiMCmd
 18081 ;; This function uses a non-reentrant model
 18082 ;;
 18083                           
 18084                           	psect	text70
 18085  007534                     __ptext70:
 18086                           	callstack 0
 18087  007534                     _doRqnpn:
 18088                           	callstack 13
 18089                           
 18090                           ; BSR set to: 1
 18091                           ;incstack = 0
 18092                           ;doRqnpn@idx stored from wreg
 18093  007534  6F9E               	movwf	doRqnpn@idx& (0+255),b
 18094                           
 18095                           ;FliM.c: 556: FLiMprmptr paramptr;;FliM.c: 558: paramptr = (FLiMprmptr)&FLiMparams;
 18096  007536  0E20               	movlw	32
 18097  007538  0100               	movlb	0	; () banked
 18098  00753A  6F9B               	movwf	doRqnpn@paramptr& (0+255),b
 18099  00753C  0E08               	movlw	8
 18100  00753E  6F9C               	movwf	(doRqnpn@paramptr+1)& (0+255),b
 18101  007540  0E00               	movlw	0
 18102  007542  6F9D               	movwf	(doRqnpn@paramptr+2)& (0+255),b
 18103                           
 18104                           ; BSR set to: 0
 18105                           ;FliM.c: 560: if (idx <= FCUparams.parameter_count)
 18106  007544  519E               	movf	doRqnpn@idx& (0+255),w,b
 18107  007546  6F94               	movwf	??_doRqnpn& (0+255),b
 18108  007548  6B95               	clrf	(??_doRqnpn+1)& (0+255),b
 18109  00754A  0E38               	movlw	56
 18110  00754C  6EF6               	movwf	tblptrl,c
 18111  00754E                     	if	1	;There is more than 1 active tblptr byte
 18112  00754E  0E08               	movlw	8
 18113  007550  6EF7               	movwf	tblptrh,c
 18114  007552                     	endif
 18115  007552                     	if	1	;There are 3 active tblptr bytes
 18116  007552  0E00               	movlw	0
 18117  007554  6EF8               	movwf	tblptru,c
 18118  007556                     	endif
 18119  007556  5194               	movf	??_doRqnpn& (0+255),w,b
 18120  007558  0009               	tblrd		*+
 18121  00755A  5CF5               	subwf	tablat,w,c
 18122  00755C  5195               	movf	(??_doRqnpn+1)& (0+255),w,b
 18123  00755E  0009               	tblrd		*+
 18124  007560  58F5               	subwfb	tablat,w,c
 18125  007562  A0D8               	btfss	status,0,c
 18126  007564  D053               	goto	l19689
 18127                           
 18128                           ; BSR set to: 0
 18129                           ;FliM.c: 561: {;FliM.c: 562: cbusMsg[d0] = 0x9B;
 18130  007566  0E9B               	movlw	155
 18131  007568  6E22               	movwf	(_cbusMsg+6)^0,c
 18132                           
 18133                           ; BSR set to: 0
 18134                           ;FliM.c: 563: cbusMsg[d3] = idx;
 18135  00756A  C09E  F025         	movff	doRqnpn@idx,_cbusMsg+9
 18136                           
 18137                           ;FliM.c: 565: if (idx == 0)
 18138  00756E  519E               	movf	doRqnpn@idx& (0+255),w,b
 18139  007570  A4D8               	btfss	status,2,c
 18140  007572  D007               	goto	l19673
 18141                           
 18142                           ; BSR set to: 0
 18143                           ;FliM.c: 566: cbusMsg[d4] = FCUparams.parameter_count;
 18144  007574  0E38               	movlw	56
 18145  007576  6EF6               	movwf	tblptrl,c
 18146  007578                     	if	1	;There is more than 1 active tblptr byte
 18147  007578  0E08               	movlw	8
 18148  00757A  6EF7               	movwf	tblptrh,c
 18149  00757C                     	endif
 18150  00757C                     	if	1	;There are 3 active tblptr bytes
 18151  00757C  0E00               	movlw	0
 18152  00757E  6EF8               	movwf	tblptru,c
 18153  007580                     	endif
 18154  007580  D032               	goto	L13
 18155  007582                     l19673:
 18156                           
 18157                           ; BSR set to: 0
 18158                           ;FliM.c: 567: else if ((idx >= 15) && (idx < 19) )
 18159  007582  0E0E               	movlw	14
 18160  007584  659E               	cpfsgt	doRqnpn@idx& (0+255),b
 18161  007586  D015               	goto	l19679
 18162                           
 18163                           ; BSR set to: 0
 18164  007588  0E13               	movlw	19
 18165  00758A  619E               	cpfslt	doRqnpn@idx& (0+255),b
 18166  00758C  D012               	goto	l19679
 18167                           
 18168                           ; BSR set to: 0
 18169                           ;FliM.c: 568: cbusMsg[d4] = (unsigned char)(readCPUType() >> ((unsigned char)( idx - 15 
      +                          )*8U));
 18170  00758E  519E               	movf	doRqnpn@idx& (0+255),w,b
 18171  007590  0FF1               	addlw	241
 18172  007592  0D08               	mullw	8
 18173  007594  CFF3 F094          	movff	prodl,??_doRqnpn
 18174  007598  ECB3  F052         	call	_readCPUType	;wreg free
 18175  00759C  2B94               	incf	??_doRqnpn& (0+255),f,b
 18176  00759E  D003               	goto	u24414
 18177  0075A0                     u24415:
 18178  0075A0  90D8               	bcf	status,0,c
 18179  0075A2  3372               	rrcf	(?_readCPUType+1)& (0+255),f,b
 18180  0075A4  3371               	rrcf	?_readCPUType& (0+255),f,b
 18181  0075A6                     u24414:
 18182  0075A6  2F94               	decfsz	??_doRqnpn& (0+255),f,b
 18183  0075A8  D7FB               	goto	u24415
 18184  0075AA  0100               	movlb	0	; () banked
 18185  0075AC  5171               	movf	?_readCPUType& (0+255),w,b
 18186  0075AE  6E26               	movwf	(_cbusMsg+10)^0,c
 18187  0075B0  D01D               	goto	l19681
 18188  0075B2                     l19679:
 18189                           
 18190                           ; BSR set to: 0
 18191                           ;FliM.c: 569: else;FliM.c: 570: cbusMsg[d4] = paramptr->bytes[idx-1U];
 18192  0075B2  0EFF               	movlw	255
 18193  0075B4  6F94               	movwf	??_doRqnpn& (0+255),b
 18194  0075B6  0EFF               	movlw	255
 18195  0075B8  6F95               	movwf	(??_doRqnpn+1)& (0+255),b
 18196  0075BA  519E               	movf	doRqnpn@idx& (0+255),w,b
 18197  0075BC  6F96               	movwf	(??_doRqnpn+2)& (0+255),b
 18198  0075BE  6B97               	clrf	(??_doRqnpn+3)& (0+255),b
 18199  0075C0  5194               	movf	??_doRqnpn& (0+255),w,b
 18200  0075C2  2796               	addwf	(??_doRqnpn+2)& (0+255),f,b
 18201  0075C4  5195               	movf	(??_doRqnpn+1)& (0+255),w,b
 18202  0075C6  2397               	addwfc	(??_doRqnpn+3)& (0+255),f,b
 18203  0075C8  5196               	movf	(??_doRqnpn+2)& (0+255),w,b
 18204  0075CA  259B               	addwf	doRqnpn@paramptr& (0+255),w,b
 18205  0075CC  6F98               	movwf	(??_doRqnpn+4)& (0+255),b
 18206  0075CE  5197               	movf	(??_doRqnpn+3)& (0+255),w,b
 18207  0075D0  219C               	addwfc	(doRqnpn@paramptr+1)& (0+255),w,b
 18208  0075D2  6F99               	movwf	(??_doRqnpn+5)& (0+255),b
 18209  0075D4  0E00               	movlw	0
 18210  0075D6  219D               	addwfc	(doRqnpn@paramptr+2)& (0+255),w,b
 18211  0075D8  6F9A               	movwf	(??_doRqnpn+6)& (0+255),b
 18212  0075DA  C098  FFF6         	movff	??_doRqnpn+4,tblptrl
 18213  0075DE  C099  FFF7         	movff	??_doRqnpn+5,tblptrh
 18214  0075E2  C09A  FFF8         	movff	??_doRqnpn+6,tblptru
 18215  0075E6                     L13:
 18216  0075E6  0008               	tblrd		*
 18217  0075E8  CFF5 F026          	movff	tablat,_cbusMsg+10
 18218  0075EC                     l19681:
 18219                           
 18220                           ; BSR set to: 0
 18221                           ;FliM.c: 572: if ((idx == 8) && (flimState == fsFLiM))
 18222  0075EC  0E08               	movlw	8
 18223  0075EE  199E               	xorwf	doRqnpn@idx& (0+255),w,b
 18224  0075F0  A4D8               	btfss	status,2,c
 18225  0075F2  D003               	goto	l19687
 18226                           
 18227                           ; BSR set to: 0
 18228  0075F4  0416               	decf	_flimState^0,w,c
 18229  0075F6  B4D8               	btfsc	status,2,c
 18230                           
 18231                           ; BSR set to: 0
 18232                           ;FliM.c: 573: cbusMsg[d4] |= 4U;
 18233  0075F8  8426               	bsf	(_cbusMsg+10)^0,2,c
 18234  0075FA                     l19687:
 18235                           
 18236                           ; BSR set to: 0
 18237                           ;FliM.c: 575: cbusSendMsgNN(0xFF, -1, cbusMsg);
 18238  0075FA  0EFF               	movlw	255
 18239  0075FC  6F90               	movwf	(cbusSendMsgNN@eventNode+1)& (0+255),b
 18240  0075FE  698F               	setf	cbusSendMsgNN@eventNode& (0+255),b
 18241  007600  0E1C               	movlw	low _cbusMsg
 18242  007602  6F91               	movwf	cbusSendMsgNN@msg& (0+255),b
 18243  007604  0EFF               	movlw	255
 18244  007606  EC52  F04F         	call	_cbusSendMsgNN
 18245                           
 18246                           ;FliM.c: 576: }
 18247  00760A  0012               	return	
 18248  00760C                     l19689:
 18249                           
 18250                           ; BSR set to: 0
 18251                           ;FliM.c: 577: else;FliM.c: 578: {;FliM.c: 579: doError(9);
 18252  00760C  0E09               	movlw	9
 18253  00760E  EC5C  F052         	call	_doError
 18254                           
 18255                           ; BSR set to: 0
 18256  007612  0012               	return		;funcret
 18257  007614                     __end_of_doRqnpn:
 18258                           	callstack 0
 18259                           
 18260 ;; *************** function _readCPUType *****************
 18261 ;; Defined at:
 18262 ;;		line 475 in file "../../github/CBUSlib/romops.c"
 18263 ;; Parameters:    Size  Location     Type
 18264 ;;		None
 18265 ;; Auto vars:     Size  Location     Type
 18266 ;;		None
 18267 ;; Return value:  Size  Location     Type
 18268 ;;                  2   17[BANK0 ] unsigned int 
 18269 ;; Registers used:
 18270 ;;		wreg, tblptrl, tblptrh, tblptru
 18271 ;; Tracked objects:
 18272 ;;		On entry : 3F/0
 18273 ;;		On exit  : 3F/0
 18274 ;;		Unchanged: 3F/0
 18275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 18276 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18277 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18278 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18279 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18280 ;;Total ram usage:        2 bytes
 18281 ;; Hardware stack levels used: 1
 18282 ;; Hardware stack levels required when called: 8
 18283 ;; This function calls:
 18284 ;;		Nothing
 18285 ;; This function is called by:
 18286 ;;		_doRqnpn
 18287 ;; This function uses a non-reentrant model
 18288 ;;
 18289                           
 18290                           	psect	text71
 18291  00A566                     __ptext71:
 18292                           	callstack 0
 18293  00A566                     _readCPUType:
 18294                           	callstack 18
 18295                           
 18296                           ; BSR set to: 0
 18297                           ;romops.c: 477: return devId;
 18298                           
 18299                           ; BSR set to: 0
 18300                           ;incstack = 0
 18301  00A566  0EFE               	movlw	254
 18302  00A568  6EF6               	movwf	tblptrl,c
 18303  00A56A                     	if	1	;There is more than 1 active tblptr byte
 18304  00A56A  0EFF               	movlw	255
 18305  00A56C  6EF7               	movwf	tblptrh,c
 18306  00A56E                     	endif
 18307  00A56E                     	if	1	;There are 3 active tblptr bytes
 18308  00A56E  0E3F               	movlw	63
 18309  00A570  6EF8               	movwf	tblptru,c
 18310  00A572                     	endif
 18311  00A572  0009               	tblrd		*+
 18312  00A574  CFF5 F071          	movff	tablat,?_readCPUType
 18313  00A578  000A               	tblrd		*-
 18314  00A57A  CFF5 F072          	movff	tablat,?_readCPUType+1
 18315                           
 18316                           ; BSR set to: 0
 18317  00A57E  0012               	return		;funcret
 18318  00A580                     __end_of_readCPUType:
 18319                           	callstack 0
 18320                           
 18321 ;; *************** function _doRqnp *****************
 18322 ;; Defined at:
 18323 ;;		line 658 in file "../../github/CBUSlib/FliM.c"
 18324 ;; Parameters:    Size  Location     Type
 18325 ;;		None
 18326 ;; Auto vars:     Size  Location     Type
 18327 ;;  paramptr        3   53[BANK0 ] PTR struct .
 18328 ;;		 -> FLiMparams(20), 
 18329 ;;  copyCounter     1   56[BANK0 ] unsigned char 
 18330 ;; Return value:  Size  Location     Type
 18331 ;;                  1    wreg      void 
 18332 ;; Registers used:
 18333 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18334 ;; Tracked objects:
 18335 ;;		On entry : 3F/0
 18336 ;;		On exit  : 3F/0
 18337 ;;		Unchanged: 0/0
 18338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 18339 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18340 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18341 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18342 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18343 ;;Total ram usage:       10 bytes
 18344 ;; Hardware stack levels used: 1
 18345 ;; Hardware stack levels required when called: 12
 18346 ;; This function calls:
 18347 ;;		_cbusSendMsg
 18348 ;;		_getParFlags
 18349 ;; This function is called by:
 18350 ;;		_parseFLiMCmd
 18351 ;; This function uses a non-reentrant model
 18352 ;;
 18353                           
 18354                           	psect	text72
 18355  00911C                     __ptext72:
 18356                           	callstack 0
 18357  00911C                     _doRqnp:
 18358                           	callstack 15
 18359                           
 18360                           ; BSR set to: 0
 18361                           ;FliM.c: 660: FLiMprmptr paramptr;;FliM.c: 661: BYTE copyCounter;;FliM.c: 663: paramptr 
      +                          = (FLiMprmptr)&FLiMparams;
 18362                           
 18363                           ; BSR set to: 0
 18364                           ;incstack = 0
 18365  00911C  0E20               	movlw	32
 18366  00911E  6F95               	movwf	doRqnp@paramptr& (0+255),b
 18367  009120  0E08               	movlw	8
 18368  009122  6F96               	movwf	(doRqnp@paramptr+1)& (0+255),b
 18369  009124  0E00               	movlw	0
 18370  009126  6F97               	movwf	(doRqnp@paramptr+2)& (0+255),b
 18371                           
 18372                           ; BSR set to: 0
 18373                           ;FliM.c: 665: cbusMsg[d0] = 0xEF;
 18374  009128  0EEF               	movlw	239
 18375  00912A  6E22               	movwf	(_cbusMsg+6)^0,c
 18376                           
 18377                           ; BSR set to: 0
 18378                           ;FliM.c: 667: for (copyCounter = (unsigned char)d1; copyCounter <= (unsigned char)d7; co
      +                          pyCounter++)
 18379  00912C  0E07               	movlw	7
 18380  00912E  6F98               	movwf	doRqnp@copyCounter& (0+255),b
 18381  009130                     l19835:
 18382                           
 18383                           ; BSR set to: 0
 18384                           ;FliM.c: 668: {;FliM.c: 669: cbusMsg[copyCounter] = paramptr->bytes[(unsigned char)(copy
      +                          Counter-d1)];
 18385  009130  C098  F08F         	movff	doRqnp@copyCounter,??_doRqnp
 18386  009134  0EF9               	movlw	249
 18387  009136  278F               	addwf	??_doRqnp& (0+255),f,b
 18388  009138  518F               	movf	??_doRqnp& (0+255),w,b
 18389  00913A  0D01               	mullw	1
 18390  00913C  CFF3 F090          	movff	prodl,??_doRqnp+1
 18391  009140  CFF4 F091          	movff	prodh,??_doRqnp+2
 18392  009144  5190               	movf	(??_doRqnp+1)& (0+255),w,b
 18393  009146  2595               	addwf	doRqnp@paramptr& (0+255),w,b
 18394  009148  6F92               	movwf	(??_doRqnp+3)& (0+255),b
 18395  00914A  5191               	movf	(??_doRqnp+2)& (0+255),w,b
 18396  00914C  2196               	addwfc	(doRqnp@paramptr+1)& (0+255),w,b
 18397  00914E  6F93               	movwf	(??_doRqnp+4)& (0+255),b
 18398  009150  0E00               	movlw	0
 18399  009152  2197               	addwfc	(doRqnp@paramptr+2)& (0+255),w,b
 18400  009154  6F94               	movwf	(??_doRqnp+5)& (0+255),b
 18401  009156  C092  FFF6         	movff	??_doRqnp+3,tblptrl
 18402  00915A  C093  FFF7         	movff	??_doRqnp+4,tblptrh
 18403  00915E  C094  FFF8         	movff	??_doRqnp+5,tblptru
 18404  009162  5198               	movf	doRqnp@copyCounter& (0+255),w,b
 18405  009164  0F1C               	addlw	low _cbusMsg
 18406  009166  6ED9               	movwf	fsr2l,c
 18407  009168  6ADA               	clrf	fsr2h,c
 18408  00916A  0008               	tblrd		*
 18409  00916C  CFF5 FFDF          	movff	tablat,indf2
 18410                           
 18411                           ; BSR set to: 0
 18412  009170  2B98               	incf	doRqnp@copyCounter& (0+255),f,b
 18413                           
 18414                           ; BSR set to: 0
 18415  009172  0E0D               	movlw	13
 18416  009174  6598               	cpfsgt	doRqnp@copyCounter& (0+255),b
 18417  009176  D7DC               	goto	l19835
 18418                           
 18419                           ; BSR set to: 0
 18420                           ;FliM.c: 670: };FliM.c: 673: cbusMsg[(unsigned char)d1+8-1U] = getParFlags();
 18421  009178  ECA4  F04C         	call	_getParFlags	;wreg free
 18422  00917C  6E2A               	movwf	(_cbusMsg+14)^0,c
 18423                           
 18424                           ; BSR set to: 0
 18425                           ;FliM.c: 675: cbusSendMsg(0, cbusMsg);
 18426  00917E  0E1C               	movlw	low _cbusMsg
 18427  009180  6F8B               	movwf	cbusSendMsg@msg& (0+255),b
 18428  009182  0E00               	movlw	0
 18429  009184  ECAD  F04F         	call	_cbusSendMsg
 18430                           
 18431                           ; BSR set to: 0
 18432  009188  0012               	return		;funcret
 18433  00918A                     __end_of_doRqnp:
 18434                           	callstack 0
 18435                           
 18436 ;; *************** function _doRqmn *****************
 18437 ;; Defined at:
 18438 ;;		line 683 in file "../../github/CBUSlib/FliM.c"
 18439 ;; Parameters:    Size  Location     Type
 18440 ;;		None
 18441 ;; Auto vars:     Size  Location     Type
 18442 ;;  namadr          4   47[BANK0 ] unsigned long 
 18443 ;;  namptr          3   51[BANK0 ] PTR const unsigned char 
 18444 ;;		 -> ROM(65535), 
 18445 ;;  copyCounter     1   54[BANK0 ] unsigned char 
 18446 ;;  padCounter      1    0        unsigned char 
 18447 ;; Return value:  Size  Location     Type
 18448 ;;                  1    wreg      void 
 18449 ;; Registers used:
 18450 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18451 ;; Tracked objects:
 18452 ;;		On entry : 3F/0
 18453 ;;		On exit  : 3F/0
 18454 ;;		Unchanged: 0/0
 18455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 18456 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18457 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18458 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18459 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18460 ;;Total ram usage:        8 bytes
 18461 ;; Hardware stack levels used: 1
 18462 ;; Hardware stack levels required when called: 12
 18463 ;; This function calls:
 18464 ;;		_cbusSendMsg
 18465 ;; This function is called by:
 18466 ;;		_parseFLiMCmd
 18467 ;; This function uses a non-reentrant model
 18468 ;;
 18469                           
 18470                           	psect	text73
 18471  008FCC                     __ptext73:
 18472                           	callstack 0
 18473  008FCC                     _doRqmn:
 18474                           	callstack 15
 18475                           
 18476                           ; BSR set to: 0
 18477                           ;FliM.c: 685: BYTE copyCounter, padCounter;;FliM.c: 687: const char* namptr;;FliM.c: 691
      +                          : DWORD namadr;;FliM.c: 694: namadr = FCUparams.module_type_name;
 18478                           
 18479                           ; BSR set to: 0
 18480                           ;incstack = 0
 18481  008FCC  0E3A               	movlw	58
 18482  008FCE  6EF6               	movwf	tblptrl,c
 18483  008FD0  0E08               	movlw	8
 18484  008FD2  6EF7               	movwf	tblptrh,c
 18485  008FD4  0E00               	movlw	0
 18486  008FD6  6EF8               	movwf	tblptru,c
 18487  008FD8  0009               	tblrd		*+
 18488  008FDA  CFF5 F08F          	movff	tablat,doRqmn@namadr
 18489  008FDE  0009               	tblrd		*+
 18490  008FE0  CFF5 F090          	movff	tablat,doRqmn@namadr+1
 18491  008FE4  0009               	tblrd		*+
 18492  008FE6  CFF5 F091          	movff	tablat,doRqmn@namadr+2
 18493  008FEA  000A               	tblrd		*-
 18494  008FEC  CFF5 F092          	movff	tablat,doRqmn@namadr+3
 18495                           
 18496                           ; BSR set to: 0
 18497                           ;FliM.c: 696: namptr = (const char*)namadr;
 18498  008FF0  C08F  F093         	movff	doRqmn@namadr,doRqmn@namptr
 18499  008FF4  C090  F094         	movff	doRqmn@namadr+1,doRqmn@namptr+1
 18500  008FF8  C091  F095         	movff	doRqmn@namadr+2,doRqmn@namptr+2
 18501                           
 18502                           ; BSR set to: 0
 18503                           ;FliM.c: 703: cbusMsg[d0] = 0xE2;
 18504  008FFC  0EE2               	movlw	226
 18505  008FFE  6E22               	movwf	(_cbusMsg+6)^0,c
 18506                           
 18507                           ; BSR set to: 0
 18508                           ;FliM.c: 705: for (copyCounter = 0U; copyCounter < 7U; copyCounter++ )
 18509  009000  0E00               	movlw	0
 18510  009002  6F96               	movwf	doRqmn@copyCounter& (0+255),b
 18511  009004                     l19857:
 18512                           
 18513                           ; BSR set to: 0
 18514                           ;FliM.c: 706: cbusMsg[(unsigned char)(copyCounter+d1)] = *namptr++;
 18515  009004  C093  FFF6         	movff	doRqmn@namptr,tblptrl
 18516  009008  C094  FFF7         	movff	doRqmn@namptr+1,tblptrh
 18517  00900C  C095  FFF8         	movff	doRqmn@namptr+2,tblptru
 18518  009010  5196               	movf	doRqmn@copyCounter& (0+255),w,b
 18519  009012  0F23               	addlw	low (_cbusMsg+7)
 18520  009014  6ED9               	movwf	fsr2l,c
 18521  009016  6ADA               	clrf	fsr2h,c
 18522  009018  0008               	tblrd		*
 18523  00901A  CFF5 FFDF          	movff	tablat,indf2
 18524                           
 18525                           ; BSR set to: 0
 18526  00901E  0E01               	movlw	1
 18527  009020  2793               	addwf	doRqmn@namptr& (0+255),f,b
 18528  009022  0E00               	movlw	0
 18529  009024  2394               	addwfc	(doRqmn@namptr+1)& (0+255),f,b
 18530  009026  0E00               	movlw	0
 18531  009028  2395               	addwfc	(doRqmn@namptr+2)& (0+255),f,b
 18532                           
 18533                           ; BSR set to: 0
 18534  00902A  2B96               	incf	doRqmn@copyCounter& (0+255),f,b
 18535                           
 18536                           ; BSR set to: 0
 18537  00902C  0E06               	movlw	6
 18538  00902E  6596               	cpfsgt	doRqmn@copyCounter& (0+255),b
 18539  009030  D7E9               	goto	l19857
 18540                           
 18541                           ; BSR set to: 0
 18542                           ;FliM.c: 709: cbusSendMsg( 0, cbusMsg );
 18543  009032  0E1C               	movlw	low _cbusMsg
 18544  009034  6F8B               	movwf	cbusSendMsg@msg& (0+255),b
 18545  009036  0E00               	movlw	0
 18546  009038  ECAD  F04F         	call	_cbusSendMsg
 18547                           
 18548                           ; BSR set to: 0
 18549  00903C  0012               	return		;funcret
 18550  00903E                     __end_of_doRqmn:
 18551                           	callstack 0
 18552                           
 18553 ;; *************** function _doRqevn *****************
 18554 ;; Defined at:
 18555 ;;		line 406 in file "../../github/CBUSlib/events.c"
 18556 ;; Parameters:    Size  Location     Type
 18557 ;;		None
 18558 ;; Auto vars:     Size  Location     Type
 18559 ;;  i               1   53[BANK0 ] unsigned char 
 18560 ;;  count           1   52[BANK0 ] unsigned char 
 18561 ;; Return value:  Size  Location     Type
 18562 ;;                  1    wreg      void 
 18563 ;; Registers used:
 18564 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18565 ;; Tracked objects:
 18566 ;;		On entry : 3F/0
 18567 ;;		On exit  : 3F/0
 18568 ;;		Unchanged: 0/0
 18569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 18570 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18571 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18572 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18573 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18574 ;;Total ram usage:        2 bytes
 18575 ;; Hardware stack levels used: 1
 18576 ;; Hardware stack levels required when called: 14
 18577 ;; This function calls:
 18578 ;;		_cbusSendOpcMyNN
 18579 ;;		_validStart
 18580 ;; This function is called by:
 18581 ;;		_parseFLiMCmd
 18582 ;; This function uses a non-reentrant model
 18583 ;;
 18584                           
 18585                           	psect	text74
 18586  00A13C                     __ptext74:
 18587                           	callstack 0
 18588  00A13C                     _doRqevn:
 18589                           	callstack 13
 18590                           
 18591                           ; BSR set to: 0
 18592                           ;events.c: 409: unsigned char count = 0;
 18593                           
 18594                           ; BSR set to: 0
 18595                           ;incstack = 0
 18596  00A13C  0E00               	movlw	0
 18597  00A13E  6F94               	movwf	doRqevn@count& (0+255),b
 18598                           
 18599                           ;events.c: 410: unsigned char i;;events.c: 411: for (i=0; i<255U; i++) {
 18600  00A140  0E00               	movlw	0
 18601  00A142  6F95               	movwf	doRqevn@i& (0+255),b
 18602  00A144                     l19577:
 18603                           
 18604                           ; BSR set to: 0
 18605                           ;events.c: 412: if (validStart(i)) {
 18606  00A144  5195               	movf	doRqevn@i& (0+255),w,b
 18607  00A146  ECFE  F050         	call	_validStart
 18608  00A14A  0900               	iorlw	0
 18609  00A14C  A4D8               	btfss	status,2,c
 18610                           
 18611                           ; BSR set to: 0
 18612                           ;events.c: 413: count++;
 18613  00A14E  2B94               	incf	doRqevn@count& (0+255),f,b
 18614                           
 18615                           ; BSR set to: 0
 18616  00A150  2B95               	incf	doRqevn@i& (0+255),f,b
 18617                           
 18618                           ; BSR set to: 0
 18619  00A152  2995               	incf	doRqevn@i& (0+255),w,b
 18620  00A154  A4D8               	btfss	status,2,c
 18621  00A156  D7F6               	goto	l19577
 18622                           
 18623                           ; BSR set to: 0
 18624                           ;events.c: 414: };events.c: 415: };events.c: 416: cbusMsg[d3] = count;
 18625  00A158  C094  F025         	movff	doRqevn@count,_cbusMsg+9
 18626                           
 18627                           ; BSR set to: 0
 18628                           ;events.c: 417: cbusSendOpcMyNN( 0, 0x74, cbusMsg );
 18629  00A15C  0E74               	movlw	116
 18630  00A15E  6F91               	movwf	cbusSendOpcMyNN@opc& (0+255),b
 18631  00A160  0E1C               	movlw	low _cbusMsg
 18632  00A162  6F92               	movwf	cbusSendOpcMyNN@msg& (0+255),b
 18633  00A164  0E00               	movlw	0
 18634  00A166  EC6B  F052         	call	_cbusSendOpcMyNN
 18635                           
 18636                           ; BSR set to: 0
 18637  00A16A  0012               	return		;funcret
 18638  00A16C                     __end_of_doRqevn:
 18639                           	callstack 0
 18640                           
 18641 ;; *************** function _doReval *****************
 18642 ;; Defined at:
 18643 ;;		line 828 in file "../../github/CBUSlib/FliM.c"
 18644 ;; Parameters:    Size  Location     Type
 18645 ;;  enNum           1    wreg     unsigned char 
 18646 ;;  evNum           1   52[BANK0 ] unsigned char 
 18647 ;; Auto vars:     Size  Location     Type
 18648 ;;  enNum           1   55[BANK0 ] unsigned char 
 18649 ;;  evVal           2   56[BANK0 ] int 
 18650 ;;  tableIndex      1   58[BANK0 ] unsigned char 
 18651 ;;  evIndex         1   54[BANK0 ] unsigned char 
 18652 ;; Return value:  Size  Location     Type
 18653 ;;                  1    wreg      void 
 18654 ;; Registers used:
 18655 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18656 ;; Tracked objects:
 18657 ;;		On entry : 3F/0
 18658 ;;		On exit  : 3F/0
 18659 ;;		Unchanged: 0/0
 18660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 18661 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18662 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18663 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18664 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18665 ;;Total ram usage:        7 bytes
 18666 ;; Hardware stack levels used: 1
 18667 ;; Hardware stack levels required when called: 15
 18668 ;; This function calls:
 18669 ;;		_cbusSendOpcMyNN
 18670 ;;		_evtIdxToTableIndex
 18671 ;;		_getEv
 18672 ;;		_numEv
 18673 ;;		_validStart
 18674 ;; This function is called by:
 18675 ;;		_parseFLiMCmd
 18676 ;; This function uses a non-reentrant model
 18677 ;;
 18678                           
 18679                           	psect	text75
 18680  008028                     __ptext75:
 18681                           	callstack 0
 18682  008028                     _doReval:
 18683                           	callstack 12
 18684                           
 18685                           ; BSR set to: 0
 18686                           ;incstack = 0
 18687                           ;doReval@enNum stored from wreg
 18688  008028  6F97               	movwf	doReval@enNum& (0+255),b
 18689                           
 18690                           ;FliM.c: 832: BYTE evIndex;;FliM.c: 833: BYTE tableIndex = evtIdxToTableIndex(enNum);
 18691  00802A  0100               	movlb	0	; () banked
 18692  00802C  5197               	movf	doReval@enNum& (0+255),w,b
 18693  00802E  EC76  F053         	call	_evtIdxToTableIndex
 18694  008032  6F9A               	movwf	doReval@tableIndex& (0+255),b
 18695                           
 18696                           ; BSR set to: 0
 18697                           ;FliM.c: 835: if (evNum > 20U)
 18698  008034  0E14               	movlw	20
 18699  008036  6594               	cpfsgt	doReval@evNum& (0+255),b
 18700  008038  D00A               	goto	l19741
 18701                           
 18702                           ; BSR set to: 0
 18703                           ;FliM.c: 836: {;FliM.c: 837: cbusMsg[d3] = 6;
 18704  00803A  0E06               	movlw	6
 18705  00803C  6E25               	movwf	(_cbusMsg+9)^0,c
 18706                           
 18707                           ; BSR set to: 0
 18708                           ;FliM.c: 838: cbusSendOpcMyNN( 0, 0x6F, cbusMsg);
 18709  00803E  0E6F               	movlw	111
 18710  008040  6F91               	movwf	cbusSendOpcMyNN@opc& (0+255),b
 18711  008042  0E1C               	movlw	low _cbusMsg
 18712  008044  6F92               	movwf	cbusSendOpcMyNN@msg& (0+255),b
 18713  008046  0E00               	movlw	0
 18714  008048  EC6B  F052         	call	_cbusSendOpcMyNN
 18715  00804C  0012               	return	
 18716  00804E                     l19741:
 18717                           
 18718                           ; BSR set to: 0
 18719                           ;FliM.c: 840: };FliM.c: 842: evIndex = evNum-1U;
 18720  00804E  0594               	decf	doReval@evNum& (0+255),w,b
 18721  008050  6F96               	movwf	doReval@evIndex& (0+255),b
 18722                           
 18723                           ;FliM.c: 845: if (tableIndex < 255U)
 18724  008052  299A               	incf	doReval@tableIndex& (0+255),w,b
 18725  008054  B4D8               	btfsc	status,2,c
 18726  008056  D035               	goto	l19765
 18727                           
 18728                           ; BSR set to: 0
 18729                           ;FliM.c: 846: if (validStart(tableIndex))
 18730  008058  519A               	movf	doReval@tableIndex& (0+255),w,b
 18731  00805A  ECFE  F050         	call	_validStart
 18732  00805E  0900               	iorlw	0
 18733  008060  B4D8               	btfsc	status,2,c
 18734  008062  D02F               	goto	l19765
 18735                           
 18736                           ; BSR set to: 0
 18737                           ;FliM.c: 847: {;FliM.c: 848: int evVal;;FliM.c: 849: if (evNum == 0)
 18738  008064  5194               	movf	doReval@evNum& (0+255),w,b
 18739  008066  A4D8               	btfss	status,2,c
 18740  008068  D008               	goto	l19749
 18741                           
 18742                           ; BSR set to: 0
 18743                           ;FliM.c: 850: {;FliM.c: 851: evVal = numEv(tableIndex);
 18744  00806A  519A               	movf	doReval@tableIndex& (0+255),w,b
 18745  00806C  EC8C  F044         	call	_numEv
 18746  008070  6F95               	movwf	??_doReval& (0+255),b
 18747  008072  5195               	movf	??_doReval& (0+255),w,b
 18748  008074  6F98               	movwf	doReval@evVal& (0+255),b
 18749  008076  6B99               	clrf	(doReval@evVal+1)& (0+255),b
 18750                           
 18751                           ;FliM.c: 852: }
 18752  008078  D009               	goto	l19751
 18753  00807A                     l19749:
 18754                           
 18755                           ; BSR set to: 0
 18756                           ;FliM.c: 853: else;FliM.c: 854: {;FliM.c: 855: evVal = getEv(tableIndex, evIndex);
 18757  00807A  C096  F081         	movff	doReval@evIndex,getEv@evNum
 18758  00807E  519A               	movf	doReval@tableIndex& (0+255),w,b
 18759  008080  EC22  F038         	call	_getEv
 18760  008084  C081  F098         	movff	?_getEv,doReval@evVal
 18761  008088  C082  F099         	movff	?_getEv+1,doReval@evVal+1
 18762  00808C                     l19751:
 18763                           
 18764                           ; BSR set to: 0
 18765                           ;FliM.c: 856: };FliM.c: 857: if (evVal >= 0) {
 18766  00808C  BF99               	btfsc	(doReval@evVal+1)& (0+255),7,b
 18767  00808E  D00E               	goto	l19759
 18768                           
 18769                           ; BSR set to: 0
 18770                           ;FliM.c: 858: cbusMsg[d3] = enNum;
 18771  008090  C097  F025         	movff	doReval@enNum,_cbusMsg+9
 18772                           
 18773                           ;FliM.c: 859: cbusMsg[d4] = evNum;
 18774  008094  C094  F026         	movff	doReval@evNum,_cbusMsg+10
 18775                           
 18776                           ;FliM.c: 860: cbusMsg[d5] = (unsigned char)evVal;
 18777  008098  C098  F027         	movff	doReval@evVal,_cbusMsg+11
 18778                           
 18779                           ; BSR set to: 0
 18780                           ;FliM.c: 861: cbusSendOpcMyNN( 0, 0xB5, cbusMsg );
 18781  00809C  0EB5               	movlw	181
 18782  00809E  6F91               	movwf	cbusSendOpcMyNN@opc& (0+255),b
 18783  0080A0  0E1C               	movlw	low _cbusMsg
 18784  0080A2  6F92               	movwf	cbusSendOpcMyNN@msg& (0+255),b
 18785  0080A4  0E00               	movlw	0
 18786  0080A6  EC6B  F052         	call	_cbusSendOpcMyNN
 18787  0080AA  0012               	return	
 18788  0080AC                     l19759:
 18789                           
 18790                           ; BSR set to: 0
 18791                           ;FliM.c: 863: };FliM.c: 864: cbusMsg[d3] = (unsigned char)(-evVal);
 18792  0080AC  5198               	movf	doReval@evVal& (0+255),w,b
 18793  0080AE  0800               	sublw	0
 18794  0080B0  6E25               	movwf	(_cbusMsg+9)^0,c
 18795                           
 18796                           ; BSR set to: 0
 18797                           ;FliM.c: 865: cbusSendOpcMyNN( 0, 0x6F, cbusMsg);
 18798  0080B2  0E6F               	movlw	111
 18799  0080B4  6F91               	movwf	cbusSendOpcMyNN@opc& (0+255),b
 18800  0080B6  0E1C               	movlw	low _cbusMsg
 18801  0080B8  6F92               	movwf	cbusSendOpcMyNN@msg& (0+255),b
 18802  0080BA  0E00               	movlw	0
 18803  0080BC  EC6B  F052         	call	_cbusSendOpcMyNN
 18804  0080C0  0012               	return	
 18805  0080C2                     l19765:
 18806                           
 18807                           ; BSR set to: 0
 18808                           ;FliM.c: 867: };FliM.c: 868: cbusMsg[d3] = 7;
 18809  0080C2  0E07               	movlw	7
 18810  0080C4  6E25               	movwf	(_cbusMsg+9)^0,c
 18811                           
 18812                           ; BSR set to: 0
 18813                           ;FliM.c: 869: cbusSendOpcMyNN( 0, 0x6F, cbusMsg);
 18814  0080C6  0E6F               	movlw	111
 18815  0080C8  6F91               	movwf	cbusSendOpcMyNN@opc& (0+255),b
 18816  0080CA  0E1C               	movlw	low _cbusMsg
 18817  0080CC  6F92               	movwf	cbusSendOpcMyNN@msg& (0+255),b
 18818  0080CE  0E00               	movlw	0
 18819  0080D0  EC6B  F052         	call	_cbusSendOpcMyNN
 18820                           
 18821                           ; BSR set to: 0
 18822  0080D4  0012               	return		;funcret
 18823  0080D6                     __end_of_doReval:
 18824                           	callstack 0
 18825                           
 18826 ;; *************** function _doReqev *****************
 18827 ;; Defined at:
 18828 ;;		line 889 in file "../../github/CBUSlib/FliM.c"
 18829 ;; Parameters:    Size  Location     Type
 18830 ;;  nodeNumber      2   59[BANK0 ] unsigned int 
 18831 ;;  eventNumber     2   61[BANK0 ] unsigned int 
 18832 ;;  evNum           1   63[BANK0 ] unsigned char 
 18833 ;; Auto vars:     Size  Location     Type
 18834 ;;  evVal           2   66[BANK0 ] int 
 18835 ;;  tableIndex      1   65[BANK0 ] unsigned char 
 18836 ;; Return value:  Size  Location     Type
 18837 ;;                  1    wreg      void 
 18838 ;; Registers used:
 18839 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18840 ;; Tracked objects:
 18841 ;;		On entry : 3F/0
 18842 ;;		On exit  : 3F/0
 18843 ;;		Unchanged: 0/0
 18844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 18845 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18846 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18847 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18848 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 18849 ;;Total ram usage:        9 bytes
 18850 ;; Hardware stack levels used: 1
 18851 ;; Hardware stack levels required when called: 15
 18852 ;; This function calls:
 18853 ;;		_cbusSendOpcMyNN
 18854 ;;		_findEvent
 18855 ;;		_getEv
 18856 ;;		_numEv
 18857 ;; This function is called by:
 18858 ;;		_parseFLiMCmd
 18859 ;; This function uses a non-reentrant model
 18860 ;;
 18861                           
 18862                           	psect	text76
 18863  0080D6                     __ptext76:
 18864                           	callstack 0
 18865  0080D6                     _doReqev:
 18866                           	callstack 12
 18867                           
 18868                           ; BSR set to: 0
 18869                           ;FliM.c: 891: int evVal;;FliM.c: 893: unsigned char tableIndex = findEvent(nodeNumber, e
      +                          ventNumber);
 18870                           
 18871                           ; BSR set to: 0
 18872                           ;incstack = 0
 18873  0080D6  C09B  F08E         	movff	doReqev@nodeNumber,findEvent@nodeNumber
 18874  0080DA  C09C  F08F         	movff	doReqev@nodeNumber+1,findEvent@nodeNumber+1
 18875  0080DE  C09D  F090         	movff	doReqev@eventNumber,findEvent@eventNumber
 18876  0080E2  C09E  F091         	movff	doReqev@eventNumber+1,findEvent@eventNumber+1
 18877  0080E6  ECD6  F044         	call	_findEvent	;wreg free
 18878  0080EA  6FA1               	movwf	doReqev@tableIndex& (0+255),b
 18879                           
 18880                           ; BSR set to: 0
 18881                           ;FliM.c: 894: if (tableIndex == 0xff)
 18882  0080EC  29A1               	incf	doReqev@tableIndex& (0+255),w,b
 18883  0080EE  A4D8               	btfss	status,2,c
 18884  0080F0  D00A               	goto	l19635
 18885                           
 18886                           ; BSR set to: 0
 18887                           ;FliM.c: 895: {;FliM.c: 896: cbusMsg[d3] = 7;
 18888  0080F2  0E07               	movlw	7
 18889  0080F4  6E25               	movwf	(_cbusMsg+9)^0,c
 18890                           
 18891                           ; BSR set to: 0
 18892                           ;FliM.c: 897: cbusSendOpcMyNN( 0, 0x6F, cbusMsg);
 18893  0080F6  0E6F               	movlw	111
 18894  0080F8  6F91               	movwf	cbusSendOpcMyNN@opc& (0+255),b
 18895  0080FA  0E1C               	movlw	low _cbusMsg
 18896  0080FC  6F92               	movwf	cbusSendOpcMyNN@msg& (0+255),b
 18897  0080FE  0E00               	movlw	0
 18898  008100  EC6B  F052         	call	_cbusSendOpcMyNN
 18899  008104  0012               	return	
 18900  008106                     l19635:
 18901                           
 18902                           ; BSR set to: 0
 18903                           ;FliM.c: 899: };FliM.c: 900: if (evNum > 20U)
 18904  008106  0E14               	movlw	20
 18905  008108  659F               	cpfsgt	doReqev@evNum& (0+255),b
 18906  00810A  D00A               	goto	l2298
 18907                           
 18908                           ; BSR set to: 0
 18909                           ;FliM.c: 901: {;FliM.c: 902: cbusMsg[d3] = 6;
 18910  00810C  0E06               	movlw	6
 18911  00810E  6E25               	movwf	(_cbusMsg+9)^0,c
 18912                           
 18913                           ; BSR set to: 0
 18914                           ;FliM.c: 903: cbusSendOpcMyNN( 0, 0x6F, cbusMsg);
 18915  008110  0E6F               	movlw	111
 18916  008112  6F91               	movwf	cbusSendOpcMyNN@opc& (0+255),b
 18917  008114  0E1C               	movlw	low _cbusMsg
 18918  008116  6F92               	movwf	cbusSendOpcMyNN@msg& (0+255),b
 18919  008118  0E00               	movlw	0
 18920  00811A  EC6B  F052         	call	_cbusSendOpcMyNN
 18921  00811E  0012               	return	
 18922  008120                     l2298:
 18923                           
 18924                           ; BSR set to: 0
 18925                           ;FliM.c: 905: };FliM.c: 907: cbusMsg[d3] = eventNumber >> 8;
 18926  008120  C09E  F025         	movff	doReqev@eventNumber+1,_cbusMsg+9
 18927                           
 18928                           ;FliM.c: 908: cbusMsg[d4] = eventNumber & 0x00FF;
 18929  008124  C09D  F026         	movff	doReqev@eventNumber,_cbusMsg+10
 18930                           
 18931                           ;FliM.c: 909: cbusMsg[d5] = evNum;
 18932  008128  C09F  F027         	movff	doReqev@evNum,_cbusMsg+11
 18933                           
 18934                           ; BSR set to: 0
 18935                           ;FliM.c: 910: if (evNum == 0)
 18936  00812C  519F               	movf	doReqev@evNum& (0+255),w,b
 18937  00812E  A4D8               	btfss	status,2,c
 18938  008130  D008               	goto	l19647
 18939                           
 18940                           ; BSR set to: 0
 18941                           ;FliM.c: 911: {;FliM.c: 912: evVal = numEv(tableIndex);
 18942  008132  51A1               	movf	doReqev@tableIndex& (0+255),w,b
 18943  008134  EC8C  F044         	call	_numEv
 18944  008138  6FA0               	movwf	??_doReqev& (0+255),b
 18945  00813A  51A0               	movf	??_doReqev& (0+255),w,b
 18946  00813C  6FA2               	movwf	doReqev@evVal& (0+255),b
 18947  00813E  6BA3               	clrf	(doReqev@evVal+1)& (0+255),b
 18948                           
 18949                           ;FliM.c: 913: } else {
 18950  008140  D00A               	goto	l19651
 18951  008142                     l19647:
 18952                           
 18953                           ; BSR set to: 0
 18954                           ;FliM.c: 914: evNum--;
 18955  008142  079F               	decf	doReqev@evNum& (0+255),f,b
 18956                           
 18957                           ; BSR set to: 0
 18958                           ;FliM.c: 915: evVal = getEv(tableIndex, evNum);
 18959  008144  C09F  F081         	movff	doReqev@evNum,getEv@evNum
 18960  008148  51A1               	movf	doReqev@tableIndex& (0+255),w,b
 18961  00814A  EC22  F038         	call	_getEv
 18962  00814E  C081  F0A2         	movff	?_getEv,doReqev@evVal
 18963  008152  C082  F0A3         	movff	?_getEv+1,doReqev@evVal+1
 18964  008156                     l19651:
 18965                           
 18966                           ; BSR set to: 0
 18967                           ;FliM.c: 916: };FliM.c: 917: if (evVal >= 0) {
 18968  008156  BFA3               	btfsc	(doReqev@evVal+1)& (0+255),7,b
 18969  008158  D00A               	goto	l19659
 18970                           
 18971                           ; BSR set to: 0
 18972                           ;FliM.c: 918: cbusMsg[d6] = (unsigned char)evVal;
 18973  00815A  C0A2  F028         	movff	doReqev@evVal,_cbusMsg+12
 18974                           
 18975                           ; BSR set to: 0
 18976                           ;FliM.c: 919: cbusSendOpcMyNN( 0, 0xd3, cbusMsg);
 18977  00815E  0ED3               	movlw	211
 18978  008160  6F91               	movwf	cbusSendOpcMyNN@opc& (0+255),b
 18979  008162  0E1C               	movlw	low _cbusMsg
 18980  008164  6F92               	movwf	cbusSendOpcMyNN@msg& (0+255),b
 18981  008166  0E00               	movlw	0
 18982  008168  EC6B  F052         	call	_cbusSendOpcMyNN
 18983  00816C  0012               	return	
 18984  00816E                     l19659:
 18985                           
 18986                           ; BSR set to: 0
 18987                           ;FliM.c: 921: };FliM.c: 922: cbusMsg[d3] = (unsigned char)(-evVal);
 18988  00816E  51A2               	movf	doReqev@evVal& (0+255),w,b
 18989  008170  0800               	sublw	0
 18990  008172  6E25               	movwf	(_cbusMsg+9)^0,c
 18991                           
 18992                           ; BSR set to: 0
 18993                           ;FliM.c: 923: cbusSendOpcMyNN( 0, 0x6F, cbusMsg);
 18994  008174  0E6F               	movlw	111
 18995  008176  6F91               	movwf	cbusSendOpcMyNN@opc& (0+255),b
 18996  008178  0E1C               	movlw	low _cbusMsg
 18997  00817A  6F92               	movwf	cbusSendOpcMyNN@msg& (0+255),b
 18998  00817C  0E00               	movlw	0
 18999  00817E  EC6B  F052         	call	_cbusSendOpcMyNN
 19000                           
 19001                           ; BSR set to: 0
 19002  008182  0012               	return		;funcret
 19003  008184                     __end_of_doReqev:
 19004                           	callstack 0
 19005                           
 19006 ;; *************** function _numEv *****************
 19007 ;; Defined at:
 19008 ;;		line 700 in file "../../github/CBUSlib/events.c"
 19009 ;; Parameters:    Size  Location     Type
 19010 ;;  tableIndex      1    wreg     unsigned char 
 19011 ;; Auto vars:     Size  Location     Type
 19012 ;;  tableIndex      1   37[BANK0 ] unsigned char 
 19013 ;;  f               1   36[BANK0 ] struct .
 19014 ;;  num             1   35[BANK0 ] unsigned char 
 19015 ;; Return value:  Size  Location     Type
 19016 ;;                  1    wreg      unsigned char 
 19017 ;; Registers used:
 19018 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19019 ;; Tracked objects:
 19020 ;;		On entry : 3F/0
 19021 ;;		On exit  : 3F/0
 19022 ;;		Unchanged: 0/0
 19023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 19024 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19025 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19026 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19027 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19028 ;;Total ram usage:        5 bytes
 19029 ;; Hardware stack levels used: 1
 19030 ;; Hardware stack levels required when called: 14
 19031 ;; This function calls:
 19032 ;;		_readFlashBlock
 19033 ;;		_validStart
 19034 ;; This function is called by:
 19035 ;;		_doReval
 19036 ;;		_doReqev
 19037 ;; This function uses a non-reentrant model
 19038 ;;
 19039                           
 19040                           	psect	text77
 19041  008918                     __ptext77:
 19042                           	callstack 0
 19043  008918                     _numEv:
 19044                           	callstack 12
 19045                           
 19046                           ; BSR set to: 0
 19047                           ;incstack = 0
 19048                           ;numEv@tableIndex stored from wreg
 19049  008918  6F85               	movwf	numEv@tableIndex& (0+255),b
 19050                           
 19051                           ;events.c: 701: EventTableFlags f;;events.c: 702: BYTE num=0;
 19052  00891A  0E00               	movlw	0
 19053  00891C  0100               	movlb	0	; () banked
 19054  00891E  6F83               	movwf	numEv@num& (0+255),b
 19055                           
 19056                           ; BSR set to: 0
 19057                           ;events.c: 703: if ( ! validStart(tableIndex)) {
 19058  008920  5185               	movf	numEv@tableIndex& (0+255),w,b
 19059  008922  ECFE  F050         	call	_validStart
 19060  008926  0900               	iorlw	0
 19061  008928  A4D8               	btfss	status,2,c
 19062  00892A  D002               	goto	l19201
 19063  00892C                     u23680:
 19064                           
 19065                           ; BSR set to: 0
 19066                           ;events.c: 705: return 0;
 19067  00892C  0E00               	movlw	0
 19068  00892E  0012               	return	
 19069  008930                     l19201:
 19070                           
 19071                           ; BSR set to: 0
 19072                           ;events.c: 706: };events.c: 707: f.asByte = readFlashBlock((WORD)(&(eventTable[tableInde
      +                          x].flags.asByte)));
 19073  008930  5185               	movf	numEv@tableIndex& (0+255),w,b
 19074  008932  0D10               	mullw	16
 19075  008934  CFF3 F081          	movff	prodl,??_numEv
 19076  008938  CFF4 F082          	movff	prodh,??_numEv+1
 19077  00893C  51E9               	movf	_eventTable& (0+255),w,b
 19078  00893E  2581               	addwf	??_numEv& (0+255),w,b
 19079  008940  6F76               	movwf	readFlashBlock@flashAddr& (0+255),b
 19080  008942  51EA               	movf	(_eventTable+1)& (0+255),w,b
 19081  008944  2182               	addwfc	(??_numEv+1)& (0+255),w,b
 19082  008946  6F77               	movwf	(readFlashBlock@flashAddr+1)& (0+255),b
 19083  008948  EC8D  F03D         	call	_readFlashBlock	;wreg free
 19084  00894C  6F84               	movwf	numEv@f& (0+255),b
 19085                           
 19086                           ;events.c: 708: while (f.continued) {
 19087  00894E  D027               	goto	l19215
 19088  008950                     l19203:
 19089                           
 19090                           ; BSR set to: 0
 19091                           ;events.c: 709: tableIndex = readFlashBlock((WORD)(&(eventTable[tableIndex].next)));
 19092  008950  5185               	movf	numEv@tableIndex& (0+255),w,b
 19093  008952  0D10               	mullw	16
 19094  008954  CFF3 F081          	movff	prodl,??_numEv
 19095  008958  CFF4 F082          	movff	prodh,??_numEv+1
 19096  00895C  51E9               	movf	_eventTable& (0+255),w,b
 19097  00895E  2781               	addwf	??_numEv& (0+255),f,b
 19098  008960  51EA               	movf	(_eventTable+1)& (0+255),w,b
 19099  008962  2382               	addwfc	(??_numEv+1)& (0+255),f,b
 19100  008964  0E01               	movlw	1
 19101  008966  2581               	addwf	??_numEv& (0+255),w,b
 19102  008968  6F76               	movwf	readFlashBlock@flashAddr& (0+255),b
 19103  00896A  0E00               	movlw	0
 19104  00896C  2182               	addwfc	(??_numEv+1)& (0+255),w,b
 19105  00896E  6F77               	movwf	(readFlashBlock@flashAddr+1)& (0+255),b
 19106  008970  EC8D  F03D         	call	_readFlashBlock	;wreg free
 19107  008974  6F85               	movwf	numEv@tableIndex& (0+255),b
 19108                           
 19109                           ; BSR set to: 0
 19110                           ;events.c: 710: if (tableIndex == 0xff) {
 19111  008976  2985               	incf	numEv@tableIndex& (0+255),w,b
 19112  008978  B4D8               	btfsc	status,2,c
 19113  00897A  D7D8               	goto	u23680
 19114                           
 19115                           ; BSR set to: 0
 19116                           ;events.c: 712: };events.c: 713: f.asByte = readFlashBlock((WORD)(&(eventTable[tableInde
      +                          x].flags.asByte)));
 19117  00897C  5185               	movf	numEv@tableIndex& (0+255),w,b
 19118  00897E  0D10               	mullw	16
 19119  008980  CFF3 F081          	movff	prodl,??_numEv
 19120  008984  CFF4 F082          	movff	prodh,??_numEv+1
 19121  008988  51E9               	movf	_eventTable& (0+255),w,b
 19122  00898A  2581               	addwf	??_numEv& (0+255),w,b
 19123  00898C  6F76               	movwf	readFlashBlock@flashAddr& (0+255),b
 19124  00898E  51EA               	movf	(_eventTable+1)& (0+255),w,b
 19125  008990  2182               	addwfc	(??_numEv+1)& (0+255),w,b
 19126  008992  6F77               	movwf	(readFlashBlock@flashAddr+1)& (0+255),b
 19127  008994  EC8D  F03D         	call	_readFlashBlock	;wreg free
 19128  008998  6F84               	movwf	numEv@f& (0+255),b
 19129                           
 19130                           ; BSR set to: 0
 19131                           ;events.c: 714: num += 10U;
 19132  00899A  0E0A               	movlw	10
 19133  00899C  2783               	addwf	numEv@num& (0+255),f,b
 19134  00899E                     l19215:
 19135                           
 19136                           ; BSR set to: 0
 19137  00899E  B984               	btfsc	numEv@f& (0+255),4,b
 19138  0089A0  D7D7               	goto	l19203
 19139                           
 19140                           ; BSR set to: 0
 19141                           ;events.c: 715: };events.c: 716: num += f.eVsUsed;
 19142  0089A2  5184               	movf	numEv@f& (0+255),w,b
 19143  0089A4  0B0F               	andlw	15
 19144  0089A6  2783               	addwf	numEv@num& (0+255),f,b
 19145                           
 19146                           ; BSR set to: 0
 19147                           ;events.c: 717: return num;
 19148  0089A8  5183               	movf	numEv@num& (0+255),w,b
 19149                           
 19150                           ; BSR set to: 0
 19151  0089AA  0012               	return		;funcret
 19152  0089AC                     __end_of_numEv:
 19153                           	callstack 0
 19154                           
 19155 ;; *************** function _doNvset *****************
 19156 ;; Defined at:
 19157 ;;		line 617 in file "../../github/CBUSlib/FliM.c"
 19158 ;; Parameters:    Size  Location     Type
 19159 ;;  NVindex         1    wreg     unsigned char 
 19160 ;;  NVvalue         1  122[BANK0 ] unsigned char 
 19161 ;; Auto vars:     Size  Location     Type
 19162 ;;  NVindex         1  128[BANK0 ] unsigned char 
 19163 ;;  flashIndex      2  125[BANK0 ] unsigned int 
 19164 ;;  oldValue        1  127[BANK0 ] unsigned char 
 19165 ;; Return value:  Size  Location     Type
 19166 ;;                  1    wreg      void 
 19167 ;; Registers used:
 19168 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19169 ;; Tracked objects:
 19170 ;;		On entry : 3F/0
 19171 ;;		On exit  : 3F/0
 19172 ;;		Unchanged: 0/0
 19173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 19174 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19175 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19176 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19177 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19178 ;;Total ram usage:        7 bytes
 19179 ;; Hardware stack levels used: 1
 19180 ;; Hardware stack levels required when called: 24
 19181 ;; This function calls:
 19182 ;;		_actUponNVchange
 19183 ;;		_cbusSendOpcMyNN
 19184 ;;		_doError
 19185 ;;		_loadNvCache
 19186 ;;		_validateNV
 19187 ;;		_writeFlashByte
 19188 ;; This function is called by:
 19189 ;;		_parseFLiMCmd
 19190 ;; This function uses a non-reentrant model
 19191 ;;
 19192                           
 19193                           	psect	text78
 19194  00842A                     __ptext78:
 19195                           	callstack 0
 19196  00842A                     _doNvset:
 19197                           	callstack 3
 19198                           
 19199                           ; BSR set to: 0
 19200                           ;incstack = 0
 19201                           ;doNvset@NVindex stored from wreg
 19202  00842A  6FE0               	movwf	doNvset@NVindex& (0+255),b
 19203                           
 19204                           ;FliM.c: 620: if ((NVindex == 0) || (NVindex >= sizeof(ModuleNvDefs)))
 19205  00842C  0100               	movlb	0	; () banked
 19206  00842E  51E0               	movf	doNvset@NVindex& (0+255),w,b
 19207  008430  B4D8               	btfsc	status,2,c
 19208  008432  D003               	goto	u24470
 19209                           
 19210                           ; BSR set to: 0
 19211  008434  0E7F               	movlw	127
 19212  008436  65E0               	cpfsgt	doNvset@NVindex& (0+255),b
 19213  008438  D004               	goto	l19715
 19214  00843A                     u24470:
 19215                           
 19216                           ; BSR set to: 0
 19217                           ;FliM.c: 621: {;FliM.c: 622: doError(10);
 19218  00843A  0E0A               	movlw	10
 19219  00843C  EC5C  F052         	call	_doError
 19220                           
 19221                           ;FliM.c: 623: }
 19222  008440  0012               	return	
 19223  008442                     l19715:
 19224                           
 19225                           ; BSR set to: 0
 19226                           ;FliM.c: 624: else;FliM.c: 625: {;FliM.c: 626: WORD flashIndex;;FliM.c: 627: BYTE oldVal
      +                          ue;;FliM.c: 631: flashIndex = 0xFF80U;
 19227  008442  0EFF               	movlw	255
 19228  008444  6FDE               	movwf	(doNvset@flashIndex+1)& (0+255),b
 19229  008446  0E80               	movlw	128
 19230  008448  6FDD               	movwf	doNvset@flashIndex& (0+255),b
 19231                           
 19232                           ; BSR set to: 0
 19233                           ;FliM.c: 632: flashIndex += NVindex;
 19234  00844A  51E0               	movf	doNvset@NVindex& (0+255),w,b
 19235  00844C  27DD               	addwf	doNvset@flashIndex& (0+255),f,b
 19236  00844E  0E00               	movlw	0
 19237  008450  23DE               	addwfc	(doNvset@flashIndex+1)& (0+255),f,b
 19238                           
 19239                           ; BSR set to: 0
 19240                           ;FliM.c: 634: oldValue = NvBytePtr[NVindex];
 19241  008452  51E0               	movf	doNvset@NVindex& (0+255),w,b
 19242  008454  0D01               	mullw	1
 19243  008456  CFF3 F0DB          	movff	prodl,??_doNvset
 19244  00845A  CFF4 F0DC          	movff	prodh,??_doNvset+1
 19245  00845E  0E80               	movlw	128
 19246  008460  25DB               	addwf	??_doNvset& (0+255),w,b
 19247  008462  6EF6               	movwf	tblptrl,c
 19248  008464  0EFF               	movlw	255
 19249  008466  21DC               	addwfc	(??_doNvset+1)& (0+255),w,b
 19250  008468  6EF7               	movwf	tblptrh,c
 19251  00846A  6AF8               	clrf	tblptru,c
 19252  00846C  0E00               	movlw	0
 19253  00846E  22F8               	addwfc	tblptru,f,c
 19254  008470  0008               	tblrd		*
 19255  008472  CFF5 F0DF          	movff	tablat,doNvset@oldValue
 19256                           
 19257                           ; BSR set to: 0
 19258                           ;FliM.c: 635: if (validateNV(NVindex, oldValue, NVvalue))
 19259  008476  C0DF  F078         	movff	doNvset@oldValue,validateNV@oldValue
 19260  00847A  C0DA  F079         	movff	doNvset@NVvalue,validateNV@value
 19261  00847E  51E0               	movf	doNvset@NVindex& (0+255),w,b
 19262  008480  EC67  F042         	call	_validateNV
 19263  008484  0900               	iorlw	0
 19264  008486  B4D8               	btfsc	status,2,c
 19265  008488  D01E               	goto	l19729
 19266                           
 19267                           ; BSR set to: 0
 19268                           ;FliM.c: 636: {;FliM.c: 637: writeFlashByte((BYTE *)flashIndex, NVvalue);
 19269  00848A  C0DD  F087         	movff	doNvset@flashIndex,writeFlashByte@flashAddr
 19270  00848E  C0DE  F088         	movff	doNvset@flashIndex+1,writeFlashByte@flashAddr+1
 19271  008492  5187               	movf	writeFlashByte@flashAddr& (0+255),w,b
 19272  008494  1188               	iorwf	(writeFlashByte@flashAddr+1)& (0+255),w,b
 19273  008496  A4D8               	btfss	status,2,c
 19274  008498  0E20               	movlw	32
 19275  00849A  6F89               	movwf	(writeFlashByte@flashAddr+2)& (0+255),b
 19276  00849C  C0DA  F08A         	movff	doNvset@NVvalue,writeFlashByte@flashData
 19277  0084A0  ECC0  F052         	call	_writeFlashByte	;wreg free
 19278                           
 19279                           ;FliM.c: 639: loadNvCache();
 19280  0084A4  EC12  F04F         	call	_loadNvCache	;wreg free
 19281                           
 19282                           ; BSR set to: 0
 19283                           ;FliM.c: 641: actUponNVchange(NVindex, oldValue, NVvalue);
 19284  0084A8  C0DF  F0D2         	movff	doNvset@oldValue,actUponNVchange@oldValue
 19285  0084AC  C0DA  F0D3         	movff	doNvset@NVvalue,actUponNVchange@value
 19286  0084B0  51E0               	movf	doNvset@NVindex& (0+255),w,b
 19287  0084B2  EC56  F028         	call	_actUponNVchange
 19288                           
 19289                           ; BSR set to: 0
 19290                           ;FliM.c: 642: cbusSendOpcMyNN( 0, 0x59, cbusMsg);
 19291  0084B6  0E59               	movlw	89
 19292  0084B8  6F91               	movwf	cbusSendOpcMyNN@opc& (0+255),b
 19293  0084BA  0E1C               	movlw	low _cbusMsg
 19294  0084BC  6F92               	movwf	cbusSendOpcMyNN@msg& (0+255),b
 19295  0084BE  0E00               	movlw	0
 19296  0084C0  EC6B  F052         	call	_cbusSendOpcMyNN
 19297                           
 19298                           ;FliM.c: 643: }
 19299  0084C4  0012               	return	
 19300  0084C6                     l19729:
 19301                           
 19302                           ; BSR set to: 0
 19303                           ;FliM.c: 644: else;FliM.c: 645: {;FliM.c: 646: doError(12);
 19304  0084C6  0E0C               	movlw	12
 19305  0084C8  EC5C  F052         	call	_doError
 19306                           
 19307                           ; BSR set to: 0
 19308  0084CC  0012               	return		;funcret
 19309  0084CE                     __end_of_doNvset:
 19310                           	callstack 0
 19311                           
 19312 ;; *************** function _validateNV *****************
 19313 ;; Defined at:
 19314 ;;		line 84 in file "../../github/CANMIOfirmware/mioNv.c"
 19315 ;; Parameters:    Size  Location     Type
 19316 ;;  index           1    wreg     unsigned char 
 19317 ;;  oldValue        1   24[BANK0 ] unsigned char 
 19318 ;;  value           1   25[BANK0 ] unsigned char 
 19319 ;; Auto vars:     Size  Location     Type
 19320 ;;  index           1   29[BANK0 ] unsigned char 
 19321 ;;  io              1   28[BANK0 ] unsigned char 
 19322 ;; Return value:  Size  Location     Type
 19323 ;;                  1    wreg      unsigned char 
 19324 ;; Registers used:
 19325 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19326 ;; Tracked objects:
 19327 ;;		On entry : 3F/0
 19328 ;;		On exit  : 3F/0
 19329 ;;		Unchanged: 0/0
 19330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 19331 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19332 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19333 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19334 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19335 ;;Total ram usage:        6 bytes
 19336 ;; Hardware stack levels used: 1
 19337 ;; Hardware stack levels required when called: 9
 19338 ;; This function calls:
 19339 ;;		___lwdiv
 19340 ;;		___lwmod
 19341 ;; This function is called by:
 19342 ;;		_doNvset
 19343 ;; This function uses a non-reentrant model
 19344 ;;
 19345                           
 19346                           	psect	text79
 19347  0084CE                     __ptext79:
 19348                           	callstack 0
 19349  0084CE                     _validateNV:
 19350                           	callstack 17
 19351                           
 19352                           ; BSR set to: 0
 19353                           ;incstack = 0
 19354                           ;validateNV@index stored from wreg
 19355  0084CE  6F7D               	movwf	validateNV@index& (0+255),b
 19356                           
 19357                           ;mioNv.c: 86: unsigned char io;;mioNv.c: 87: if ((index >= 16U) && (((index-16U) % 7U) =
      +                          = 0)) {
 19358  0084D0  0E0F               	movlw	15
 19359  0084D2  0100               	movlb	0	; () banked
 19360  0084D4  657D               	cpfsgt	validateNV@index& (0+255),b
 19361  0084D6  D04B               	goto	l947
 19362                           
 19363                           ; BSR set to: 0
 19364  0084D8  0EF0               	movlw	240
 19365  0084DA  257D               	addwf	validateNV@index& (0+255),w,b
 19366  0084DC  6F71               	movwf	___lwmod@dividend& (0+255),b
 19367  0084DE  6B72               	clrf	(___lwmod@dividend+1)& (0+255),b
 19368  0084E0  0EFF               	movlw	255
 19369  0084E2  2372               	addwfc	(___lwmod@dividend+1)& (0+255),f,b
 19370  0084E4  0E00               	movlw	0
 19371  0084E6  6F74               	movwf	(___lwmod@divisor+1)& (0+255),b
 19372  0084E8  0E07               	movlw	7
 19373  0084EA  6F73               	movwf	___lwmod@divisor& (0+255),b
 19374  0084EC  ECD0  F04E         	call	___lwmod	;wreg free
 19375  0084F0  5171               	movf	?___lwmod& (0+255),w,b
 19376  0084F2  1172               	iorwf	(?___lwmod+1)& (0+255),w,b
 19377  0084F4  B4D8               	btfsc	status,2,c
 19378  0084F6  D024               	goto	l18915
 19379  0084F8  D03A               	goto	l947
 19380  0084FA                     l18901:
 19381                           
 19382                           ; BSR set to: 0
 19383                           ;mioNv.c: 91: case 6U:;mioNv.c: 92: io = ((unsigned char)((index-16U)/7U));
 19384  0084FA  0EF0               	movlw	240
 19385  0084FC  257D               	addwf	validateNV@index& (0+255),w,b
 19386  0084FE  6F71               	movwf	___lwdiv@dividend& (0+255),b
 19387  008500  6B72               	clrf	(___lwdiv@dividend+1)& (0+255),b
 19388  008502  0EFF               	movlw	255
 19389  008504  2372               	addwfc	(___lwdiv@dividend+1)& (0+255),f,b
 19390  008506  0E00               	movlw	0
 19391  008508  6F74               	movwf	(___lwdiv@divisor+1)& (0+255),b
 19392  00850A  0E07               	movlw	7
 19393  00850C  6F73               	movwf	___lwdiv@divisor& (0+255),b
 19394  00850E  ECCD  F04C         	call	___lwdiv	;wreg free
 19395  008512  5171               	movf	?___lwdiv& (0+255),w,b
 19396  008514  6F7C               	movwf	validateNV@io& (0+255),b
 19397                           
 19398                           ; BSR set to: 0
 19399                           ;mioNv.c: 93: if (configs[io].an == 0xFF) return 0;
 19400  008516  517C               	movf	validateNV@io& (0+255),w,b
 19401  008518  0D04               	mullw	4
 19402  00851A  CFF3 F07A          	movff	prodl,??_validateNV
 19403  00851E  0E03               	movlw	3
 19404  008520  277A               	addwf	??_validateNV& (0+255),f,b
 19405  008522  517A               	movf	??_validateNV& (0+255),w,b
 19406  008524  0F01               	addlw	low _configs
 19407  008526  6F7B               	movwf	(??_validateNV+1)& (0+255),b
 19408  008528  C07B  FFF6         	movff	??_validateNV+1,tblptrl
 19409  00852C                     	if	1	;There is more than 1 active tblptr byte
 19410  00852C  0E0F               	movlw	high __smallconst
 19411  00852E  6EF7               	movwf	tblptrh,c
 19412  008530                     	endif
 19413  008530                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 19414  008530  6AF8               	clrf	tblptru,c
 19415  008532                     	endif
 19416  008532                     	if	0	;tblptru may be non-zero
 19417  008532                     	endif
 19418  008532  0008               	tblrd		*
 19419  008534  50F5               	movf	tablat,w,c
 19420  008536  0AFF               	xorlw	255
 19421  008538  A4D8               	btfss	status,2,c
 19422  00853A  D019               	goto	l947
 19423  00853C                     u23440:
 19424                           
 19425                           ; BSR set to: 0
 19426  00853C  0E00               	movlw	0
 19427  00853E  0012               	return	
 19428  008540                     l18915:
 19429                           
 19430                           ; BSR set to: 0
 19431  008540  5179               	movf	validateNV@value& (0+255),w,b
 19432                           
 19433                           ; Switch size 1, requested type "simple"
 19434                           ; Number of cases is 7, Range of values is 0 to 6
 19435                           ; switch strategies available:
 19436                           ; Name         Instructions Cycles
 19437                           ; simple_byte           22    12 (average)
 19438                           ;	Chosen strategy is simple_byte
 19439  008542  0A00               	xorlw	0	; case 0
 19440  008544  B4D8               	btfsc	status,2,c
 19441  008546  D013               	goto	l947
 19442  008548  0A01               	xorlw	1	; case 1
 19443  00854A  B4D8               	btfsc	status,2,c
 19444  00854C  D010               	goto	l947
 19445  00854E  0A03               	xorlw	3	; case 2
 19446  008550  B4D8               	btfsc	status,2,c
 19447  008552  D00D               	goto	l947
 19448  008554  0A01               	xorlw	1	; case 3
 19449  008556  B4D8               	btfsc	status,2,c
 19450  008558  D00A               	goto	l947
 19451  00855A  0A07               	xorlw	7	; case 4
 19452  00855C  B4D8               	btfsc	status,2,c
 19453  00855E  D007               	goto	l947
 19454  008560  0A01               	xorlw	1	; case 5
 19455  008562  B4D8               	btfsc	status,2,c
 19456  008564  D7CA               	goto	l18901
 19457  008566  0A03               	xorlw	3	; case 6
 19458  008568  B4D8               	btfsc	status,2,c
 19459  00856A  D7C7               	goto	l18901
 19460  00856C  D7E7               	goto	u23440
 19461  00856E                     l947:
 19462                           
 19463                           ; BSR set to: 0
 19464                           ;mioNv.c: 114: };mioNv.c: 115: return 1;
 19465                           
 19466                           ; BSR set to: 0
 19467  00856E  0E01               	movlw	1
 19468                           
 19469                           ; BSR set to: 0
 19470  008570  0012               	return		;funcret
 19471  008572                     __end_of_validateNV:
 19472                           	callstack 0
 19473                           
 19474 ;; *************** function _actUponNVchange *****************
 19475 ;; Defined at:
 19476 ;;		line 118 in file "../../github/CANMIOfirmware/mioNv.c"
 19477 ;; Parameters:    Size  Location     Type
 19478 ;;  index           1    wreg     unsigned char 
 19479 ;;  oldValue        1  114[BANK0 ] unsigned char 
 19480 ;;  value           1  115[BANK0 ] unsigned char 
 19481 ;; Auto vars:     Size  Location     Type
 19482 ;;  index           1  120[BANK0 ] unsigned char 
 19483 ;;  io              1  121[BANK0 ] unsigned char 
 19484 ;;  nv              1    0        unsigned char 
 19485 ;; Return value:  Size  Location     Type
 19486 ;;                  1    wreg      void 
 19487 ;; Registers used:
 19488 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19489 ;; Tracked objects:
 19490 ;;		On entry : 3F/0
 19491 ;;		On exit  : 3F/0
 19492 ;;		Unchanged: 0/0
 19493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 19494 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19495 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19496 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19497 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 19498 ;;Total ram usage:        8 bytes
 19499 ;; Hardware stack levels used: 1
 19500 ;; Hardware stack levels required when called: 23
 19501 ;; This function calls:
 19502 ;;		___lbdiv
 19503 ;;		___lwdiv
 19504 ;;		___lwmod
 19505 ;;		_setBounceState
 19506 ;;		_setMultiState
 19507 ;;		_setServoState
 19508 ;;		_setType
 19509 ;;		_startBounceOutput
 19510 ;;		_startMultiOutput
 19511 ;;		_startServoOutput
 19512 ;; This function is called by:
 19513 ;;		_doNvset
 19514 ;; This function uses a non-reentrant model
 19515 ;;
 19516                           
 19517                           	psect	text80
 19518  0050AC                     __ptext80:
 19519                           	callstack 0
 19520  0050AC                     _actUponNVchange:
 19521                           	callstack 3
 19522                           
 19523                           ; BSR set to: 0
 19524                           ;incstack = 0
 19525                           ;actUponNVchange@index stored from wreg
 19526  0050AC  6FD8               	movwf	actUponNVchange@index& (0+255),b
 19527                           
 19528                           ;mioNv.c: 120: unsigned char io;;mioNv.c: 121: unsigned char nv;;mioNv.c: 122: if ((((in
      +                          dex-16U) % 7U) == 0)) {
 19529  0050AE  0EF0               	movlw	240
 19530  0050B0  0100               	movlb	0	; () banked
 19531  0050B2  25D8               	addwf	actUponNVchange@index& (0+255),w,b
 19532  0050B4  6F71               	movwf	___lwmod@dividend& (0+255),b
 19533  0050B6  6B72               	clrf	(___lwmod@dividend+1)& (0+255),b
 19534  0050B8  0EFF               	movlw	255
 19535  0050BA  2372               	addwfc	(___lwmod@dividend+1)& (0+255),f,b
 19536  0050BC  0E00               	movlw	0
 19537  0050BE  6F74               	movwf	(___lwmod@divisor+1)& (0+255),b
 19538  0050C0  0E07               	movlw	7
 19539  0050C2  6F73               	movwf	___lwmod@divisor& (0+255),b
 19540  0050C4  ECD0  F04E         	call	___lwmod	;wreg free
 19541  0050C8  5171               	movf	?___lwmod& (0+255),w,b
 19542  0050CA  1172               	iorwf	(?___lwmod+1)& (0+255),w,b
 19543  0050CC  A4D8               	btfss	status,2,c
 19544  0050CE  D012               	goto	l18931
 19545                           
 19546                           ; BSR set to: 0
 19547                           ;mioNv.c: 123: io = index-16U;
 19548  0050D0  51D8               	movf	actUponNVchange@index& (0+255),w,b
 19549  0050D2  0FF0               	addlw	240
 19550  0050D4  6FD9               	movwf	actUponNVchange@io& (0+255),b
 19551                           
 19552                           ; BSR set to: 0
 19553                           ;mioNv.c: 124: io /= 7U;
 19554  0050D6  0E07               	movlw	7
 19555  0050D8  6F71               	movwf	___lbdiv@divisor& (0+255),b
 19556  0050DA  51D9               	movf	actUponNVchange@io& (0+255),w,b
 19557  0050DC  EC71  F04F         	call	___lbdiv
 19558  0050E0  6FD9               	movwf	actUponNVchange@io& (0+255),b
 19559                           
 19560                           ; BSR set to: 0
 19561                           ;mioNv.c: 125: if (oldValue != value) {
 19562  0050E2  51D3               	movf	actUponNVchange@value& (0+255),w,b
 19563  0050E4  19D2               	xorwf	actUponNVchange@oldValue& (0+255),w,b
 19564  0050E6  B4D8               	btfsc	status,2,c
 19565  0050E8  D005               	goto	l18931
 19566                           
 19567                           ; BSR set to: 0
 19568                           ;mioNv.c: 126: setType(io, value);
 19569  0050EA  C0D3  F0CC         	movff	actUponNVchange@value,setType@type
 19570  0050EE  51D9               	movf	actUponNVchange@io& (0+255),w,b
 19571  0050F0  EC08  F03F         	call	_setType
 19572  0050F4                     l18931:
 19573                           
 19574                           ;mioNv.c: 127: };mioNv.c: 128: };mioNv.c: 129: if (index == 4U) {
 19575  0050F4  0E04               	movlw	4
 19576  0050F6  0100               	movlb	0	; () banked
 19577  0050F8  19D8               	xorwf	actUponNVchange@index& (0+255),w,b
 19578  0050FA  B4D8               	btfsc	status,2,c
 19579                           
 19580                           ; BSR set to: 0
 19581                           ;mioNv.c: 130: WPUB = value;
 19582  0050FC  C0D3  FF5B         	movff	actUponNVchange@value,3931	;volatile
 19583                           
 19584                           ; BSR set to: 0
 19585                           ;mioNv.c: 131: };mioNv.c: 133: if (index >= 16U) {
 19586  005100  0E0F               	movlw	15
 19587  005102  65D8               	cpfsgt	actUponNVchange@index& (0+255),b
 19588  005104  0012               	return	
 19589                           
 19590                           ; BSR set to: 0
 19591                           ;mioNv.c: 134: io = ((unsigned char)((index-16U)/7U));
 19592  005106  0EF0               	movlw	240
 19593  005108  25D8               	addwf	actUponNVchange@index& (0+255),w,b
 19594  00510A  6F71               	movwf	___lwdiv@dividend& (0+255),b
 19595  00510C  6B72               	clrf	(___lwdiv@dividend+1)& (0+255),b
 19596  00510E  0EFF               	movlw	255
 19597  005110  2372               	addwfc	(___lwdiv@dividend+1)& (0+255),f,b
 19598  005112  0E00               	movlw	0
 19599  005114  6F74               	movwf	(___lwdiv@divisor+1)& (0+255),b
 19600  005116  0E07               	movlw	7
 19601  005118  6F73               	movwf	___lwdiv@divisor& (0+255),b
 19602  00511A  ECCD  F04C         	call	___lwdiv	;wreg free
 19603  00511E  5171               	movf	?___lwdiv& (0+255),w,b
 19604  005120  6FD9               	movwf	actUponNVchange@io& (0+255),b
 19605  005122  0EF0               	movlw	240
 19606  005124  25D8               	addwf	actUponNVchange@index& (0+255),w,b
 19607  005126  6F71               	movwf	___lwmod@dividend& (0+255),b
 19608  005128  6B72               	clrf	(___lwmod@dividend+1)& (0+255),b
 19609  00512A  0EFF               	movlw	255
 19610  00512C  2372               	addwfc	(___lwmod@dividend+1)& (0+255),f,b
 19611  00512E  0E00               	movlw	0
 19612  005130  6F74               	movwf	(___lwmod@divisor+1)& (0+255),b
 19613  005132  0E07               	movlw	7
 19614  005134  6F73               	movwf	___lwmod@divisor& (0+255),b
 19615  005136  ECD0  F04E         	call	___lwmod	;wreg free
 19616                           
 19617                           ;mioNv.c: 136: switch(NV->io[io].type) {
 19618  00513A  D0F7               	goto	l18995
 19619  00513C                     l18939:
 19620                           
 19621                           ; BSR set to: 0
 19622                           ;mioNv.c: 140: if (index == (16U + 7U*(io) + 2U)) {
 19623  00513C  51D8               	movf	actUponNVchange@index& (0+255),w,b
 19624  00513E  6FD4               	movwf	??_actUponNVchange& (0+255),b
 19625  005140  6BD5               	clrf	(??_actUponNVchange+1)& (0+255),b
 19626  005142  51D9               	movf	actUponNVchange@io& (0+255),w,b
 19627  005144  0D07               	mullw	7
 19628  005146  0E12               	movlw	18
 19629  005148  26F3               	addwf	243,f,c
 19630  00514A  0E00               	movlw	0
 19631  00514C  22F4               	addwfc	244,f,c
 19632  00514E  51D4               	movf	??_actUponNVchange& (0+255),w,b
 19633  005150  18F3               	xorwf	243,w,c
 19634  005152  E103               	bnz	u23491
 19635  005154  51D5               	movf	(??_actUponNVchange+1)& (0+255),w,b
 19636  005156  18F4               	xorwf	244,w,c
 19637  005158  A4D8               	btfss	status,2,c
 19638  00515A                     u23491:
 19639  00515A  0012               	return	
 19640                           
 19641                           ; BSR set to: 0
 19642                           ;mioNv.c: 142: setupIo = io;
 19643  00515C  C0D9  F01A         	movff	actUponNVchange@io,_setupIo
 19644                           
 19645                           ;mioNv.c: 143: setupState = (value & 0x80)?2U:1U;
 19646  005160  BFD3               	btfsc	actUponNVchange@value& (0+255),7,b
 19647  005162  D004               	goto	l18945
 19648                           
 19649                           ; BSR set to: 0
 19650  005164  0E00               	movlw	0
 19651  005166  6FD7               	movwf	(_actUponNVchange$2139+1)& (0+255),b
 19652  005168  0E01               	movlw	1
 19653  00516A  D003               	goto	L14
 19654  00516C                     l18945:
 19655                           
 19656                           ; BSR set to: 0
 19657  00516C  0E00               	movlw	0
 19658  00516E  6FD7               	movwf	(_actUponNVchange$2139+1)& (0+255),b
 19659  005170  0E02               	movlw	2
 19660  005172                     L14:
 19661  005172  6FD6               	movwf	_actUponNVchange$2139& (0+255),b
 19662                           
 19663                           ; BSR set to: 0
 19664  005174  C0D6  F019         	movff	_actUponNVchange$2139,_setupState
 19665  005178                     l962:
 19666                           
 19667                           ; BSR set to: 0
 19668                           ;mioNv.c: 144: };mioNv.c: 145: break;
 19669  005178  0012               	return	
 19670  00517A                     l18949:
 19671                           
 19672                           ; BSR set to: 0
 19673                           ;mioNv.c: 150: if (index == (16U + 7U*(io) + 2U)) {
 19674  00517A  51D8               	movf	actUponNVchange@index& (0+255),w,b
 19675  00517C  6FD4               	movwf	??_actUponNVchange& (0+255),b
 19676  00517E  6BD5               	clrf	(??_actUponNVchange+1)& (0+255),b
 19677  005180  51D9               	movf	actUponNVchange@io& (0+255),w,b
 19678  005182  0D07               	mullw	7
 19679  005184  0E12               	movlw	18
 19680  005186  26F3               	addwf	243,f,c
 19681  005188  0E00               	movlw	0
 19682  00518A  22F4               	addwfc	244,f,c
 19683  00518C  51D4               	movf	??_actUponNVchange& (0+255),w,b
 19684  00518E  18F3               	xorwf	243,w,c
 19685  005190  E10F               	bnz	l18953
 19686  005192  51D5               	movf	(??_actUponNVchange+1)& (0+255),w,b
 19687  005194  18F4               	xorwf	244,w,c
 19688  005196  A4D8               	btfss	status,2,c
 19689  005198  D00B               	goto	l18953
 19690                           
 19691                           ; BSR set to: 0
 19692                           ;mioNv.c: 151: setServoState(io, 2U);
 19693  00519A  0E02               	movlw	2
 19694  00519C  6F71               	movwf	setServoState@action& (0+255),b
 19695  00519E  51D9               	movf	actUponNVchange@io& (0+255),w,b
 19696  0051A0  ECEC  F035         	call	_setServoState
 19697                           
 19698                           ;mioNv.c: 152: startServoOutput(io, 2U);
 19699  0051A4  0E02               	movlw	2
 19700  0051A6  6F71               	movwf	startServoOutput@action& (0+255),b
 19701  0051A8  51D9               	movf	actUponNVchange@io& (0+255),w,b
 19702  0051AA  EC0A  F03B         	call	_startServoOutput
 19703                           
 19704                           ;mioNv.c: 153: } else if (index == (16U + 7U*(io) + 3U)) {
 19705  0051AE  0012               	return	
 19706  0051B0                     l18953:
 19707                           
 19708                           ; BSR set to: 0
 19709  0051B0  51D8               	movf	actUponNVchange@index& (0+255),w,b
 19710  0051B2  6FD4               	movwf	??_actUponNVchange& (0+255),b
 19711  0051B4  6BD5               	clrf	(??_actUponNVchange+1)& (0+255),b
 19712  0051B6  51D9               	movf	actUponNVchange@io& (0+255),w,b
 19713  0051B8  0D07               	mullw	7
 19714  0051BA  0E13               	movlw	19
 19715  0051BC  26F3               	addwf	243,f,c
 19716  0051BE  0E00               	movlw	0
 19717  0051C0  22F4               	addwfc	244,f,c
 19718  0051C2  51D4               	movf	??_actUponNVchange& (0+255),w,b
 19719  0051C4  18F3               	xorwf	243,w,c
 19720  0051C6  E1D8               	bnz	l962
 19721  0051C8  51D5               	movf	(??_actUponNVchange+1)& (0+255),w,b
 19722  0051CA  18F4               	xorwf	244,w,c
 19723  0051CC  A4D8               	btfss	status,2,c
 19724  0051CE  0012               	return	
 19725                           
 19726                           ; BSR set to: 0
 19727                           ;mioNv.c: 154: setServoState(io, 1U);
 19728  0051D0  0E01               	movlw	1
 19729  0051D2  6F71               	movwf	setServoState@action& (0+255),b
 19730  0051D4  51D9               	movf	actUponNVchange@io& (0+255),w,b
 19731  0051D6  ECEC  F035         	call	_setServoState
 19732                           
 19733                           ;mioNv.c: 155: startServoOutput(io, 1U);
 19734  0051DA  0E01               	movlw	1
 19735  0051DC  6F71               	movwf	startServoOutput@action& (0+255),b
 19736  0051DE  51D9               	movf	actUponNVchange@io& (0+255),w,b
 19737  0051E0  EC0A  F03B         	call	_startServoOutput
 19738  0051E4  0012               	return	
 19739  0051E6                     l18957:
 19740                           
 19741                           ; BSR set to: 0
 19742                           ;mioNv.c: 161: if (index == (16U + 7U*(io) + 3U)) {
 19743  0051E6  51D8               	movf	actUponNVchange@index& (0+255),w,b
 19744  0051E8  6FD4               	movwf	??_actUponNVchange& (0+255),b
 19745  0051EA  6BD5               	clrf	(??_actUponNVchange+1)& (0+255),b
 19746  0051EC  51D9               	movf	actUponNVchange@io& (0+255),w,b
 19747  0051EE  0D07               	mullw	7
 19748  0051F0  0E13               	movlw	19
 19749  0051F2  26F3               	addwf	243,f,c
 19750  0051F4  0E00               	movlw	0
 19751  0051F6  22F4               	addwfc	244,f,c
 19752  0051F8  51D4               	movf	??_actUponNVchange& (0+255),w,b
 19753  0051FA  18F3               	xorwf	243,w,c
 19754  0051FC  E10F               	bnz	l18963
 19755  0051FE  51D5               	movf	(??_actUponNVchange+1)& (0+255),w,b
 19756  005200  18F4               	xorwf	244,w,c
 19757  005202  A4D8               	btfss	status,2,c
 19758  005204  D00B               	goto	l18963
 19759                           
 19760                           ; BSR set to: 0
 19761                           ;mioNv.c: 162: setBounceState(io, 2U);
 19762  005206  0E02               	movlw	2
 19763  005208  6F71               	movwf	setBounceState@action& (0+255),b
 19764  00520A  51D9               	movf	actUponNVchange@io& (0+255),w,b
 19765  00520C  EC7F  F036         	call	_setBounceState
 19766                           
 19767                           ; BSR set to: 0
 19768                           ;mioNv.c: 163: startBounceOutput(io, 2U);
 19769  005210  0E02               	movlw	2
 19770  005212  6F71               	movwf	startBounceOutput@action& (0+255),b
 19771  005214  51D9               	movf	actUponNVchange@io& (0+255),w,b
 19772  005216  ECC9  F049         	call	_startBounceOutput
 19773                           
 19774                           ;mioNv.c: 164: } else if (index == (16U + 7U*(io) + 2U)) {
 19775  00521A  0012               	return	
 19776  00521C                     l18963:
 19777                           
 19778                           ; BSR set to: 0
 19779  00521C  51D8               	movf	actUponNVchange@index& (0+255),w,b
 19780  00521E  6FD4               	movwf	??_actUponNVchange& (0+255),b
 19781  005220  6BD5               	clrf	(??_actUponNVchange+1)& (0+255),b
 19782  005222  51D9               	movf	actUponNVchange@io& (0+255),w,b
 19783  005224  0D07               	mullw	7
 19784  005226  0E12               	movlw	18
 19785  005228  26F3               	addwf	243,f,c
 19786  00522A  0E00               	movlw	0
 19787  00522C  22F4               	addwfc	244,f,c
 19788  00522E  51D4               	movf	??_actUponNVchange& (0+255),w,b
 19789  005230  18F3               	xorwf	243,w,c
 19790  005232  E1A2               	bnz	l962
 19791  005234  51D5               	movf	(??_actUponNVchange+1)& (0+255),w,b
 19792  005236  18F4               	xorwf	244,w,c
 19793  005238  A4D8               	btfss	status,2,c
 19794  00523A  0012               	return	
 19795                           
 19796                           ; BSR set to: 0
 19797                           ;mioNv.c: 165: setBounceState(io, 1U);
 19798  00523C  0E01               	movlw	1
 19799  00523E  6F71               	movwf	setBounceState@action& (0+255),b
 19800  005240  51D9               	movf	actUponNVchange@io& (0+255),w,b
 19801  005242  EC7F  F036         	call	_setBounceState
 19802                           
 19803                           ; BSR set to: 0
 19804                           ;mioNv.c: 166: startBounceOutput(io, 1U);
 19805  005246  0E01               	movlw	1
 19806  005248  6F71               	movwf	startBounceOutput@action& (0+255),b
 19807  00524A  51D9               	movf	actUponNVchange@io& (0+255),w,b
 19808  00524C  ECC9  F049         	call	_startBounceOutput
 19809  005250  0012               	return	
 19810  005252                     l18969:
 19811                           
 19812                           ; BSR set to: 0
 19813                           ;mioNv.c: 172: if (index == (16U + 7U*(io) + 3U)) {
 19814  005252  51D8               	movf	actUponNVchange@index& (0+255),w,b
 19815  005254  6FD4               	movwf	??_actUponNVchange& (0+255),b
 19816  005256  6BD5               	clrf	(??_actUponNVchange+1)& (0+255),b
 19817  005258  51D9               	movf	actUponNVchange@io& (0+255),w,b
 19818  00525A  0D07               	mullw	7
 19819  00525C  0E13               	movlw	19
 19820  00525E  26F3               	addwf	243,f,c
 19821  005260  0E00               	movlw	0
 19822  005262  22F4               	addwfc	244,f,c
 19823  005264  51D4               	movf	??_actUponNVchange& (0+255),w,b
 19824  005266  18F3               	xorwf	243,w,c
 19825  005268  E10F               	bnz	l18975
 19826  00526A  51D5               	movf	(??_actUponNVchange+1)& (0+255),w,b
 19827  00526C  18F4               	xorwf	244,w,c
 19828  00526E  A4D8               	btfss	status,2,c
 19829  005270  D00B               	goto	l18975
 19830                           
 19831                           ; BSR set to: 0
 19832                           ;mioNv.c: 173: setMultiState(io, 0U);
 19833  005272  0E00               	movlw	0
 19834  005274  6F71               	movwf	setMultiState@action& (0+255),b
 19835  005276  51D9               	movf	actUponNVchange@io& (0+255),w,b
 19836  005278  EC51  F035         	call	_setMultiState
 19837                           
 19838                           ; BSR set to: 0
 19839                           ;mioNv.c: 174: startMultiOutput(io, 0U);
 19840  00527C  0E00               	movlw	0
 19841  00527E  6F71               	movwf	startMultiOutput@action& (0+255),b
 19842  005280  51D9               	movf	actUponNVchange@io& (0+255),w,b
 19843  005282  ECB9  F042         	call	_startMultiOutput
 19844                           
 19845                           ;mioNv.c: 175: } else if (index == (16U + 7U*(io) + 4U)) {
 19846  005286  0012               	return	
 19847  005288                     l18975:
 19848                           
 19849                           ; BSR set to: 0
 19850  005288  51D8               	movf	actUponNVchange@index& (0+255),w,b
 19851  00528A  6FD4               	movwf	??_actUponNVchange& (0+255),b
 19852  00528C  6BD5               	clrf	(??_actUponNVchange+1)& (0+255),b
 19853  00528E  51D9               	movf	actUponNVchange@io& (0+255),w,b
 19854  005290  0D07               	mullw	7
 19855  005292  0E14               	movlw	20
 19856  005294  26F3               	addwf	243,f,c
 19857  005296  0E00               	movlw	0
 19858  005298  22F4               	addwfc	244,f,c
 19859  00529A  51D4               	movf	??_actUponNVchange& (0+255),w,b
 19860  00529C  18F3               	xorwf	243,w,c
 19861  00529E  E10F               	bnz	l18981
 19862  0052A0  51D5               	movf	(??_actUponNVchange+1)& (0+255),w,b
 19863  0052A2  18F4               	xorwf	244,w,c
 19864  0052A4  A4D8               	btfss	status,2,c
 19865  0052A6  D00B               	goto	l18981
 19866                           
 19867                           ; BSR set to: 0
 19868                           ;mioNv.c: 176: setMultiState(io, 1U);
 19869  0052A8  0E01               	movlw	1
 19870  0052AA  6F71               	movwf	setMultiState@action& (0+255),b
 19871  0052AC  51D9               	movf	actUponNVchange@io& (0+255),w,b
 19872  0052AE  EC51  F035         	call	_setMultiState
 19873                           
 19874                           ; BSR set to: 0
 19875                           ;mioNv.c: 177: startMultiOutput(io, 1U);
 19876  0052B2  0E01               	movlw	1
 19877  0052B4  6F71               	movwf	startMultiOutput@action& (0+255),b
 19878  0052B6  51D9               	movf	actUponNVchange@io& (0+255),w,b
 19879  0052B8  ECB9  F042         	call	_startMultiOutput
 19880                           
 19881                           ;mioNv.c: 178: } else if (index == (16U + 7U*(io) + 5U)) {
 19882  0052BC  0012               	return	
 19883  0052BE                     l18981:
 19884                           
 19885                           ; BSR set to: 0
 19886  0052BE  51D8               	movf	actUponNVchange@index& (0+255),w,b
 19887  0052C0  6FD4               	movwf	??_actUponNVchange& (0+255),b
 19888  0052C2  6BD5               	clrf	(??_actUponNVchange+1)& (0+255),b
 19889  0052C4  51D9               	movf	actUponNVchange@io& (0+255),w,b
 19890  0052C6  0D07               	mullw	7
 19891  0052C8  0E15               	movlw	21
 19892  0052CA  26F3               	addwf	243,f,c
 19893  0052CC  0E00               	movlw	0
 19894  0052CE  22F4               	addwfc	244,f,c
 19895  0052D0  51D4               	movf	??_actUponNVchange& (0+255),w,b
 19896  0052D2  18F3               	xorwf	243,w,c
 19897  0052D4  E10F               	bnz	l18987
 19898  0052D6  51D5               	movf	(??_actUponNVchange+1)& (0+255),w,b
 19899  0052D8  18F4               	xorwf	244,w,c
 19900  0052DA  A4D8               	btfss	status,2,c
 19901  0052DC  D00B               	goto	l18987
 19902                           
 19903                           ; BSR set to: 0
 19904                           ;mioNv.c: 179: setMultiState(io, 2U);
 19905  0052DE  0E02               	movlw	2
 19906  0052E0  6F71               	movwf	setMultiState@action& (0+255),b
 19907  0052E2  51D9               	movf	actUponNVchange@io& (0+255),w,b
 19908  0052E4  EC51  F035         	call	_setMultiState
 19909                           
 19910                           ; BSR set to: 0
 19911                           ;mioNv.c: 180: startMultiOutput(io, 2U);
 19912  0052E8  0E02               	movlw	2
 19913  0052EA  6F71               	movwf	startMultiOutput@action& (0+255),b
 19914  0052EC  51D9               	movf	actUponNVchange@io& (0+255),w,b
 19915  0052EE  ECB9  F042         	call	_startMultiOutput
 19916                           
 19917                           ;mioNv.c: 181: } else if (index == (16U + 7U*(io) + 6U)) {
 19918  0052F2  0012               	return	
 19919  0052F4                     l18987:
 19920                           
 19921                           ; BSR set to: 0
 19922  0052F4  51D8               	movf	actUponNVchange@index& (0+255),w,b
 19923  0052F6  6FD4               	movwf	??_actUponNVchange& (0+255),b
 19924  0052F8  6BD5               	clrf	(??_actUponNVchange+1)& (0+255),b
 19925  0052FA  51D9               	movf	actUponNVchange@io& (0+255),w,b
 19926  0052FC  0D07               	mullw	7
 19927  0052FE  0E16               	movlw	22
 19928  005300  26F3               	addwf	243,f,c
 19929  005302  0E00               	movlw	0
 19930  005304  22F4               	addwfc	244,f,c
 19931  005306  51D4               	movf	??_actUponNVchange& (0+255),w,b
 19932  005308  18F3               	xorwf	243,w,c
 19933  00530A  E103               	bnz	u23581
 19934  00530C  51D5               	movf	(??_actUponNVchange+1)& (0+255),w,b
 19935  00530E  18F4               	xorwf	244,w,c
 19936  005310  A4D8               	btfss	status,2,c
 19937  005312                     u23581:
 19938  005312  0012               	return	
 19939                           
 19940                           ; BSR set to: 0
 19941                           ;mioNv.c: 182: setMultiState(io, 3U);
 19942  005314  0E03               	movlw	3
 19943  005316  6F71               	movwf	setMultiState@action& (0+255),b
 19944  005318  51D9               	movf	actUponNVchange@io& (0+255),w,b
 19945  00531A  EC51  F035         	call	_setMultiState
 19946                           
 19947                           ; BSR set to: 0
 19948                           ;mioNv.c: 183: startMultiOutput(io, 3U);
 19949  00531E  0E03               	movlw	3
 19950  005320  6F71               	movwf	startMultiOutput@action& (0+255),b
 19951  005322  51D9               	movf	actUponNVchange@io& (0+255),w,b
 19952  005324  ECB9  F042         	call	_startMultiOutput
 19953  005328  0012               	return	
 19954  00532A                     l18995:
 19955                           
 19956                           ; BSR set to: 0
 19957  00532A  51D9               	movf	actUponNVchange@io& (0+255),w,b
 19958  00532C  0D07               	mullw	7
 19959  00532E  C0EC  F0D4         	movff	_NV,??_actUponNVchange
 19960  005332  C0ED  F0D5         	movff	_NV+1,??_actUponNVchange+1
 19961  005336  50F3               	movf	243,w,c
 19962  005338  27D4               	addwf	??_actUponNVchange& (0+255),f,b
 19963  00533A  50F4               	movf	244,w,c
 19964  00533C  23D5               	addwfc	(??_actUponNVchange+1)& (0+255),f,b
 19965  00533E  0E10               	movlw	16
 19966  005340  25D4               	addwf	??_actUponNVchange& (0+255),w,b
 19967  005342  6ED9               	movwf	fsr2l,c
 19968  005344  0E00               	movlw	0
 19969  005346  21D5               	addwfc	(??_actUponNVchange+1)& (0+255),w,b
 19970  005348  6EDA               	movwf	fsr2h,c
 19971  00534A  50DF               	movf	indf2,w,c
 19972                           
 19973                           ; Switch size 1, requested type "simple"
 19974                           ; Number of cases is 4, Range of values is 2 to 6
 19975                           ; switch strategies available:
 19976                           ; Name         Instructions Cycles
 19977                           ; simple_byte           13     7 (average)
 19978                           ;	Chosen strategy is simple_byte
 19979  00534C  0A02               	xorlw	2	; case 2
 19980  00534E  B4D8               	btfsc	status,2,c
 19981  005350  D714               	goto	l18949
 19982  005352  0A01               	xorlw	1	; case 3
 19983  005354  B4D8               	btfsc	status,2,c
 19984  005356  D747               	goto	l18957
 19985  005358  0A07               	xorlw	7	; case 4
 19986  00535A  B4D8               	btfsc	status,2,c
 19987  00535C  D77A               	goto	l18969
 19988  00535E  0A02               	xorlw	2	; case 6
 19989  005360  A4D8               	btfss	status,2,c
 19990  005362  0012               	return	
 19991  005364  D6EB               	goto	l18939
 19992  005366                     __end_of_actUponNVchange:
 19993                           	callstack 0
 19994                           
 19995 ;; *************** function _startServoOutput *****************
 19996 ;; Defined at:
 19997 ;;		line 479 in file "../../github/CANMIOfirmware/servo.c"
 19998 ;; Parameters:    Size  Location     Type
 19999 ;;  io              1    wreg     unsigned char 
 20000 ;;  action          1   17[BANK0 ] unsigned char 
 20001 ;; Auto vars:     Size  Location     Type
 20002 ;;  io              1   20[BANK0 ] unsigned char 
 20003 ;; Return value:  Size  Location     Type
 20004 ;;                  1    wreg      void 
 20005 ;; Registers used:
 20006 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 20007 ;; Tracked objects:
 20008 ;;		On entry : 3F/0
 20009 ;;		On exit  : 3F/0
 20010 ;;		Unchanged: 0/0
 20011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 20012 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20013 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20014 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20015 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20016 ;;Total ram usage:        4 bytes
 20017 ;; Hardware stack levels used: 1
 20018 ;; Hardware stack levels required when called: 8
 20019 ;; This function calls:
 20020 ;;		Nothing
 20021 ;; This function is called by:
 20022 ;;		_actUponNVchange
 20023 ;;		_startOutput
 20024 ;; This function uses a non-reentrant model
 20025 ;;
 20026                           
 20027                           	psect	text81
 20028  007614                     __ptext81:
 20029                           	callstack 0
 20030  007614                     _startServoOutput:
 20031                           	callstack 20
 20032                           
 20033                           ; BSR set to: 0
 20034                           ;incstack = 0
 20035                           ;startServoOutput@io stored from wreg
 20036  007614  6F74               	movwf	startServoOutput@io& (0+255),b
 20037                           
 20038                           ;servo.c: 480: switch (action) {
 20039  007616  D025               	goto	l18663
 20040  007618                     l18657:
 20041                           
 20042                           ; BSR set to: 0
 20043                           ;servo.c: 482: stepsPerPollSpeed[io] = NV->io[io].nv_io.nv_servo.servo_es_speed;
 20044  007618  5174               	movf	startServoOutput@io& (0+255),w,b
 20045  00761A  0D07               	mullw	7
 20046  00761C  C0EC  F072         	movff	_NV,??_startServoOutput
 20047  007620  C0ED  F073         	movff	_NV+1,??_startServoOutput+1
 20048  007624  50F3               	movf	243,w,c
 20049  007626  2772               	addwf	??_startServoOutput& (0+255),f,b
 20050  007628  50F4               	movf	244,w,c
 20051  00762A  2373               	addwfc	(??_startServoOutput+1)& (0+255),f,b
 20052  00762C  0E15               	movlw	21
 20053  00762E  D00B               	goto	L15
 20054  007630                     l18659:
 20055                           
 20056                           ; BSR set to: 0
 20057                           ;servo.c: 485: stepsPerPollSpeed[io] = NV->io[io].nv_io.nv_servo.servo_se_speed;
 20058  007630  5174               	movf	startServoOutput@io& (0+255),w,b
 20059  007632  0D07               	mullw	7
 20060  007634  C0EC  F072         	movff	_NV,??_startServoOutput
 20061  007638  C0ED  F073         	movff	_NV+1,??_startServoOutput+1
 20062  00763C  50F3               	movf	243,w,c
 20063  00763E  2772               	addwf	??_startServoOutput& (0+255),f,b
 20064  007640  50F4               	movf	244,w,c
 20065  007642  2373               	addwfc	(??_startServoOutput+1)& (0+255),f,b
 20066  007644  0E14               	movlw	20
 20067  007646                     L15:
 20068  007646  2572               	addwf	??_startServoOutput& (0+255),w,b
 20069  007648  6ED9               	movwf	fsr2l,c
 20070  00764A  0E00               	movlw	0
 20071  00764C  2173               	addwfc	(??_startServoOutput+1)& (0+255),w,b
 20072  00764E  6EDA               	movwf	fsr2h,c
 20073  007650  0E30               	movlw	low _stepsPerPollSpeed
 20074  007652  2574               	addwf	startServoOutput@io& (0+255),w,b
 20075  007654  6EE1               	movwf	fsr1l,c
 20076  007656  6AE2               	clrf	fsr1h,c
 20077  007658  0E01               	movlw	high _stepsPerPollSpeed
 20078  00765A  22E2               	addwfc	fsr1h,f,c
 20079  00765C  CFDF FFE7          	movff	indf2,indf1
 20080                           
 20081                           ;servo.c: 486: break;
 20082  007660  D008               	goto	l18665
 20083  007662                     l18663:
 20084  007662  0100               	movlb	0	; () banked
 20085  007664  5171               	movf	startServoOutput@action& (0+255),w,b
 20086                           
 20087                           ; Switch size 1, requested type "simple"
 20088                           ; Number of cases is 2, Range of values is 1 to 2
 20089                           ; switch strategies available:
 20090                           ; Name         Instructions Cycles
 20091                           ; simple_byte            7     4 (average)
 20092                           ;	Chosen strategy is simple_byte
 20093  007666  0A01               	xorlw	1	; case 1
 20094  007668  B4D8               	btfsc	status,2,c
 20095  00766A  D7E2               	goto	l18659
 20096  00766C  0A03               	xorlw	3	; case 2
 20097  00766E  B4D8               	btfsc	status,2,c
 20098  007670  D7D3               	goto	l18657
 20099  007672                     l18665:
 20100                           
 20101                           ; BSR set to: 0
 20102                           ;servo.c: 488: if (stepsPerPollSpeed[io] > 234U) {
 20103  007672  0E30               	movlw	low _stepsPerPollSpeed
 20104  007674  2574               	addwf	startServoOutput@io& (0+255),w,b
 20105  007676  6ED9               	movwf	fsr2l,c
 20106  007678  6ADA               	clrf	fsr2h,c
 20107  00767A  0E01               	movlw	high _stepsPerPollSpeed
 20108  00767C  22DA               	addwfc	fsr2h,f,c
 20109  00767E  0EEA               	movlw	234
 20110  007680  64DF               	cpfsgt	indf2,c
 20111  007682  D00E               	goto	l18669
 20112                           
 20113                           ; BSR set to: 0
 20114                           ;servo.c: 489: stepsPerPollSpeed[io] -= 234U;
 20115  007684  0E30               	movlw	low _stepsPerPollSpeed
 20116  007686  2574               	addwf	startServoOutput@io& (0+255),w,b
 20117  007688  6ED9               	movwf	fsr2l,c
 20118  00768A  6ADA               	clrf	fsr2h,c
 20119  00768C  0E01               	movlw	high _stepsPerPollSpeed
 20120  00768E  22DA               	addwfc	fsr2h,f,c
 20121  007690  0EEA               	movlw	234
 20122  007692  5EDF               	subwf	indf2,f,c
 20123                           
 20124                           ;servo.c: 490: pollsPerStepSpeed[io] = 0U;
 20125  007694  0E74               	movlw	low _pollsPerStepSpeed
 20126  007696  2574               	addwf	startServoOutput@io& (0+255),w,b
 20127  007698  6ED9               	movwf	fsr2l,c
 20128  00769A  6ADA               	clrf	fsr2h,c
 20129  00769C  0E02               	movlw	high _pollsPerStepSpeed
 20130  00769E  D01E               	goto	L16
 20131  0076A0                     l18669:
 20132                           
 20133                           ; BSR set to: 0
 20134                           ;servo.c: 492: pollsPerStepSpeed[io] = 234U - stepsPerPollSpeed[io] +1U;
 20135  0076A0  0E74               	movlw	low _pollsPerStepSpeed
 20136  0076A2  2574               	addwf	startServoOutput@io& (0+255),w,b
 20137  0076A4  6ED9               	movwf	fsr2l,c
 20138  0076A6  6ADA               	clrf	fsr2h,c
 20139  0076A8  0E02               	movlw	high _pollsPerStepSpeed
 20140  0076AA  22DA               	addwfc	fsr2h,f,c
 20141  0076AC  0E30               	movlw	low _stepsPerPollSpeed
 20142  0076AE  2574               	addwf	startServoOutput@io& (0+255),w,b
 20143  0076B0  6EE1               	movwf	fsr1l,c
 20144  0076B2  6AE2               	clrf	fsr1h,c
 20145  0076B4  0E01               	movlw	high _stepsPerPollSpeed
 20146  0076B6  22E2               	addwfc	fsr1h,f,c
 20147  0076B8  50E7               	movf	indf1,w,c
 20148  0076BA  6F72               	movwf	??_startServoOutput& (0+255),b
 20149  0076BC  5172               	movf	??_startServoOutput& (0+255),w,b
 20150  0076BE  08EB               	sublw	235
 20151  0076C0  6EDF               	movwf	indf2,c
 20152                           
 20153                           ; BSR set to: 0
 20154                           ;servo.c: 493: pollCount[io] = 1;
 20155  0076C2  0E20               	movlw	low _pollCount
 20156  0076C4  2574               	addwf	startServoOutput@io& (0+255),w,b
 20157  0076C6  6ED9               	movwf	fsr2l,c
 20158  0076C8  6ADA               	clrf	fsr2h,c
 20159  0076CA  0E01               	movlw	high _pollCount
 20160  0076CC  22DA               	addwfc	fsr2h,f,c
 20161  0076CE  0E01               	movlw	1
 20162  0076D0  6EDF               	movwf	indf2,c
 20163                           
 20164                           ; BSR set to: 0
 20165                           ;servo.c: 494: stepsPerPollSpeed[io] = 0U;
 20166  0076D2  0E30               	movlw	low _stepsPerPollSpeed
 20167  0076D4  2574               	addwf	startServoOutput@io& (0+255),w,b
 20168  0076D6  6ED9               	movwf	fsr2l,c
 20169  0076D8  6ADA               	clrf	fsr2h,c
 20170  0076DA  0E01               	movlw	high _stepsPerPollSpeed
 20171  0076DC                     L16:
 20172  0076DC  22DA               	addwfc	fsr2h,f,c
 20173  0076DE  0E00               	movlw	0
 20174  0076E0  6EDF               	movwf	indf2,c
 20175                           
 20176                           ; BSR set to: 0
 20177                           ;servo.c: 495: };servo.c: 496: servoState[io] = STARTING;
 20178  0076E2  0E40               	movlw	low _servoState
 20179  0076E4  2574               	addwf	startServoOutput@io& (0+255),w,b
 20180  0076E6  6ED9               	movwf	fsr2l,c
 20181  0076E8  6ADA               	clrf	fsr2h,c
 20182  0076EA  0E01               	movlw	high _servoState
 20183  0076EC  22DA               	addwfc	fsr2h,f,c
 20184  0076EE  0E03               	movlw	3
 20185  0076F0  6EDF               	movwf	indf2,c
 20186                           
 20187                           ; BSR set to: 0
 20188  0076F2  0012               	return		;funcret
 20189  0076F4                     __end_of_startServoOutput:
 20190                           	callstack 0
 20191                           
 20192 ;; *************** function _startMultiOutput *****************
 20193 ;; Defined at:
 20194 ;;		line 525 in file "../../github/CANMIOfirmware/servo.c"
 20195 ;; Parameters:    Size  Location     Type
 20196 ;;  io              1    wreg     unsigned char 
 20197 ;;  action          1   17[BANK0 ] unsigned char 
 20198 ;; Auto vars:     Size  Location     Type
 20199 ;;  io              1   19[BANK0 ] unsigned char 
 20200 ;; Return value:  Size  Location     Type
 20201 ;;                  1    wreg      void 
 20202 ;; Registers used:
 20203 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 20204 ;; Tracked objects:
 20205 ;;		On entry : 3F/0
 20206 ;;		On exit  : 3F/0
 20207 ;;		Unchanged: 0/0
 20208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 20209 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20210 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20211 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20212 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20213 ;;Total ram usage:        3 bytes
 20214 ;; Hardware stack levels used: 1
 20215 ;; Hardware stack levels required when called: 8
 20216 ;; This function calls:
 20217 ;;		Nothing
 20218 ;; This function is called by:
 20219 ;;		_actUponNVchange
 20220 ;;		_startOutput
 20221 ;; This function uses a non-reentrant model
 20222 ;;
 20223                           
 20224                           	psect	text82
 20225  008572                     __ptext82:
 20226                           	callstack 0
 20227  008572                     _startMultiOutput:
 20228                           	callstack 20
 20229                           
 20230                           ; BSR set to: 0
 20231                           ;incstack = 0
 20232                           ;startMultiOutput@io stored from wreg
 20233  008572  6F73               	movwf	startMultiOutput@io& (0+255),b
 20234                           
 20235                           ;servo.c: 527: stepsPerPollSpeed[io] = NV->servo_speed;
 20236  008574  0100               	movlb	0	; () banked
 20237  008576  EE20 F003          	lfsr	2,3
 20238  00857A  51EC               	movf	_NV& (0+255),w,b
 20239  00857C  26D9               	addwf	fsr2l,f,c
 20240  00857E  51ED               	movf	(_NV+1)& (0+255),w,b
 20241  008580  22DA               	addwfc	fsr2h,f,c
 20242  008582  0E30               	movlw	low _stepsPerPollSpeed
 20243  008584  2573               	addwf	startMultiOutput@io& (0+255),w,b
 20244  008586  6EE1               	movwf	fsr1l,c
 20245  008588  6AE2               	clrf	fsr1h,c
 20246  00858A  0E01               	movlw	high _stepsPerPollSpeed
 20247  00858C  22E2               	addwfc	fsr1h,f,c
 20248  00858E  CFDF FFE7          	movff	indf2,indf1
 20249                           
 20250                           ; BSR set to: 0
 20251                           ;servo.c: 528: if (stepsPerPollSpeed[io] > 234U) {
 20252  008592  0E30               	movlw	low _stepsPerPollSpeed
 20253  008594  2573               	addwf	startMultiOutput@io& (0+255),w,b
 20254  008596  6ED9               	movwf	fsr2l,c
 20255  008598  6ADA               	clrf	fsr2h,c
 20256  00859A  0E01               	movlw	high _stepsPerPollSpeed
 20257  00859C  22DA               	addwfc	fsr2h,f,c
 20258  00859E  0EEA               	movlw	234
 20259  0085A0  64DF               	cpfsgt	indf2,c
 20260  0085A2  D00E               	goto	l18731
 20261                           
 20262                           ; BSR set to: 0
 20263                           ;servo.c: 529: stepsPerPollSpeed[io] -= 234U;
 20264  0085A4  0E30               	movlw	low _stepsPerPollSpeed
 20265  0085A6  2573               	addwf	startMultiOutput@io& (0+255),w,b
 20266  0085A8  6ED9               	movwf	fsr2l,c
 20267  0085AA  6ADA               	clrf	fsr2h,c
 20268  0085AC  0E01               	movlw	high _stepsPerPollSpeed
 20269  0085AE  22DA               	addwfc	fsr2h,f,c
 20270  0085B0  0EEA               	movlw	234
 20271  0085B2  5EDF               	subwf	indf2,f,c
 20272                           
 20273                           ;servo.c: 530: pollsPerStepSpeed[io] = 0;
 20274  0085B4  0E74               	movlw	low _pollsPerStepSpeed
 20275  0085B6  2573               	addwf	startMultiOutput@io& (0+255),w,b
 20276  0085B8  6ED9               	movwf	fsr2l,c
 20277  0085BA  6ADA               	clrf	fsr2h,c
 20278  0085BC  0E02               	movlw	high _pollsPerStepSpeed
 20279  0085BE  D01E               	goto	L17
 20280  0085C0                     l18731:
 20281                           
 20282                           ; BSR set to: 0
 20283                           ;servo.c: 532: pollsPerStepSpeed[io] = 234U - stepsPerPollSpeed[io] +1;
 20284  0085C0  0E74               	movlw	low _pollsPerStepSpeed
 20285  0085C2  2573               	addwf	startMultiOutput@io& (0+255),w,b
 20286  0085C4  6ED9               	movwf	fsr2l,c
 20287  0085C6  6ADA               	clrf	fsr2h,c
 20288  0085C8  0E02               	movlw	high _pollsPerStepSpeed
 20289  0085CA  22DA               	addwfc	fsr2h,f,c
 20290  0085CC  0E30               	movlw	low _stepsPerPollSpeed
 20291  0085CE  2573               	addwf	startMultiOutput@io& (0+255),w,b
 20292  0085D0  6EE1               	movwf	fsr1l,c
 20293  0085D2  6AE2               	clrf	fsr1h,c
 20294  0085D4  0E01               	movlw	high _stepsPerPollSpeed
 20295  0085D6  22E2               	addwfc	fsr1h,f,c
 20296  0085D8  50E7               	movf	indf1,w,c
 20297  0085DA  6F72               	movwf	??_startMultiOutput& (0+255),b
 20298  0085DC  5172               	movf	??_startMultiOutput& (0+255),w,b
 20299  0085DE  08EB               	sublw	235
 20300  0085E0  6EDF               	movwf	indf2,c
 20301                           
 20302                           ; BSR set to: 0
 20303                           ;servo.c: 533: pollCount[io] = 1;
 20304  0085E2  0E20               	movlw	low _pollCount
 20305  0085E4  2573               	addwf	startMultiOutput@io& (0+255),w,b
 20306  0085E6  6ED9               	movwf	fsr2l,c
 20307  0085E8  6ADA               	clrf	fsr2h,c
 20308  0085EA  0E01               	movlw	high _pollCount
 20309  0085EC  22DA               	addwfc	fsr2h,f,c
 20310  0085EE  0E01               	movlw	1
 20311  0085F0  6EDF               	movwf	indf2,c
 20312                           
 20313                           ; BSR set to: 0
 20314                           ;servo.c: 534: stepsPerPollSpeed[io] = 0;
 20315  0085F2  0E30               	movlw	low _stepsPerPollSpeed
 20316  0085F4  2573               	addwf	startMultiOutput@io& (0+255),w,b
 20317  0085F6  6ED9               	movwf	fsr2l,c
 20318  0085F8  6ADA               	clrf	fsr2h,c
 20319  0085FA  0E01               	movlw	high _stepsPerPollSpeed
 20320  0085FC                     L17:
 20321  0085FC  22DA               	addwfc	fsr2h,f,c
 20322  0085FE  0E00               	movlw	0
 20323  008600  6EDF               	movwf	indf2,c
 20324                           
 20325                           ; BSR set to: 0
 20326                           ;servo.c: 535: };servo.c: 536: servoState[io] = STARTING;
 20327  008602  0E40               	movlw	low _servoState
 20328  008604  2573               	addwf	startMultiOutput@io& (0+255),w,b
 20329  008606  6ED9               	movwf	fsr2l,c
 20330  008608  6ADA               	clrf	fsr2h,c
 20331  00860A  0E01               	movlw	high _servoState
 20332  00860C  22DA               	addwfc	fsr2h,f,c
 20333  00860E  0E03               	movlw	3
 20334  008610  6EDF               	movwf	indf2,c
 20335                           
 20336                           ; BSR set to: 0
 20337  008612  0012               	return		;funcret
 20338  008614                     __end_of_startMultiOutput:
 20339                           	callstack 0
 20340                           
 20341 ;; *************** function _startBounceOutput *****************
 20342 ;; Defined at:
 20343 ;;		line 507 in file "../../github/CANMIOfirmware/servo.c"
 20344 ;; Parameters:    Size  Location     Type
 20345 ;;  io              1    wreg     unsigned char 
 20346 ;;  action          1   17[BANK0 ] unsigned char 
 20347 ;; Auto vars:     Size  Location     Type
 20348 ;;  io              1   18[BANK0 ] unsigned char 
 20349 ;; Return value:  Size  Location     Type
 20350 ;;                  1    wreg      void 
 20351 ;; Registers used:
 20352 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 20353 ;; Tracked objects:
 20354 ;;		On entry : 3F/0
 20355 ;;		On exit  : 3F/0
 20356 ;;		Unchanged: 0/0
 20357 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 20358 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20359 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20360 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20361 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20362 ;;Total ram usage:        2 bytes
 20363 ;; Hardware stack levels used: 1
 20364 ;; Hardware stack levels required when called: 8
 20365 ;; This function calls:
 20366 ;;		Nothing
 20367 ;; This function is called by:
 20368 ;;		_actUponNVchange
 20369 ;;		_startOutput
 20370 ;; This function uses a non-reentrant model
 20371 ;;
 20372                           
 20373                           	psect	text83
 20374  009392                     __ptext83:
 20375                           	callstack 0
 20376  009392                     _startBounceOutput:
 20377                           	callstack 20
 20378                           
 20379                           ; BSR set to: 0
 20380                           ;incstack = 0
 20381                           ;startBounceOutput@io stored from wreg
 20382  009392  6F72               	movwf	startBounceOutput@io& (0+255),b
 20383                           
 20384                           ;servo.c: 508: switch (action) {
 20385  009394  D017               	goto	l18703
 20386  009396                     l18697:
 20387                           
 20388                           ; BSR set to: 0
 20389                           ;servo.c: 510: speed[io] = 0;
 20390  009396  5172               	movf	startBounceOutput@io& (0+255),w,b
 20391  009398  0D02               	mullw	2
 20392  00939A  0E00               	movlw	low _speed
 20393  00939C  24F3               	addwf	243,w,c
 20394  00939E  6ED9               	movwf	fsr2l,c
 20395  0093A0  0E01               	movlw	high _speed
 20396  0093A2  20F4               	addwfc	prodh,w,c
 20397  0093A4  6EDA               	movwf	fsr2h,c
 20398  0093A6  0E00               	movlw	0
 20399  0093A8  D009               	goto	L18
 20400  0093AA                     l18699:
 20401                           
 20402                           ; BSR set to: 0
 20403                           ;servo.c: 513: speed[io] = 12;
 20404  0093AA  5172               	movf	startBounceOutput@io& (0+255),w,b
 20405  0093AC  0D02               	mullw	2
 20406  0093AE  0E00               	movlw	low _speed
 20407  0093B0  24F3               	addwf	243,w,c
 20408  0093B2  6ED9               	movwf	fsr2l,c
 20409  0093B4  0E01               	movlw	high _speed
 20410  0093B6  20F4               	addwfc	prodh,w,c
 20411  0093B8  6EDA               	movwf	fsr2h,c
 20412  0093BA  0E0C               	movlw	12
 20413  0093BC                     L18:
 20414  0093BC  6EDE               	movwf	postinc2,c
 20415  0093BE  0E00               	movlw	0
 20416  0093C0  6EDD               	movwf	postdec2,c
 20417                           
 20418                           ;servo.c: 514: break;
 20419  0093C2  D008               	goto	l18705
 20420  0093C4                     l18703:
 20421  0093C4  0100               	movlb	0	; () banked
 20422  0093C6  5171               	movf	startBounceOutput@action& (0+255),w,b
 20423                           
 20424                           ; Switch size 1, requested type "simple"
 20425                           ; Number of cases is 2, Range of values is 1 to 2
 20426                           ; switch strategies available:
 20427                           ; Name         Instructions Cycles
 20428                           ; simple_byte            7     4 (average)
 20429                           ;	Chosen strategy is simple_byte
 20430  0093C8  0A01               	xorlw	1	; case 1
 20431  0093CA  B4D8               	btfsc	status,2,c
 20432  0093CC  D7EE               	goto	l18699
 20433  0093CE  0A03               	xorlw	3	; case 2
 20434  0093D0  B4D8               	btfsc	status,2,c
 20435  0093D2  D7E1               	goto	l18697
 20436  0093D4                     l18705:
 20437                           
 20438                           ; BSR set to: 0
 20439                           ;servo.c: 516: servoState[io] = STARTING;
 20440  0093D4  0E40               	movlw	low _servoState
 20441  0093D6  2572               	addwf	startBounceOutput@io& (0+255),w,b
 20442  0093D8  6ED9               	movwf	fsr2l,c
 20443  0093DA  6ADA               	clrf	fsr2h,c
 20444  0093DC  0E01               	movlw	high _servoState
 20445  0093DE  22DA               	addwfc	fsr2h,f,c
 20446  0093E0  0E03               	movlw	3
 20447  0093E2  6EDF               	movwf	indf2,c
 20448                           
 20449                           ;servo.c: 517: loopCount[io] = 0;
 20450  0093E4  0E64               	movlw	low _loopCount
 20451  0093E6  2572               	addwf	startBounceOutput@io& (0+255),w,b
 20452  0093E8  6ED9               	movwf	fsr2l,c
 20453  0093EA  6ADA               	clrf	fsr2h,c
 20454  0093EC  0E02               	movlw	high _loopCount
 20455  0093EE  22DA               	addwfc	fsr2h,f,c
 20456  0093F0  0E00               	movlw	0
 20457  0093F2  6EDF               	movwf	indf2,c
 20458                           
 20459                           ; BSR set to: 0
 20460  0093F4  0012               	return		;funcret
 20461  0093F6                     __end_of_startBounceOutput:
 20462                           	callstack 0
 20463                           
 20464 ;; *************** function _setServoState *****************
 20465 ;; Defined at:
 20466 ;;		line 547 in file "../../github/CANMIOfirmware/servo.c"
 20467 ;; Parameters:    Size  Location     Type
 20468 ;;  io              1    wreg     unsigned char 
 20469 ;;  action          1   17[BANK0 ] unsigned char 
 20470 ;; Auto vars:     Size  Location     Type
 20471 ;;  io              1   20[BANK0 ] unsigned char 
 20472 ;; Return value:  Size  Location     Type
 20473 ;;                  1    wreg      void 
 20474 ;; Registers used:
 20475 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 20476 ;; Tracked objects:
 20477 ;;		On entry : 3F/0
 20478 ;;		On exit  : 3F/0
 20479 ;;		Unchanged: 0/0
 20480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 20481 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20482 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20483 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20484 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20485 ;;Total ram usage:        4 bytes
 20486 ;; Hardware stack levels used: 1
 20487 ;; Hardware stack levels required when called: 8
 20488 ;; This function calls:
 20489 ;;		Nothing
 20490 ;; This function is called by:
 20491 ;;		_actUponNVchange
 20492 ;;		_setOutputState
 20493 ;; This function uses a non-reentrant model
 20494 ;;
 20495                           
 20496                           	psect	text84
 20497  006BD8                     __ptext84:
 20498                           	callstack 0
 20499  006BD8                     _setServoState:
 20500                           	callstack 20
 20501                           
 20502                           ; BSR set to: 0
 20503                           ;incstack = 0
 20504                           ;setServoState@io stored from wreg
 20505  006BD8  6F74               	movwf	setServoState@io& (0+255),b
 20506                           
 20507                           ;servo.c: 548: switch (action) {
 20508  006BDA  D088               	goto	l18653
 20509  006BDC                     l18639:
 20510                           
 20511                           ; BSR set to: 0
 20512                           ;servo.c: 550: if (NV->io[io].flags & 0x01U) {
 20513  006BDC  5174               	movf	setServoState@io& (0+255),w,b
 20514  006BDE  0D07               	mullw	7
 20515  006BE0  C0EC  F072         	movff	_NV,??_setServoState
 20516  006BE4  C0ED  F073         	movff	_NV+1,??_setServoState+1
 20517  006BE8  50F3               	movf	243,w,c
 20518  006BEA  2772               	addwf	??_setServoState& (0+255),f,b
 20519  006BEC  50F4               	movf	244,w,c
 20520  006BEE  2373               	addwfc	(??_setServoState+1)& (0+255),f,b
 20521  006BF0  0E11               	movlw	17
 20522  006BF2  2572               	addwf	??_setServoState& (0+255),w,b
 20523  006BF4  6ED9               	movwf	fsr2l,c
 20524  006BF6  0E00               	movlw	0
 20525  006BF8  2173               	addwfc	(??_setServoState+1)& (0+255),w,b
 20526  006BFA  6EDA               	movwf	fsr2h,c
 20527  006BFC  A0DF               	btfss	indf2,0,c
 20528  006BFE  D019               	goto	l18643
 20529                           
 20530                           ; BSR set to: 0
 20531                           ;servo.c: 551: targetPos[io] = NV->io[io].nv_io.nv_servo.servo_end_pos;
 20532  006C00  5174               	movf	setServoState@io& (0+255),w,b
 20533  006C02  0D07               	mullw	7
 20534  006C04  C0EC  F072         	movff	_NV,??_setServoState
 20535  006C08  C0ED  F073         	movff	_NV+1,??_setServoState+1
 20536  006C0C  50F3               	movf	243,w,c
 20537  006C0E  2772               	addwf	??_setServoState& (0+255),f,b
 20538  006C10  50F4               	movf	244,w,c
 20539  006C12  2373               	addwfc	(??_setServoState+1)& (0+255),f,b
 20540  006C14  0E13               	movlw	19
 20541  006C16  2572               	addwf	??_setServoState& (0+255),w,b
 20542  006C18  6ED9               	movwf	fsr2l,c
 20543  006C1A  0E00               	movlw	0
 20544  006C1C  2173               	addwfc	(??_setServoState+1)& (0+255),w,b
 20545  006C1E  6EDA               	movwf	fsr2h,c
 20546  006C20  0E70               	movlw	low _targetPos
 20547  006C22  2574               	addwf	setServoState@io& (0+255),w,b
 20548  006C24  6EE1               	movwf	fsr1l,c
 20549  006C26  6AE2               	clrf	fsr1h,c
 20550  006C28  0E01               	movlw	high _targetPos
 20551  006C2A  22E2               	addwfc	fsr1h,f,c
 20552  006C2C  CFDF FFE7          	movff	indf2,indf1
 20553                           
 20554                           ;servo.c: 552: } else {
 20555  006C30  0012               	return	
 20556  006C32                     l18643:
 20557                           
 20558                           ; BSR set to: 0
 20559                           ;servo.c: 553: targetPos[io] = NV->io[io].nv_io.nv_servo.servo_start_pos;
 20560  006C32  5174               	movf	setServoState@io& (0+255),w,b
 20561  006C34  0D07               	mullw	7
 20562  006C36  C0EC  F072         	movff	_NV,??_setServoState
 20563  006C3A  C0ED  F073         	movff	_NV+1,??_setServoState+1
 20564  006C3E  50F3               	movf	243,w,c
 20565  006C40  2772               	addwf	??_setServoState& (0+255),f,b
 20566  006C42  50F4               	movf	244,w,c
 20567  006C44  2373               	addwfc	(??_setServoState+1)& (0+255),f,b
 20568  006C46  0E12               	movlw	18
 20569  006C48  2572               	addwf	??_setServoState& (0+255),w,b
 20570  006C4A  6ED9               	movwf	fsr2l,c
 20571  006C4C  0E00               	movlw	0
 20572  006C4E  2173               	addwfc	(??_setServoState+1)& (0+255),w,b
 20573  006C50  6EDA               	movwf	fsr2h,c
 20574  006C52  0E70               	movlw	low _targetPos
 20575  006C54  2574               	addwf	setServoState@io& (0+255),w,b
 20576  006C56  6EE1               	movwf	fsr1l,c
 20577  006C58  6AE2               	clrf	fsr1h,c
 20578  006C5A  0E01               	movlw	high _targetPos
 20579  006C5C  22E2               	addwfc	fsr1h,f,c
 20580  006C5E  CFDF FFE7          	movff	indf2,indf1
 20581  006C62  0012               	return	
 20582  006C64                     l18645:
 20583                           
 20584                           ; BSR set to: 0
 20585                           ;servo.c: 557: if (NV->io[io].flags & 0x01U) {
 20586  006C64  5174               	movf	setServoState@io& (0+255),w,b
 20587  006C66  0D07               	mullw	7
 20588  006C68  C0EC  F072         	movff	_NV,??_setServoState
 20589  006C6C  C0ED  F073         	movff	_NV+1,??_setServoState+1
 20590  006C70  50F3               	movf	243,w,c
 20591  006C72  2772               	addwf	??_setServoState& (0+255),f,b
 20592  006C74  50F4               	movf	244,w,c
 20593  006C76  2373               	addwfc	(??_setServoState+1)& (0+255),f,b
 20594  006C78  0E11               	movlw	17
 20595  006C7A  2572               	addwf	??_setServoState& (0+255),w,b
 20596  006C7C  6ED9               	movwf	fsr2l,c
 20597  006C7E  0E00               	movlw	0
 20598  006C80  2173               	addwfc	(??_setServoState+1)& (0+255),w,b
 20599  006C82  6EDA               	movwf	fsr2h,c
 20600  006C84  A0DF               	btfss	indf2,0,c
 20601  006C86  D019               	goto	l18649
 20602                           
 20603                           ; BSR set to: 0
 20604                           ;servo.c: 558: targetPos[io] = NV->io[io].nv_io.nv_servo.servo_start_pos;
 20605  006C88  5174               	movf	setServoState@io& (0+255),w,b
 20606  006C8A  0D07               	mullw	7
 20607  006C8C  C0EC  F072         	movff	_NV,??_setServoState
 20608  006C90  C0ED  F073         	movff	_NV+1,??_setServoState+1
 20609  006C94  50F3               	movf	243,w,c
 20610  006C96  2772               	addwf	??_setServoState& (0+255),f,b
 20611  006C98  50F4               	movf	244,w,c
 20612  006C9A  2373               	addwfc	(??_setServoState+1)& (0+255),f,b
 20613  006C9C  0E12               	movlw	18
 20614  006C9E  2572               	addwf	??_setServoState& (0+255),w,b
 20615  006CA0  6ED9               	movwf	fsr2l,c
 20616  006CA2  0E00               	movlw	0
 20617  006CA4  2173               	addwfc	(??_setServoState+1)& (0+255),w,b
 20618  006CA6  6EDA               	movwf	fsr2h,c
 20619  006CA8  0E70               	movlw	low _targetPos
 20620  006CAA  2574               	addwf	setServoState@io& (0+255),w,b
 20621  006CAC  6EE1               	movwf	fsr1l,c
 20622  006CAE  6AE2               	clrf	fsr1h,c
 20623  006CB0  0E01               	movlw	high _targetPos
 20624  006CB2  22E2               	addwfc	fsr1h,f,c
 20625  006CB4  CFDF FFE7          	movff	indf2,indf1
 20626                           
 20627                           ;servo.c: 559: } else {
 20628  006CB8  0012               	return	
 20629  006CBA                     l18649:
 20630                           
 20631                           ; BSR set to: 0
 20632                           ;servo.c: 560: targetPos[io] = NV->io[io].nv_io.nv_servo.servo_end_pos;
 20633  006CBA  5174               	movf	setServoState@io& (0+255),w,b
 20634  006CBC  0D07               	mullw	7
 20635  006CBE  C0EC  F072         	movff	_NV,??_setServoState
 20636  006CC2  C0ED  F073         	movff	_NV+1,??_setServoState+1
 20637  006CC6  50F3               	movf	243,w,c
 20638  006CC8  2772               	addwf	??_setServoState& (0+255),f,b
 20639  006CCA  50F4               	movf	244,w,c
 20640  006CCC  2373               	addwfc	(??_setServoState+1)& (0+255),f,b
 20641  006CCE  0E13               	movlw	19
 20642  006CD0  2572               	addwf	??_setServoState& (0+255),w,b
 20643  006CD2  6ED9               	movwf	fsr2l,c
 20644  006CD4  0E00               	movlw	0
 20645  006CD6  2173               	addwfc	(??_setServoState+1)& (0+255),w,b
 20646  006CD8  6EDA               	movwf	fsr2h,c
 20647  006CDA  0E70               	movlw	low _targetPos
 20648  006CDC  2574               	addwf	setServoState@io& (0+255),w,b
 20649  006CDE  6EE1               	movwf	fsr1l,c
 20650  006CE0  6AE2               	clrf	fsr1h,c
 20651  006CE2  0E01               	movlw	high _targetPos
 20652  006CE4  22E2               	addwfc	fsr1h,f,c
 20653  006CE6  CFDF FFE7          	movff	indf2,indf1
 20654  006CEA  0012               	return	
 20655  006CEC                     l18653:
 20656  006CEC  0100               	movlb	0	; () banked
 20657  006CEE  5171               	movf	setServoState@action& (0+255),w,b
 20658                           
 20659                           ; Switch size 1, requested type "simple"
 20660                           ; Number of cases is 2, Range of values is 1 to 2
 20661                           ; switch strategies available:
 20662                           ; Name         Instructions Cycles
 20663                           ; simple_byte            7     4 (average)
 20664                           ;	Chosen strategy is simple_byte
 20665  006CF0  0A01               	xorlw	1	; case 1
 20666  006CF2  B4D8               	btfsc	status,2,c
 20667  006CF4  D7B7               	goto	l18645
 20668  006CF6  0A03               	xorlw	3	; case 2
 20669  006CF8  A4D8               	btfss	status,2,c
 20670  006CFA  0012               	return	
 20671  006CFC  D76F               	goto	l18639
 20672  006CFE                     __end_of_setServoState:
 20673                           	callstack 0
 20674                           
 20675 ;; *************** function _setMultiState *****************
 20676 ;; Defined at:
 20677 ;;		line 598 in file "../../github/CANMIOfirmware/servo.c"
 20678 ;; Parameters:    Size  Location     Type
 20679 ;;  io              1    wreg     unsigned char 
 20680 ;;  action          1   17[BANK0 ] unsigned char 
 20681 ;; Auto vars:     Size  Location     Type
 20682 ;;  io              1   21[BANK0 ] unsigned char 
 20683 ;; Return value:  Size  Location     Type
 20684 ;;                  1    wreg      void 
 20685 ;; Registers used:
 20686 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 20687 ;; Tracked objects:
 20688 ;;		On entry : 3F/0
 20689 ;;		On exit  : 3F/0
 20690 ;;		Unchanged: 0/0
 20691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 20692 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20693 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20694 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20695 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20696 ;;Total ram usage:        5 bytes
 20697 ;; Hardware stack levels used: 1
 20698 ;; Hardware stack levels required when called: 8
 20699 ;; This function calls:
 20700 ;;		Nothing
 20701 ;; This function is called by:
 20702 ;;		_actUponNVchange
 20703 ;;		_setOutputState
 20704 ;; This function uses a non-reentrant model
 20705 ;;
 20706                           
 20707                           	psect	text85
 20708  006AA2                     __ptext85:
 20709                           	callstack 0
 20710  006AA2                     _setMultiState:
 20711                           	callstack 20
 20712                           
 20713                           ; BSR set to: 0
 20714                           ;incstack = 0
 20715                           ;setMultiState@io stored from wreg
 20716  006AA2  6F75               	movwf	setMultiState@io& (0+255),b
 20717                           
 20718                           ;servo.c: 599: switch (action) {
 20719  006AA4  D08A               	goto	l18723
 20720  006AA6                     l18709:
 20721                           
 20722                           ; BSR set to: 0
 20723                           ;servo.c: 601: targetPos[io] = NV->io[io].nv_io.nv_multi.multi_pos1;
 20724  006AA6  5175               	movf	setMultiState@io& (0+255),w,b
 20725  006AA8  0D07               	mullw	7
 20726  006AAA  C0EC  F072         	movff	_NV,??_setMultiState
 20727  006AAE  C0ED  F073         	movff	_NV+1,??_setMultiState+1
 20728  006AB2  50F3               	movf	243,w,c
 20729  006AB4  2772               	addwf	??_setMultiState& (0+255),f,b
 20730  006AB6  50F4               	movf	244,w,c
 20731  006AB8  2373               	addwfc	(??_setMultiState+1)& (0+255),f,b
 20732  006ABA  0E13               	movlw	19
 20733  006ABC  2572               	addwf	??_setMultiState& (0+255),w,b
 20734  006ABE  6ED9               	movwf	fsr2l,c
 20735  006AC0  0E00               	movlw	0
 20736  006AC2  2173               	addwfc	(??_setMultiState+1)& (0+255),w,b
 20737  006AC4  6EDA               	movwf	fsr2h,c
 20738  006AC6  0E70               	movlw	low _targetPos
 20739  006AC8  2575               	addwf	setMultiState@io& (0+255),w,b
 20740  006ACA  6EE1               	movwf	fsr1l,c
 20741  006ACC  6AE2               	clrf	fsr1h,c
 20742  006ACE  0E01               	movlw	high _targetPos
 20743  006AD0  22E2               	addwfc	fsr1h,f,c
 20744  006AD2  CFDF FFE7          	movff	indf2,indf1
 20745                           
 20746                           ;servo.c: 602: break;
 20747  006AD6  0012               	return	
 20748  006AD8                     l18711:
 20749                           
 20750                           ; BSR set to: 0
 20751                           ;servo.c: 604: targetPos[io] = NV->io[io].nv_io.nv_multi.multi_pos2;
 20752  006AD8  5175               	movf	setMultiState@io& (0+255),w,b
 20753  006ADA  0D07               	mullw	7
 20754  006ADC  C0EC  F072         	movff	_NV,??_setMultiState
 20755  006AE0  C0ED  F073         	movff	_NV+1,??_setMultiState+1
 20756  006AE4  50F3               	movf	243,w,c
 20757  006AE6  2772               	addwf	??_setMultiState& (0+255),f,b
 20758  006AE8  50F4               	movf	244,w,c
 20759  006AEA  2373               	addwfc	(??_setMultiState+1)& (0+255),f,b
 20760  006AEC  0E14               	movlw	20
 20761  006AEE  2572               	addwf	??_setMultiState& (0+255),w,b
 20762  006AF0  6ED9               	movwf	fsr2l,c
 20763  006AF2  0E00               	movlw	0
 20764  006AF4  2173               	addwfc	(??_setMultiState+1)& (0+255),w,b
 20765  006AF6  6EDA               	movwf	fsr2h,c
 20766  006AF8  0E70               	movlw	low _targetPos
 20767  006AFA  2575               	addwf	setMultiState@io& (0+255),w,b
 20768  006AFC  6EE1               	movwf	fsr1l,c
 20769  006AFE  6AE2               	clrf	fsr1h,c
 20770  006B00  0E01               	movlw	high _targetPos
 20771  006B02  22E2               	addwfc	fsr1h,f,c
 20772  006B04  CFDF FFE7          	movff	indf2,indf1
 20773                           
 20774                           ;servo.c: 605: break;
 20775  006B08  0012               	return	
 20776  006B0A                     l18713:
 20777                           
 20778                           ; BSR set to: 0
 20779                           ;servo.c: 607: if (NV->io[io].nv_io.nv_multi.multi_num_pos >= 3) {
 20780  006B0A  5175               	movf	setMultiState@io& (0+255),w,b
 20781  006B0C  0D07               	mullw	7
 20782  006B0E  C0EC  F072         	movff	_NV,??_setMultiState
 20783  006B12  C0ED  F073         	movff	_NV+1,??_setMultiState+1
 20784  006B16  50F3               	movf	243,w,c
 20785  006B18  2772               	addwf	??_setMultiState& (0+255),f,b
 20786  006B1A  50F4               	movf	244,w,c
 20787  006B1C  2373               	addwfc	(??_setMultiState+1)& (0+255),f,b
 20788  006B1E  0E12               	movlw	18
 20789  006B20  2572               	addwf	??_setMultiState& (0+255),w,b
 20790  006B22  6ED9               	movwf	fsr2l,c
 20791  006B24  0E00               	movlw	0
 20792  006B26  2173               	addwfc	(??_setMultiState+1)& (0+255),w,b
 20793  006B28  6EDA               	movwf	fsr2h,c
 20794  006B2A  0E02               	movlw	2
 20795  006B2C  64DF               	cpfsgt	indf2,c
 20796  006B2E  0012               	return	
 20797                           
 20798                           ; BSR set to: 0
 20799                           ;servo.c: 608: targetPos[io] = NV->io[io].nv_io.nv_multi.multi_pos3;
 20800  006B30  5175               	movf	setMultiState@io& (0+255),w,b
 20801  006B32  0D07               	mullw	7
 20802  006B34  C0EC  F072         	movff	_NV,??_setMultiState
 20803  006B38  C0ED  F073         	movff	_NV+1,??_setMultiState+1
 20804  006B3C  50F3               	movf	243,w,c
 20805  006B3E  2772               	addwf	??_setMultiState& (0+255),f,b
 20806  006B40  50F4               	movf	244,w,c
 20807  006B42  2373               	addwfc	(??_setMultiState+1)& (0+255),f,b
 20808  006B44  0E15               	movlw	21
 20809  006B46  2572               	addwf	??_setMultiState& (0+255),w,b
 20810  006B48  6ED9               	movwf	fsr2l,c
 20811  006B4A  0E00               	movlw	0
 20812  006B4C  2173               	addwfc	(??_setMultiState+1)& (0+255),w,b
 20813  006B4E  6EDA               	movwf	fsr2h,c
 20814  006B50  0E70               	movlw	low _targetPos
 20815  006B52  2575               	addwf	setMultiState@io& (0+255),w,b
 20816  006B54  6EE1               	movwf	fsr1l,c
 20817  006B56  6AE2               	clrf	fsr1h,c
 20818  006B58  0E01               	movlw	high _targetPos
 20819  006B5A  22E2               	addwfc	fsr1h,f,c
 20820  006B5C  CFDF FFE7          	movff	indf2,indf1
 20821  006B60  0012               	return	
 20822  006B62                     l18717:
 20823                           
 20824                           ; BSR set to: 0
 20825                           ;servo.c: 612: if (NV->io[io].nv_io.nv_multi.multi_num_pos >= 4) {
 20826  006B62  5175               	movf	setMultiState@io& (0+255),w,b
 20827  006B64  0D07               	mullw	7
 20828  006B66  C0EC  F072         	movff	_NV,??_setMultiState
 20829  006B6A  C0ED  F073         	movff	_NV+1,??_setMultiState+1
 20830  006B6E  50F3               	movf	243,w,c
 20831  006B70  2772               	addwf	??_setMultiState& (0+255),f,b
 20832  006B72  50F4               	movf	244,w,c
 20833  006B74  2373               	addwfc	(??_setMultiState+1)& (0+255),f,b
 20834  006B76  0E12               	movlw	18
 20835  006B78  2572               	addwf	??_setMultiState& (0+255),w,b
 20836  006B7A  6ED9               	movwf	fsr2l,c
 20837  006B7C  0E00               	movlw	0
 20838  006B7E  2173               	addwfc	(??_setMultiState+1)& (0+255),w,b
 20839  006B80  6EDA               	movwf	fsr2h,c
 20840  006B82  0E03               	movlw	3
 20841  006B84  64DF               	cpfsgt	indf2,c
 20842  006B86  0012               	return	
 20843                           
 20844                           ; BSR set to: 0
 20845                           ;servo.c: 613: targetPos[io] = NV->io[io].nv_io.nv_multi.multi_pos4;
 20846  006B88  5175               	movf	setMultiState@io& (0+255),w,b
 20847  006B8A  0D07               	mullw	7
 20848  006B8C  C0EC  F072         	movff	_NV,??_setMultiState
 20849  006B90  C0ED  F073         	movff	_NV+1,??_setMultiState+1
 20850  006B94  50F3               	movf	243,w,c
 20851  006B96  2772               	addwf	??_setMultiState& (0+255),f,b
 20852  006B98  50F4               	movf	244,w,c
 20853  006B9A  2373               	addwfc	(??_setMultiState+1)& (0+255),f,b
 20854  006B9C  0E16               	movlw	22
 20855  006B9E  2572               	addwf	??_setMultiState& (0+255),w,b
 20856  006BA0  6ED9               	movwf	fsr2l,c
 20857  006BA2  0E00               	movlw	0
 20858  006BA4  2173               	addwfc	(??_setMultiState+1)& (0+255),w,b
 20859  006BA6  6EDA               	movwf	fsr2h,c
 20860  006BA8  0E70               	movlw	low _targetPos
 20861  006BAA  2575               	addwf	setMultiState@io& (0+255),w,b
 20862  006BAC  6EE1               	movwf	fsr1l,c
 20863  006BAE  6AE2               	clrf	fsr1h,c
 20864  006BB0  0E01               	movlw	high _targetPos
 20865  006BB2  22E2               	addwfc	fsr1h,f,c
 20866  006BB4  CFDF FFE7          	movff	indf2,indf1
 20867  006BB8  0012               	return	
 20868  006BBA                     l18723:
 20869  006BBA  0100               	movlb	0	; () banked
 20870  006BBC  5171               	movf	setMultiState@action& (0+255),w,b
 20871                           
 20872                           ; Switch size 1, requested type "simple"
 20873                           ; Number of cases is 4, Range of values is 0 to 3
 20874                           ; switch strategies available:
 20875                           ; Name         Instructions Cycles
 20876                           ; simple_byte           13     7 (average)
 20877                           ;	Chosen strategy is simple_byte
 20878  006BBE  0A00               	xorlw	0	; case 0
 20879  006BC0  B4D8               	btfsc	status,2,c
 20880  006BC2  D771               	goto	l18709
 20881  006BC4  0A01               	xorlw	1	; case 1
 20882  006BC6  B4D8               	btfsc	status,2,c
 20883  006BC8  D787               	goto	l18711
 20884  006BCA  0A03               	xorlw	3	; case 2
 20885  006BCC  B4D8               	btfsc	status,2,c
 20886  006BCE  D79D               	goto	l18713
 20887  006BD0  0A01               	xorlw	1	; case 3
 20888  006BD2  A4D8               	btfss	status,2,c
 20889  006BD4  0012               	return	
 20890  006BD6  D7C5               	goto	l18717
 20891  006BD8                     __end_of_setMultiState:
 20892                           	callstack 0
 20893                           
 20894 ;; *************** function _setBounceState *****************
 20895 ;; Defined at:
 20896 ;;		line 574 in file "../../github/CANMIOfirmware/servo.c"
 20897 ;; Parameters:    Size  Location     Type
 20898 ;;  io              1    wreg     unsigned char 
 20899 ;;  action          1   17[BANK0 ] unsigned char 
 20900 ;; Auto vars:     Size  Location     Type
 20901 ;;  io              1   20[BANK0 ] unsigned char 
 20902 ;; Return value:  Size  Location     Type
 20903 ;;                  1    wreg      void 
 20904 ;; Registers used:
 20905 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 20906 ;; Tracked objects:
 20907 ;;		On entry : 3F/0
 20908 ;;		On exit  : 3F/0
 20909 ;;		Unchanged: 0/0
 20910 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 20911 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20912 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20913 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20914 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 20915 ;;Total ram usage:        4 bytes
 20916 ;; Hardware stack levels used: 1
 20917 ;; Hardware stack levels required when called: 8
 20918 ;; This function calls:
 20919 ;;		Nothing
 20920 ;; This function is called by:
 20921 ;;		_actUponNVchange
 20922 ;;		_setOutputState
 20923 ;; This function uses a non-reentrant model
 20924 ;;
 20925                           
 20926                           	psect	text86
 20927  006CFE                     __ptext86:
 20928                           	callstack 0
 20929  006CFE                     _setBounceState:
 20930                           	callstack 20
 20931                           
 20932                           ; BSR set to: 0
 20933                           ;incstack = 0
 20934                           ;setBounceState@io stored from wreg
 20935  006CFE  6F74               	movwf	setBounceState@io& (0+255),b
 20936                           
 20937                           ;servo.c: 575: switch (action) {
 20938  006D00  D088               	goto	l18693
 20939  006D02                     l18679:
 20940                           
 20941                           ; BSR set to: 0
 20942                           ;servo.c: 577: if (NV->io[io].flags & 0x01U) {
 20943  006D02  5174               	movf	setBounceState@io& (0+255),w,b
 20944  006D04  0D07               	mullw	7
 20945  006D06  C0EC  F072         	movff	_NV,??_setBounceState
 20946  006D0A  C0ED  F073         	movff	_NV+1,??_setBounceState+1
 20947  006D0E  50F3               	movf	243,w,c
 20948  006D10  2772               	addwf	??_setBounceState& (0+255),f,b
 20949  006D12  50F4               	movf	244,w,c
 20950  006D14  2373               	addwfc	(??_setBounceState+1)& (0+255),f,b
 20951  006D16  0E11               	movlw	17
 20952  006D18  2572               	addwf	??_setBounceState& (0+255),w,b
 20953  006D1A  6ED9               	movwf	fsr2l,c
 20954  006D1C  0E00               	movlw	0
 20955  006D1E  2173               	addwfc	(??_setBounceState+1)& (0+255),w,b
 20956  006D20  6EDA               	movwf	fsr2h,c
 20957  006D22  A0DF               	btfss	indf2,0,c
 20958  006D24  D019               	goto	l18683
 20959                           
 20960                           ; BSR set to: 0
 20961                           ;servo.c: 578: targetPos[io] = NV->io[io].nv_io.nv_bounce.bounce_upper_pos;
 20962  006D26  5174               	movf	setBounceState@io& (0+255),w,b
 20963  006D28  0D07               	mullw	7
 20964  006D2A  C0EC  F072         	movff	_NV,??_setBounceState
 20965  006D2E  C0ED  F073         	movff	_NV+1,??_setBounceState+1
 20966  006D32  50F3               	movf	243,w,c
 20967  006D34  2772               	addwf	??_setBounceState& (0+255),f,b
 20968  006D36  50F4               	movf	244,w,c
 20969  006D38  2373               	addwfc	(??_setBounceState+1)& (0+255),f,b
 20970  006D3A  0E12               	movlw	18
 20971  006D3C  2572               	addwf	??_setBounceState& (0+255),w,b
 20972  006D3E  6ED9               	movwf	fsr2l,c
 20973  006D40  0E00               	movlw	0
 20974  006D42  2173               	addwfc	(??_setBounceState+1)& (0+255),w,b
 20975  006D44  6EDA               	movwf	fsr2h,c
 20976  006D46  0E70               	movlw	low _targetPos
 20977  006D48  2574               	addwf	setBounceState@io& (0+255),w,b
 20978  006D4A  6EE1               	movwf	fsr1l,c
 20979  006D4C  6AE2               	clrf	fsr1h,c
 20980  006D4E  0E01               	movlw	high _targetPos
 20981  006D50  22E2               	addwfc	fsr1h,f,c
 20982  006D52  CFDF FFE7          	movff	indf2,indf1
 20983                           
 20984                           ;servo.c: 579: } else {
 20985  006D56  0012               	return	
 20986  006D58                     l18683:
 20987                           
 20988                           ; BSR set to: 0
 20989                           ;servo.c: 580: targetPos[io] = NV->io[io].nv_io.nv_bounce.bounce_lower_pos;
 20990  006D58  5174               	movf	setBounceState@io& (0+255),w,b
 20991  006D5A  0D07               	mullw	7
 20992  006D5C  C0EC  F072         	movff	_NV,??_setBounceState
 20993  006D60  C0ED  F073         	movff	_NV+1,??_setBounceState+1
 20994  006D64  50F3               	movf	243,w,c
 20995  006D66  2772               	addwf	??_setBounceState& (0+255),f,b
 20996  006D68  50F4               	movf	244,w,c
 20997  006D6A  2373               	addwfc	(??_setBounceState+1)& (0+255),f,b
 20998  006D6C  0E13               	movlw	19
 20999  006D6E  2572               	addwf	??_setBounceState& (0+255),w,b
 21000  006D70  6ED9               	movwf	fsr2l,c
 21001  006D72  0E00               	movlw	0
 21002  006D74  2173               	addwfc	(??_setBounceState+1)& (0+255),w,b
 21003  006D76  6EDA               	movwf	fsr2h,c
 21004  006D78  0E70               	movlw	low _targetPos
 21005  006D7A  2574               	addwf	setBounceState@io& (0+255),w,b
 21006  006D7C  6EE1               	movwf	fsr1l,c
 21007  006D7E  6AE2               	clrf	fsr1h,c
 21008  006D80  0E01               	movlw	high _targetPos
 21009  006D82  22E2               	addwfc	fsr1h,f,c
 21010  006D84  CFDF FFE7          	movff	indf2,indf1
 21011  006D88  0012               	return	
 21012  006D8A                     l18685:
 21013                           
 21014                           ; BSR set to: 0
 21015                           ;servo.c: 584: if (NV->io[io].flags & 0x01U) {
 21016  006D8A  5174               	movf	setBounceState@io& (0+255),w,b
 21017  006D8C  0D07               	mullw	7
 21018  006D8E  C0EC  F072         	movff	_NV,??_setBounceState
 21019  006D92  C0ED  F073         	movff	_NV+1,??_setBounceState+1
 21020  006D96  50F3               	movf	243,w,c
 21021  006D98  2772               	addwf	??_setBounceState& (0+255),f,b
 21022  006D9A  50F4               	movf	244,w,c
 21023  006D9C  2373               	addwfc	(??_setBounceState+1)& (0+255),f,b
 21024  006D9E  0E11               	movlw	17
 21025  006DA0  2572               	addwf	??_setBounceState& (0+255),w,b
 21026  006DA2  6ED9               	movwf	fsr2l,c
 21027  006DA4  0E00               	movlw	0
 21028  006DA6  2173               	addwfc	(??_setBounceState+1)& (0+255),w,b
 21029  006DA8  6EDA               	movwf	fsr2h,c
 21030  006DAA  A0DF               	btfss	indf2,0,c
 21031  006DAC  D019               	goto	l18689
 21032                           
 21033                           ; BSR set to: 0
 21034                           ;servo.c: 585: targetPos[io] = NV->io[io].nv_io.nv_bounce.bounce_lower_pos;
 21035  006DAE  5174               	movf	setBounceState@io& (0+255),w,b
 21036  006DB0  0D07               	mullw	7
 21037  006DB2  C0EC  F072         	movff	_NV,??_setBounceState
 21038  006DB6  C0ED  F073         	movff	_NV+1,??_setBounceState+1
 21039  006DBA  50F3               	movf	243,w,c
 21040  006DBC  2772               	addwf	??_setBounceState& (0+255),f,b
 21041  006DBE  50F4               	movf	244,w,c
 21042  006DC0  2373               	addwfc	(??_setBounceState+1)& (0+255),f,b
 21043  006DC2  0E13               	movlw	19
 21044  006DC4  2572               	addwf	??_setBounceState& (0+255),w,b
 21045  006DC6  6ED9               	movwf	fsr2l,c
 21046  006DC8  0E00               	movlw	0
 21047  006DCA  2173               	addwfc	(??_setBounceState+1)& (0+255),w,b
 21048  006DCC  6EDA               	movwf	fsr2h,c
 21049  006DCE  0E70               	movlw	low _targetPos
 21050  006DD0  2574               	addwf	setBounceState@io& (0+255),w,b
 21051  006DD2  6EE1               	movwf	fsr1l,c
 21052  006DD4  6AE2               	clrf	fsr1h,c
 21053  006DD6  0E01               	movlw	high _targetPos
 21054  006DD8  22E2               	addwfc	fsr1h,f,c
 21055  006DDA  CFDF FFE7          	movff	indf2,indf1
 21056                           
 21057                           ;servo.c: 586: } else {
 21058  006DDE  0012               	return	
 21059  006DE0                     l18689:
 21060                           
 21061                           ; BSR set to: 0
 21062                           ;servo.c: 587: targetPos[io] = NV->io[io].nv_io.nv_bounce.bounce_upper_pos;
 21063  006DE0  5174               	movf	setBounceState@io& (0+255),w,b
 21064  006DE2  0D07               	mullw	7
 21065  006DE4  C0EC  F072         	movff	_NV,??_setBounceState
 21066  006DE8  C0ED  F073         	movff	_NV+1,??_setBounceState+1
 21067  006DEC  50F3               	movf	243,w,c
 21068  006DEE  2772               	addwf	??_setBounceState& (0+255),f,b
 21069  006DF0  50F4               	movf	244,w,c
 21070  006DF2  2373               	addwfc	(??_setBounceState+1)& (0+255),f,b
 21071  006DF4  0E12               	movlw	18
 21072  006DF6  2572               	addwf	??_setBounceState& (0+255),w,b
 21073  006DF8  6ED9               	movwf	fsr2l,c
 21074  006DFA  0E00               	movlw	0
 21075  006DFC  2173               	addwfc	(??_setBounceState+1)& (0+255),w,b
 21076  006DFE  6EDA               	movwf	fsr2h,c
 21077  006E00  0E70               	movlw	low _targetPos
 21078  006E02  2574               	addwf	setBounceState@io& (0+255),w,b
 21079  006E04  6EE1               	movwf	fsr1l,c
 21080  006E06  6AE2               	clrf	fsr1h,c
 21081  006E08  0E01               	movlw	high _targetPos
 21082  006E0A  22E2               	addwfc	fsr1h,f,c
 21083  006E0C  CFDF FFE7          	movff	indf2,indf1
 21084  006E10  0012               	return	
 21085  006E12                     l18693:
 21086  006E12  0100               	movlb	0	; () banked
 21087  006E14  5171               	movf	setBounceState@action& (0+255),w,b
 21088                           
 21089                           ; Switch size 1, requested type "simple"
 21090                           ; Number of cases is 2, Range of values is 1 to 2
 21091                           ; switch strategies available:
 21092                           ; Name         Instructions Cycles
 21093                           ; simple_byte            7     4 (average)
 21094                           ;	Chosen strategy is simple_byte
 21095  006E16  0A01               	xorlw	1	; case 1
 21096  006E18  B4D8               	btfsc	status,2,c
 21097  006E1A  D7B7               	goto	l18685
 21098  006E1C  0A03               	xorlw	3	; case 2
 21099  006E1E  A4D8               	btfss	status,2,c
 21100  006E20  0012               	return	
 21101  006E22  D76F               	goto	l18679
 21102  006E24                     __end_of_setBounceState:
 21103                           	callstack 0
 21104                           
 21105 ;; *************** function ___lbdiv *****************
 21106 ;; Defined at:
 21107 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\lbdiv.c"
 21108 ;; Parameters:    Size  Location     Type
 21109 ;;  dividend        1    wreg     unsigned char 
 21110 ;;  divisor         1   17[BANK0 ] unsigned char 
 21111 ;; Auto vars:     Size  Location     Type
 21112 ;;  dividend        1   18[BANK0 ] unsigned char 
 21113 ;;  quotient        1   20[BANK0 ] unsigned char 
 21114 ;;  counter         1   19[BANK0 ] unsigned char 
 21115 ;; Return value:  Size  Location     Type
 21116 ;;                  1    wreg      unsigned char 
 21117 ;; Registers used:
 21118 ;;		wreg, status,2, status,0
 21119 ;; Tracked objects:
 21120 ;;		On entry : 3F/0
 21121 ;;		On exit  : 3F/0
 21122 ;;		Unchanged: 0/0
 21123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 21124 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21125 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21126 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21127 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21128 ;;Total ram usage:        4 bytes
 21129 ;; Hardware stack levels used: 1
 21130 ;; Hardware stack levels required when called: 8
 21131 ;; This function calls:
 21132 ;;		Nothing
 21133 ;; This function is called by:
 21134 ;;		_actUponNVchange
 21135 ;; This function uses a non-reentrant model
 21136 ;;
 21137                           
 21138                           	psect	text87
 21139  009EE2                     __ptext87:
 21140                           	callstack 0
 21141  009EE2                     ___lbdiv:
 21142                           	callstack 17
 21143                           
 21144                           ; BSR set to: 0
 21145                           ;incstack = 0
 21146                           ;___lbdiv@dividend stored from wreg
 21147  009EE2  6F72               	movwf	___lbdiv@dividend& (0+255),b
 21148  009EE4  0E00               	movlw	0
 21149  009EE6  0100               	movlb	0	; () banked
 21150  009EE8  6F74               	movwf	___lbdiv@quotient& (0+255),b
 21151                           
 21152                           ; BSR set to: 0
 21153  009EEA  5171               	movf	___lbdiv@divisor& (0+255),w,b
 21154  009EEC  B4D8               	btfsc	status,2,c
 21155  009EEE  D015               	goto	l18771
 21156                           
 21157                           ; BSR set to: 0
 21158  009EF0  0E01               	movlw	1
 21159  009EF2  6F73               	movwf	___lbdiv@counter& (0+255),b
 21160  009EF4  D003               	goto	l18759
 21161  009EF6                     l18755:
 21162                           
 21163                           ; BSR set to: 0
 21164  009EF6  90D8               	bcf	status,0,c
 21165  009EF8  3771               	rlcf	___lbdiv@divisor& (0+255),f,b
 21166                           
 21167                           ; BSR set to: 0
 21168  009EFA  2B73               	incf	___lbdiv@counter& (0+255),f,b
 21169  009EFC                     l18759:
 21170                           
 21171                           ; BSR set to: 0
 21172  009EFC  AF71               	btfss	___lbdiv@divisor& (0+255),7,b
 21173  009EFE  D7FB               	goto	l18755
 21174  009F00                     u23230:
 21175                           
 21176                           ; BSR set to: 0
 21177  009F00  90D8               	bcf	status,0,c
 21178  009F02  3774               	rlcf	___lbdiv@quotient& (0+255),f,b
 21179  009F04  5171               	movf	___lbdiv@divisor& (0+255),w,b
 21180  009F06  5D72               	subwf	___lbdiv@dividend& (0+255),w,b
 21181  009F08  A0D8               	btfss	status,0,c
 21182  009F0A  D003               	goto	l18767
 21183                           
 21184                           ; BSR set to: 0
 21185  009F0C  5171               	movf	___lbdiv@divisor& (0+255),w,b
 21186  009F0E  5F72               	subwf	___lbdiv@dividend& (0+255),f,b
 21187                           
 21188                           ; BSR set to: 0
 21189  009F10  8174               	bsf	___lbdiv@quotient& (0+255),0,b
 21190  009F12                     l18767:
 21191                           
 21192                           ; BSR set to: 0
 21193  009F12  90D8               	bcf	status,0,c
 21194  009F14  3371               	rrcf	___lbdiv@divisor& (0+255),f,b
 21195                           
 21196                           ; BSR set to: 0
 21197  009F16  2F73               	decfsz	___lbdiv@counter& (0+255),f,b
 21198  009F18  D7F3               	goto	u23230
 21199  009F1A                     l18771:
 21200                           
 21201                           ; BSR set to: 0
 21202  009F1A  5174               	movf	___lbdiv@quotient& (0+255),w,b
 21203                           
 21204                           ; BSR set to: 0
 21205  009F1C  0012               	return		;funcret
 21206  009F1E                     __end_of___lbdiv:
 21207                           	callstack 0
 21208                           
 21209 ;; *************** function _doNvrd *****************
 21210 ;; Defined at:
 21211 ;;		line 590 in file "../../github/CBUSlib/FliM.c"
 21212 ;; Parameters:    Size  Location     Type
 21213 ;;  NVindex         1    wreg     unsigned char 
 21214 ;; Auto vars:     Size  Location     Type
 21215 ;;  NVindex         1   54[BANK0 ] unsigned char 
 21216 ;;  flashIndex      2   52[BANK0 ] unsigned int 
 21217 ;; Return value:  Size  Location     Type
 21218 ;;                  1    wreg      void 
 21219 ;; Registers used:
 21220 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 21221 ;; Tracked objects:
 21222 ;;		On entry : 3F/0
 21223 ;;		On exit  : 3F/0
 21224 ;;		Unchanged: 0/0
 21225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 21226 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21227 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21228 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21229 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21230 ;;Total ram usage:        3 bytes
 21231 ;; Hardware stack levels used: 1
 21232 ;; Hardware stack levels required when called: 14
 21233 ;; This function calls:
 21234 ;;		_cbusSendMsgMyNN
 21235 ;;		_doError
 21236 ;;		_readFlashBlock
 21237 ;; This function is called by:
 21238 ;;		_parseFLiMCmd
 21239 ;; This function uses a non-reentrant model
 21240 ;;
 21241                           
 21242                           	psect	text88
 21243  009BB8                     __ptext88:
 21244                           	callstack 0
 21245  009BB8                     _doNvrd:
 21246                           	callstack 13
 21247                           
 21248                           ; BSR set to: 0
 21249                           ;incstack = 0
 21250                           ;doNvrd@NVindex stored from wreg
 21251  009BB8  6F96               	movwf	doNvrd@NVindex& (0+255),b
 21252                           
 21253                           ;FliM.c: 593: if ((NVindex == 0) || (NVindex >= sizeof(ModuleNvDefs)))
 21254  009BBA  0100               	movlb	0	; () banked
 21255  009BBC  5196               	movf	doNvrd@NVindex& (0+255),w,b
 21256  009BBE  B4D8               	btfsc	status,2,c
 21257  009BC0  D003               	goto	u24450
 21258                           
 21259                           ; BSR set to: 0
 21260  009BC2  0E7F               	movlw	127
 21261  009BC4  6596               	cpfsgt	doNvrd@NVindex& (0+255),b
 21262  009BC6  D004               	goto	l19697
 21263  009BC8                     u24450:
 21264                           
 21265                           ; BSR set to: 0
 21266                           ;FliM.c: 594: {;FliM.c: 595: doError(10);
 21267  009BC8  0E0A               	movlw	10
 21268  009BCA  EC5C  F052         	call	_doError
 21269                           
 21270                           ;FliM.c: 596: }
 21271  009BCE  0012               	return	
 21272  009BD0                     l19697:
 21273                           
 21274                           ; BSR set to: 0
 21275                           ;FliM.c: 597: else;FliM.c: 598: {;FliM.c: 599: WORD flashIndex;;FliM.c: 600: flashIndex 
      +                          = 0xFF80U;
 21276  009BD0  0EFF               	movlw	255
 21277  009BD2  6F95               	movwf	(doNvrd@flashIndex+1)& (0+255),b
 21278  009BD4  0E80               	movlw	128
 21279  009BD6  6F94               	movwf	doNvrd@flashIndex& (0+255),b
 21280                           
 21281                           ; BSR set to: 0
 21282                           ;FliM.c: 601: flashIndex += NVindex;
 21283  009BD8  5196               	movf	doNvrd@NVindex& (0+255),w,b
 21284  009BDA  2794               	addwf	doNvrd@flashIndex& (0+255),f,b
 21285  009BDC  0E00               	movlw	0
 21286  009BDE  2395               	addwfc	(doNvrd@flashIndex+1)& (0+255),f,b
 21287                           
 21288                           ; BSR set to: 0
 21289                           ;FliM.c: 604: cbusMsg[d0] = 0x97;
 21290  009BE0  0E97               	movlw	151
 21291  009BE2  6E22               	movwf	(_cbusMsg+6)^0,c
 21292                           
 21293                           ; BSR set to: 0
 21294                           ;FliM.c: 605: cbusMsg[d3] = NVindex;
 21295  009BE4  C096  F025         	movff	doNvrd@NVindex,_cbusMsg+9
 21296                           
 21297                           ; BSR set to: 0
 21298                           ;FliM.c: 606: cbusMsg[d4] = readFlashBlock(flashIndex);
 21299  009BE8  C094  F076         	movff	doNvrd@flashIndex,readFlashBlock@flashAddr
 21300  009BEC  C095  F077         	movff	doNvrd@flashIndex+1,readFlashBlock@flashAddr+1
 21301  009BF0  EC8D  F03D         	call	_readFlashBlock	;wreg free
 21302  009BF4  6E26               	movwf	(_cbusMsg+10)^0,c
 21303                           
 21304                           ; BSR set to: 0
 21305                           ;FliM.c: 607: cbusSendMsgMyNN( 0, cbusMsg );
 21306  009BF6  0E1C               	movlw	low _cbusMsg
 21307  009BF8  6F8F               	movwf	cbusSendMsgMyNN@msg& (0+255),b
 21308  009BFA  0E00               	movlw	0
 21309  009BFC  EC8A  F051         	call	_cbusSendMsgMyNN
 21310                           
 21311                           ; BSR set to: 0
 21312  009C00  0012               	return		;funcret
 21313  009C02                     __end_of_doNvrd:
 21314                           	callstack 0
 21315                           
 21316 ;; *************** function _doNnevn *****************
 21317 ;; Defined at:
 21318 ;;		line 319 in file "../../github/CBUSlib/events.c"
 21319 ;; Parameters:    Size  Location     Type
 21320 ;;		None
 21321 ;; Auto vars:     Size  Location     Type
 21322 ;;  f               1   54[BANK0 ] struct .
 21323 ;;  i               1   56[BANK0 ] unsigned char 
 21324 ;;  count           1   55[BANK0 ] unsigned char 
 21325 ;; Return value:  Size  Location     Type
 21326 ;;                  1    wreg      void 
 21327 ;; Registers used:
 21328 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 21329 ;; Tracked objects:
 21330 ;;		On entry : 3F/0
 21331 ;;		On exit  : 3F/0
 21332 ;;		Unchanged: 0/0
 21333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 21334 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21335 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21336 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21337 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21338 ;;Total ram usage:        5 bytes
 21339 ;; Hardware stack levels used: 1
 21340 ;; Hardware stack levels required when called: 14
 21341 ;; This function calls:
 21342 ;;		_cbusSendOpcMyNN
 21343 ;;		_readFlashBlock
 21344 ;; This function is called by:
 21345 ;;		_parseFLiMCmd
 21346 ;; This function uses a non-reentrant model
 21347 ;;
 21348                           
 21349                           	psect	text89
 21350  009C4A                     __ptext89:
 21351                           	callstack 0
 21352  009C4A                     _doNnevn:
 21353                           	callstack 13
 21354                           
 21355                           ; BSR set to: 0
 21356                           ;events.c: 322: unsigned char count = 0;
 21357                           
 21358                           ; BSR set to: 0
 21359                           ;incstack = 0
 21360  009C4A  0E00               	movlw	0
 21361  009C4C  6F97               	movwf	doNnevn@count& (0+255),b
 21362                           
 21363                           ;events.c: 323: unsigned char i;;events.c: 324: for (i=0; i<255U; i++) {
 21364  009C4E  0E00               	movlw	0
 21365  009C50  6F98               	movwf	doNnevn@i& (0+255),b
 21366  009C52                     l19539:
 21367                           
 21368                           ; BSR set to: 0
 21369                           ;events.c: 325: EventTableFlags f;;events.c: 326: f.asByte = readFlashBlock((WORD)(& (ev
      +                          entTable[i].flags.asByte)));
 21370  009C52  5198               	movf	doNnevn@i& (0+255),w,b
 21371  009C54  0D10               	mullw	16
 21372  009C56  CFF3 F094          	movff	prodl,??_doNnevn
 21373  009C5A  CFF4 F095          	movff	prodh,??_doNnevn+1
 21374  009C5E  51E9               	movf	_eventTable& (0+255),w,b
 21375  009C60  2594               	addwf	??_doNnevn& (0+255),w,b
 21376  009C62  6F76               	movwf	readFlashBlock@flashAddr& (0+255),b
 21377  009C64  51EA               	movf	(_eventTable+1)& (0+255),w,b
 21378  009C66  2195               	addwfc	(??_doNnevn+1)& (0+255),w,b
 21379  009C68  6F77               	movwf	(readFlashBlock@flashAddr+1)& (0+255),b
 21380  009C6A  EC8D  F03D         	call	_readFlashBlock	;wreg free
 21381  009C6E  6F96               	movwf	doNnevn@f& (0+255),b
 21382                           
 21383                           ; BSR set to: 0
 21384                           ;events.c: 327: if (f.freeEntry) {
 21385  009C70  BF96               	btfsc	doNnevn@f& (0+255),7,b
 21386                           
 21387                           ; BSR set to: 0
 21388                           ;events.c: 328: count++;
 21389  009C72  2B97               	incf	doNnevn@count& (0+255),f,b
 21390                           
 21391                           ; BSR set to: 0
 21392  009C74  2B98               	incf	doNnevn@i& (0+255),f,b
 21393                           
 21394                           ; BSR set to: 0
 21395  009C76  2998               	incf	doNnevn@i& (0+255),w,b
 21396  009C78  A4D8               	btfss	status,2,c
 21397  009C7A  D7EB               	goto	l19539
 21398                           
 21399                           ; BSR set to: 0
 21400                           ;events.c: 329: };events.c: 330: };events.c: 331: cbusMsg[d3] = count;
 21401  009C7C  C097  F025         	movff	doNnevn@count,_cbusMsg+9
 21402                           
 21403                           ; BSR set to: 0
 21404                           ;events.c: 332: cbusSendOpcMyNN( 0, 0x70, cbusMsg );
 21405  009C80  0E70               	movlw	112
 21406  009C82  6F91               	movwf	cbusSendOpcMyNN@opc& (0+255),b
 21407  009C84  0E1C               	movlw	low _cbusMsg
 21408  009C86  6F92               	movwf	cbusSendOpcMyNN@msg& (0+255),b
 21409  009C88  0E00               	movlw	0
 21410  009C8A  EC6B  F052         	call	_cbusSendOpcMyNN
 21411                           
 21412                           ; BSR set to: 0
 21413  009C8E  0012               	return		;funcret
 21414  009C90                     __end_of_doNnevn:
 21415                           	callstack 0
 21416                           
 21417 ;; *************** function _doNnclr *****************
 21418 ;; Defined at:
 21419 ;;		line 780 in file "../../github/CBUSlib/FliM.c"
 21420 ;; Parameters:    Size  Location     Type
 21421 ;;		None
 21422 ;; Auto vars:     Size  Location     Type
 21423 ;;		None
 21424 ;; Return value:  Size  Location     Type
 21425 ;;                  1    wreg      void 
 21426 ;; Registers used:
 21427 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 21428 ;; Tracked objects:
 21429 ;;		On entry : 3F/0
 21430 ;;		On exit  : 3F/0
 21431 ;;		Unchanged: 0/0
 21432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 21433 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21434 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21435 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21436 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21437 ;;Total ram usage:        0 bytes
 21438 ;; Hardware stack levels used: 1
 21439 ;; Hardware stack levels required when called: 17
 21440 ;; This function calls:
 21441 ;;		_cbusSendOpcMyNN
 21442 ;;		_clearAllEvents
 21443 ;; This function is called by:
 21444 ;;		_parseFLiMCmd
 21445 ;; This function uses a non-reentrant model
 21446 ;;
 21447                           
 21448                           	psect	text90
 21449  00A16C                     __ptext90:
 21450                           	callstack 0
 21451  00A16C                     _doNnclr:
 21452                           	callstack 10
 21453                           
 21454                           ; BSR set to: 0
 21455                           ;FliM.c: 782: if (flimState == fsFLiMLearn) {
 21456                           
 21457                           ; BSR set to: 0
 21458                           ;incstack = 0
 21459  00A16C  0E07               	movlw	7
 21460  00A16E  1816               	xorwf	_flimState^0,w,c
 21461  00A170  A4D8               	btfss	status,2,c
 21462  00A172  D00A               	goto	l19595
 21463                           
 21464                           ; BSR set to: 0
 21465                           ;FliM.c: 783: clearAllEvents();
 21466  00A174  EC01  F04E         	call	_clearAllEvents	;wreg free
 21467                           
 21468                           ;FliM.c: 784: cbusSendOpcMyNN( 0, 0x59, cbusMsg);
 21469  00A178  0E59               	movlw	89
 21470  00A17A  6F91               	movwf	cbusSendOpcMyNN@opc& (0+255),b
 21471  00A17C  0E1C               	movlw	low _cbusMsg
 21472  00A17E  6F92               	movwf	cbusSendOpcMyNN@msg& (0+255),b
 21473  00A180  0E00               	movlw	0
 21474  00A182  EC6B  F052         	call	_cbusSendOpcMyNN
 21475                           
 21476                           ;FliM.c: 785: }
 21477  00A186  0012               	return	
 21478  00A188                     l19595:
 21479                           
 21480                           ; BSR set to: 0
 21481                           ;FliM.c: 786: else;FliM.c: 787: {;FliM.c: 788: cbusMsg[d3] = 2;
 21482  00A188  0E02               	movlw	2
 21483  00A18A  6E25               	movwf	(_cbusMsg+9)^0,c
 21484                           
 21485                           ; BSR set to: 0
 21486                           ;FliM.c: 789: cbusSendOpcMyNN( 0, 0x6F, cbusMsg);
 21487  00A18C  0E6F               	movlw	111
 21488  00A18E  6F91               	movwf	cbusSendOpcMyNN@opc& (0+255),b
 21489  00A190  0E1C               	movlw	low _cbusMsg
 21490  00A192  6F92               	movwf	cbusSendOpcMyNN@msg& (0+255),b
 21491  00A194  0E00               	movlw	0
 21492  00A196  EC6B  F052         	call	_cbusSendOpcMyNN
 21493                           
 21494                           ; BSR set to: 0
 21495  00A19A  0012               	return		;funcret
 21496  00A19C                     __end_of_doNnclr:
 21497                           	callstack 0
 21498                           
 21499 ;; *************** function _doNerd *****************
 21500 ;; Defined at:
 21501 ;;		line 340 in file "../../github/CBUSlib/events.c"
 21502 ;; Parameters:    Size  Location     Type
 21503 ;;		None
 21504 ;; Auto vars:     Size  Location     Type
 21505 ;;		None
 21506 ;; Return value:  Size  Location     Type
 21507 ;;                  1    wreg      void 
 21508 ;; Registers used:
 21509 ;;		wreg, status,2
 21510 ;; Tracked objects:
 21511 ;;		On entry : 3F/0
 21512 ;;		On exit  : 3F/0
 21513 ;;		Unchanged: 3F/0
 21514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 21515 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21516 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21517 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21518 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21519 ;;Total ram usage:        0 bytes
 21520 ;; Hardware stack levels used: 1
 21521 ;; Hardware stack levels required when called: 8
 21522 ;; This function calls:
 21523 ;;		Nothing
 21524 ;; This function is called by:
 21525 ;;		_parseFLiMCmd
 21526 ;; This function uses a non-reentrant model
 21527 ;;
 21528                           
 21529                           	psect	text91
 21530  00A6C8                     __ptext91:
 21531                           	callstack 0
 21532  00A6C8                     _doNerd:
 21533                           	callstack 19
 21534                           
 21535                           ; BSR set to: 0
 21536                           ;events.c: 341: timedResponse = 2;
 21537                           
 21538                           ; BSR set to: 0
 21539                           ;incstack = 0
 21540  00A6C8  0E02               	movlw	2
 21541  00A6CA  6E14               	movwf	_timedResponse^0,c
 21542                           
 21543                           ;events.c: 342: timedResponseStep = 0;
 21544  00A6CC  0E00               	movlw	0
 21545  00A6CE  6E13               	movwf	_timedResponseStep^0,c
 21546                           
 21547                           ; BSR set to: 0
 21548  00A6D0  0012               	return		;funcret
 21549  00A6D2                     __end_of_doNerd:
 21550                           	callstack 0
 21551                           
 21552 ;; *************** function _doNenrd *****************
 21553 ;; Defined at:
 21554 ;;		line 375 in file "../../github/CBUSlib/events.c"
 21555 ;; Parameters:    Size  Location     Type
 21556 ;;  index           1    wreg     unsigned char 
 21557 ;; Auto vars:     Size  Location     Type
 21558 ;;  index           1   52[BANK0 ] unsigned char 
 21559 ;;  n               2   54[BANK0 ] unsigned int 
 21560 ;;  tableIndex      1   53[BANK0 ] unsigned char 
 21561 ;; Return value:  Size  Location     Type
 21562 ;;                  1    wreg      void 
 21563 ;; Registers used:
 21564 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 21565 ;; Tracked objects:
 21566 ;;		On entry : 3F/0
 21567 ;;		On exit  : 3F/0
 21568 ;;		Unchanged: 0/0
 21569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 21570 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21571 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21572 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21573 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21574 ;;Total ram usage:        4 bytes
 21575 ;; Hardware stack levels used: 1
 21576 ;; Hardware stack levels required when called: 14
 21577 ;; This function calls:
 21578 ;;		_cbusSendOpcMyNN
 21579 ;;		_doError
 21580 ;;		_evtIdxToTableIndex
 21581 ;;		_getEN
 21582 ;;		_getNN
 21583 ;;		_validStart
 21584 ;; This function is called by:
 21585 ;;		_parseFLiMCmd
 21586 ;; This function uses a non-reentrant model
 21587 ;;
 21588                           
 21589                           	psect	text92
 21590  00951C                     __ptext92:
 21591                           	callstack 0
 21592  00951C                     _doNenrd:
 21593                           	callstack 13
 21594                           
 21595                           ; BSR set to: 0
 21596                           ;incstack = 0
 21597                           ;doNenrd@index stored from wreg
 21598  00951C  6F94               	movwf	doNenrd@index& (0+255),b
 21599                           
 21600                           ;events.c: 376: unsigned char tableIndex;;events.c: 377: WORD n;;events.c: 379: tableInd
      +                          ex = evtIdxToTableIndex(index);
 21601  00951E  0100               	movlb	0	; () banked
 21602  009520  5194               	movf	doNenrd@index& (0+255),w,b
 21603  009522  EC76  F053         	call	_evtIdxToTableIndex
 21604  009526  6F95               	movwf	doNenrd@tableIndex& (0+255),b
 21605                           
 21606                           ; BSR set to: 0
 21607                           ;events.c: 381: if ( ! validStart(tableIndex)) {
 21608  009528  5195               	movf	doNenrd@tableIndex& (0+255),w,b
 21609  00952A  ECFE  F050         	call	_validStart
 21610  00952E  0900               	iorlw	0
 21611  009530  A4D8               	btfss	status,2,c
 21612  009532  D004               	goto	l19559
 21613                           
 21614                           ; BSR set to: 0
 21615                           ;events.c: 382: doError(7);
 21616  009534  0E07               	movlw	7
 21617  009536  EC5C  F052         	call	_doError
 21618  00953A  0012               	return	
 21619  00953C                     l19559:
 21620                           
 21621                           ; BSR set to: 0
 21622                           ;events.c: 387: };events.c: 388: n = getNN(tableIndex);
 21623  00953C  5195               	movf	doNenrd@tableIndex& (0+255),w,b
 21624  00953E  ECA8  F043         	call	_getNN
 21625  009542  C07D  F096         	movff	?_getNN,doNenrd@n
 21626  009546  C07E  F097         	movff	?_getNN+1,doNenrd@n+1
 21627                           
 21628                           ; BSR set to: 0
 21629                           ;events.c: 389: cbusMsg[d3] = n >> 8;
 21630  00954A  C097  F025         	movff	doNenrd@n+1,_cbusMsg+9
 21631                           
 21632                           ; BSR set to: 0
 21633                           ;events.c: 390: cbusMsg[d4] = n & 0xFF;
 21634  00954E  C096  F026         	movff	doNenrd@n,_cbusMsg+10
 21635                           
 21636                           ;events.c: 392: n = getEN(tableIndex);
 21637  009552  5195               	movf	doNenrd@tableIndex& (0+255),w,b
 21638  009554  EC1F  F048         	call	_getEN
 21639  009558  C07D  F096         	movff	?_getEN,doNenrd@n
 21640  00955C  C07E  F097         	movff	?_getEN+1,doNenrd@n+1
 21641                           
 21642                           ; BSR set to: 0
 21643                           ;events.c: 393: cbusMsg[d5] = n >> 8;
 21644  009560  C097  F027         	movff	doNenrd@n+1,_cbusMsg+11
 21645                           
 21646                           ; BSR set to: 0
 21647                           ;events.c: 394: cbusMsg[d6] = n & 0xFF;
 21648  009564  C096  F028         	movff	doNenrd@n,_cbusMsg+12
 21649                           
 21650                           ; BSR set to: 0
 21651                           ;events.c: 396: cbusMsg[d7] = index;
 21652  009568  C094  F029         	movff	doNenrd@index,_cbusMsg+13
 21653                           
 21654                           ;events.c: 397: cbusSendOpcMyNN( 0, 0xF2, cbusMsg );
 21655  00956C  0EF2               	movlw	242
 21656  00956E  6F91               	movwf	cbusSendOpcMyNN@opc& (0+255),b
 21657  009570  0E1C               	movlw	low _cbusMsg
 21658  009572  6F92               	movwf	cbusSendOpcMyNN@msg& (0+255),b
 21659  009574  0E00               	movlw	0
 21660  009576  EC6B  F052         	call	_cbusSendOpcMyNN
 21661                           
 21662                           ; BSR set to: 0
 21663  00957A  0012               	return		;funcret
 21664  00957C                     __end_of_doNenrd:
 21665                           	callstack 0
 21666                           
 21667 ;; *************** function _evtIdxToTableIndex *****************
 21668 ;; Defined at:
 21669 ;;		line 837 in file "../../github/CBUSlib/events.c"
 21670 ;; Parameters:    Size  Location     Type
 21671 ;;  evtIdx          1    wreg     unsigned char 
 21672 ;; Auto vars:     Size  Location     Type
 21673 ;;  evtIdx          1   17[BANK0 ] unsigned char 
 21674 ;; Return value:  Size  Location     Type
 21675 ;;                  1    wreg      unsigned char 
 21676 ;; Registers used:
 21677 ;;		wreg, status,2, status,0
 21678 ;; Tracked objects:
 21679 ;;		On entry : 3F/0
 21680 ;;		On exit  : 3F/0
 21681 ;;		Unchanged: 0/0
 21682 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 21683 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21684 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21685 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21686 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21687 ;;Total ram usage:        1 bytes
 21688 ;; Hardware stack levels used: 1
 21689 ;; Hardware stack levels required when called: 8
 21690 ;; This function calls:
 21691 ;;		Nothing
 21692 ;; This function is called by:
 21693 ;;		_doNenrd
 21694 ;;		_doReval
 21695 ;; This function uses a non-reentrant model
 21696 ;;
 21697                           
 21698                           	psect	text93
 21699  00A6EC                     __ptext93:
 21700                           	callstack 0
 21701  00A6EC                     _evtIdxToTableIndex:
 21702                           	callstack 18
 21703                           
 21704                           ; BSR set to: 0
 21705                           ;incstack = 0
 21706                           ;evtIdxToTableIndex@evtIdx stored from wreg
 21707  00A6EC  6F71               	movwf	evtIdxToTableIndex@evtIdx& (0+255),b
 21708                           
 21709                           ;events.c: 838: return evtIdx-1U;
 21710  00A6EE  0100               	movlb	0	; () banked
 21711  00A6F0  0571               	decf	evtIdxToTableIndex@evtIdx& (0+255),w,b
 21712                           
 21713                           ; BSR set to: 0
 21714  00A6F2  0012               	return		;funcret
 21715  00A6F4                     __end_of_evtIdxToTableIndex:
 21716                           	callstack 0
 21717                           
 21718 ;; *************** function _doEvuln *****************
 21719 ;; Defined at:
 21720 ;;		line 877 in file "../../github/CBUSlib/FliM.c"
 21721 ;; Parameters:    Size  Location     Type
 21722 ;;  nodeNumber      2   68[BANK0 ] unsigned int 
 21723 ;;  eventNumber     2   70[BANK0 ] unsigned int 
 21724 ;; Auto vars:     Size  Location     Type
 21725 ;;		None
 21726 ;; Return value:  Size  Location     Type
 21727 ;;                  1    wreg      void 
 21728 ;; Registers used:
 21729 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 21730 ;; Tracked objects:
 21731 ;;		On entry : 3F/0
 21732 ;;		On exit  : 3F/0
 21733 ;;		Unchanged: 0/0
 21734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 21735 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21736 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21737 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21738 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21739 ;;Total ram usage:        4 bytes
 21740 ;; Hardware stack levels used: 1
 21741 ;; Hardware stack levels required when called: 18
 21742 ;; This function calls:
 21743 ;;		_removeEvent
 21744 ;; This function is called by:
 21745 ;;		_parseFLiMCmd
 21746 ;; This function uses a non-reentrant model
 21747 ;;
 21748                           
 21749                           	psect	text94
 21750  00A5FA                     __ptext94:
 21751                           	callstack 0
 21752  00A5FA                     _doEvuln:
 21753                           	callstack 9
 21754                           
 21755                           ; BSR set to: 0
 21756                           ;FliM.c: 879: removeEvent(nodeNumber, eventNumber);
 21757                           
 21758                           ; BSR set to: 0
 21759                           ;incstack = 0
 21760  00A5FA  C0A4  F09F         	movff	doEvuln@nodeNumber,removeEvent@nodeNumber
 21761  00A5FE  C0A5  F0A0         	movff	doEvuln@nodeNumber+1,removeEvent@nodeNumber+1
 21762  00A602  C0A6  F0A1         	movff	doEvuln@eventNumber,removeEvent@eventNumber
 21763  00A606  C0A7  F0A2         	movff	doEvuln@eventNumber+1,removeEvent@eventNumber+1
 21764  00A60A  EC28  F052         	call	_removeEvent	;wreg free
 21765                           
 21766                           ; BSR set to: 0
 21767  00A60E  0012               	return		;funcret
 21768  00A610                     __end_of_doEvuln:
 21769                           	callstack 0
 21770                           
 21771 ;; *************** function _removeEvent *****************
 21772 ;; Defined at:
 21773 ;;		line 429 in file "../../github/CBUSlib/events.c"
 21774 ;; Parameters:    Size  Location     Type
 21775 ;;  nodeNumber      2   63[BANK0 ] unsigned int 
 21776 ;;  eventNumber     2   65[BANK0 ] unsigned int 
 21777 ;; Auto vars:     Size  Location     Type
 21778 ;;  tableIndex      1   67[BANK0 ] unsigned char 
 21779 ;; Return value:  Size  Location     Type
 21780 ;;                  1    wreg      unsigned char 
 21781 ;; Registers used:
 21782 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 21783 ;; Tracked objects:
 21784 ;;		On entry : 3F/0
 21785 ;;		On exit  : 3F/0
 21786 ;;		Unchanged: 0/0
 21787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 21788 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21789 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21790 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21791 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21792 ;;Total ram usage:        5 bytes
 21793 ;; Hardware stack levels used: 1
 21794 ;; Hardware stack levels required when called: 17
 21795 ;; This function calls:
 21796 ;;		_findEvent
 21797 ;;		_removeTableEntry
 21798 ;; This function is called by:
 21799 ;;		_doEvuln
 21800 ;; This function uses a non-reentrant model
 21801 ;;
 21802                           
 21803                           	psect	text95
 21804  00A450                     __ptext95:
 21805                           	callstack 0
 21806  00A450                     _removeEvent:
 21807                           	callstack 9
 21808                           
 21809                           ; BSR set to: 0
 21810                           ;events.c: 431: unsigned char tableIndex = findEvent(nodeNumber, eventNumber);
 21811                           
 21812                           ; BSR set to: 0
 21813                           ;incstack = 0
 21814  00A450  C09F  F08E         	movff	removeEvent@nodeNumber,findEvent@nodeNumber
 21815  00A454  C0A0  F08F         	movff	removeEvent@nodeNumber+1,findEvent@nodeNumber+1
 21816  00A458  C0A1  F090         	movff	removeEvent@eventNumber,findEvent@eventNumber
 21817  00A45C  C0A2  F091         	movff	removeEvent@eventNumber+1,findEvent@eventNumber+1
 21818  00A460  ECD6  F044         	call	_findEvent	;wreg free
 21819  00A464  6FA3               	movwf	removeEvent@tableIndex& (0+255),b
 21820                           
 21821                           ; BSR set to: 0
 21822                           ;events.c: 432: if (tableIndex == 0xff) return 6;
 21823  00A466  29A3               	incf	removeEvent@tableIndex& (0+255),w,b
 21824  00A468  B4D8               	btfsc	status,2,c
 21825  00A46A  0012               	return	
 21826                           
 21827                           ; BSR set to: 0
 21828                           ;events.c: 434: return removeTableEntry(tableIndex);;	Return value of _removeEvent is ne
      +                          ver used
 21829  00A46C  51A3               	movf	removeEvent@tableIndex& (0+255),w,b
 21830  00A46E  EC21  F03A         	call	_removeTableEntry
 21831                           
 21832                           ; BSR set to: 0
 21833  00A472  0012               	return		;funcret
 21834  00A474                     __end_of_removeEvent:
 21835                           	callstack 0
 21836                           
 21837 ;; *************** function _doEvlrn *****************
 21838 ;; Defined at:
 21839 ;;		line 802 in file "../../github/CBUSlib/FliM.c"
 21840 ;; Parameters:    Size  Location     Type
 21841 ;;  nodeNumber      2  112[BANK0 ] unsigned int 
 21842 ;;  eventNumber     2  114[BANK0 ] unsigned int 
 21843 ;;  evNum           1  116[BANK0 ] unsigned char 
 21844 ;;  evVal           1  117[BANK0 ] unsigned char 
 21845 ;; Auto vars:     Size  Location     Type
 21846 ;;  error           1  118[BANK0 ] unsigned char 
 21847 ;; Return value:  Size  Location     Type
 21848 ;;                  1    wreg      void 
 21849 ;; Registers used:
 21850 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 21851 ;; Tracked objects:
 21852 ;;		On entry : 3F/0
 21853 ;;		On exit  : 3F/0
 21854 ;;		Unchanged: 0/0
 21855 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 21856 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21857 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21858 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21859 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21860 ;;Total ram usage:        7 bytes
 21861 ;; Hardware stack levels used: 1
 21862 ;; Hardware stack levels required when called: 21
 21863 ;; This function calls:
 21864 ;;		_APP_addEvent
 21865 ;;		_cbusSendOpcMyNN
 21866 ;; This function is called by:
 21867 ;;		_parseFLiMCmd
 21868 ;; This function uses a non-reentrant model
 21869 ;;
 21870                           
 21871                           	psect	text96
 21872  0091F4                     __ptext96:
 21873                           	callstack 0
 21874  0091F4                     _doEvlrn:
 21875                           	callstack 6
 21876                           
 21877                           ; BSR set to: 0
 21878                           ;FliM.c: 804: unsigned char error;;FliM.c: 806: if (evNum == 0)
 21879                           
 21880                           ; BSR set to: 0
 21881                           ;incstack = 0
 21882  0091F4  51D4               	movf	doEvlrn@evNum& (0+255),w,b
 21883  0091F6  A4D8               	btfss	status,2,c
 21884  0091F8  D00A               	goto	l19609
 21885                           
 21886                           ; BSR set to: 0
 21887                           ;FliM.c: 807: {;FliM.c: 808: cbusMsg[d3] = 6;
 21888  0091FA  0E06               	movlw	6
 21889  0091FC  6E25               	movwf	(_cbusMsg+9)^0,c
 21890                           
 21891                           ; BSR set to: 0
 21892                           ;FliM.c: 809: cbusSendOpcMyNN( 0, 0x6F, cbusMsg);
 21893  0091FE  0E6F               	movlw	111
 21894  009200  6F91               	movwf	cbusSendOpcMyNN@opc& (0+255),b
 21895  009202  0E1C               	movlw	low _cbusMsg
 21896  009204  6F92               	movwf	cbusSendOpcMyNN@msg& (0+255),b
 21897  009206  0E00               	movlw	0
 21898  009208  EC6B  F052         	call	_cbusSendOpcMyNN
 21899  00920C  0012               	return	
 21900  00920E                     l19609:
 21901                           
 21902                           ; BSR set to: 0
 21903                           ;FliM.c: 811: };FliM.c: 812: evNum--;
 21904  00920E  07D4               	decf	doEvlrn@evNum& (0+255),f,b
 21905                           
 21906                           ; BSR set to: 0
 21907                           ;FliM.c: 813: error = APP_addEvent(nodeNumber, eventNumber, evNum, evVal, 0);
 21908  009210  C0D0  F0C8         	movff	doEvlrn@nodeNumber,APP_addEvent@nodeNumber
 21909  009214  C0D1  F0C9         	movff	doEvlrn@nodeNumber+1,APP_addEvent@nodeNumber+1
 21910  009218  C0D2  F0CA         	movff	doEvlrn@eventNumber,APP_addEvent@eventNumber
 21911  00921C  C0D3  F0CB         	movff	doEvlrn@eventNumber+1,APP_addEvent@eventNumber+1
 21912  009220  C0D4  F0CC         	movff	doEvlrn@evNum,APP_addEvent@evNum
 21913  009224  C0D5  F0CD         	movff	doEvlrn@evVal,APP_addEvent@evVal
 21914  009228  0E00               	movlw	0
 21915  00922A  6FCE               	movwf	APP_addEvent@forceOwnNN& (0+255),b
 21916  00922C  EC49  F04B         	call	_APP_addEvent	;wreg free
 21917  009230  6FD6               	movwf	doEvlrn@error& (0+255),b
 21918                           
 21919                           ; BSR set to: 0
 21920                           ;FliM.c: 814: if (error)
 21921  009232  51D6               	movf	doEvlrn@error& (0+255),w,b
 21922  009234  B4D8               	btfsc	status,2,c
 21923  009236  D00A               	goto	l19621
 21924                           
 21925                           ; BSR set to: 0
 21926                           ;FliM.c: 815: {;FliM.c: 817: cbusMsg[d3] = error;
 21927  009238  C0D6  F025         	movff	doEvlrn@error,_cbusMsg+9
 21928                           
 21929                           ; BSR set to: 0
 21930                           ;FliM.c: 818: cbusSendOpcMyNN( 0, 0x6F, cbusMsg);
 21931  00923C  0E6F               	movlw	111
 21932  00923E  6F91               	movwf	cbusSendOpcMyNN@opc& (0+255),b
 21933  009240  0E1C               	movlw	low _cbusMsg
 21934  009242  6F92               	movwf	cbusSendOpcMyNN@msg& (0+255),b
 21935  009244  0E00               	movlw	0
 21936  009246  EC6B  F052         	call	_cbusSendOpcMyNN
 21937  00924A  0012               	return	
 21938  00924C                     l19621:
 21939                           
 21940                           ; BSR set to: 0
 21941                           ;FliM.c: 820: };FliM.c: 821: cbusSendOpcMyNN( 0, 0x59, cbusMsg);
 21942  00924C  0E59               	movlw	89
 21943  00924E  6F91               	movwf	cbusSendOpcMyNN@opc& (0+255),b
 21944  009250  0E1C               	movlw	low _cbusMsg
 21945  009252  6F92               	movwf	cbusSendOpcMyNN@msg& (0+255),b
 21946  009254  0E00               	movlw	0
 21947  009256  EC6B  F052         	call	_cbusSendOpcMyNN
 21948                           
 21949                           ; BSR set to: 0
 21950  00925A  0012               	return		;funcret
 21951  00925C                     __end_of_doEvlrn:
 21952                           	callstack 0
 21953                           
 21954 ;; *************** function _APP_addEvent *****************
 21955 ;; Defined at:
 21956 ;;		line 167 in file "../../github/CANMIOfirmware/mioEvents.c"
 21957 ;; Parameters:    Size  Location     Type
 21958 ;;  nodeNumber      2  104[BANK0 ] unsigned int 
 21959 ;;  eventNumber     2  106[BANK0 ] unsigned int 
 21960 ;;  evNum           1  108[BANK0 ] unsigned char 
 21961 ;;  evVal           1  109[BANK0 ] unsigned char 
 21962 ;;  forceOwnNN      1  110[BANK0 ] unsigned char 
 21963 ;; Auto vars:     Size  Location     Type
 21964 ;;  tableIndex      1  111[BANK0 ] unsigned char 
 21965 ;; Return value:  Size  Location     Type
 21966 ;;                  1    wreg      unsigned char 
 21967 ;; Registers used:
 21968 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 21969 ;; Tracked objects:
 21970 ;;		On entry : 3F/0
 21971 ;;		On exit  : 3F/0
 21972 ;;		Unchanged: 0/0
 21973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 21974 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21975 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21976 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21977 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 21978 ;;Total ram usage:        8 bytes
 21979 ;; Hardware stack levels used: 1
 21980 ;; Hardware stack levels required when called: 20
 21981 ;; This function calls:
 21982 ;;		_addEvent
 21983 ;;		_checkRemoveTableEntry
 21984 ;;		_rebuildHashtable
 21985 ;;		_writeEv
 21986 ;; This function is called by:
 21987 ;;		_doEvlrn
 21988 ;; This function uses a non-reentrant model
 21989 ;;
 21990                           
 21991                           	psect	text97
 21992  009692                     __ptext97:
 21993                           	callstack 0
 21994  009692                     _APP_addEvent:
 21995                           	callstack 6
 21996                           
 21997                           ; BSR set to: 0
 21998                           ;mioEvents.c: 168: if ((evNum == 0) && (evVal != 0)) {
 21999                           
 22000                           ; BSR set to: 0
 22001                           ;incstack = 0
 22002  009692  51CC               	movf	APP_addEvent@evNum& (0+255),w,b
 22003  009694  A4D8               	btfss	status,2,c
 22004  009696  D01A               	goto	l742
 22005                           
 22006                           ; BSR set to: 0
 22007  009698  51CD               	movf	APP_addEvent@evVal& (0+255),w,b
 22008  00969A  B4D8               	btfsc	status,2,c
 22009  00969C  D017               	goto	l742
 22010                           
 22011                           ; BSR set to: 0
 22012                           ;mioEvents.c: 170: unsigned char tableIndex = happening2Event[evVal-1U];
 22013  00969E  0EFF               	movlw	low (_happening2Event+65535)
 22014  0096A0  25CD               	addwf	APP_addEvent@evVal& (0+255),w,b
 22015  0096A2  6ED9               	movwf	fsr2l,c
 22016  0096A4  6ADA               	clrf	fsr2h,c
 22017  0096A6  0E02               	movlw	high (_happening2Event+65535)
 22018  0096A8  22DA               	addwfc	fsr2h,f,c
 22019  0096AA  50DF               	movf	indf2,w,c
 22020  0096AC  6FCF               	movwf	APP_addEvent@tableIndex& (0+255),b
 22021                           
 22022                           ; BSR set to: 0
 22023                           ;mioEvents.c: 171: if (tableIndex != 0xff) {
 22024  0096AE  29CF               	incf	APP_addEvent@tableIndex& (0+255),w,b
 22025  0096B0  B4D8               	btfsc	status,2,c
 22026  0096B2  D00C               	goto	l742
 22027                           
 22028                           ; BSR set to: 0
 22029                           ;mioEvents.c: 174: writeEv(tableIndex, 0, 0);
 22030  0096B4  0E00               	movlw	0
 22031  0096B6  6FA1               	movwf	writeEv@evNum& (0+255),b
 22032  0096B8  0E00               	movlw	0
 22033  0096BA  6FA2               	movwf	writeEv@evVal& (0+255),b
 22034  0096BC  51CF               	movf	APP_addEvent@tableIndex& (0+255),w,b
 22035  0096BE  ECB3  F020         	call	_writeEv
 22036                           
 22037                           ;mioEvents.c: 175: checkRemoveTableEntry(tableIndex);
 22038  0096C2  51CF               	movf	APP_addEvent@tableIndex& (0+255),w,b
 22039  0096C4  ECF1  F04E         	call	_checkRemoveTableEntry
 22040                           
 22041                           ;mioEvents.c: 176: rebuildHashtable();
 22042  0096C8  ECB2  F034         	call	_rebuildHashtable	;wreg free
 22043  0096CC                     l742:
 22044                           
 22045                           ; BSR set to: 0
 22046                           ;mioEvents.c: 177: };mioEvents.c: 178: };mioEvents.c: 179: return addEvent(nodeNumber, e
      +                          ventNumber, evNum, evVal, forceOwnNN);
 22047  0096CC  C0C8  F0B3         	movff	APP_addEvent@nodeNumber,addEvent@nodeNumber
 22048  0096D0  C0C9  F0B4         	movff	APP_addEvent@nodeNumber+1,addEvent@nodeNumber+1
 22049  0096D4  C0CA  F0B5         	movff	APP_addEvent@eventNumber,addEvent@eventNumber
 22050  0096D8  C0CB  F0B6         	movff	APP_addEvent@eventNumber+1,addEvent@eventNumber+1
 22051  0096DC  C0CC  F0B7         	movff	APP_addEvent@evNum,addEvent@evNum
 22052  0096E0  C0CD  F0B8         	movff	APP_addEvent@evVal,addEvent@evVal
 22053  0096E4  C0CE  F0B9         	movff	APP_addEvent@forceOwnNN,addEvent@forceOwnNN
 22054  0096E8  EC0F  F02E         	call	_addEvent	;wreg free
 22055                           
 22056                           ; BSR set to: 0
 22057  0096EC  0012               	return		;funcret
 22058  0096EE                     __end_of_APP_addEvent:
 22059                           	callstack 0
 22060                           
 22061 ;; *************** function _doAreq *****************
 22062 ;; Defined at:
 22063 ;;		line 185 in file "../../github/CBUSlib/happeningsActions.c"
 22064 ;; Parameters:    Size  Location     Type
 22065 ;;  nodeNumber      2   59[BANK0 ] unsigned int 
 22066 ;;  eventNumber     2   61[BANK0 ] unsigned int 
 22067 ;; Auto vars:     Size  Location     Type
 22068 ;;  status          1   69[BANK0 ] unsigned char 
 22069 ;;  thisByte        1   68[BANK0 ] unsigned char 
 22070 ;;  thisBit         1   67[BANK0 ] unsigned char 
 22071 ;;  ev0             2   75[BANK0 ] int 
 22072 ;;  happening       1   77[BANK0 ] unsigned char 
 22073 ;;  tableIndex      1   74[BANK0 ] unsigned char 
 22074 ;; Return value:  Size  Location     Type
 22075 ;;                  1    wreg      void 
 22076 ;; Registers used:
 22077 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 22078 ;; Tracked objects:
 22079 ;;		On entry : 3F/0
 22080 ;;		On exit  : 3F/0
 22081 ;;		Unchanged: 0/0
 22082 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 22083 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22084 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22085 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22086 ;;      Totals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22087 ;;Total ram usage:       19 bytes
 22088 ;; Hardware stack levels used: 1
 22089 ;; Hardware stack levels required when called: 15
 22090 ;; This function calls:
 22091 ;;		_cbusSendMsg
 22092 ;;		_doError
 22093 ;;		_ee_read
 22094 ;;		_findEvent
 22095 ;;		_getEv
 22096 ;; This function is called by:
 22097 ;;		_parseFLiMCmd
 22098 ;; This function uses a non-reentrant model
 22099 ;;
 22100                           
 22101                           	psect	text98
 22102  006F34                     __ptext98:
 22103                           	callstack 0
 22104  006F34                     _doAreq:
 22105                           	callstack 12
 22106                           
 22107                           ; BSR set to: 0
 22108                           ;happeningsActions.c: 186: unsigned char happening;;happeningsActions.c: 187: int ev0;;h
      +                          appeningsActions.c: 189: unsigned char tableIndex = findEvent(nodeNumber, eventNumber);
 22109                           
 22110                           ; BSR set to: 0
 22111                           ;incstack = 0
 22112  006F34  C09B  F08E         	movff	doAreq@nodeNumber,findEvent@nodeNumber
 22113  006F38  C09C  F08F         	movff	doAreq@nodeNumber+1,findEvent@nodeNumber+1
 22114  006F3C  C09D  F090         	movff	doAreq@eventNumber,findEvent@eventNumber
 22115  006F40  C09E  F091         	movff	doAreq@eventNumber+1,findEvent@eventNumber+1
 22116  006F44  ECD6  F044         	call	_findEvent	;wreg free
 22117  006F48  6FAA               	movwf	doAreq@tableIndex& (0+255),b
 22118                           
 22119                           ; BSR set to: 0
 22120                           ;happeningsActions.c: 190: if (tableIndex == 0xff) return;
 22121  006F4A  29AA               	incf	doAreq@tableIndex& (0+255),w,b
 22122  006F4C  B4D8               	btfsc	status,2,c
 22123  006F4E  0012               	return	
 22124                           
 22125                           ; BSR set to: 0
 22126                           ;happeningsActions.c: 192: ev0 = getEv(tableIndex, 0);
 22127  006F50  0E00               	movlw	0
 22128  006F52  6F81               	movwf	getEv@evNum& (0+255),b
 22129  006F54  51AA               	movf	doAreq@tableIndex& (0+255),w,b
 22130  006F56  EC22  F038         	call	_getEv
 22131  006F5A  C081  F0AB         	movff	?_getEv,doAreq@ev0
 22132  006F5E  C082  F0AC         	movff	?_getEv+1,doAreq@ev0+1
 22133                           
 22134                           ; BSR set to: 0
 22135                           ;happeningsActions.c: 193: if (ev0 < 0) {
 22136  006F62  AFAC               	btfss	(doAreq@ev0+1)& (0+255),7,b
 22137  006F64  D005               	goto	l2374
 22138                           
 22139                           ; BSR set to: 0
 22140                           ;happeningsActions.c: 194: doError((unsigned char)(-ev0));
 22141  006F66  51AB               	movf	doAreq@ev0& (0+255),w,b
 22142  006F68  0800               	sublw	0
 22143  006F6A  EC5C  F052         	call	_doError
 22144  006F6E  0012               	return	
 22145  006F70                     l2374:
 22146                           
 22147                           ; BSR set to: 0
 22148                           ;happeningsActions.c: 196: };happeningsActions.c: 197: happening = (unsigned char)ev0;
 22149  006F70  C0AB  F0AD         	movff	doAreq@ev0,doAreq@happening
 22150                           
 22151                           ; BSR set to: 0
 22152                           ;happeningsActions.c: 198: if ((happening >= 1U) && (happening-1U< (8U + 16U * 4U))) {
 22153  006F74  51AD               	movf	doAreq@happening& (0+255),w,b
 22154  006F76  B4D8               	btfsc	status,2,c
 22155  006F78  0012               	return	
 22156                           
 22157                           ; BSR set to: 0
 22158  006F7A  0EFF               	movlw	255
 22159  006F7C  6F9F               	movwf	??_doAreq& (0+255),b
 22160  006F7E  0EFF               	movlw	255
 22161  006F80  6FA0               	movwf	(??_doAreq+1)& (0+255),b
 22162  006F82  51AD               	movf	doAreq@happening& (0+255),w,b
 22163  006F84  6FA1               	movwf	(??_doAreq+2)& (0+255),b
 22164  006F86  6BA2               	clrf	(??_doAreq+3)& (0+255),b
 22165  006F88  519F               	movf	??_doAreq& (0+255),w,b
 22166  006F8A  27A1               	addwf	(??_doAreq+2)& (0+255),f,b
 22167  006F8C  51A0               	movf	(??_doAreq+1)& (0+255),w,b
 22168  006F8E  23A2               	addwfc	(??_doAreq+3)& (0+255),f,b
 22169  006F90  51A2               	movf	(??_doAreq+3)& (0+255),w,b
 22170  006F92  E157               	bnz	l2373
 22171  006F94  0E48               	movlw	72
 22172  006F96  5DA1               	subwf	(??_doAreq+2)& (0+255),w,b
 22173  006F98  B0D8               	btfsc	status,0,c
 22174  006F9A  0012               	return	
 22175                           
 22176                           ; BSR set to: 0
 22177                           ;happeningsActions.c: 199: unsigned char thisBit = (unsigned char)(happening & 0x7);
 22178  006F9C  51AD               	movf	doAreq@happening& (0+255),w,b
 22179  006F9E  0B07               	andlw	7
 22180  006FA0  6FA3               	movwf	doAreq@thisBit& (0+255),b
 22181                           
 22182                           ;happeningsActions.c: 200: unsigned char thisByte = (unsigned char)(happening >> 3);
 22183  006FA2  39AD               	swapf	doAreq@happening& (0+255),w,b
 22184  006FA4  46E8               	rlncf	wreg,f,c
 22185  006FA6  0B1F               	andlw	31
 22186  006FA8  6FA4               	movwf	doAreq@thisByte& (0+255),b
 22187                           
 22188                           ; BSR set to: 0
 22189                           ;happeningsActions.c: 201: BOOL status = (unsigned char)(ee_read((WORD)(((BYTE*)(0x3FF-3
      +                          9))+thisByte)) & (unsigned char)(1U<<thisBit));
 22190  006FAA  C0A3  F09F         	movff	doAreq@thisBit,??_doAreq
 22191  006FAE  0E01               	movlw	1
 22192  006FB0  6FA0               	movwf	(??_doAreq+1)& (0+255),b
 22193  006FB2  2B9F               	incf	??_doAreq& (0+255),f,b
 22194  006FB4  D002               	goto	u24584
 22195  006FB6                     u24585:
 22196  006FB6  90D8               	bcf	status,0,c
 22197  006FB8  37A0               	rlcf	(??_doAreq+1)& (0+255),f,b
 22198  006FBA                     u24584:
 22199  006FBA  2F9F               	decfsz	??_doAreq& (0+255),f,b
 22200  006FBC  D7FC               	goto	u24585
 22201  006FBE  0ED8               	movlw	216
 22202  006FC0  0100               	movlb	0	; () banked
 22203  006FC2  25A4               	addwf	doAreq@thisByte& (0+255),w,b
 22204  006FC4  6F71               	movwf	ee_read@addr& (0+255),b
 22205  006FC6  6B72               	clrf	(ee_read@addr+1)& (0+255),b
 22206  006FC8  0E03               	movlw	3
 22207  006FCA  2372               	addwfc	(ee_read@addr+1)& (0+255),f,b
 22208  006FCC  EC97  F052         	call	_ee_read	;wreg free
 22209  006FD0  0100               	movlb	0	; () banked
 22210  006FD2  15A0               	andwf	(??_doAreq+1)& (0+255),w,b
 22211  006FD4  6FA5               	movwf	doAreq@status& (0+255),b
 22212                           
 22213                           ; BSR set to: 0
 22214                           ;happeningsActions.c: 202: if (nodeNumber == 0) {
 22215  006FD6  519B               	movf	doAreq@nodeNumber& (0+255),w,b
 22216  006FD8  119C               	iorwf	(doAreq@nodeNumber+1)& (0+255),w,b
 22217  006FDA  A4D8               	btfss	status,2,c
 22218  006FDC  D005               	goto	l2376
 22219                           
 22220                           ; BSR set to: 0
 22221                           ;happeningsActions.c: 203: cbusMsg[d1] = nodeID >> 8;
 22222  006FDE  C002  F023         	movff	_nodeID+1,_cbusMsg+7
 22223                           
 22224                           ;happeningsActions.c: 204: cbusMsg[d2] = nodeID & 0xFF;
 22225  006FE2  C001  F024         	movff	_nodeID,_cbusMsg+8
 22226                           
 22227                           ;happeningsActions.c: 205: } else {
 22228  006FE6  D004               	goto	l2377
 22229  006FE8                     l2376:
 22230                           
 22231                           ; BSR set to: 0
 22232                           ;happeningsActions.c: 206: cbusMsg[d1] = nodeNumber >> 8;
 22233  006FE8  C09C  F023         	movff	doAreq@nodeNumber+1,_cbusMsg+7
 22234                           
 22235                           ;happeningsActions.c: 207: cbusMsg[d2] = nodeNumber & 0xFF;
 22236  006FEC  C09B  F024         	movff	doAreq@nodeNumber,_cbusMsg+8
 22237  006FF0                     l2377:
 22238                           
 22239                           ; BSR set to: 0
 22240                           ;happeningsActions.c: 208: };happeningsActions.c: 209: cbusMsg[d3] = eventNumber >> 8;
 22241  006FF0  C09E  F025         	movff	doAreq@eventNumber+1,_cbusMsg+9
 22242                           
 22243                           ;happeningsActions.c: 210: cbusMsg[d4] = eventNumber & 0xFF;
 22244  006FF4  C09D  F026         	movff	doAreq@eventNumber,_cbusMsg+10
 22245                           
 22246                           ; BSR set to: 0
 22247                           ;happeningsActions.c: 211: if (status) {
 22248  006FF8  51A5               	movf	doAreq@status& (0+255),w,b
 22249  006FFA  B4D8               	btfsc	status,2,c
 22250  006FFC  D00F               	goto	l19805
 22251                           
 22252                           ; BSR set to: 0
 22253                           ;happeningsActions.c: 212: cbusMsg[d0] = (unsigned char)(nodeNumber == 0 ? 0x9D : 0x93);
 22254  006FFE  519B               	movf	doAreq@nodeNumber& (0+255),w,b
 22255  007000  119C               	iorwf	(doAreq@nodeNumber+1)& (0+255),w,b
 22256  007002  B4D8               	btfsc	status,2,c
 22257  007004  D004               	goto	l19801
 22258                           
 22259                           ; BSR set to: 0
 22260  007006  0E00               	movlw	0
 22261  007008  6FA7               	movwf	(_doAreq$4582+1)& (0+255),b
 22262  00700A  0E93               	movlw	147
 22263  00700C  D003               	goto	L19
 22264  00700E                     l19801:
 22265                           
 22266                           ; BSR set to: 0
 22267  00700E  0E00               	movlw	0
 22268  007010  6FA7               	movwf	(_doAreq$4582+1)& (0+255),b
 22269  007012  0E9D               	movlw	157
 22270  007014                     L19:
 22271  007014  6FA6               	movwf	_doAreq$4582& (0+255),b
 22272                           
 22273                           ; BSR set to: 0
 22274  007016  C0A6  F022         	movff	_doAreq$4582,_cbusMsg+6
 22275                           
 22276                           ;happeningsActions.c: 213: } else {
 22277  00701A  D00E               	goto	l19813
 22278  00701C                     l19805:
 22279                           
 22280                           ; BSR set to: 0
 22281                           ;happeningsActions.c: 214: cbusMsg[d0] = (unsigned char)(nodeNumber == 0 ? 0x9E : 0x94);
 22282  00701C  519B               	movf	doAreq@nodeNumber& (0+255),w,b
 22283  00701E  119C               	iorwf	(doAreq@nodeNumber+1)& (0+255),w,b
 22284  007020  B4D8               	btfsc	status,2,c
 22285  007022  D004               	goto	l19809
 22286                           
 22287                           ; BSR set to: 0
 22288  007024  0E00               	movlw	0
 22289  007026  6FA9               	movwf	(_doAreq$4583+1)& (0+255),b
 22290  007028  0E94               	movlw	148
 22291  00702A  D003               	goto	L20
 22292  00702C                     l19809:
 22293                           
 22294                           ; BSR set to: 0
 22295  00702C  0E00               	movlw	0
 22296  00702E  6FA9               	movwf	(_doAreq$4583+1)& (0+255),b
 22297  007030  0E9E               	movlw	158
 22298  007032                     L20:
 22299  007032  6FA8               	movwf	_doAreq$4583& (0+255),b
 22300                           
 22301                           ; BSR set to: 0
 22302  007034  C0A8  F022         	movff	_doAreq$4583,_cbusMsg+6
 22303  007038                     l19813:
 22304                           
 22305                           ; BSR set to: 0
 22306                           ;happeningsActions.c: 215: };happeningsActions.c: 216: cbusSendMsg(0xFF, cbusMsg);
 22307  007038  0E1C               	movlw	low _cbusMsg
 22308  00703A  6F8B               	movwf	cbusSendMsg@msg& (0+255),b
 22309  00703C  0EFF               	movlw	255
 22310  00703E  ECAD  F04F         	call	_cbusSendMsg
 22311  007042                     l2373:
 22312                           
 22313                           ; BSR set to: 0
 22314  007042  0012               	return		;funcret
 22315  007044                     __end_of_doAreq:
 22316                           	callstack 0
 22317                           
 22318 ;; *************** function _QNNrespond *****************
 22319 ;; Defined at:
 22320 ;;		line 538 in file "../../github/CBUSlib/FliM.c"
 22321 ;; Parameters:    Size  Location     Type
 22322 ;;		None
 22323 ;; Auto vars:     Size  Location     Type
 22324 ;;  paramptr        3   51[BANK0 ] PTR struct .
 22325 ;;		 -> FLiMparams(20), 
 22326 ;; Return value:  Size  Location     Type
 22327 ;;                  1    wreg      void 
 22328 ;; Registers used:
 22329 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22330 ;; Tracked objects:
 22331 ;;		On entry : 3F/0
 22332 ;;		On exit  : 3F/0
 22333 ;;		Unchanged: 0/0
 22334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 22335 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22336 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22337 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22338 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22339 ;;Total ram usage:        3 bytes
 22340 ;; Hardware stack levels used: 1
 22341 ;; Hardware stack levels required when called: 13
 22342 ;; This function calls:
 22343 ;;		_cbusSendMsgNN
 22344 ;;		_getParFlags
 22345 ;; This function is called by:
 22346 ;;		_parseFLiMCmd
 22347 ;; This function uses a non-reentrant model
 22348 ;;
 22349                           
 22350                           	psect	text99
 22351  0098F6                     __ptext99:
 22352                           	callstack 0
 22353  0098F6                     _QNNrespond:
 22354                           	callstack 14
 22355                           
 22356                           ; BSR set to: 0
 22357                           ;FliM.c: 540: FLiMprmptr paramptr;;FliM.c: 542: paramptr = (FLiMprmptr)&FLiMparams;
 22358                           
 22359                           ; BSR set to: 0
 22360                           ;incstack = 0
 22361  0098F6  0E20               	movlw	32
 22362  0098F8  6F93               	movwf	QNNrespond@paramptr& (0+255),b
 22363  0098FA  0E08               	movlw	8
 22364  0098FC  6F94               	movwf	(QNNrespond@paramptr+1)& (0+255),b
 22365  0098FE  0E00               	movlw	0
 22366  009900  6F95               	movwf	(QNNrespond@paramptr+2)& (0+255),b
 22367                           
 22368                           ; BSR set to: 0
 22369                           ;FliM.c: 544: cbusMsg[d0] = 0xB6;
 22370  009902  0EB6               	movlw	182
 22371  009904  6E22               	movwf	(_cbusMsg+6)^0,c
 22372                           
 22373                           ; BSR set to: 0
 22374                           ;FliM.c: 545: cbusMsg[d3] = paramptr->params.manufacturer;
 22375  009906  C093  FFF6         	movff	QNNrespond@paramptr,tblptrl
 22376  00990A  C094  FFF7         	movff	QNNrespond@paramptr+1,tblptrh
 22377  00990E  C095  FFF8         	movff	QNNrespond@paramptr+2,tblptru
 22378  009912  0008               	tblrd		*
 22379  009914  CFF5 F025          	movff	tablat,_cbusMsg+9
 22380                           
 22381                           ; BSR set to: 0
 22382                           ;FliM.c: 546: cbusMsg[d4] = paramptr->params.module_id;
 22383  009918  0E02               	movlw	2
 22384  00991A  2593               	addwf	QNNrespond@paramptr& (0+255),w,b
 22385  00991C  6EF6               	movwf	tblptrl,c
 22386  00991E  0E00               	movlw	0
 22387  009920  2194               	addwfc	(QNNrespond@paramptr+1)& (0+255),w,b
 22388  009922  6EF7               	movwf	tblptrh,c
 22389  009924  0E00               	movlw	0
 22390  009926  2195               	addwfc	(QNNrespond@paramptr+2)& (0+255),w,b
 22391  009928  6EF8               	movwf	tblptru,c
 22392  00992A  0008               	tblrd		*
 22393  00992C  CFF5 F026          	movff	tablat,_cbusMsg+10
 22394                           
 22395                           ; BSR set to: 0
 22396                           ;FliM.c: 547: cbusMsg[d5] = getParFlags();
 22397  009930  ECA4  F04C         	call	_getParFlags	;wreg free
 22398  009934  6E27               	movwf	(_cbusMsg+11)^0,c
 22399                           
 22400                           ; BSR set to: 0
 22401                           ;FliM.c: 548: cbusSendMsgNN(0xFF, -1, cbusMsg);
 22402  009936  0EFF               	movlw	255
 22403  009938  6F90               	movwf	(cbusSendMsgNN@eventNode+1)& (0+255),b
 22404  00993A  698F               	setf	cbusSendMsgNN@eventNode& (0+255),b
 22405  00993C  0E1C               	movlw	low _cbusMsg
 22406  00993E  6F91               	movwf	cbusSendMsgNN@msg& (0+255),b
 22407  009940  0EFF               	movlw	255
 22408  009942  EC52  F04F         	call	_cbusSendMsgNN
 22409                           
 22410                           ; BSR set to: 0
 22411  009946  0012               	return		;funcret
 22412  009948                     __end_of_QNNrespond:
 22413                           	callstack 0
 22414                           
 22415 ;; *************** function _getParFlags *****************
 22416 ;; Defined at:
 22417 ;;		line 522 in file "../../github/CBUSlib/FliM.c"
 22418 ;; Parameters:    Size  Location     Type
 22419 ;;		None
 22420 ;; Auto vars:     Size  Location     Type
 22421 ;;  paramptr        3   17[BANK0 ] PTR struct .
 22422 ;;		 -> FLiMparams(20), 
 22423 ;; Return value:  Size  Location     Type
 22424 ;;                  1    wreg      unsigned char 
 22425 ;; Registers used:
 22426 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 22427 ;; Tracked objects:
 22428 ;;		On entry : 3F/0
 22429 ;;		On exit  : 3F/0
 22430 ;;		Unchanged: 0/0
 22431 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 22432 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22433 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22434 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22435 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22436 ;;Total ram usage:        3 bytes
 22437 ;; Hardware stack levels used: 1
 22438 ;; Hardware stack levels required when called: 8
 22439 ;; This function calls:
 22440 ;;		Nothing
 22441 ;; This function is called by:
 22442 ;;		_QNNrespond
 22443 ;;		_doRqnp
 22444 ;; This function uses a non-reentrant model
 22445 ;;
 22446                           
 22447                           	psect	text100
 22448  009948                     __ptext100:
 22449                           	callstack 0
 22450  009948                     _getParFlags:
 22451                           	callstack 18
 22452                           
 22453                           ; BSR set to: 0
 22454                           ;FliM.c: 523: FLiMprmptr paramptr = (FLiMprmptr)&FLiMparams;
 22455                           
 22456                           ; BSR set to: 0
 22457                           ;incstack = 0
 22458  009948  0E20               	movlw	32
 22459  00994A  6F71               	movwf	getParFlags@paramptr& (0+255),b
 22460  00994C  0E08               	movlw	8
 22461  00994E  6F72               	movwf	(getParFlags@paramptr+1)& (0+255),b
 22462  009950  0E00               	movlw	0
 22463  009952  6F73               	movwf	(getParFlags@paramptr+2)& (0+255),b
 22464                           
 22465                           ;FliM.c: 525: if (flimState == fsFLiMLearn) {
 22466  009954  0E07               	movlw	7
 22467  009956  1816               	xorwf	_flimState^0,w,c
 22468  009958  A4D8               	btfss	status,2,c
 22469  00995A  D00D               	goto	l19235
 22470                           
 22471                           ; BSR set to: 0
 22472                           ;FliM.c: 526: return(32U | 4U) | (paramptr->params.module_flags);
 22473  00995C  0E07               	movlw	7
 22474  00995E  2571               	addwf	getParFlags@paramptr& (0+255),w,b
 22475  009960  6EF6               	movwf	tblptrl,c
 22476  009962  0E00               	movlw	0
 22477  009964  2172               	addwfc	(getParFlags@paramptr+1)& (0+255),w,b
 22478  009966  6EF7               	movwf	tblptrh,c
 22479  009968  0E00               	movlw	0
 22480  00996A  2173               	addwfc	(getParFlags@paramptr+2)& (0+255),w,b
 22481  00996C  6EF8               	movwf	tblptru,c
 22482  00996E  0008               	tblrd		*
 22483  009970  50F5               	movf	tablat,w,c
 22484  009972  0924               	iorlw	36
 22485  009974  0012               	return	
 22486  009976                     l19235:
 22487                           
 22488                           ; BSR set to: 0
 22489                           ;FliM.c: 527: };FliM.c: 528: if (flimState == fsFLiM) {
 22490  009976  0416               	decf	_flimState^0,w,c
 22491  009978  A4D8               	btfss	status,2,c
 22492  00997A  D00D               	goto	l19241
 22493                           
 22494                           ; BSR set to: 0
 22495                           ;FliM.c: 529: return(4U)|(paramptr->params.module_flags);
 22496  00997C  0E07               	movlw	7
 22497  00997E  2571               	addwf	getParFlags@paramptr& (0+255),w,b
 22498  009980  6EF6               	movwf	tblptrl,c
 22499  009982  0E00               	movlw	0
 22500  009984  2172               	addwfc	(getParFlags@paramptr+1)& (0+255),w,b
 22501  009986  6EF7               	movwf	tblptrh,c
 22502  009988  0E00               	movlw	0
 22503  00998A  2173               	addwfc	(getParFlags@paramptr+2)& (0+255),w,b
 22504  00998C  6EF8               	movwf	tblptru,c
 22505  00998E  0008               	tblrd		*
 22506  009990  50F5               	movf	tablat,w,c
 22507  009992  0904               	iorlw	4
 22508  009994  0012               	return	
 22509  009996                     l19241:
 22510                           
 22511                           ; BSR set to: 0
 22512                           ;FliM.c: 530: };FliM.c: 531: return 0;
 22513  009996  0E00               	movlw	0
 22514                           
 22515                           ; BSR set to: 0
 22516  009998  0012               	return		;funcret
 22517  00999A                     __end_of_getParFlags:
 22518                           	callstack 0
 22519                           
 22520 ;; *************** function _parseCbusEvent *****************
 22521 ;; Defined at:
 22522 ;;		line 800 in file "../../github/CBUSlib/events.c"
 22523 ;; Parameters:    Size  Location     Type
 22524 ;;  msg             2   59[BANK0 ] PTR unsigned char 
 22525 ;;		 -> checkCBUS@msg(20), 
 22526 ;; Auto vars:     Size  Location     Type
 22527 ;;  nodeNumber      2   65[BANK0 ] unsigned int 
 22528 ;;  eventNumber     2   63[BANK0 ] unsigned int 
 22529 ;;  tableIndex      1   62[BANK0 ] unsigned char 
 22530 ;; Return value:  Size  Location     Type
 22531 ;;                  1    wreg      unsigned char 
 22532 ;; Registers used:
 22533 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 22534 ;; Tracked objects:
 22535 ;;		On entry : 3F/0
 22536 ;;		On exit  : 3F/0
 22537 ;;		Unchanged: 0/0
 22538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 22539 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22540 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22541 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22542 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22543 ;;Total ram usage:        8 bytes
 22544 ;; Hardware stack levels used: 1
 22545 ;; Hardware stack levels required when called: 16
 22546 ;; This function calls:
 22547 ;;		_findEvent
 22548 ;;		_processEvent
 22549 ;; This function is called by:
 22550 ;;		_parseCBUSMsg
 22551 ;; This function uses a non-reentrant model
 22552 ;;
 22553                           
 22554                           	psect	text101
 22555  008184                     __ptext101:
 22556                           	callstack 0
 22557  008184                     _parseCbusEvent:
 22558                           	callstack 12
 22559                           
 22560                           ; BSR set to: 0
 22561                           ;events.c: 801: WORD nodeNumber;;events.c: 802: WORD eventNumber;;events.c: 803: unsigne
      +                          d char tableIndex;;events.c: 805: if (msg[d0] & 0b00001000) {
 22562                           
 22563                           ; BSR set to: 0
 22564                           ;incstack = 0
 22565  008184  EE20 F006          	lfsr	2,6
 22566  008188  519B               	movf	parseCbusEvent@msg& (0+255),w,b
 22567  00818A  26D9               	addwf	fsr2l,f,c
 22568  00818C  519C               	movf	(parseCbusEvent@msg+1)& (0+255),w,b
 22569  00818E  22DA               	addwfc	fsr2h,f,c
 22570  008190  A6DF               	btfss	indf2,3,c
 22571  008192  D005               	goto	l20141
 22572                           
 22573                           ; BSR set to: 0
 22574                           ;events.c: 806: nodeNumber = 0;
 22575  008194  0E00               	movlw	0
 22576  008196  6FA2               	movwf	(parseCbusEvent@nodeNumber+1)& (0+255),b
 22577  008198  0E00               	movlw	0
 22578  00819A  6FA1               	movwf	parseCbusEvent@nodeNumber& (0+255),b
 22579                           
 22580                           ;events.c: 807: } else {
 22581  00819C  D018               	goto	l20147
 22582  00819E                     l20141:
 22583                           
 22584                           ; BSR set to: 0
 22585                           ;events.c: 808: nodeNumber = msg[d1];
 22586  00819E  EE20 F007          	lfsr	2,7
 22587  0081A2  519B               	movf	parseCbusEvent@msg& (0+255),w,b
 22588  0081A4  26D9               	addwf	fsr2l,f,c
 22589  0081A6  519C               	movf	(parseCbusEvent@msg+1)& (0+255),w,b
 22590  0081A8  22DA               	addwfc	fsr2h,f,c
 22591  0081AA  50DF               	movf	indf2,w,c
 22592  0081AC  6F9D               	movwf	??_parseCbusEvent& (0+255),b
 22593  0081AE  519D               	movf	??_parseCbusEvent& (0+255),w,b
 22594  0081B0  6FA1               	movwf	parseCbusEvent@nodeNumber& (0+255),b
 22595  0081B2  6BA2               	clrf	(parseCbusEvent@nodeNumber+1)& (0+255),b
 22596                           
 22597                           ; BSR set to: 0
 22598                           ;events.c: 809: nodeNumber = nodeNumber << 8;
 22599  0081B4  51A1               	movf	parseCbusEvent@nodeNumber& (0+255),w,b
 22600  0081B6  6FA2               	movwf	(parseCbusEvent@nodeNumber+1)& (0+255),b
 22601  0081B8  6BA1               	clrf	parseCbusEvent@nodeNumber& (0+255),b
 22602                           
 22603                           ; BSR set to: 0
 22604                           ;events.c: 810: nodeNumber |= msg[d2];
 22605  0081BA  EE20 F008          	lfsr	2,8
 22606  0081BE  519B               	movf	parseCbusEvent@msg& (0+255),w,b
 22607  0081C0  26D9               	addwf	fsr2l,f,c
 22608  0081C2  519C               	movf	(parseCbusEvent@msg+1)& (0+255),w,b
 22609  0081C4  22DA               	addwfc	fsr2h,f,c
 22610  0081C6  50DF               	movf	indf2,w,c
 22611  0081C8  6F9D               	movwf	??_parseCbusEvent& (0+255),b
 22612  0081CA  519D               	movf	??_parseCbusEvent& (0+255),w,b
 22613  0081CC  13A1               	iorwf	parseCbusEvent@nodeNumber& (0+255),f,b
 22614  0081CE                     l20147:
 22615                           
 22616                           ; BSR set to: 0
 22617                           ;events.c: 811: };events.c: 813: eventNumber = msg[d3];
 22618  0081CE  EE20 F009          	lfsr	2,9
 22619  0081D2  519B               	movf	parseCbusEvent@msg& (0+255),w,b
 22620  0081D4  26D9               	addwf	fsr2l,f,c
 22621  0081D6  519C               	movf	(parseCbusEvent@msg+1)& (0+255),w,b
 22622  0081D8  22DA               	addwfc	fsr2h,f,c
 22623  0081DA  50DF               	movf	indf2,w,c
 22624  0081DC  6F9D               	movwf	??_parseCbusEvent& (0+255),b
 22625  0081DE  519D               	movf	??_parseCbusEvent& (0+255),w,b
 22626  0081E0  6F9F               	movwf	parseCbusEvent@eventNumber& (0+255),b
 22627  0081E2  6BA0               	clrf	(parseCbusEvent@eventNumber+1)& (0+255),b
 22628                           
 22629                           ; BSR set to: 0
 22630                           ;events.c: 814: eventNumber = eventNumber << 8;
 22631  0081E4  519F               	movf	parseCbusEvent@eventNumber& (0+255),w,b
 22632  0081E6  6FA0               	movwf	(parseCbusEvent@eventNumber+1)& (0+255),b
 22633  0081E8  6B9F               	clrf	parseCbusEvent@eventNumber& (0+255),b
 22634                           
 22635                           ;events.c: 815: eventNumber |= msg[d4];
 22636  0081EA  EE20 F00A          	lfsr	2,10
 22637  0081EE  519B               	movf	parseCbusEvent@msg& (0+255),w,b
 22638  0081F0  26D9               	addwf	fsr2l,f,c
 22639  0081F2  519C               	movf	(parseCbusEvent@msg+1)& (0+255),w,b
 22640  0081F4  22DA               	addwfc	fsr2h,f,c
 22641  0081F6  50DF               	movf	indf2,w,c
 22642  0081F8  6F9D               	movwf	??_parseCbusEvent& (0+255),b
 22643  0081FA  519D               	movf	??_parseCbusEvent& (0+255),w,b
 22644  0081FC  139F               	iorwf	parseCbusEvent@eventNumber& (0+255),f,b
 22645                           
 22646                           ; BSR set to: 0
 22647                           ;events.c: 816: tableIndex = findEvent(nodeNumber, eventNumber);
 22648  0081FE  C0A1  F08E         	movff	parseCbusEvent@nodeNumber,findEvent@nodeNumber
 22649  008202  C0A2  F08F         	movff	parseCbusEvent@nodeNumber+1,findEvent@nodeNumber+1
 22650  008206  C09F  F090         	movff	parseCbusEvent@eventNumber,findEvent@eventNumber
 22651  00820A  C0A0  F091         	movff	parseCbusEvent@eventNumber+1,findEvent@eventNumber+1
 22652  00820E  ECD6  F044         	call	_findEvent	;wreg free
 22653  008212  6F9E               	movwf	parseCbusEvent@tableIndex& (0+255),b
 22654                           
 22655                           ; BSR set to: 0
 22656                           ;events.c: 817: if (tableIndex != 0xff) {
 22657  008214  299E               	incf	parseCbusEvent@tableIndex& (0+255),w,b
 22658  008216  B4D8               	btfsc	status,2,c
 22659  008218  D009               	goto	l20161
 22660                           
 22661                           ; BSR set to: 0
 22662                           ;events.c: 818: processEvent(tableIndex, msg);
 22663  00821A  C09B  F088         	movff	parseCbusEvent@msg,processEvent@msg
 22664  00821E  C09C  F089         	movff	parseCbusEvent@msg+1,processEvent@msg+1
 22665  008222  519E               	movf	parseCbusEvent@tableIndex& (0+255),w,b
 22666  008224  ECB3  F029         	call	_processEvent
 22667                           
 22668                           ; BSR set to: 0
 22669                           ;events.c: 819: return 1;
 22670  008228  0E01               	movlw	1
 22671  00822A  0012               	return	
 22672  00822C                     l20161:
 22673                           
 22674                           ; BSR set to: 0
 22675                           ;events.c: 820: };events.c: 821: return 0;
 22676  00822C  0E00               	movlw	0
 22677                           
 22678                           ; BSR set to: 0
 22679  00822E  0012               	return		;funcret
 22680  008230                     __end_of_parseCbusEvent:
 22681                           	callstack 0
 22682                           
 22683 ;; *************** function _processEvent *****************
 22684 ;; Defined at:
 22685 ;;		line 223 in file "../../github/CANMIOfirmware/mioEvents.c"
 22686 ;; Parameters:    Size  Location     Type
 22687 ;;  tableIndex      1    wreg     unsigned char 
 22688 ;;  msg             2   40[BANK0 ] PTR unsigned char 
 22689 ;;		 -> checkCBUS@msg(20), 
 22690 ;; Auto vars:     Size  Location     Type
 22691 ;;  tableIndex      1   44[BANK0 ] unsigned char 
 22692 ;;  nextSimultan    1   48[BANK0 ] unsigned char 
 22693 ;;  firstAction     1    0        unsigned char 
 22694 ;;  nextAction      2   46[BANK0 ] int 
 22695 ;;  action          2   53[BANK0 ] int 
 22696 ;;  e               1   52[BANK0 ] unsigned char 
 22697 ;;  ca              1   51[BANK0 ] unsigned char 
 22698 ;;  masked_actio    1   50[BANK0 ] unsigned char 
 22699 ;;  io              1   49[BANK0 ] unsigned char 
 22700 ;;  opc             1   45[BANK0 ] unsigned char 
 22701 ;; Return value:  Size  Location     Type
 22702 ;;                  1    wreg      void 
 22703 ;; Registers used:
 22704 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 22705 ;; Tracked objects:
 22706 ;;		On entry : 3F/0
 22707 ;;		On exit  : 3F/0
 22708 ;;		Unchanged: 0/0
 22709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 22710 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22711 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22712 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22713 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 22714 ;;Total ram usage:       15 bytes
 22715 ;; Hardware stack levels used: 1
 22716 ;; Hardware stack levels required when called: 15
 22717 ;; This function calls:
 22718 ;;		___lwdiv
 22719 ;;		___lwmod
 22720 ;;		_getEVs
 22721 ;;		_pushAction
 22722 ;;		_setExpeditedActions
 22723 ;;		_setNormalActions
 22724 ;; This function is called by:
 22725 ;;		_parseCbusEvent
 22726 ;; This function uses a non-reentrant model
 22727 ;;
 22728                           
 22729                           	psect	text102
 22730  005366                     __ptext102:
 22731                           	callstack 0
 22732  005366                     _processEvent:
 22733                           	callstack 12
 22734                           
 22735                           ; BSR set to: 0
 22736                           ;incstack = 0
 22737                           ;processEvent@tableIndex stored from wreg
 22738  005366  6F8C               	movwf	processEvent@tableIndex& (0+255),b
 22739  005368  0100               	movlb	0	; () banked
 22740  00536A  518C               	movf	processEvent@tableIndex& (0+255),w,b
 22741  00536C  EC7A  F03B         	call	_getEVs
 22742                           
 22743                           ; BSR set to: 0
 22744                           ;mioEvents.c: 236: opc=msg[d0];
 22745  005370  EE20 F006          	lfsr	2,6
 22746  005374  5188               	movf	processEvent@msg& (0+255),w,b
 22747  005376  26D9               	addwf	fsr2l,f,c
 22748  005378  5189               	movf	(processEvent@msg+1)& (0+255),w,b
 22749  00537A  22DA               	addwfc	fsr2h,f,c
 22750  00537C  50DF               	movf	indf2,w,c
 22751  00537E  6F8D               	movwf	processEvent@opc& (0+255),b
 22752                           
 22753                           ; BSR set to: 0
 22754                           ;mioEvents.c: 238: if ( ! (opc&0b00000001)) {
 22755  005380  B18D               	btfsc	processEvent@opc& (0+255),0,b
 22756  005382  D08B               	goto	l753
 22757                           
 22758                           ; BSR set to: 0
 22759                           ;mioEvents.c: 242: for (e=1; e<20U ;e++) {
 22760  005384  0E01               	movlw	1
 22761  005386  6F94               	movwf	processEvent@e& (0+255),b
 22762  005388                     l19305:
 22763                           
 22764                           ; BSR set to: 0
 22765                           ;mioEvents.c: 243: action = evs[e];
 22766  005388  0E40               	movlw	low _evs
 22767  00538A  2594               	addwf	processEvent@e& (0+255),w,b
 22768  00538C  6ED9               	movwf	fsr2l,c
 22769  00538E  6ADA               	clrf	fsr2h,c
 22770  005390  0E02               	movlw	high _evs
 22771  005392  22DA               	addwfc	fsr2h,f,c
 22772  005394  50DF               	movf	indf2,w,c
 22773  005396  6F8A               	movwf	??_processEvent& (0+255),b
 22774  005398  518A               	movf	??_processEvent& (0+255),w,b
 22775  00539A  6F95               	movwf	processEvent@action& (0+255),b
 22776  00539C  6B96               	clrf	(processEvent@action+1)& (0+255),b
 22777                           
 22778                           ; BSR set to: 0
 22779                           ;mioEvents.c: 244: if (action != 0) {
 22780  00539E  5195               	movf	processEvent@action& (0+255),w,b
 22781  0053A0  1196               	iorwf	(processEvent@action+1)& (0+255),w,b
 22782  0053A2  B4D8               	btfsc	status,2,c
 22783  0053A4  D075               	goto	l757
 22784                           
 22785                           ; BSR set to: 0
 22786                           ;mioEvents.c: 246: masked_action = (unsigned char)action&0x7FU;
 22787  0053A6  5195               	movf	processEvent@action& (0+255),w,b
 22788  0053A8  0B7F               	andlw	127
 22789  0053AA  6F92               	movwf	processEvent@masked_action& (0+255),b
 22790                           
 22791                           ;mioEvents.c: 247: if ((masked_action) <= (8U + 16U * 5U)) {
 22792  0053AC  0E59               	movlw	89
 22793  0053AE  6192               	cpfslt	processEvent@masked_action& (0+255),b
 22794  0053B0  D06F               	goto	l757
 22795                           
 22796                           ; BSR set to: 0
 22797                           ;mioEvents.c: 249: if ((masked_action) == 7U) {
 22798  0053B2  0E07               	movlw	7
 22799  0053B4  1992               	xorwf	processEvent@masked_action& (0+255),w,b
 22800  0053B6  B4D8               	btfsc	status,2,c
 22801  0053B8  0012               	return	
 22802                           
 22803                           ; BSR set to: 0
 22804                           ;mioEvents.c: 251: };mioEvents.c: 252: if ((masked_action) < 8U) {
 22805  0053BA  0E08               	movlw	8
 22806  0053BC  6192               	cpfslt	processEvent@masked_action& (0+255),b
 22807  0053BE  D004               	goto	l19319
 22808                           
 22809                           ; BSR set to: 0
 22810                           ;mioEvents.c: 253: pushAction((unsigned char)action);
 22811  0053C0  5195               	movf	processEvent@action& (0+255),w,b
 22812  0053C2  ECCE  F050         	call	_pushAction
 22813                           
 22814                           ;mioEvents.c: 254: } else {
 22815  0053C6  D064               	goto	l757
 22816  0053C8                     l19319:
 22817                           
 22818                           ; BSR set to: 0
 22819                           ;mioEvents.c: 255: io = (((masked_action)-8U)/5U);
 22820  0053C8  0EF8               	movlw	248
 22821  0053CA  2592               	addwf	processEvent@masked_action& (0+255),w,b
 22822  0053CC  6F71               	movwf	___lwdiv@dividend& (0+255),b
 22823  0053CE  6B72               	clrf	(___lwdiv@dividend+1)& (0+255),b
 22824  0053D0  0EFF               	movlw	255
 22825  0053D2  2372               	addwfc	(___lwdiv@dividend+1)& (0+255),f,b
 22826  0053D4  0E00               	movlw	0
 22827  0053D6  6F74               	movwf	(___lwdiv@divisor+1)& (0+255),b
 22828  0053D8  0E05               	movlw	5
 22829  0053DA  6F73               	movwf	___lwdiv@divisor& (0+255),b
 22830  0053DC  ECCD  F04C         	call	___lwdiv	;wreg free
 22831  0053E0  5171               	movf	?___lwdiv& (0+255),w,b
 22832  0053E2  6F91               	movwf	processEvent@io& (0+255),b
 22833                           
 22834                           ;mioEvents.c: 256: ca = (((masked_action)-8U)%5U);
 22835  0053E4  0EF8               	movlw	248
 22836  0053E6  2592               	addwf	processEvent@masked_action& (0+255),w,b
 22837  0053E8  6F71               	movwf	___lwmod@dividend& (0+255),b
 22838  0053EA  6B72               	clrf	(___lwmod@dividend+1)& (0+255),b
 22839  0053EC  0EFF               	movlw	255
 22840  0053EE  2372               	addwfc	(___lwmod@dividend+1)& (0+255),f,b
 22841  0053F0  0E00               	movlw	0
 22842  0053F2  6F74               	movwf	(___lwmod@divisor+1)& (0+255),b
 22843  0053F4  0E05               	movlw	5
 22844  0053F6  6F73               	movwf	___lwmod@divisor& (0+255),b
 22845  0053F8  ECD0  F04E         	call	___lwmod	;wreg free
 22846  0053FC  5171               	movf	?___lwmod& (0+255),w,b
 22847  0053FE  6F93               	movwf	processEvent@ca& (0+255),b
 22848                           
 22849                           ;mioEvents.c: 257: switch (NV->io[io].type) {
 22850  005400  D02A               	goto	l19341
 22851  005402                     l19321:
 22852                           
 22853                           ; BSR set to: 0
 22854                           ;mioEvents.c: 259: if (NV->io[io].flags & 0x80U) {
 22855  005402  5191               	movf	processEvent@io& (0+255),w,b
 22856  005404  0D07               	mullw	7
 22857  005406  C0EC  F08A         	movff	_NV,??_processEvent
 22858  00540A  C0ED  F08B         	movff	_NV+1,??_processEvent+1
 22859  00540E  50F3               	movf	243,w,c
 22860  005410  278A               	addwf	??_processEvent& (0+255),f,b
 22861  005412  50F4               	movf	244,w,c
 22862  005414  238B               	addwfc	(??_processEvent+1)& (0+255),f,b
 22863  005416  0E11               	movlw	17
 22864  005418  258A               	addwf	??_processEvent& (0+255),w,b
 22865  00541A  6ED9               	movwf	fsr2l,c
 22866  00541C  0E00               	movlw	0
 22867  00541E  218B               	addwfc	(??_processEvent+1)& (0+255),w,b
 22868  005420  6EDA               	movwf	fsr2h,c
 22869  005422  BEDF               	btfsc	indf2,7,c
 22870                           
 22871                           ; BSR set to: 0
 22872                           ;mioEvents.c: 260: setExpeditedActions();
 22873  005424  EC89  F053         	call	_setExpeditedActions	;wreg free
 22874  005428                     l19325:
 22875                           
 22876                           ; BSR set to: 0
 22877                           ;mioEvents.c: 264: case 3U:;mioEvents.c: 265: if (ca == 0U) {
 22878  005428  5193               	movf	processEvent@ca& (0+255),w,b
 22879  00542A  A4D8               	btfss	status,2,c
 22880  00542C  D002               	goto	l19329
 22881                           
 22882                           ; BSR set to: 0
 22883                           ;mioEvents.c: 267: action++;
 22884  00542E  4B95               	infsnz	processEvent@action& (0+255),f,b
 22885  005430  2B96               	incf	(processEvent@action+1)& (0+255),f,b
 22886  005432                     l19329:
 22887                           
 22888                           ; BSR set to: 0
 22889                           ;mioEvents.c: 268: };mioEvents.c: 269: if (ca == 4U) {
 22890  005432  0E04               	movlw	4
 22891  005434  1993               	xorwf	processEvent@ca& (0+255),w,b
 22892  005436  A4D8               	btfss	status,2,c
 22893  005438  D004               	goto	l19333
 22894                           
 22895                           ; BSR set to: 0
 22896                           ;mioEvents.c: 271: action-=2;
 22897  00543A  0EFE               	movlw	254
 22898  00543C  2795               	addwf	processEvent@action& (0+255),f,b
 22899  00543E  0EFF               	movlw	255
 22900  005440  2396               	addwfc	(processEvent@action+1)& (0+255),f,b
 22901  005442                     l19333:
 22902                           
 22903                           ; BSR set to: 0
 22904                           ;mioEvents.c: 272: };mioEvents.c: 273: pushAction((unsigned char)action);
 22905  005442  5195               	movf	processEvent@action& (0+255),w,b
 22906  005444  ECCE  F050         	call	_pushAction
 22907                           
 22908                           ; BSR set to: 0
 22909                           ;mioEvents.c: 274: setNormalActions();
 22910  005448  EC86  F053         	call	_setNormalActions	;wreg free
 22911                           
 22912                           ;mioEvents.c: 275: break;
 22913  00544C  D021               	goto	l757
 22914  00544E                     l19337:
 22915                           
 22916                           ; BSR set to: 0
 22917                           ;mioEvents.c: 277: pushAction((unsigned char)action);
 22918  00544E  5195               	movf	processEvent@action& (0+255),w,b
 22919  005450  ECCE  F050         	call	_pushAction
 22920                           
 22921                           ;mioEvents.c: 278: break;
 22922  005454  D01D               	goto	l757
 22923  005456                     l19341:
 22924                           
 22925                           ; BSR set to: 0
 22926  005456  5191               	movf	processEvent@io& (0+255),w,b
 22927  005458  0D07               	mullw	7
 22928  00545A  C0EC  F08A         	movff	_NV,??_processEvent
 22929  00545E  C0ED  F08B         	movff	_NV+1,??_processEvent+1
 22930  005462  50F3               	movf	243,w,c
 22931  005464  278A               	addwf	??_processEvent& (0+255),f,b
 22932  005466  50F4               	movf	244,w,c
 22933  005468  238B               	addwfc	(??_processEvent+1)& (0+255),f,b
 22934  00546A  0E10               	movlw	16
 22935  00546C  258A               	addwf	??_processEvent& (0+255),w,b
 22936  00546E  6ED9               	movwf	fsr2l,c
 22937  005470  0E00               	movlw	0
 22938  005472  218B               	addwfc	(??_processEvent+1)& (0+255),w,b
 22939  005474  6EDA               	movwf	fsr2h,c
 22940  005476  50DF               	movf	indf2,w,c
 22941                           
 22942                           ; Switch size 1, requested type "simple"
 22943                           ; Number of cases is 4, Range of values is 1 to 4
 22944                           ; switch strategies available:
 22945                           ; Name         Instructions Cycles
 22946                           ; simple_byte           13     7 (average)
 22947                           ;	Chosen strategy is simple_byte
 22948  005478  0A01               	xorlw	1	; case 1
 22949  00547A  B4D8               	btfsc	status,2,c
 22950  00547C  D7C2               	goto	l19321
 22951  00547E  0A03               	xorlw	3	; case 2
 22952  005480  B4D8               	btfsc	status,2,c
 22953  005482  D7D2               	goto	l19325
 22954  005484  0A01               	xorlw	1	; case 3
 22955  005486  B4D8               	btfsc	status,2,c
 22956  005488  D7CF               	goto	l19325
 22957  00548A  0A07               	xorlw	7	; case 4
 22958  00548C  B4D8               	btfsc	status,2,c
 22959  00548E  D7DF               	goto	l19337
 22960  005490                     l757:
 22961                           
 22962                           ; BSR set to: 0
 22963                           
 22964                           ; BSR set to: 0
 22965  005490  2B94               	incf	processEvent@e& (0+255),f,b
 22966                           
 22967                           ; BSR set to: 0
 22968  005492  0E13               	movlw	19
 22969  005494  6594               	cpfsgt	processEvent@e& (0+255),b
 22970  005496  D778               	goto	l19305
 22971  005498  0012               	return	
 22972  00549A                     l753:
 22973                           
 22974                           ; BSR set to: 0
 22975                           ;mioEvents.c: 290: int nextAction = evs[20U-1];
 22976  00549A  C253  F08E         	movff	_evs+19,processEvent@nextAction
 22977  00549E  6B8F               	clrf	(processEvent@nextAction+1)& (0+255),b
 22978                           
 22979                           ; BSR set to: 0
 22980                           ;mioEvents.c: 291: for (e=20U-1; e>=1 ;e--) {
 22981  0054A0  0E13               	movlw	19
 22982  0054A2  6F94               	movwf	processEvent@e& (0+255),b
 22983  0054A4                     l19351:
 22984                           
 22985                           ; BSR set to: 0
 22986                           ;mioEvents.c: 294: action = nextAction;
 22987                           
 22988                           ; BSR set to: 0
 22989  0054A4  C08E  F095         	movff	processEvent@nextAction,processEvent@action
 22990  0054A8  C08F  F096         	movff	processEvent@nextAction+1,processEvent@action+1
 22991                           
 22992                           ; BSR set to: 0
 22993                           ;mioEvents.c: 298: if (e > 1) {
 22994  0054AC  0E01               	movlw	1
 22995  0054AE  6594               	cpfsgt	processEvent@e& (0+255),b
 22996  0054B0  D00E               	goto	l19361
 22997                           
 22998                           ; BSR set to: 0
 22999                           ;mioEvents.c: 299: nextAction = evs[e-1U];
 23000  0054B2  0E3F               	movlw	low (_evs+65535)
 23001  0054B4  2594               	addwf	processEvent@e& (0+255),w,b
 23002  0054B6  6ED9               	movwf	fsr2l,c
 23003  0054B8  6ADA               	clrf	fsr2h,c
 23004  0054BA  0E02               	movlw	high (_evs+65535)
 23005  0054BC  22DA               	addwfc	fsr2h,f,c
 23006  0054BE  50DF               	movf	indf2,w,c
 23007  0054C0  6F8A               	movwf	??_processEvent& (0+255),b
 23008  0054C2  518A               	movf	??_processEvent& (0+255),w,b
 23009  0054C4  6F8E               	movwf	processEvent@nextAction& (0+255),b
 23010  0054C6  6B8F               	clrf	(processEvent@nextAction+1)& (0+255),b
 23011                           
 23012                           ; BSR set to: 0
 23013                           ;mioEvents.c: 300: nextSimultaneous = (unsigned char)nextAction & 0x80U;
 23014  0054C8  518E               	movf	processEvent@nextAction& (0+255),w,b
 23015  0054CA  0B80               	andlw	128
 23016  0054CC  D001               	goto	L21
 23017  0054CE                     l19361:
 23018                           
 23019                           ; BSR set to: 0
 23020                           ;mioEvents.c: 302: nextSimultaneous = (unsigned char)firstAction & 0x80U;
 23021  0054CE  0E00               	movlw	0
 23022  0054D0                     L21:
 23023  0054D0  6F90               	movwf	processEvent@nextSimultaneous& (0+255),b
 23024                           
 23025                           ; BSR set to: 0
 23026                           ;mioEvents.c: 303: };mioEvents.c: 304: if (action != 0) {
 23027  0054D2  5195               	movf	processEvent@action& (0+255),w,b
 23028  0054D4  1196               	iorwf	(processEvent@action+1)& (0+255),w,b
 23029  0054D6  B4D8               	btfsc	status,2,c
 23030  0054D8  D085               	goto	l778
 23031                           
 23032                           ; BSR set to: 0
 23033                           ;mioEvents.c: 308: };mioEvents.c: 309: action &= 0x7FU;
 23034                           
 23035                           ; BSR set to: 0
 23036                           
 23037                           ; BSR set to: 0
 23038                           ;mioEvents.c: 306: if (firstAction == 0) {
 23039  0054DA  0E7F               	movlw	127
 23040  0054DC  1795               	andwf	processEvent@action& (0+255),f,b
 23041  0054DE  0E00               	movlw	0
 23042  0054E0  1796               	andwf	(processEvent@action+1)& (0+255),f,b
 23043                           
 23044                           ;mioEvents.c: 310: if ((unsigned char)action <= (8U + 16U * 5U)) {
 23045  0054E2  0E59               	movlw	89
 23046  0054E4  6195               	cpfslt	processEvent@action& (0+255),b
 23047  0054E6  D07E               	goto	l778
 23048                           
 23049                           ; BSR set to: 0
 23050                           ;mioEvents.c: 312: if ((unsigned char)action == 7U) {
 23051  0054E8  0E07               	movlw	7
 23052  0054EA  1995               	xorwf	processEvent@action& (0+255),w,b
 23053  0054EC  B4D8               	btfsc	status,2,c
 23054  0054EE  0012               	return	
 23055                           
 23056                           ; BSR set to: 0
 23057                           ;mioEvents.c: 314: };mioEvents.c: 315: if (((unsigned char)action < 8U) && ((unsigned ch
      +                          ar)action != 1U)) {
 23058  0054F0  0E08               	movlw	8
 23059  0054F2  6195               	cpfslt	processEvent@action& (0+255),b
 23060  0054F4  D008               	goto	l19379
 23061                           
 23062                           ; BSR set to: 0
 23063  0054F6  0595               	decf	processEvent@action& (0+255),w,b
 23064  0054F8  B4D8               	btfsc	status,2,c
 23065  0054FA  D005               	goto	l19379
 23066                           
 23067                           ; BSR set to: 0
 23068                           ;mioEvents.c: 316: pushAction((unsigned char)((unsigned char)action|nextSimultaneous));
 23069  0054FC  5195               	movf	processEvent@action& (0+255),w,b
 23070  0054FE  1190               	iorwf	processEvent@nextSimultaneous& (0+255),w,b
 23071  005500  ECCE  F050         	call	_pushAction
 23072                           
 23073                           ;mioEvents.c: 317: } else {
 23074  005504  D06F               	goto	l778
 23075  005506                     l19379:
 23076                           
 23077                           ; BSR set to: 0
 23078                           ;mioEvents.c: 318: io = ((((unsigned char)action)-8U)/5U);
 23079  005506  0EF8               	movlw	248
 23080  005508  2595               	addwf	processEvent@action& (0+255),w,b
 23081  00550A  6F71               	movwf	___lwdiv@dividend& (0+255),b
 23082  00550C  6B72               	clrf	(___lwdiv@dividend+1)& (0+255),b
 23083  00550E  0EFF               	movlw	255
 23084  005510  2372               	addwfc	(___lwdiv@dividend+1)& (0+255),f,b
 23085  005512  0E00               	movlw	0
 23086  005514  6F74               	movwf	(___lwdiv@divisor+1)& (0+255),b
 23087  005516  0E05               	movlw	5
 23088  005518  6F73               	movwf	___lwdiv@divisor& (0+255),b
 23089  00551A  ECCD  F04C         	call	___lwdiv	;wreg free
 23090  00551E  5171               	movf	?___lwdiv& (0+255),w,b
 23091  005520  6F91               	movwf	processEvent@io& (0+255),b
 23092                           
 23093                           ;mioEvents.c: 319: ca = ((((unsigned char)action)-8U)%5U);
 23094  005522  0EF8               	movlw	248
 23095  005524  2595               	addwf	processEvent@action& (0+255),w,b
 23096  005526  6F71               	movwf	___lwmod@dividend& (0+255),b
 23097  005528  6B72               	clrf	(___lwmod@dividend+1)& (0+255),b
 23098  00552A  0EFF               	movlw	255
 23099  00552C  2372               	addwfc	(___lwmod@dividend+1)& (0+255),f,b
 23100  00552E  0E00               	movlw	0
 23101  005530  6F74               	movwf	(___lwmod@divisor+1)& (0+255),b
 23102  005532  0E05               	movlw	5
 23103  005534  6F73               	movwf	___lwmod@divisor& (0+255),b
 23104  005536  ECD0  F04E         	call	___lwmod	;wreg free
 23105  00553A  5171               	movf	?___lwmod& (0+255),w,b
 23106  00553C  6F93               	movwf	processEvent@ca& (0+255),b
 23107                           
 23108                           ;mioEvents.c: 320: switch (NV->io[io].type) {
 23109  00553E  D035               	goto	l19403
 23110  005540                     l19381:
 23111                           
 23112                           ; BSR set to: 0
 23113                           ;mioEvents.c: 322: if (NV->io[io].flags & 0x80U) {
 23114  005540  5191               	movf	processEvent@io& (0+255),w,b
 23115  005542  0D07               	mullw	7
 23116  005544  C0EC  F08A         	movff	_NV,??_processEvent
 23117  005548  C0ED  F08B         	movff	_NV+1,??_processEvent+1
 23118  00554C  50F3               	movf	243,w,c
 23119  00554E  278A               	addwf	??_processEvent& (0+255),f,b
 23120  005550  50F4               	movf	244,w,c
 23121  005552  238B               	addwfc	(??_processEvent+1)& (0+255),f,b
 23122  005554  0E11               	movlw	17
 23123  005556  258A               	addwf	??_processEvent& (0+255),w,b
 23124  005558  6ED9               	movwf	fsr2l,c
 23125  00555A  0E00               	movlw	0
 23126  00555C  218B               	addwfc	(??_processEvent+1)& (0+255),w,b
 23127  00555E  6EDA               	movwf	fsr2h,c
 23128  005560  BEDF               	btfsc	indf2,7,c
 23129                           
 23130                           ; BSR set to: 0
 23131                           ;mioEvents.c: 323: setExpeditedActions();
 23132  005562  EC89  F053         	call	_setExpeditedActions	;wreg free
 23133                           
 23134                           ; BSR set to: 0
 23135                           ;mioEvents.c: 324: };mioEvents.c: 325: if (ca == 3U) {
 23136  005566  0E03               	movlw	3
 23137  005568  1993               	xorwf	processEvent@ca& (0+255),w,b
 23138  00556A  A4D8               	btfss	status,2,c
 23139  00556C  D003               	goto	l19389
 23140                           
 23141                           ; BSR set to: 0
 23142                           ;mioEvents.c: 327: action--;
 23143  00556E  0795               	decf	processEvent@action& (0+255),f,b
 23144  005570  A0D8               	btfss	status,0,c
 23145  005572  0796               	decf	(processEvent@action+1)& (0+255),f,b
 23146  005574                     l19389:
 23147                           
 23148                           ; BSR set to: 0
 23149                           ;mioEvents.c: 331: case 3U:;mioEvents.c: 332: if (ca == 0U) {
 23150  005574  5193               	movf	processEvent@ca& (0+255),w,b
 23151  005576  A4D8               	btfss	status,2,c
 23152  005578  D004               	goto	l788
 23153                           
 23154                           ; BSR set to: 0
 23155                           ;mioEvents.c: 334: action += 2;
 23156  00557A  0E02               	movlw	2
 23157  00557C  2795               	addwf	processEvent@action& (0+255),f,b
 23158  00557E  0E00               	movlw	0
 23159  005580  2396               	addwfc	(processEvent@action+1)& (0+255),f,b
 23160  005582                     l788:
 23161                           
 23162                           ; BSR set to: 0
 23163                           ;mioEvents.c: 335: };mioEvents.c: 336: if (ca == 4U) {
 23164  005582  0E04               	movlw	4
 23165  005584  1993               	xorwf	processEvent@ca& (0+255),w,b
 23166  005586  A4D8               	btfss	status,2,c
 23167  005588  D004               	goto	l19395
 23168                           
 23169                           ; BSR set to: 0
 23170                           ;mioEvents.c: 338: action -= 3;
 23171  00558A  0EFD               	movlw	253
 23172  00558C  2795               	addwf	processEvent@action& (0+255),f,b
 23173  00558E  0EFF               	movlw	255
 23174  005590  2396               	addwfc	(processEvent@action+1)& (0+255),f,b
 23175  005592                     l19395:
 23176                           
 23177                           ; BSR set to: 0
 23178                           ;mioEvents.c: 339: };mioEvents.c: 340: pushAction((unsigned char)((unsigned char)action|
      +                          nextSimultaneous));
 23179  005592  5195               	movf	processEvent@action& (0+255),w,b
 23180  005594  1190               	iorwf	processEvent@nextSimultaneous& (0+255),w,b
 23181  005596  ECCE  F050         	call	_pushAction
 23182                           
 23183                           ; BSR set to: 0
 23184                           ;mioEvents.c: 341: setNormalActions();
 23185  00559A  EC86  F053         	call	_setNormalActions	;wreg free
 23186                           
 23187                           ;mioEvents.c: 342: break;
 23188  00559E  D022               	goto	l778
 23189  0055A0                     l19399:
 23190                           
 23191                           ; BSR set to: 0
 23192                           ;mioEvents.c: 344: pushAction((unsigned char)((unsigned char)action|nextSimultaneous));
 23193  0055A0  5195               	movf	processEvent@action& (0+255),w,b
 23194  0055A2  1190               	iorwf	processEvent@nextSimultaneous& (0+255),w,b
 23195  0055A4  ECCE  F050         	call	_pushAction
 23196                           
 23197                           ;mioEvents.c: 345: break;
 23198  0055A8  D01D               	goto	l778
 23199  0055AA                     l19403:
 23200                           
 23201                           ; BSR set to: 0
 23202  0055AA  5191               	movf	processEvent@io& (0+255),w,b
 23203  0055AC  0D07               	mullw	7
 23204  0055AE  C0EC  F08A         	movff	_NV,??_processEvent
 23205  0055B2  C0ED  F08B         	movff	_NV+1,??_processEvent+1
 23206  0055B6  50F3               	movf	243,w,c
 23207  0055B8  278A               	addwf	??_processEvent& (0+255),f,b
 23208  0055BA  50F4               	movf	244,w,c
 23209  0055BC  238B               	addwfc	(??_processEvent+1)& (0+255),f,b
 23210  0055BE  0E10               	movlw	16
 23211  0055C0  258A               	addwf	??_processEvent& (0+255),w,b
 23212  0055C2  6ED9               	movwf	fsr2l,c
 23213  0055C4  0E00               	movlw	0
 23214  0055C6  218B               	addwfc	(??_processEvent+1)& (0+255),w,b
 23215  0055C8  6EDA               	movwf	fsr2h,c
 23216  0055CA  50DF               	movf	indf2,w,c
 23217                           
 23218                           ; Switch size 1, requested type "simple"
 23219                           ; Number of cases is 4, Range of values is 1 to 4
 23220                           ; switch strategies available:
 23221                           ; Name         Instructions Cycles
 23222                           ; simple_byte           13     7 (average)
 23223                           ;	Chosen strategy is simple_byte
 23224  0055CC  0A01               	xorlw	1	; case 1
 23225  0055CE  B4D8               	btfsc	status,2,c
 23226  0055D0  D7B7               	goto	l19381
 23227  0055D2  0A03               	xorlw	3	; case 2
 23228  0055D4  B4D8               	btfsc	status,2,c
 23229  0055D6  D7CE               	goto	l19389
 23230  0055D8  0A01               	xorlw	1	; case 3
 23231  0055DA  B4D8               	btfsc	status,2,c
 23232  0055DC  D7CB               	goto	l19389
 23233  0055DE  0A07               	xorlw	7	; case 4
 23234  0055E0  B4D8               	btfsc	status,2,c
 23235  0055E2  D7DE               	goto	l19399
 23236  0055E4                     l778:
 23237                           
 23238                           ; BSR set to: 0
 23239                           
 23240                           ; BSR set to: 0
 23241  0055E4  0794               	decf	processEvent@e& (0+255),f,b
 23242                           
 23243                           ; BSR set to: 0
 23244  0055E6  5194               	movf	processEvent@e& (0+255),w,b
 23245  0055E8  B4D8               	btfsc	status,2,c
 23246  0055EA  0012               	return	
 23247  0055EC  D75B               	goto	l19351
 23248  0055EE                     __end_of_processEvent:
 23249                           	callstack 0
 23250                           
 23251 ;; *************** function _setNormalActions *****************
 23252 ;; Defined at:
 23253 ;;		line 158 in file "../../github/CANMIOfirmware/actionQueue.c"
 23254 ;; Parameters:    Size  Location     Type
 23255 ;;		None
 23256 ;; Auto vars:     Size  Location     Type
 23257 ;;		None
 23258 ;; Return value:  Size  Location     Type
 23259 ;;                  1    wreg      void 
 23260 ;; Registers used:
 23261 ;;		wreg, status,2
 23262 ;; Tracked objects:
 23263 ;;		On entry : 3F/0
 23264 ;;		On exit  : 3F/0
 23265 ;;		Unchanged: 3F/0
 23266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 23267 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23268 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23269 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23270 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23271 ;;Total ram usage:        0 bytes
 23272 ;; Hardware stack levels used: 1
 23273 ;; Hardware stack levels required when called: 8
 23274 ;; This function calls:
 23275 ;;		Nothing
 23276 ;; This function is called by:
 23277 ;;		_processEvent
 23278 ;; This function uses a non-reentrant model
 23279 ;;
 23280                           
 23281                           	psect	text103
 23282  00A70C                     __ptext103:
 23283                           	callstack 0
 23284  00A70C                     _setNormalActions:
 23285                           	callstack 18
 23286                           
 23287                           ; BSR set to: 0
 23288                           ;actionQueue.c: 159: expedited = 0;
 23289                           
 23290                           ; BSR set to: 0
 23291                           ;incstack = 0
 23292  00A70C  0E00               	movlw	0
 23293  00A70E  6E1B               	movwf	_expedited^0,c
 23294                           
 23295                           ; BSR set to: 0
 23296  00A710  0012               	return		;funcret
 23297  00A712                     __end_of_setNormalActions:
 23298                           	callstack 0
 23299                           
 23300 ;; *************** function _setExpeditedActions *****************
 23301 ;; Defined at:
 23302 ;;		line 151 in file "../../github/CANMIOfirmware/actionQueue.c"
 23303 ;; Parameters:    Size  Location     Type
 23304 ;;		None
 23305 ;; Auto vars:     Size  Location     Type
 23306 ;;		None
 23307 ;; Return value:  Size  Location     Type
 23308 ;;                  1    wreg      void 
 23309 ;; Registers used:
 23310 ;;		wreg, status,2
 23311 ;; Tracked objects:
 23312 ;;		On entry : 3F/0
 23313 ;;		On exit  : 3F/0
 23314 ;;		Unchanged: 3F/0
 23315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 23316 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23317 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23318 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23319 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23320 ;;Total ram usage:        0 bytes
 23321 ;; Hardware stack levels used: 1
 23322 ;; Hardware stack levels required when called: 8
 23323 ;; This function calls:
 23324 ;;		Nothing
 23325 ;; This function is called by:
 23326 ;;		_processEvent
 23327 ;; This function uses a non-reentrant model
 23328 ;;
 23329                           
 23330                           	psect	text104
 23331  00A712                     __ptext104:
 23332                           	callstack 0
 23333  00A712                     _setExpeditedActions:
 23334                           	callstack 18
 23335                           
 23336                           ; BSR set to: 0
 23337                           ;actionQueue.c: 152: expedited = 1;
 23338                           
 23339                           ; BSR set to: 0
 23340                           ;incstack = 0
 23341  00A712  0E01               	movlw	1
 23342  00A714  6E1B               	movwf	_expedited^0,c
 23343                           
 23344                           ; BSR set to: 0
 23345  00A716  0012               	return		;funcret
 23346  00A718                     __end_of_setExpeditedActions:
 23347                           	callstack 0
 23348                           
 23349 ;; *************** function _pushAction *****************
 23350 ;; Defined at:
 23351 ;;		line 77 in file "../../github/CANMIOfirmware/actionQueue.c"
 23352 ;; Parameters:    Size  Location     Type
 23353 ;;  a               1    wreg     unsigned char 
 23354 ;; Auto vars:     Size  Location     Type
 23355 ;;  a               1   28[BANK0 ] unsigned char 
 23356 ;; Return value:  Size  Location     Type
 23357 ;;                  1    wreg      unsigned char 
 23358 ;; Registers used:
 23359 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 23360 ;; Tracked objects:
 23361 ;;		On entry : 3F/0
 23362 ;;		On exit  : 3F/0
 23363 ;;		Unchanged: 0/0
 23364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 23365 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23366 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23367 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23368 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23369 ;;Total ram usage:        1 bytes
 23370 ;; Hardware stack levels used: 1
 23371 ;; Hardware stack levels required when called: 9
 23372 ;; This function calls:
 23373 ;;		_push
 23374 ;; This function is called by:
 23375 ;;		_processEvent
 23376 ;; This function uses a non-reentrant model
 23377 ;;
 23378                           
 23379                           	psect	text105
 23380  00A19C                     __ptext105:
 23381                           	callstack 0
 23382  00A19C                     _pushAction:
 23383                           	callstack 17
 23384                           
 23385                           ; BSR set to: 0
 23386                           ;incstack = 0
 23387                           ;pushAction@a stored from wreg
 23388  00A19C  6F7C               	movwf	pushAction@a& (0+255),b
 23389                           
 23390                           ;actionQueue.c: 78: if (expedited) {
 23391  00A19E  501B               	movf	_expedited^0,w,c
 23392  00A1A0  B4D8               	btfsc	status,2,c
 23393  00A1A2  D00A               	goto	l18819
 23394                           
 23395                           ;actionQueue.c: 79: return push(&expeditedQueue, a);;	Return value of _pushAction is nev
      +                          er used
 23396  00A1A4  0EE3               	movlw	low _expeditedQueue
 23397  00A1A6  0100               	movlb	0	; () banked
 23398  00A1A8  6F71               	movwf	push@q& (0+255),b
 23399  00A1AA  0E01               	movlw	high _expeditedQueue
 23400  00A1AC  6F72               	movwf	(push@q+1)& (0+255),b
 23401  00A1AE  C07C  F073         	movff	pushAction@a,push@a
 23402  00A1B2  ECBF  F03C         	call	_push	;wreg free
 23403  00A1B6  0012               	return	
 23404  00A1B8                     l18819:
 23405                           
 23406                           ;actionQueue.c: 80: };actionQueue.c: 81: return push(&normalQueue, a);;	Return value of 
      +                          _pushAction is never used
 23407  00A1B8  0EE8               	movlw	low _normalQueue
 23408  00A1BA  0100               	movlb	0	; () banked
 23409  00A1BC  6F71               	movwf	push@q& (0+255),b
 23410  00A1BE  0E01               	movlw	high _normalQueue
 23411  00A1C0  6F72               	movwf	(push@q+1)& (0+255),b
 23412  00A1C2  C07C  F073         	movff	pushAction@a,push@a
 23413  00A1C6  ECBF  F03C         	call	_push	;wreg free
 23414                           
 23415                           ; BSR set to: 0
 23416  00A1CA  0012               	return		;funcret
 23417  00A1CC                     __end_of_pushAction:
 23418                           	callstack 0
 23419                           
 23420 ;; *************** function _push *****************
 23421 ;; Defined at:
 23422 ;;		line 46 in file "../../github/CANMIOfirmware/queue.c"
 23423 ;; Parameters:    Size  Location     Type
 23424 ;;  q               2   17[BANK0 ] PTR struct Queue
 23425 ;;		 -> expeditedQueue(5), normalQueue(5), 
 23426 ;;  a               1   19[BANK0 ] unsigned char 
 23427 ;; Auto vars:     Size  Location     Type
 23428 ;;		None
 23429 ;; Return value:  Size  Location     Type
 23430 ;;                  1    wreg      unsigned char 
 23431 ;; Registers used:
 23432 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 23433 ;; Tracked objects:
 23434 ;;		On entry : 3F/0
 23435 ;;		On exit  : 3F/0
 23436 ;;		Unchanged: 0/0
 23437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 23438 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23439 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23440 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23441 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23442 ;;Total ram usage:       11 bytes
 23443 ;; Hardware stack levels used: 1
 23444 ;; Hardware stack levels required when called: 8
 23445 ;; This function calls:
 23446 ;;		Nothing
 23447 ;; This function is called by:
 23448 ;;		_pushAction
 23449 ;; This function uses a non-reentrant model
 23450 ;;
 23451                           
 23452                           	psect	text106
 23453  00797E                     __ptext106:
 23454                           	callstack 0
 23455  00797E                     _push:
 23456                           	callstack 17
 23457                           
 23458                           ; BSR set to: 0
 23459                           ;queue.c: 47: if (((q->writeIdx+1)&((q->size)-1)) == q->readIdx) return 0;
 23460                           
 23461                           ; BSR set to: 0
 23462                           ;incstack = 0
 23463  00797E  EE20 F001          	lfsr	2,1
 23464  007982  5171               	movf	push@q& (0+255),w,b
 23465  007984  26D9               	addwf	fsr2l,f,c
 23466  007986  5172               	movf	(push@q+1)& (0+255),w,b
 23467  007988  22DA               	addwfc	fsr2h,f,c
 23468  00798A  50DF               	movf	indf2,w,c
 23469  00798C  6F74               	movwf	??_push& (0+255),b
 23470  00798E  6B75               	clrf	(??_push+1)& (0+255),b
 23471  007990  0EFF               	movlw	255
 23472  007992  6F76               	movwf	(??_push+2)& (0+255),b
 23473  007994  0EFF               	movlw	255
 23474  007996  6F77               	movwf	(??_push+3)& (0+255),b
 23475  007998  C071  FFD9         	movff	push@q,fsr2l
 23476  00799C  C072  FFDA         	movff	push@q+1,fsr2h
 23477  0079A0  50DF               	movf	indf2,w,c
 23478  0079A2  6F78               	movwf	(??_push+4)& (0+255),b
 23479  0079A4  6B79               	clrf	(??_push+5)& (0+255),b
 23480  0079A6  5176               	movf	(??_push+2)& (0+255),w,b
 23481  0079A8  2778               	addwf	(??_push+4)& (0+255),f,b
 23482  0079AA  5177               	movf	(??_push+3)& (0+255),w,b
 23483  0079AC  2379               	addwfc	(??_push+5)& (0+255),f,b
 23484  0079AE  EE20 F002          	lfsr	2,2
 23485  0079B2  5171               	movf	push@q& (0+255),w,b
 23486  0079B4  26D9               	addwf	fsr2l,f,c
 23487  0079B6  5172               	movf	(push@q+1)& (0+255),w,b
 23488  0079B8  22DA               	addwfc	fsr2h,f,c
 23489  0079BA  50DF               	movf	indf2,w,c
 23490  0079BC  6F7A               	movwf	(??_push+6)& (0+255),b
 23491  0079BE  6B7B               	clrf	(??_push+7)& (0+255),b
 23492  0079C0  0E01               	movlw	1
 23493  0079C2  277A               	addwf	(??_push+6)& (0+255),f,b
 23494  0079C4  0E00               	movlw	0
 23495  0079C6  237B               	addwfc	(??_push+7)& (0+255),f,b
 23496  0079C8  5178               	movf	(??_push+4)& (0+255),w,b
 23497  0079CA  177A               	andwf	(??_push+6)& (0+255),f,b
 23498  0079CC  5179               	movf	(??_push+5)& (0+255),w,b
 23499  0079CE  177B               	andwf	(??_push+7)& (0+255),f,b
 23500  0079D0  5174               	movf	??_push& (0+255),w,b
 23501  0079D2  197A               	xorwf	(??_push+6)& (0+255),w,b
 23502  0079D4  E106               	bnz	l18573
 23503  0079D6  5175               	movf	(??_push+1)& (0+255),w,b
 23504  0079D8  197B               	xorwf	(??_push+7)& (0+255),w,b
 23505  0079DA  A4D8               	btfss	status,2,c
 23506  0079DC  D002               	goto	l18573
 23507                           
 23508                           ; BSR set to: 0
 23509  0079DE  0E00               	movlw	0
 23510  0079E0  0012               	return	
 23511  0079E2                     l18573:
 23512                           
 23513                           ; BSR set to: 0
 23514                           ;queue.c: 48: q->queue[q->writeIdx++] = a;
 23515  0079E2  EE20 F002          	lfsr	2,2
 23516  0079E6  5171               	movf	push@q& (0+255),w,b
 23517  0079E8  26D9               	addwf	fsr2l,f,c
 23518  0079EA  5172               	movf	(push@q+1)& (0+255),w,b
 23519  0079EC  22DA               	addwfc	fsr2h,f,c
 23520  0079EE  50DF               	movf	indf2,w,c
 23521  0079F0  6F74               	movwf	??_push& (0+255),b
 23522  0079F2  EE20 F003          	lfsr	2,3
 23523  0079F6  5171               	movf	push@q& (0+255),w,b
 23524  0079F8  26D9               	addwf	fsr2l,f,c
 23525  0079FA  5172               	movf	(push@q+1)& (0+255),w,b
 23526  0079FC  22DA               	addwfc	fsr2h,f,c
 23527  0079FE  CFDE F075          	movff	postinc2,??_push+1
 23528  007A02  CFDD F076          	movff	postdec2,??_push+2
 23529  007A06  5174               	movf	??_push& (0+255),w,b
 23530  007A08  2575               	addwf	(??_push+1)& (0+255),w,b
 23531  007A0A  6ED9               	movwf	fsr2l,c
 23532  007A0C  0E00               	movlw	0
 23533  007A0E  2176               	addwfc	(??_push+2)& (0+255),w,b
 23534  007A10  6EDA               	movwf	fsr2h,c
 23535  007A12  C073  FFDF         	movff	push@a,indf2
 23536  007A16  EE20 F002          	lfsr	2,2
 23537  007A1A  5171               	movf	push@q& (0+255),w,b
 23538  007A1C  26D9               	addwf	fsr2l,f,c
 23539  007A1E  5172               	movf	(push@q+1)& (0+255),w,b
 23540  007A20  22DA               	addwfc	fsr2h,f,c
 23541  007A22  2ADF               	incf	indf2,f,c
 23542                           
 23543                           ; BSR set to: 0
 23544                           ;queue.c: 49: if (q->writeIdx >= q->size) q->writeIdx = 0;
 23545  007A24  C071  FFD9         	movff	push@q,fsr2l
 23546  007A28  C072  FFDA         	movff	push@q+1,fsr2h
 23547  007A2C  EE10 F002          	lfsr	1,2
 23548  007A30  5171               	movf	push@q& (0+255),w,b
 23549  007A32  26E1               	addwf	fsr1l,f,c
 23550  007A34  5172               	movf	(push@q+1)& (0+255),w,b
 23551  007A36  22E2               	addwfc	fsr1h,f,c
 23552  007A38  50DE               	movf	postinc2,w,c
 23553  007A3A  5CE6               	subwf	postinc1,w,c
 23554  007A3C  A0D8               	btfss	status,0,c
 23555  007A3E  D008               	goto	l18579
 23556                           
 23557                           ; BSR set to: 0
 23558  007A40  EE20 F002          	lfsr	2,2
 23559  007A44  5171               	movf	push@q& (0+255),w,b
 23560  007A46  26D9               	addwf	fsr2l,f,c
 23561  007A48  5172               	movf	(push@q+1)& (0+255),w,b
 23562  007A4A  22DA               	addwfc	fsr2h,f,c
 23563  007A4C  0E00               	movlw	0
 23564  007A4E  6EDF               	movwf	indf2,c
 23565  007A50                     l18579:
 23566                           
 23567                           ; BSR set to: 0
 23568                           ;queue.c: 50: return 1;
 23569  007A50  0E01               	movlw	1
 23570                           
 23571                           ; BSR set to: 0
 23572  007A52  0012               	return		;funcret
 23573  007A54                     __end_of_push:
 23574                           	callstack 0
 23575                           
 23576 ;; *************** function ___lwmod *****************
 23577 ;; Defined at:
 23578 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\lwmod.c"
 23579 ;; Parameters:    Size  Location     Type
 23580 ;;  dividend        2   17[BANK0 ] unsigned int 
 23581 ;;  divisor         2   19[BANK0 ] unsigned int 
 23582 ;; Auto vars:     Size  Location     Type
 23583 ;;  counter         1   21[BANK0 ] unsigned char 
 23584 ;; Return value:  Size  Location     Type
 23585 ;;                  2   17[BANK0 ] unsigned int 
 23586 ;; Registers used:
 23587 ;;		wreg, status,2, status,0
 23588 ;; Tracked objects:
 23589 ;;		On entry : 3F/0
 23590 ;;		On exit  : 3F/0
 23591 ;;		Unchanged: 0/0
 23592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 23593 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23594 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23595 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23596 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23597 ;;Total ram usage:        5 bytes
 23598 ;; Hardware stack levels used: 1
 23599 ;; Hardware stack levels required when called: 8
 23600 ;; This function calls:
 23601 ;;		Nothing
 23602 ;; This function is called by:
 23603 ;;		_processEvent
 23604 ;;		_processActions
 23605 ;;		_validateNV
 23606 ;;		_actUponNVchange
 23607 ;; This function uses a non-reentrant model
 23608 ;;
 23609                           
 23610                           	psect	text107
 23611  009DA0                     __ptext107:
 23612                           	callstack 0
 23613  009DA0                     ___lwmod:
 23614                           	callstack 21
 23615                           
 23616                           ; BSR set to: 0
 23617                           
 23618                           ; BSR set to: 0
 23619                           ;incstack = 0
 23620  009DA0  5173               	movf	___lwmod@divisor& (0+255),w,b
 23621  009DA2  1174               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 23622  009DA4  B4D8               	btfsc	status,2,c
 23623  009DA6  D018               	goto	l3149
 23624                           
 23625                           ; BSR set to: 0
 23626  009DA8  0E01               	movlw	1
 23627  009DAA  6F75               	movwf	___lwmod@counter& (0+255),b
 23628  009DAC  D004               	goto	l18803
 23629  009DAE                     l18801:
 23630                           
 23631                           ; BSR set to: 0
 23632  009DAE  90D8               	bcf	status,0,c
 23633  009DB0  3773               	rlcf	___lwmod@divisor& (0+255),f,b
 23634  009DB2  3774               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 23635  009DB4  2B75               	incf	___lwmod@counter& (0+255),f,b
 23636  009DB6                     l18803:
 23637                           
 23638                           ; BSR set to: 0
 23639  009DB6  AF74               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 23640  009DB8  D7FA               	goto	l18801
 23641  009DBA                     u23290:
 23642                           
 23643                           ; BSR set to: 0
 23644  009DBA  5173               	movf	___lwmod@divisor& (0+255),w,b
 23645  009DBC  5D71               	subwf	___lwmod@dividend& (0+255),w,b
 23646  009DBE  5174               	movf	(___lwmod@divisor+1)& (0+255),w,b
 23647  009DC0  5972               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 23648  009DC2  A0D8               	btfss	status,0,c
 23649  009DC4  D004               	goto	l18809
 23650                           
 23651                           ; BSR set to: 0
 23652  009DC6  5173               	movf	___lwmod@divisor& (0+255),w,b
 23653  009DC8  5F71               	subwf	___lwmod@dividend& (0+255),f,b
 23654  009DCA  5174               	movf	(___lwmod@divisor+1)& (0+255),w,b
 23655  009DCC  5B72               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 23656  009DCE                     l18809:
 23657                           
 23658                           ; BSR set to: 0
 23659  009DCE  90D8               	bcf	status,0,c
 23660  009DD0  3374               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 23661  009DD2  3373               	rrcf	___lwmod@divisor& (0+255),f,b
 23662                           
 23663                           ; BSR set to: 0
 23664  009DD4  2F75               	decfsz	___lwmod@counter& (0+255),f,b
 23665  009DD6  D7F1               	goto	u23290
 23666  009DD8                     l3149:
 23667                           
 23668                           ; BSR set to: 0
 23669  009DD8  C071  F071         	movff	___lwmod@dividend,?___lwmod
 23670  009DDC  C072  F072         	movff	___lwmod@dividend+1,?___lwmod+1
 23671                           
 23672                           ; BSR set to: 0
 23673  009DE0  0012               	return		;funcret
 23674  009DE2                     __end_of___lwmod:
 23675                           	callstack 0
 23676                           
 23677 ;; *************** function ___lwdiv *****************
 23678 ;; Defined at:
 23679 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\lwdiv.c"
 23680 ;; Parameters:    Size  Location     Type
 23681 ;;  dividend        2   17[BANK0 ] unsigned int 
 23682 ;;  divisor         2   19[BANK0 ] unsigned int 
 23683 ;; Auto vars:     Size  Location     Type
 23684 ;;  quotient        2   22[BANK0 ] unsigned int 
 23685 ;;  counter         1   21[BANK0 ] unsigned char 
 23686 ;; Return value:  Size  Location     Type
 23687 ;;                  2   17[BANK0 ] unsigned int 
 23688 ;; Registers used:
 23689 ;;		wreg, status,2, status,0
 23690 ;; Tracked objects:
 23691 ;;		On entry : 3F/0
 23692 ;;		On exit  : 3F/0
 23693 ;;		Unchanged: 0/0
 23694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 23695 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23696 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23697 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23698 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23699 ;;Total ram usage:        7 bytes
 23700 ;; Hardware stack levels used: 1
 23701 ;; Hardware stack levels required when called: 8
 23702 ;; This function calls:
 23703 ;;		Nothing
 23704 ;; This function is called by:
 23705 ;;		_processEvent
 23706 ;;		_processActions
 23707 ;;		_validateNV
 23708 ;;		_actUponNVchange
 23709 ;; This function uses a non-reentrant model
 23710 ;;
 23711                           
 23712                           	psect	text108
 23713  00999A                     __ptext108:
 23714                           	callstack 0
 23715  00999A                     ___lwdiv:
 23716                           	callstack 21
 23717                           
 23718                           ; BSR set to: 0
 23719                           
 23720                           ; BSR set to: 0
 23721                           ;incstack = 0
 23722  00999A  0E00               	movlw	0
 23723  00999C  6F77               	movwf	(___lwdiv@quotient+1)& (0+255),b
 23724  00999E  0E00               	movlw	0
 23725  0099A0  6F76               	movwf	___lwdiv@quotient& (0+255),b
 23726                           
 23727                           ; BSR set to: 0
 23728  0099A2  5173               	movf	___lwdiv@divisor& (0+255),w,b
 23729  0099A4  1174               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 23730  0099A6  B4D8               	btfsc	status,2,c
 23731  0099A8  D01C               	goto	l3139
 23732                           
 23733                           ; BSR set to: 0
 23734  0099AA  0E01               	movlw	1
 23735  0099AC  6F75               	movwf	___lwdiv@counter& (0+255),b
 23736  0099AE  D004               	goto	l18783
 23737  0099B0                     l18781:
 23738                           
 23739                           ; BSR set to: 0
 23740  0099B0  90D8               	bcf	status,0,c
 23741  0099B2  3773               	rlcf	___lwdiv@divisor& (0+255),f,b
 23742  0099B4  3774               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 23743  0099B6  2B75               	incf	___lwdiv@counter& (0+255),f,b
 23744  0099B8                     l18783:
 23745                           
 23746                           ; BSR set to: 0
 23747  0099B8  AF74               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 23748  0099BA  D7FA               	goto	l18781
 23749  0099BC                     u23260:
 23750                           
 23751                           ; BSR set to: 0
 23752  0099BC  90D8               	bcf	status,0,c
 23753  0099BE  3776               	rlcf	___lwdiv@quotient& (0+255),f,b
 23754  0099C0  3777               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 23755                           
 23756                           ; BSR set to: 0
 23757  0099C2  5173               	movf	___lwdiv@divisor& (0+255),w,b
 23758  0099C4  5D71               	subwf	___lwdiv@dividend& (0+255),w,b
 23759  0099C6  5174               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 23760  0099C8  5972               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 23761  0099CA  A0D8               	btfss	status,0,c
 23762  0099CC  D005               	goto	l18793
 23763                           
 23764                           ; BSR set to: 0
 23765  0099CE  5173               	movf	___lwdiv@divisor& (0+255),w,b
 23766  0099D0  5F71               	subwf	___lwdiv@dividend& (0+255),f,b
 23767  0099D2  5174               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 23768  0099D4  5B72               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 23769                           
 23770                           ; BSR set to: 0
 23771  0099D6  8176               	bsf	___lwdiv@quotient& (0+255),0,b
 23772  0099D8                     l18793:
 23773                           
 23774                           ; BSR set to: 0
 23775  0099D8  90D8               	bcf	status,0,c
 23776  0099DA  3374               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 23777  0099DC  3373               	rrcf	___lwdiv@divisor& (0+255),f,b
 23778                           
 23779                           ; BSR set to: 0
 23780  0099DE  2F75               	decfsz	___lwdiv@counter& (0+255),f,b
 23781  0099E0  D7ED               	goto	u23260
 23782  0099E2                     l3139:
 23783                           
 23784                           ; BSR set to: 0
 23785  0099E2  C076  F071         	movff	___lwdiv@quotient,?___lwdiv
 23786  0099E6  C077  F072         	movff	___lwdiv@quotient+1,?___lwdiv+1
 23787                           
 23788                           ; BSR set to: 0
 23789  0099EA  0012               	return		;funcret
 23790  0099EC                     __end_of___lwdiv:
 23791                           	callstack 0
 23792                           
 23793 ;; *************** function _longFlicker *****************
 23794 ;; Defined at:
 23795 ;;		line 179 in file "../../github/CBUSlib/StatusLeds.c"
 23796 ;; Parameters:    Size  Location     Type
 23797 ;;		None
 23798 ;; Auto vars:     Size  Location     Type
 23799 ;;		None
 23800 ;; Return value:  Size  Location     Type
 23801 ;;                  1    wreg      void 
 23802 ;; Registers used:
 23803 ;;		wreg, status,2, status,0, cstack
 23804 ;; Tracked objects:
 23805 ;;		On entry : 3F/0
 23806 ;;		On exit  : 3F/1
 23807 ;;		Unchanged: 0/0
 23808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 23809 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23810 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23811 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23812 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23813 ;;Total ram usage:        0 bytes
 23814 ;; Hardware stack levels used: 1
 23815 ;; Hardware stack levels required when called: 9
 23816 ;; This function calls:
 23817 ;;		_tickGet
 23818 ;; This function is called by:
 23819 ;;		_checkCBUS
 23820 ;; This function uses a non-reentrant model
 23821 ;;
 23822                           
 23823                           	psect	text109
 23824  00A1CC                     __ptext109:
 23825                           	callstack 0
 23826  00A1CC                     _longFlicker:
 23827                           	callstack 20
 23828                           
 23829                           ; BSR set to: 0
 23830                           ;StatusLeds.c: 180: flickerTime.Val = tickGet() + (62500/2);
 23831                           
 23832                           ; BSR set to: 0
 23833                           ;incstack = 0
 23834  00A1CC  ECA3  F04B         	call	_tickGet	;wreg free
 23835  00A1D0  0E12               	movlw	18
 23836  00A1D2  2571               	addwf	?_tickGet& (0+255),w,b
 23837  00A1D4  0101               	movlb	1	; () banked
 23838  00A1D6  6FA0               	movwf	_flickerTime& (0+255),b
 23839  00A1D8  0E7A               	movlw	122
 23840  00A1DA  0100               	movlb	0	; () banked
 23841  00A1DC  2172               	addwfc	(?_tickGet+1)& (0+255),w,b
 23842  00A1DE  0101               	movlb	1	; () banked
 23843  00A1E0  6FA1               	movwf	(_flickerTime+1)& (0+255),b
 23844  00A1E2  0E00               	movlw	0
 23845  00A1E4  0100               	movlb	0	; () banked
 23846  00A1E6  2173               	addwfc	(?_tickGet+2)& (0+255),w,b
 23847  00A1E8  0101               	movlb	1	; () banked
 23848  00A1EA  6FA2               	movwf	(_flickerTime+2)& (0+255),b
 23849  00A1EC  0E00               	movlw	0
 23850  00A1EE  0100               	movlb	0	; () banked
 23851  00A1F0  2174               	addwfc	(?_tickGet+3)& (0+255),w,b
 23852  00A1F2  0101               	movlb	1	; () banked
 23853  00A1F4  6FA3               	movwf	(_flickerTime+3)& (0+255),b
 23854                           
 23855                           ; BSR set to: 1
 23856                           ;StatusLeds.c: 181: flickerState = flickWaitingOn;
 23857  00A1F6  0E01               	movlw	1
 23858  00A1F8  6FD2               	movwf	_flickerState& (0+255),b
 23859                           
 23860                           ; BSR set to: 1
 23861  00A1FA  0012               	return		;funcret
 23862  00A1FC                     __end_of_longFlicker:
 23863                           	callstack 0
 23864                           
 23865 ;; *************** function _factoryReset *****************
 23866 ;; Defined at:
 23867 ;;		line 563 in file "../../github/CANMIOfirmware/main.c"
 23868 ;; Parameters:    Size  Location     Type
 23869 ;;		None
 23870 ;; Auto vars:     Size  Location     Type
 23871 ;;		None
 23872 ;; Return value:  Size  Location     Type
 23873 ;;                  1    wreg      void 
 23874 ;; Registers used:
 23875 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23876 ;; Tracked objects:
 23877 ;;		On entry : 3C/2
 23878 ;;		On exit  : 3F/0
 23879 ;;		Unchanged: 0/0
 23880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 23881 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23882 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23883 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23884 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23885 ;;Total ram usage:        0 bytes
 23886 ;; Hardware stack levels used: 1
 23887 ;; Hardware stack levels required when called: 24
 23888 ;; This function calls:
 23889 ;;		_factoryResetEE
 23890 ;;		_factoryResetFlash
 23891 ;; This function is called by:
 23892 ;;		_checkCBUS
 23893 ;; This function uses a non-reentrant model
 23894 ;;
 23895                           
 23896                           	psect	text110
 23897  00A6D2                     __ptext110:
 23898                           	callstack 0
 23899  00A6D2                     _factoryReset:
 23900                           	callstack 5
 23901                           
 23902                           ;main.c: 564: factoryResetEE();
 23903                           
 23904                           ; BSR set to: 1
 23905                           ;incstack = 0
 23906  00A6D2  EC48  F04E         	call	_factoryResetEE	;wreg free
 23907                           
 23908                           ; BSR set to: 0
 23909                           ;main.c: 565: factoryResetFlash();
 23910  00A6D6  EC5C  F051         	call	_factoryResetFlash	;wreg free
 23911                           
 23912                           ; BSR set to: 0
 23913  00A6DA  0012               	return		;funcret
 23914  00A6DC                     __end_of_factoryReset:
 23915                           	callstack 0
 23916                           
 23917 ;; *************** function _factoryResetFlash *****************
 23918 ;; Defined at:
 23919 ;;		line 568 in file "../../github/CANMIOfirmware/main.c"
 23920 ;; Parameters:    Size  Location     Type
 23921 ;;		None
 23922 ;; Auto vars:     Size  Location     Type
 23923 ;;		None
 23924 ;; Return value:  Size  Location     Type
 23925 ;;                  1    wreg      void 
 23926 ;; Registers used:
 23927 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23928 ;; Tracked objects:
 23929 ;;		On entry : 0/0
 23930 ;;		On exit  : 3F/0
 23931 ;;		Unchanged: 0/0
 23932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 23933 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23934 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23935 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23936 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 23937 ;;Total ram usage:        0 bytes
 23938 ;; Hardware stack levels used: 1
 23939 ;; Hardware stack levels required when called: 23
 23940 ;; This function calls:
 23941 ;;		_clearAllEvents
 23942 ;;		_factoryResetGlobalEvents
 23943 ;;		_factoryResetGlobalNv
 23944 ;;		_flushFlashImage
 23945 ;;		_setType
 23946 ;; This function is called by:
 23947 ;;		_initialise
 23948 ;;		_factoryReset
 23949 ;; This function uses a non-reentrant model
 23950 ;;
 23951                           
 23952                           	psect	text111
 23953  00A2B8                     __ptext111:
 23954                           	callstack 0
 23955  00A2B8                     _factoryResetFlash:
 23956                           	callstack 6
 23957                           
 23958                           ;main.c: 569: factoryResetGlobalNv();
 23959                           
 23960                           ; BSR set to: 0
 23961                           ;incstack = 0
 23962  00A2B8  EC62  F045         	call	_factoryResetGlobalNv	;wreg free
 23963                           
 23964                           ; BSR set to: 0
 23965                           ;main.c: 570: clearAllEvents();
 23966  00A2BC  EC01  F04E         	call	_clearAllEvents	;wreg free
 23967                           
 23968                           ; BSR set to: 0
 23969                           ;main.c: 571: factoryResetGlobalEvents();
 23970  00A2C0  EC95  F053         	call	_factoryResetGlobalEvents	;wreg free
 23971                           
 23972                           ; BSR set to: 0
 23973                           ;main.c: 573: for (io=0; io<16U; io++) {
 23974  00A2C4  0E00               	movlw	0
 23975  00A2C6  6FE6               	movwf	_io@main$F1444& (0+255),b
 23976  00A2C8                     l20011:
 23977                           
 23978                           ; BSR set to: 0
 23979  00A2C8  0E0F               	movlw	15
 23980  00A2CA  65E6               	cpfsgt	_io@main$F1444& (0+255),b
 23981  00A2CC  D001               	goto	l20015
 23982  00A2CE  D008               	goto	l20027
 23983  00A2D0                     l20015:
 23984                           
 23985                           ; BSR set to: 0
 23986                           
 23987                           ; BSR set to: 0
 23988                           
 23989                           ; BSR set to: 0
 23990  00A2D0  0E00               	movlw	0
 23991  00A2D2  6FCC               	movwf	setType@type& (0+255),b
 23992  00A2D4  51E6               	movf	_io@main$F1444& (0+255),w,b
 23993  00A2D6  EC08  F03F         	call	_setType
 23994  00A2DA  0100               	movlb	0	; () banked
 23995  00A2DC  2BE6               	incf	_io@main$F1444& (0+255),f,b
 23996  00A2DE  D7F4               	goto	l20011
 23997  00A2E0                     l20027:
 23998                           
 23999                           ; BSR set to: 0
 24000                           ;main.c: 575: };main.c: 576: flushFlashImage();
 24001  00A2E0  EC13  F053         	call	_flushFlashImage	;wreg free
 24002                           
 24003                           ; BSR set to: 0
 24004  00A2E4  0012               	return		;funcret
 24005  00A2E6                     __end_of_factoryResetFlash:
 24006                           	callstack 0
 24007                           
 24008 ;; *************** function _setType *****************
 24009 ;; Defined at:
 24010 ;;		line 596 in file "../../github/CANMIOfirmware/main.c"
 24011 ;; Parameters:    Size  Location     Type
 24012 ;;  io              1    wreg     unsigned char 
 24013 ;;  type            1  108[BANK0 ] unsigned char 
 24014 ;; Auto vars:     Size  Location     Type
 24015 ;;  io              1  113[BANK0 ] unsigned char 
 24016 ;;  addr            2  111[BANK0 ] unsigned int 
 24017 ;; Return value:  Size  Location     Type
 24018 ;;                  1    wreg      void 
 24019 ;; Registers used:
 24020 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 24021 ;; Tracked objects:
 24022 ;;		On entry : 3F/0
 24023 ;;		On exit  : 3E/0
 24024 ;;		Unchanged: 0/0
 24025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 24026 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24027 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24028 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24029 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24030 ;;Total ram usage:        6 bytes
 24031 ;; Hardware stack levels used: 1
 24032 ;; Hardware stack levels required when called: 22
 24033 ;; This function calls:
 24034 ;;		_configIO
 24035 ;;		_defaultEvents
 24036 ;;		_defaultNVs
 24037 ;;		_initAnaloguePort
 24038 ;;		_writeFlashByte
 24039 ;; This function is called by:
 24040 ;;		_factoryResetFlash
 24041 ;;		_actUponNVchange
 24042 ;; This function uses a non-reentrant model
 24043 ;;
 24044                           
 24045                           	psect	text112
 24046  007E10                     __ptext112:
 24047                           	callstack 0
 24048  007E10                     _setType:
 24049                           	callstack 6
 24050                           
 24051                           ; BSR set to: 0
 24052                           ;incstack = 0
 24053                           ;setType@io stored from wreg
 24054  007E10  6FD1               	movwf	setType@io& (0+255),b
 24055                           
 24056                           ;main.c: 597: WORD addr;;main.c: 598: addr = 0xFF80U+(16U + 7U*(io) + 0U);
 24057  007E12  0100               	movlb	0	; () banked
 24058  007E14  51D1               	movf	setType@io& (0+255),w,b
 24059  007E16  0D07               	mullw	7
 24060  007E18  CFF3 F0CD          	movff	prodl,??_setType
 24061  007E1C  CFF4 F0CE          	movff	prodh,??_setType+1
 24062  007E20  0E90               	movlw	144
 24063  007E22  25CD               	addwf	??_setType& (0+255),w,b
 24064  007E24  6FCF               	movwf	setType@addr& (0+255),b
 24065  007E26  0EFF               	movlw	255
 24066  007E28  21CE               	addwfc	(??_setType+1)& (0+255),w,b
 24067  007E2A  6FD0               	movwf	(setType@addr+1)& (0+255),b
 24068                           
 24069                           ; BSR set to: 0
 24070                           ;main.c: 599: writeFlashByte((BYTE*)addr, type);
 24071  007E2C  C0CF  F087         	movff	setType@addr,writeFlashByte@flashAddr
 24072  007E30  C0D0  F088         	movff	setType@addr+1,writeFlashByte@flashAddr+1
 24073  007E34  5187               	movf	writeFlashByte@flashAddr& (0+255),w,b
 24074  007E36  1188               	iorwf	(writeFlashByte@flashAddr+1)& (0+255),w,b
 24075  007E38  A4D8               	btfss	status,2,c
 24076  007E3A  0E20               	movlw	32
 24077  007E3C  6F89               	movwf	(writeFlashByte@flashAddr+2)& (0+255),b
 24078  007E3E  C0CC  F08A         	movff	setType@type,writeFlashByte@flashData
 24079  007E42  ECC0  F052         	call	_writeFlashByte	;wreg free
 24080                           
 24081                           ; BSR set to: 0
 24082                           ;main.c: 601: NV->io[io].type = type;
 24083  007E46  51D1               	movf	setType@io& (0+255),w,b
 24084  007E48  0D07               	mullw	7
 24085  007E4A  C0EC  F0CD         	movff	_NV,??_setType
 24086  007E4E  C0ED  F0CE         	movff	_NV+1,??_setType+1
 24087  007E52  50F3               	movf	243,w,c
 24088  007E54  27CD               	addwf	??_setType& (0+255),f,b
 24089  007E56  50F4               	movf	244,w,c
 24090  007E58  23CE               	addwfc	(??_setType+1)& (0+255),f,b
 24091  007E5A  0E10               	movlw	16
 24092  007E5C  25CD               	addwf	??_setType& (0+255),w,b
 24093  007E5E  6ED9               	movwf	fsr2l,c
 24094  007E60  0E00               	movlw	0
 24095  007E62  21CE               	addwfc	(??_setType+1)& (0+255),w,b
 24096  007E64  6EDA               	movwf	fsr2h,c
 24097  007E66  C0CC  FFDF         	movff	setType@type,indf2
 24098                           
 24099                           ; BSR set to: 0
 24100                           ;main.c: 604: defaultNVs(io, type);
 24101  007E6A  C0CC  F08B         	movff	setType@type,defaultNVs@type
 24102  007E6E  51D1               	movf	setType@io& (0+255),w,b
 24103  007E70  EC27  F00F         	call	_defaultNVs
 24104                           
 24105                           ; BSR set to: 0
 24106                           ;main.c: 606: configIO(io);
 24107  007E74  51D1               	movf	setType@io& (0+255),w,b
 24108  007E76  EC31  F015         	call	_configIO
 24109                           
 24110                           ;main.c: 608: if ((type == 2U) || (type== 3U) || (type == 4U)) {
 24111  007E7A  0E02               	movlw	2
 24112  007E7C  0100               	movlb	0	; () banked
 24113  007E7E  19CC               	xorwf	setType@type& (0+255),w,b
 24114  007E80  B4D8               	btfsc	status,2,c
 24115  007E82  D008               	goto	u23110
 24116                           
 24117                           ; BSR set to: 0
 24118  007E84  0E03               	movlw	3
 24119  007E86  19CC               	xorwf	setType@type& (0+255),w,b
 24120  007E88  B4D8               	btfsc	status,2,c
 24121  007E8A  D004               	goto	u23110
 24122                           
 24123                           ; BSR set to: 0
 24124  007E8C  0E04               	movlw	4
 24125  007E8E  19CC               	xorwf	setType@type& (0+255),w,b
 24126  007E90  A4D8               	btfss	status,2,c
 24127  007E92  D008               	goto	l18629
 24128  007E94                     u23110:
 24129                           
 24130                           ; BSR set to: 0
 24131                           ;main.c: 609: currentPos[io] = 128;
 24132  007E94  0E80               	movlw	low _currentPos
 24133  007E96  25D1               	addwf	setType@io& (0+255),w,b
 24134  007E98  6ED9               	movwf	fsr2l,c
 24135  007E9A  6ADA               	clrf	fsr2h,c
 24136  007E9C  0E01               	movlw	high _currentPos
 24137  007E9E  22DA               	addwfc	fsr2h,f,c
 24138  007EA0  0E80               	movlw	128
 24139  007EA2  6EDF               	movwf	indf2,c
 24140  007EA4                     l18629:
 24141                           
 24142                           ; BSR set to: 0
 24143                           ;main.c: 610: };main.c: 613: defaultEvents(io, type);
 24144  007EA4  C0CC  F0C8         	movff	setType@type,defaultEvents@type
 24145  007EA8  51D1               	movf	setType@io& (0+255),w,b
 24146  007EAA  ECDC  F02F         	call	_defaultEvents
 24147                           
 24148                           ; BSR set to: 0
 24149                           ;main.c: 615: if ((type == 5U) || (type == 6U)) {
 24150  007EAE  0E05               	movlw	5
 24151  007EB0  19CC               	xorwf	setType@type& (0+255),w,b
 24152  007EB2  B4D8               	btfsc	status,2,c
 24153  007EB4  D004               	goto	u23130
 24154                           
 24155                           ; BSR set to: 0
 24156  007EB6  0E06               	movlw	6
 24157  007EB8  19CC               	xorwf	setType@type& (0+255),w,b
 24158  007EBA  A4D8               	btfss	status,2,c
 24159  007EBC  0012               	return	
 24160  007EBE                     u23130:
 24161                           
 24162                           ; BSR set to: 0
 24163                           ;main.c: 616: initAnaloguePort(io);
 24164  007EBE  51D1               	movf	setType@io& (0+255),w,b
 24165  007EC0  ECDD  F051         	call	_initAnaloguePort
 24166  007EC4  0012               	return		;funcret
 24167  007EC6                     __end_of_setType:
 24168                           	callstack 0
 24169                           
 24170 ;; *************** function _initAnaloguePort *****************
 24171 ;; Defined at:
 24172 ;;		line 67 in file "../../github/CANMIOfirmware/analogue.c"
 24173 ;; Parameters:    Size  Location     Type
 24174 ;;  io              1    wreg     unsigned char 
 24175 ;; Auto vars:     Size  Location     Type
 24176 ;;  io              1   17[BANK0 ] unsigned char 
 24177 ;; Return value:  Size  Location     Type
 24178 ;;                  1    wreg      void 
 24179 ;; Registers used:
 24180 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 24181 ;; Tracked objects:
 24182 ;;		On entry : 3F/0
 24183 ;;		On exit  : 3F/1
 24184 ;;		Unchanged: 0/0
 24185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 24186 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24187 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24188 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24189 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24190 ;;Total ram usage:        1 bytes
 24191 ;; Hardware stack levels used: 1
 24192 ;; Hardware stack levels required when called: 8
 24193 ;; This function calls:
 24194 ;;		Nothing
 24195 ;; This function is called by:
 24196 ;;		_setType
 24197 ;; This function uses a non-reentrant model
 24198 ;;
 24199                           
 24200                           	psect	text113
 24201  00A3BA                     __ptext113:
 24202                           	callstack 0
 24203  00A3BA                     _initAnaloguePort:
 24204                           	callstack 19
 24205                           
 24206                           ;incstack = 0
 24207                           ;initAnaloguePort@io stored from wreg
 24208  00A3BA  6F71               	movwf	initAnaloguePort@io& (0+255),b
 24209                           
 24210                           ;analogue.c: 68: analogueState[io].eventState = 0U;
 24211  00A3BC  0E90               	movlw	low _analogueState
 24212  00A3BE  0100               	movlb	0	; () banked
 24213  00A3C0  2571               	addwf	initAnaloguePort@io& (0+255),w,b
 24214  00A3C2  6ED9               	movwf	fsr2l,c
 24215  00A3C4  6ADA               	clrf	fsr2h,c
 24216  00A3C6  0E01               	movlw	high _analogueState
 24217  00A3C8  22DA               	addwfc	fsr2h,f,c
 24218  00A3CA  0EFC               	movlw	-4
 24219  00A3CC  16DF               	andwf	223,f,c
 24220                           
 24221                           ;analogue.c: 69: analogueState[io].portState = 0U;
 24222  00A3CE  0E90               	movlw	low _analogueState
 24223  00A3D0  2571               	addwf	initAnaloguePort@io& (0+255),w,b
 24224  00A3D2  6ED9               	movwf	fsr2l,c
 24225  00A3D4  6ADA               	clrf	fsr2h,c
 24226  00A3D6  0E01               	movlw	high _analogueState
 24227  00A3D8  22DA               	addwfc	fsr2h,f,c
 24228  00A3DA  0101               	movlb	1	; () banked
 24229  00A3DC  94DF               	bcf	indf2,2,c
 24230                           
 24231                           ; BSR set to: 1
 24232  00A3DE  0012               	return		;funcret
 24233  00A3E0                     __end_of_initAnaloguePort:
 24234                           	callstack 0
 24235                           
 24236 ;; *************** function _defaultNVs *****************
 24237 ;; Defined at:
 24238 ;;		line 210 in file "../../github/CANMIOfirmware/mioNv.c"
 24239 ;; Parameters:    Size  Location     Type
 24240 ;;  i               1    wreg     unsigned char 
 24241 ;;  type            1   43[BANK0 ] unsigned char 
 24242 ;; Auto vars:     Size  Location     Type
 24243 ;;  i               1   46[BANK0 ] unsigned char 
 24244 ;; Return value:  Size  Location     Type
 24245 ;;                  1    wreg      void 
 24246 ;; Registers used:
 24247 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 24248 ;; Tracked objects:
 24249 ;;		On entry : 3F/0
 24250 ;;		On exit  : 3F/0
 24251 ;;		Unchanged: 0/0
 24252 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 24253 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24254 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24255 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24256 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 24257 ;;Total ram usage:        4 bytes
 24258 ;; Hardware stack levels used: 1
 24259 ;; Hardware stack levels required when called: 15
 24260 ;; This function calls:
 24261 ;;		___wmul
 24262 ;;		_loadNvCache
 24263 ;;		_writeFlashByte
 24264 ;; This function is called by:
 24265 ;;		_setType
 24266 ;; This function uses a non-reentrant model
 24267 ;;
 24268                           
 24269                           	psect	text114
 24270  001E4E                     __ptext114:
 24271                           	callstack 0
 24272  001E4E                     _defaultNVs:
 24273                           	callstack 12
 24274                           
 24275                           ; BSR set to: 1
 24276                           ;incstack = 0
 24277                           ;defaultNVs@i stored from wreg
 24278  001E4E  6F8E               	movwf	defaultNVs@i& (0+255),b
 24279                           
 24280                           ;mioNv.c: 212: writeFlashByte((BYTE*)(0xFF80U+(16U + 7U*(i) + 1U)), (BYTE)(0x02U | 0x04U
      +                          ));
 24281  001E50  C08E  F071         	movff	defaultNVs@i,___wmul@multiplier
 24282  001E54  0100               	movlb	0	; () banked
 24283  001E56  6B72               	clrf	(___wmul@multiplier+1)& (0+255),b
 24284  001E58  0E00               	movlw	0
 24285  001E5A  6F74               	movwf	(___wmul@multiplicand+1)& (0+255),b
 24286  001E5C  0E07               	movlw	7
 24287  001E5E  6F73               	movwf	___wmul@multiplicand& (0+255),b
 24288  001E60  ECF0  F051         	call	___wmul	;wreg free
 24289  001E64  0E91               	movlw	145
 24290  001E66  6F8C               	movwf	??_defaultNVs& (0+255),b
 24291  001E68  0EFF               	movlw	255
 24292  001E6A  6F8D               	movwf	(??_defaultNVs+1)& (0+255),b
 24293  001E6C  5171               	movf	?___wmul& (0+255),w,b
 24294  001E6E  278C               	addwf	??_defaultNVs& (0+255),f,b
 24295  001E70  5172               	movf	(?___wmul+1)& (0+255),w,b
 24296  001E72  238D               	addwfc	(??_defaultNVs+1)& (0+255),f,b
 24297  001E74  C08C  F087         	movff	??_defaultNVs,writeFlashByte@flashAddr
 24298  001E78  C08D  F088         	movff	??_defaultNVs+1,writeFlashByte@flashAddr+1
 24299  001E7C  5187               	movf	writeFlashByte@flashAddr& (0+255),w,b
 24300  001E7E  1188               	iorwf	(writeFlashByte@flashAddr+1)& (0+255),w,b
 24301  001E80  A4D8               	btfss	status,2,c
 24302  001E82  0E20               	movlw	32
 24303  001E84  6F89               	movwf	(writeFlashByte@flashAddr+2)& (0+255),b
 24304  001E86  0E06               	movlw	6
 24305  001E88  6F8A               	movwf	writeFlashByte@flashData& (0+255),b
 24306  001E8A  ECC0  F052         	call	_writeFlashByte	;wreg free
 24307                           
 24308                           ;mioNv.c: 213: switch(type) {
 24309  001E8E  D2D7               	goto	l18517
 24310  001E90                     l18501:
 24311                           
 24312                           ; BSR set to: 0
 24313                           ;mioNv.c: 215: writeFlashByte((BYTE*)(0xFF80U+(16U + 7U*(i) + 2U)), (BYTE)4);
 24314  001E90  C08E  F071         	movff	defaultNVs@i,___wmul@multiplier
 24315  001E94  6B72               	clrf	(___wmul@multiplier+1)& (0+255),b
 24316  001E96  0E00               	movlw	0
 24317  001E98  6F74               	movwf	(___wmul@multiplicand+1)& (0+255),b
 24318  001E9A  0E07               	movlw	7
 24319  001E9C  6F73               	movwf	___wmul@multiplicand& (0+255),b
 24320  001E9E  ECF0  F051         	call	___wmul	;wreg free
 24321  001EA2  0E92               	movlw	146
 24322  001EA4  6F8C               	movwf	??_defaultNVs& (0+255),b
 24323  001EA6  0EFF               	movlw	255
 24324  001EA8  6F8D               	movwf	(??_defaultNVs+1)& (0+255),b
 24325  001EAA  5171               	movf	?___wmul& (0+255),w,b
 24326  001EAC  278C               	addwf	??_defaultNVs& (0+255),f,b
 24327  001EAE  5172               	movf	(?___wmul+1)& (0+255),w,b
 24328  001EB0  238D               	addwfc	(??_defaultNVs+1)& (0+255),f,b
 24329  001EB2  C08C  F087         	movff	??_defaultNVs,writeFlashByte@flashAddr
 24330  001EB6  C08D  F088         	movff	??_defaultNVs+1,writeFlashByte@flashAddr+1
 24331  001EBA  5187               	movf	writeFlashByte@flashAddr& (0+255),w,b
 24332  001EBC  1188               	iorwf	(writeFlashByte@flashAddr+1)& (0+255),w,b
 24333  001EBE  A4D8               	btfss	status,2,c
 24334  001EC0  0E20               	movlw	32
 24335  001EC2  6F89               	movwf	(writeFlashByte@flashAddr+2)& (0+255),b
 24336  001EC4  0E04               	movlw	4
 24337  001EC6  6F8A               	movwf	writeFlashByte@flashData& (0+255),b
 24338  001EC8  ECC0  F052         	call	_writeFlashByte	;wreg free
 24339                           
 24340                           ;mioNv.c: 216: writeFlashByte((BYTE*)(0xFF80U+(16U + 7U*(i) + 3U)), (BYTE)4);
 24341  001ECC  C08E  F071         	movff	defaultNVs@i,___wmul@multiplier
 24342  001ED0  6B72               	clrf	(___wmul@multiplier+1)& (0+255),b
 24343  001ED2  0E00               	movlw	0
 24344  001ED4  6F74               	movwf	(___wmul@multiplicand+1)& (0+255),b
 24345  001ED6  0E07               	movlw	7
 24346  001ED8  6F73               	movwf	___wmul@multiplicand& (0+255),b
 24347  001EDA  ECF0  F051         	call	___wmul	;wreg free
 24348  001EDE  0E93               	movlw	147
 24349  001EE0  6F8C               	movwf	??_defaultNVs& (0+255),b
 24350  001EE2  0EFF               	movlw	255
 24351  001EE4  6F8D               	movwf	(??_defaultNVs+1)& (0+255),b
 24352  001EE6  5171               	movf	?___wmul& (0+255),w,b
 24353  001EE8  278C               	addwf	??_defaultNVs& (0+255),f,b
 24354  001EEA  5172               	movf	(?___wmul+1)& (0+255),w,b
 24355  001EEC  238D               	addwfc	(??_defaultNVs+1)& (0+255),f,b
 24356  001EEE  C08C  F087         	movff	??_defaultNVs,writeFlashByte@flashAddr
 24357  001EF2  C08D  F088         	movff	??_defaultNVs+1,writeFlashByte@flashAddr+1
 24358  001EF6  5187               	movf	writeFlashByte@flashAddr& (0+255),w,b
 24359  001EF8  1188               	iorwf	(writeFlashByte@flashAddr+1)& (0+255),w,b
 24360  001EFA  A4D8               	btfss	status,2,c
 24361  001EFC  0E20               	movlw	32
 24362  001EFE  6F89               	movwf	(writeFlashByte@flashAddr+2)& (0+255),b
 24363  001F00  0E04               	movlw	4
 24364  001F02  6F8A               	movwf	writeFlashByte@flashData& (0+255),b
 24365  001F04  ECC0  F052         	call	_writeFlashByte	;wreg free
 24366                           
 24367                           ;mioNv.c: 217: break;
 24368  001F08  D2B0               	goto	l18519
 24369  001F0A                     l18503:
 24370                           
 24371                           ; BSR set to: 0
 24372                           ;mioNv.c: 219: writeFlashByte((BYTE*)(0xFF80U+(16U + 7U*(i) + 2U)), (BYTE)0);
 24373  001F0A  C08E  F071         	movff	defaultNVs@i,___wmul@multiplier
 24374  001F0E  6B72               	clrf	(___wmul@multiplier+1)& (0+255),b
 24375  001F10  0E00               	movlw	0
 24376  001F12  6F74               	movwf	(___wmul@multiplicand+1)& (0+255),b
 24377  001F14  0E07               	movlw	7
 24378  001F16  6F73               	movwf	___wmul@multiplicand& (0+255),b
 24379  001F18  ECF0  F051         	call	___wmul	;wreg free
 24380  001F1C  0E92               	movlw	146
 24381  001F1E  6F8C               	movwf	??_defaultNVs& (0+255),b
 24382  001F20  0EFF               	movlw	255
 24383  001F22  6F8D               	movwf	(??_defaultNVs+1)& (0+255),b
 24384  001F24  5171               	movf	?___wmul& (0+255),w,b
 24385  001F26  278C               	addwf	??_defaultNVs& (0+255),f,b
 24386  001F28  5172               	movf	(?___wmul+1)& (0+255),w,b
 24387  001F2A  238D               	addwfc	(??_defaultNVs+1)& (0+255),f,b
 24388  001F2C  C08C  F087         	movff	??_defaultNVs,writeFlashByte@flashAddr
 24389  001F30  C08D  F088         	movff	??_defaultNVs+1,writeFlashByte@flashAddr+1
 24390  001F34  5187               	movf	writeFlashByte@flashAddr& (0+255),w,b
 24391  001F36  1188               	iorwf	(writeFlashByte@flashAddr+1)& (0+255),w,b
 24392  001F38  A4D8               	btfss	status,2,c
 24393  001F3A  0E20               	movlw	32
 24394  001F3C  6F89               	movwf	(writeFlashByte@flashAddr+2)& (0+255),b
 24395  001F3E  0E00               	movlw	0
 24396  001F40  6F8A               	movwf	writeFlashByte@flashData& (0+255),b
 24397  001F42  ECC0  F052         	call	_writeFlashByte	;wreg free
 24398                           
 24399                           ;mioNv.c: 220: writeFlashByte((BYTE*)(0xFF80U+(16U + 7U*(i) + 3U)), (BYTE)0);
 24400  001F46  C08E  F071         	movff	defaultNVs@i,___wmul@multiplier
 24401  001F4A  6B72               	clrf	(___wmul@multiplier+1)& (0+255),b
 24402  001F4C  0E00               	movlw	0
 24403  001F4E  6F74               	movwf	(___wmul@multiplicand+1)& (0+255),b
 24404  001F50  0E07               	movlw	7
 24405  001F52  6F73               	movwf	___wmul@multiplicand& (0+255),b
 24406  001F54  ECF0  F051         	call	___wmul	;wreg free
 24407  001F58  0E93               	movlw	147
 24408  001F5A  6F8C               	movwf	??_defaultNVs& (0+255),b
 24409  001F5C  0EFF               	movlw	255
 24410  001F5E  6F8D               	movwf	(??_defaultNVs+1)& (0+255),b
 24411  001F60  5171               	movf	?___wmul& (0+255),w,b
 24412  001F62  278C               	addwf	??_defaultNVs& (0+255),f,b
 24413  001F64  5172               	movf	(?___wmul+1)& (0+255),w,b
 24414  001F66  238D               	addwfc	(??_defaultNVs+1)& (0+255),f,b
 24415  001F68  C08C  F087         	movff	??_defaultNVs,writeFlashByte@flashAddr
 24416  001F6C  C08D  F088         	movff	??_defaultNVs+1,writeFlashByte@flashAddr+1
 24417  001F70  5187               	movf	writeFlashByte@flashAddr& (0+255),w,b
 24418  001F72  1188               	iorwf	(writeFlashByte@flashAddr+1)& (0+255),w,b
 24419  001F74  A4D8               	btfss	status,2,c
 24420  001F76  0E20               	movlw	32
 24421  001F78  6F89               	movwf	(writeFlashByte@flashAddr+2)& (0+255),b
 24422  001F7A  0E00               	movlw	0
 24423  001F7C  6F8A               	movwf	writeFlashByte@flashData& (0+255),b
 24424  001F7E  ECC0  F052         	call	_writeFlashByte	;wreg free
 24425                           
 24426                           ;mioNv.c: 221: break;
 24427  001F82  D273               	goto	l18519
 24428  001F84                     l18505:
 24429                           
 24430                           ; BSR set to: 0
 24431                           ;mioNv.c: 228: writeFlashByte((BYTE*)(0xFF80U+(16U + 7U*(i) + 2U)), (BYTE)128);
 24432  001F84  C08E  F071         	movff	defaultNVs@i,___wmul@multiplier
 24433  001F88  6B72               	clrf	(___wmul@multiplier+1)& (0+255),b
 24434  001F8A  0E00               	movlw	0
 24435  001F8C  6F74               	movwf	(___wmul@multiplicand+1)& (0+255),b
 24436  001F8E  0E07               	movlw	7
 24437  001F90  6F73               	movwf	___wmul@multiplicand& (0+255),b
 24438  001F92  ECF0  F051         	call	___wmul	;wreg free
 24439  001F96  0E92               	movlw	146
 24440  001F98  6F8C               	movwf	??_defaultNVs& (0+255),b
 24441  001F9A  0EFF               	movlw	255
 24442  001F9C  6F8D               	movwf	(??_defaultNVs+1)& (0+255),b
 24443  001F9E  5171               	movf	?___wmul& (0+255),w,b
 24444  001FA0  278C               	addwf	??_defaultNVs& (0+255),f,b
 24445  001FA2  5172               	movf	(?___wmul+1)& (0+255),w,b
 24446  001FA4  238D               	addwfc	(??_defaultNVs+1)& (0+255),f,b
 24447  001FA6  C08C  F087         	movff	??_defaultNVs,writeFlashByte@flashAddr
 24448  001FAA  C08D  F088         	movff	??_defaultNVs+1,writeFlashByte@flashAddr+1
 24449  001FAE  5187               	movf	writeFlashByte@flashAddr& (0+255),w,b
 24450  001FB0  1188               	iorwf	(writeFlashByte@flashAddr+1)& (0+255),w,b
 24451  001FB2  A4D8               	btfss	status,2,c
 24452  001FB4  0E20               	movlw	32
 24453  001FB6  6F89               	movwf	(writeFlashByte@flashAddr+2)& (0+255),b
 24454  001FB8  0E80               	movlw	128
 24455  001FBA  6F8A               	movwf	writeFlashByte@flashData& (0+255),b
 24456  001FBC  ECC0  F052         	call	_writeFlashByte	;wreg free
 24457                           
 24458                           ;mioNv.c: 229: writeFlashByte((BYTE*)(0xFF80U+(16U + 7U*(i) + 3U)), (BYTE)128);
 24459  001FC0  C08E  F071         	movff	defaultNVs@i,___wmul@multiplier
 24460  001FC4  6B72               	clrf	(___wmul@multiplier+1)& (0+255),b
 24461  001FC6  0E00               	movlw	0
 24462  001FC8  6F74               	movwf	(___wmul@multiplicand+1)& (0+255),b
 24463  001FCA  0E07               	movlw	7
 24464  001FCC  6F73               	movwf	___wmul@multiplicand& (0+255),b
 24465  001FCE  ECF0  F051         	call	___wmul	;wreg free
 24466  001FD2  0E93               	movlw	147
 24467  001FD4  6F8C               	movwf	??_defaultNVs& (0+255),b
 24468  001FD6  0EFF               	movlw	255
 24469  001FD8  6F8D               	movwf	(??_defaultNVs+1)& (0+255),b
 24470  001FDA  5171               	movf	?___wmul& (0+255),w,b
 24471  001FDC  278C               	addwf	??_defaultNVs& (0+255),f,b
 24472  001FDE  5172               	movf	(?___wmul+1)& (0+255),w,b
 24473  001FE0  238D               	addwfc	(??_defaultNVs+1)& (0+255),f,b
 24474  001FE2  C08C  F087         	movff	??_defaultNVs,writeFlashByte@flashAddr
 24475  001FE6  C08D  F088         	movff	??_defaultNVs+1,writeFlashByte@flashAddr+1
 24476  001FEA  5187               	movf	writeFlashByte@flashAddr& (0+255),w,b
 24477  001FEC  1188               	iorwf	(writeFlashByte@flashAddr+1)& (0+255),w,b
 24478  001FEE  A4D8               	btfss	status,2,c
 24479  001FF0  0E20               	movlw	32
 24480  001FF2  6F89               	movwf	(writeFlashByte@flashAddr+2)& (0+255),b
 24481  001FF4  0E80               	movlw	128
 24482  001FF6  6F8A               	movwf	writeFlashByte@flashData& (0+255),b
 24483  001FF8  ECC0  F052         	call	_writeFlashByte	;wreg free
 24484                           
 24485                           ;mioNv.c: 231: writeFlashByte((BYTE*)(0xFF80U+(16U + 7U*(i) + 4U)), (BYTE)234U+1);
 24486  001FFC  C08E  F071         	movff	defaultNVs@i,___wmul@multiplier
 24487  002000  6B72               	clrf	(___wmul@multiplier+1)& (0+255),b
 24488  002002  0E00               	movlw	0
 24489  002004  6F74               	movwf	(___wmul@multiplicand+1)& (0+255),b
 24490  002006  0E07               	movlw	7
 24491  002008  6F73               	movwf	___wmul@multiplicand& (0+255),b
 24492  00200A  ECF0  F051         	call	___wmul	;wreg free
 24493  00200E  0E94               	movlw	148
 24494  002010  6F8C               	movwf	??_defaultNVs& (0+255),b
 24495  002012  0EFF               	movlw	255
 24496  002014  6F8D               	movwf	(??_defaultNVs+1)& (0+255),b
 24497  002016  5171               	movf	?___wmul& (0+255),w,b
 24498  002018  278C               	addwf	??_defaultNVs& (0+255),f,b
 24499  00201A  5172               	movf	(?___wmul+1)& (0+255),w,b
 24500  00201C  238D               	addwfc	(??_defaultNVs+1)& (0+255),f,b
 24501  00201E  C08C  F087         	movff	??_defaultNVs,writeFlashByte@flashAddr
 24502  002022  C08D  F088         	movff	??_defaultNVs+1,writeFlashByte@flashAddr+1
 24503  002026  5187               	movf	writeFlashByte@flashAddr& (0+255),w,b
 24504  002028  1188               	iorwf	(writeFlashByte@flashAddr+1)& (0+255),w,b
 24505  00202A  A4D8               	btfss	status,2,c
 24506  00202C  0E20               	movlw	32
 24507  00202E  6F89               	movwf	(writeFlashByte@flashAddr+2)& (0+255),b
 24508  002030  0EEB               	movlw	235
 24509  002032  6F8A               	movwf	writeFlashByte@flashData& (0+255),b
 24510  002034  ECC0  F052         	call	_writeFlashByte	;wreg free
 24511                           
 24512                           ;mioNv.c: 232: writeFlashByte((BYTE*)(0xFF80U+(16U + 7U*(i) + 5U)), (BYTE)234U+1);
 24513  002038  C08E  F071         	movff	defaultNVs@i,___wmul@multiplier
 24514  00203C  6B72               	clrf	(___wmul@multiplier+1)& (0+255),b
 24515  00203E  0E00               	movlw	0
 24516  002040  6F74               	movwf	(___wmul@multiplicand+1)& (0+255),b
 24517  002042  0E07               	movlw	7
 24518  002044  6F73               	movwf	___wmul@multiplicand& (0+255),b
 24519  002046  ECF0  F051         	call	___wmul	;wreg free
 24520  00204A  0E95               	movlw	149
 24521  00204C  6F8C               	movwf	??_defaultNVs& (0+255),b
 24522  00204E  0EFF               	movlw	255
 24523  002050  6F8D               	movwf	(??_defaultNVs+1)& (0+255),b
 24524  002052  5171               	movf	?___wmul& (0+255),w,b
 24525  002054  278C               	addwf	??_defaultNVs& (0+255),f,b
 24526  002056  5172               	movf	(?___wmul+1)& (0+255),w,b
 24527  002058  238D               	addwfc	(??_defaultNVs+1)& (0+255),f,b
 24528  00205A  C08C  F087         	movff	??_defaultNVs,writeFlashByte@flashAddr
 24529  00205E  C08D  F088         	movff	??_defaultNVs+1,writeFlashByte@flashAddr+1
 24530  002062  5187               	movf	writeFlashByte@flashAddr& (0+255),w,b
 24531  002064  1188               	iorwf	(writeFlashByte@flashAddr+1)& (0+255),w,b
 24532  002066  A4D8               	btfss	status,2,c
 24533  002068  0E20               	movlw	32
 24534  00206A  6F89               	movwf	(writeFlashByte@flashAddr+2)& (0+255),b
 24535  00206C  0EEB               	movlw	235
 24536  00206E  6F8A               	movwf	writeFlashByte@flashData& (0+255),b
 24537  002070  ECC0  F052         	call	_writeFlashByte	;wreg free
 24538                           
 24539                           ;mioNv.c: 233: break;
 24540  002074  D1FA               	goto	l18519
 24541  002076                     l18507:
 24542                           
 24543                           ; BSR set to: 0
 24544                           ;mioNv.c: 241: writeFlashByte((BYTE*)(0xFF80U+(16U + 7U*(i) + 2U)), (BYTE)128);
 24545  002076  C08E  F071         	movff	defaultNVs@i,___wmul@multiplier
 24546  00207A  6B72               	clrf	(___wmul@multiplier+1)& (0+255),b
 24547  00207C  0E00               	movlw	0
 24548  00207E  6F74               	movwf	(___wmul@multiplicand+1)& (0+255),b
 24549  002080  0E07               	movlw	7
 24550  002082  6F73               	movwf	___wmul@multiplicand& (0+255),b
 24551  002084  ECF0  F051         	call	___wmul	;wreg free
 24552  002088  0E92               	movlw	146
 24553  00208A  6F8C               	movwf	??_defaultNVs& (0+255),b
 24554  00208C  0EFF               	movlw	255
 24555  00208E  6F8D               	movwf	(??_defaultNVs+1)& (0+255),b
 24556  002090  5171               	movf	?___wmul& (0+255),w,b
 24557  002092  278C               	addwf	??_defaultNVs& (0+255),f,b
 24558  002094  5172               	movf	(?___wmul+1)& (0+255),w,b
 24559  002096  238D               	addwfc	(??_defaultNVs+1)& (0+255),f,b
 24560  002098  C08C  F087         	movff	??_defaultNVs,writeFlashByte@flashAddr
 24561  00209C  C08D  F088         	movff	??_defaultNVs+1,writeFlashByte@flashAddr+1
 24562  0020A0  5187               	movf	writeFlashByte@flashAddr& (0+255),w,b
 24563  0020A2  1188               	iorwf	(writeFlashByte@flashAddr+1)& (0+255),w,b
 24564  0020A4  A4D8               	btfss	status,2,c
 24565  0020A6  0E20               	movlw	32
 24566  0020A8  6F89               	movwf	(writeFlashByte@flashAddr+2)& (0+255),b
 24567  0020AA  0E80               	movlw	128
 24568  0020AC  6F8A               	movwf	writeFlashByte@flashData& (0+255),b
 24569  0020AE  ECC0  F052         	call	_writeFlashByte	;wreg free
 24570                           
 24571                           ;mioNv.c: 242: writeFlashByte((BYTE*)(0xFF80U+(16U + 7U*(i) + 3U)), (BYTE)127);
 24572  0020B2  C08E  F071         	movff	defaultNVs@i,___wmul@multiplier
 24573  0020B6  6B72               	clrf	(___wmul@multiplier+1)& (0+255),b
 24574  0020B8  0E00               	movlw	0
 24575  0020BA  6F74               	movwf	(___wmul@multiplicand+1)& (0+255),b
 24576  0020BC  0E07               	movlw	7
 24577  0020BE  6F73               	movwf	___wmul@multiplicand& (0+255),b
 24578  0020C0  ECF0  F051         	call	___wmul	;wreg free
 24579  0020C4  0E93               	movlw	147
 24580  0020C6  6F8C               	movwf	??_defaultNVs& (0+255),b
 24581  0020C8  0EFF               	movlw	255
 24582  0020CA  6F8D               	movwf	(??_defaultNVs+1)& (0+255),b
 24583  0020CC  5171               	movf	?___wmul& (0+255),w,b
 24584  0020CE  278C               	addwf	??_defaultNVs& (0+255),f,b
 24585  0020D0  5172               	movf	(?___wmul+1)& (0+255),w,b
 24586  0020D2  238D               	addwfc	(??_defaultNVs+1)& (0+255),f,b
 24587  0020D4  C08C  F087         	movff	??_defaultNVs,writeFlashByte@flashAddr
 24588  0020D8  C08D  F088         	movff	??_defaultNVs+1,writeFlashByte@flashAddr+1
 24589  0020DC  5187               	movf	writeFlashByte@flashAddr& (0+255),w,b
 24590  0020DE  1188               	iorwf	(writeFlashByte@flashAddr+1)& (0+255),w,b
 24591  0020E0  A4D8               	btfss	status,2,c
 24592  0020E2  0E20               	movlw	32
 24593  0020E4  6F89               	movwf	(writeFlashByte@flashAddr+2)& (0+255),b
 24594  0020E6  0E7F               	movlw	127
 24595  0020E8  6F8A               	movwf	writeFlashByte@flashData& (0+255),b
 24596  0020EA  ECC0  F052         	call	_writeFlashByte	;wreg free
 24597                           
 24598                           ;mioNv.c: 244: writeFlashByte((BYTE*)(0xFF80U+(16U + 7U*(i) + 4U)), (BYTE)64);
 24599  0020EE  C08E  F071         	movff	defaultNVs@i,___wmul@multiplier
 24600  0020F2  6B72               	clrf	(___wmul@multiplier+1)& (0+255),b
 24601  0020F4  0E00               	movlw	0
 24602  0020F6  6F74               	movwf	(___wmul@multiplicand+1)& (0+255),b
 24603  0020F8  0E07               	movlw	7
 24604  0020FA  6F73               	movwf	___wmul@multiplicand& (0+255),b
 24605  0020FC  ECF0  F051         	call	___wmul	;wreg free
 24606  002100  0E94               	movlw	148
 24607  002102  6F8C               	movwf	??_defaultNVs& (0+255),b
 24608  002104  0EFF               	movlw	255
 24609  002106  6F8D               	movwf	(??_defaultNVs+1)& (0+255),b
 24610  002108  5171               	movf	?___wmul& (0+255),w,b
 24611  00210A  278C               	addwf	??_defaultNVs& (0+255),f,b
 24612  00210C  5172               	movf	(?___wmul+1)& (0+255),w,b
 24613  00210E  238D               	addwfc	(??_defaultNVs+1)& (0+255),f,b
 24614  002110  C08C  F087         	movff	??_defaultNVs,writeFlashByte@flashAddr
 24615  002114  C08D  F088         	movff	??_defaultNVs+1,writeFlashByte@flashAddr+1
 24616  002118  5187               	movf	writeFlashByte@flashAddr& (0+255),w,b
 24617  00211A  1188               	iorwf	(writeFlashByte@flashAddr+1)& (0+255),w,b
 24618  00211C  A4D8               	btfss	status,2,c
 24619  00211E  0E20               	movlw	32
 24620  002120  6F89               	movwf	(writeFlashByte@flashAddr+2)& (0+255),b
 24621  002122  0E40               	movlw	64
 24622  002124  6F8A               	movwf	writeFlashByte@flashData& (0+255),b
 24623  002126  ECC0  F052         	call	_writeFlashByte	;wreg free
 24624                           
 24625                           ;mioNv.c: 245: writeFlashByte((BYTE*)(0xFF80U + (16U + 7U*(i) + 5U)), (BYTE)3);
 24626  00212A  C08E  F071         	movff	defaultNVs@i,___wmul@multiplier
 24627  00212E  6B72               	clrf	(___wmul@multiplier+1)& (0+255),b
 24628  002130  0E00               	movlw	0
 24629  002132  6F74               	movwf	(___wmul@multiplicand+1)& (0+255),b
 24630  002134  0E07               	movlw	7
 24631  002136  6F73               	movwf	___wmul@multiplicand& (0+255),b
 24632  002138  ECF0  F051         	call	___wmul	;wreg free
 24633  00213C  0E95               	movlw	149
 24634  00213E  6F8C               	movwf	??_defaultNVs& (0+255),b
 24635  002140  0EFF               	movlw	255
 24636  002142  6F8D               	movwf	(??_defaultNVs+1)& (0+255),b
 24637  002144  5171               	movf	?___wmul& (0+255),w,b
 24638  002146  278C               	addwf	??_defaultNVs& (0+255),f,b
 24639  002148  5172               	movf	(?___wmul+1)& (0+255),w,b
 24640  00214A  238D               	addwfc	(??_defaultNVs+1)& (0+255),f,b
 24641  00214C  C08C  F087         	movff	??_defaultNVs,writeFlashByte@flashAddr
 24642  002150  C08D  F088         	movff	??_defaultNVs+1,writeFlashByte@flashAddr+1
 24643  002154  5187               	movf	writeFlashByte@flashAddr& (0+255),w,b
 24644  002156  1188               	iorwf	(writeFlashByte@flashAddr+1)& (0+255),w,b
 24645  002158  A4D8               	btfss	status,2,c
 24646  00215A  0E20               	movlw	32
 24647  00215C  6F89               	movwf	(writeFlashByte@flashAddr+2)& (0+255),b
 24648  00215E  0E03               	movlw	3
 24649  002160  6F8A               	movwf	writeFlashByte@flashData& (0+255),b
 24650  002162  ECC0  F052         	call	_writeFlashByte	;wreg free
 24651                           
 24652                           ;mioNv.c: 246: writeFlashByte((BYTE*)(0xFF80U + (16U + 7U*(i) + 6U)), (BYTE)60);
 24653  002166  C08E  F071         	movff	defaultNVs@i,___wmul@multiplier
 24654  00216A  6B72               	clrf	(___wmul@multiplier+1)& (0+255),b
 24655  00216C  0E00               	movlw	0
 24656  00216E  6F74               	movwf	(___wmul@multiplicand+1)& (0+255),b
 24657  002170  0E07               	movlw	7
 24658  002172  6F73               	movwf	___wmul@multiplicand& (0+255),b
 24659  002174  ECF0  F051         	call	___wmul	;wreg free
 24660  002178  0E96               	movlw	150
 24661  00217A  6F8C               	movwf	??_defaultNVs& (0+255),b
 24662  00217C  0EFF               	movlw	255
 24663  00217E  6F8D               	movwf	(??_defaultNVs+1)& (0+255),b
 24664  002180  5171               	movf	?___wmul& (0+255),w,b
 24665  002182  278C               	addwf	??_defaultNVs& (0+255),f,b
 24666  002184  5172               	movf	(?___wmul+1)& (0+255),w,b
 24667  002186  238D               	addwfc	(??_defaultNVs+1)& (0+255),f,b
 24668  002188  C08C  F087         	movff	??_defaultNVs,writeFlashByte@flashAddr
 24669  00218C  C08D  F088         	movff	??_defaultNVs+1,writeFlashByte@flashAddr+1
 24670  002190  5187               	movf	writeFlashByte@flashAddr& (0+255),w,b
 24671  002192  1188               	iorwf	(writeFlashByte@flashAddr+1)& (0+255),w,b
 24672  002194  A4D8               	btfss	status,2,c
 24673  002196  0E20               	movlw	32
 24674  002198  6F89               	movwf	(writeFlashByte@flashAddr+2)& (0+255),b
 24675  00219A  0E3C               	movlw	60
 24676  00219C  6F8A               	movwf	writeFlashByte@flashData& (0+255),b
 24677  00219E  ECC0  F052         	call	_writeFlashByte	;wreg free
 24678                           
 24679                           ;mioNv.c: 247: break;
 24680  0021A2  D163               	goto	l18519
 24681  0021A4                     l18509:
 24682                           
 24683                           ; BSR set to: 0
 24684                           ;mioNv.c: 251: writeFlashByte((BYTE*)(0xFF80U+(16U + 7U*(i) + 2U)), (BYTE)3);
 24685  0021A4  C08E  F071         	movff	defaultNVs@i,___wmul@multiplier
 24686  0021A8  6B72               	clrf	(___wmul@multiplier+1)& (0+255),b
 24687  0021AA  0E00               	movlw	0
 24688  0021AC  6F74               	movwf	(___wmul@multiplicand+1)& (0+255),b
 24689  0021AE  0E07               	movlw	7
 24690  0021B0  6F73               	movwf	___wmul@multiplicand& (0+255),b
 24691  0021B2  ECF0  F051         	call	___wmul	;wreg free
 24692  0021B6  0E92               	movlw	146
 24693  0021B8  6F8C               	movwf	??_defaultNVs& (0+255),b
 24694  0021BA  0EFF               	movlw	255
 24695  0021BC  6F8D               	movwf	(??_defaultNVs+1)& (0+255),b
 24696  0021BE  5171               	movf	?___wmul& (0+255),w,b
 24697  0021C0  278C               	addwf	??_defaultNVs& (0+255),f,b
 24698  0021C2  5172               	movf	(?___wmul+1)& (0+255),w,b
 24699  0021C4  238D               	addwfc	(??_defaultNVs+1)& (0+255),f,b
 24700  0021C6  C08C  F087         	movff	??_defaultNVs,writeFlashByte@flashAddr
 24701  0021CA  C08D  F088         	movff	??_defaultNVs+1,writeFlashByte@flashAddr+1
 24702  0021CE  5187               	movf	writeFlashByte@flashAddr& (0+255),w,b
 24703  0021D0  1188               	iorwf	(writeFlashByte@flashAddr+1)& (0+255),w,b
 24704  0021D2  A4D8               	btfss	status,2,c
 24705  0021D4  0E20               	movlw	32
 24706  0021D6  6F89               	movwf	(writeFlashByte@flashAddr+2)& (0+255),b
 24707  0021D8  0E03               	movlw	3
 24708  0021DA  6F8A               	movwf	writeFlashByte@flashData& (0+255),b
 24709  0021DC  ECC0  F052         	call	_writeFlashByte	;wreg free
 24710                           
 24711                           ;mioNv.c: 257: writeFlashByte((BYTE*)(0xFF80U+(16U + 7U*(i) + 3U)), (BYTE)128);
 24712  0021E0  C08E  F071         	movff	defaultNVs@i,___wmul@multiplier
 24713  0021E4  6B72               	clrf	(___wmul@multiplier+1)& (0+255),b
 24714  0021E6  0E00               	movlw	0
 24715  0021E8  6F74               	movwf	(___wmul@multiplicand+1)& (0+255),b
 24716  0021EA  0E07               	movlw	7
 24717  0021EC  6F73               	movwf	___wmul@multiplicand& (0+255),b
 24718  0021EE  ECF0  F051         	call	___wmul	;wreg free
 24719  0021F2  0E93               	movlw	147
 24720  0021F4  6F8C               	movwf	??_defaultNVs& (0+255),b
 24721  0021F6  0EFF               	movlw	255
 24722  0021F8  6F8D               	movwf	(??_defaultNVs+1)& (0+255),b
 24723  0021FA  5171               	movf	?___wmul& (0+255),w,b
 24724  0021FC  278C               	addwf	??_defaultNVs& (0+255),f,b
 24725  0021FE  5172               	movf	(?___wmul+1)& (0+255),w,b
 24726  002200  238D               	addwfc	(??_defaultNVs+1)& (0+255),f,b
 24727  002202  C08C  F087         	movff	??_defaultNVs,writeFlashByte@flashAddr
 24728  002206  C08D  F088         	movff	??_defaultNVs+1,writeFlashByte@flashAddr+1
 24729  00220A  5187               	movf	writeFlashByte@flashAddr& (0+255),w,b
 24730  00220C  1188               	iorwf	(writeFlashByte@flashAddr+1)& (0+255),w,b
 24731  00220E  A4D8               	btfss	status,2,c
 24732  002210  0E20               	movlw	32
 24733  002212  6F89               	movwf	(writeFlashByte@flashAddr+2)& (0+255),b
 24734  002214  0E80               	movlw	128
 24735  002216  6F8A               	movwf	writeFlashByte@flashData& (0+255),b
 24736  002218  ECC0  F052         	call	_writeFlashByte	;wreg free
 24737                           
 24738                           ;mioNv.c: 258: writeFlashByte((BYTE*)(0xFF80U+(16U + 7U*(i) + 4U)), (BYTE)128);
 24739  00221C  C08E  F071         	movff	defaultNVs@i,___wmul@multiplier
 24740  002220  6B72               	clrf	(___wmul@multiplier+1)& (0+255),b
 24741  002222  0E00               	movlw	0
 24742  002224  6F74               	movwf	(___wmul@multiplicand+1)& (0+255),b
 24743  002226  0E07               	movlw	7
 24744  002228  6F73               	movwf	___wmul@multiplicand& (0+255),b
 24745  00222A  ECF0  F051         	call	___wmul	;wreg free
 24746  00222E  0E94               	movlw	148
 24747  002230  6F8C               	movwf	??_defaultNVs& (0+255),b
 24748  002232  0EFF               	movlw	255
 24749  002234  6F8D               	movwf	(??_defaultNVs+1)& (0+255),b
 24750  002236  5171               	movf	?___wmul& (0+255),w,b
 24751  002238  278C               	addwf	??_defaultNVs& (0+255),f,b
 24752  00223A  5172               	movf	(?___wmul+1)& (0+255),w,b
 24753  00223C  238D               	addwfc	(??_defaultNVs+1)& (0+255),f,b
 24754  00223E  C08C  F087         	movff	??_defaultNVs,writeFlashByte@flashAddr
 24755  002242  C08D  F088         	movff	??_defaultNVs+1,writeFlashByte@flashAddr+1
 24756  002246  5187               	movf	writeFlashByte@flashAddr& (0+255),w,b
 24757  002248  1188               	iorwf	(writeFlashByte@flashAddr+1)& (0+255),w,b
 24758  00224A  A4D8               	btfss	status,2,c
 24759  00224C  0E20               	movlw	32
 24760  00224E  6F89               	movwf	(writeFlashByte@flashAddr+2)& (0+255),b
 24761  002250  0E80               	movlw	128
 24762  002252  6F8A               	movwf	writeFlashByte@flashData& (0+255),b
 24763  002254  ECC0  F052         	call	_writeFlashByte	;wreg free
 24764                           
 24765                           ;mioNv.c: 259: writeFlashByte((BYTE*)(0xFF80U+(16U + 7U*(i) + 5U)), (BYTE)128);
 24766  002258  C08E  F071         	movff	defaultNVs@i,___wmul@multiplier
 24767  00225C  6B72               	clrf	(___wmul@multiplier+1)& (0+255),b
 24768  00225E  0E00               	movlw	0
 24769  002260  6F74               	movwf	(___wmul@multiplicand+1)& (0+255),b
 24770  002262  0E07               	movlw	7
 24771  002264  6F73               	movwf	___wmul@multiplicand& (0+255),b
 24772  002266  ECF0  F051         	call	___wmul	;wreg free
 24773  00226A  0E95               	movlw	149
 24774  00226C  6F8C               	movwf	??_defaultNVs& (0+255),b
 24775  00226E  0EFF               	movlw	255
 24776  002270  6F8D               	movwf	(??_defaultNVs+1)& (0+255),b
 24777  002272  5171               	movf	?___wmul& (0+255),w,b
 24778  002274  278C               	addwf	??_defaultNVs& (0+255),f,b
 24779  002276  5172               	movf	(?___wmul+1)& (0+255),w,b
 24780  002278  238D               	addwfc	(??_defaultNVs+1)& (0+255),f,b
 24781  00227A  C08C  F087         	movff	??_defaultNVs,writeFlashByte@flashAddr
 24782  00227E  C08D  F088         	movff	??_defaultNVs+1,writeFlashByte@flashAddr+1
 24783  002282  5187               	movf	writeFlashByte@flashAddr& (0+255),w,b
 24784  002284  1188               	iorwf	(writeFlashByte@flashAddr+1)& (0+255),w,b
 24785  002286  A4D8               	btfss	status,2,c
 24786  002288  0E20               	movlw	32
 24787  00228A  6F89               	movwf	(writeFlashByte@flashAddr+2)& (0+255),b
 24788  00228C  0E80               	movlw	128
 24789  00228E  6F8A               	movwf	writeFlashByte@flashData& (0+255),b
 24790  002290  ECC0  F052         	call	_writeFlashByte	;wreg free
 24791                           
 24792                           ;mioNv.c: 261: break;
 24793  002294  D0EA               	goto	l18519
 24794  002296                     l18511:
 24795                           
 24796                           ; BSR set to: 0
 24797                           ;mioNv.c: 265: writeFlashByte((BYTE*)(0xFF80U+(16U + 7U*(i) + 3U)), (BYTE)0x80);
 24798  002296  C08E  F071         	movff	defaultNVs@i,___wmul@multiplier
 24799  00229A  6B72               	clrf	(___wmul@multiplier+1)& (0+255),b
 24800  00229C  0E00               	movlw	0
 24801  00229E  6F74               	movwf	(___wmul@multiplicand+1)& (0+255),b
 24802  0022A0  0E07               	movlw	7
 24803  0022A2  6F73               	movwf	___wmul@multiplicand& (0+255),b
 24804  0022A4  ECF0  F051         	call	___wmul	;wreg free
 24805  0022A8  0E93               	movlw	147
 24806  0022AA  6F8C               	movwf	??_defaultNVs& (0+255),b
 24807  0022AC  0EFF               	movlw	255
 24808  0022AE  6F8D               	movwf	(??_defaultNVs+1)& (0+255),b
 24809  0022B0  5171               	movf	?___wmul& (0+255),w,b
 24810  0022B2  278C               	addwf	??_defaultNVs& (0+255),f,b
 24811  0022B4  5172               	movf	(?___wmul+1)& (0+255),w,b
 24812  0022B6  238D               	addwfc	(??_defaultNVs+1)& (0+255),f,b
 24813  0022B8  C08C  F087         	movff	??_defaultNVs,writeFlashByte@flashAddr
 24814  0022BC  C08D  F088         	movff	??_defaultNVs+1,writeFlashByte@flashAddr+1
 24815  0022C0  5187               	movf	writeFlashByte@flashAddr& (0+255),w,b
 24816  0022C2  1188               	iorwf	(writeFlashByte@flashAddr+1)& (0+255),w,b
 24817  0022C4  A4D8               	btfss	status,2,c
 24818  0022C6  0E20               	movlw	32
 24819  0022C8  6F89               	movwf	(writeFlashByte@flashAddr+2)& (0+255),b
 24820  0022CA  0E80               	movlw	128
 24821  0022CC  6F8A               	movwf	writeFlashByte@flashData& (0+255),b
 24822  0022CE  ECC0  F052         	call	_writeFlashByte	;wreg free
 24823                           
 24824                           ;mioNv.c: 266: writeFlashByte((BYTE*)(0xFF80U+(16U + 7U*(i) + 4U)), (BYTE)0x10);
 24825  0022D2  C08E  F071         	movff	defaultNVs@i,___wmul@multiplier
 24826  0022D6  6B72               	clrf	(___wmul@multiplier+1)& (0+255),b
 24827  0022D8  0E00               	movlw	0
 24828  0022DA  6F74               	movwf	(___wmul@multiplicand+1)& (0+255),b
 24829  0022DC  0E07               	movlw	7
 24830  0022DE  6F73               	movwf	___wmul@multiplicand& (0+255),b
 24831  0022E0  ECF0  F051         	call	___wmul	;wreg free
 24832  0022E4  0E94               	movlw	148
 24833  0022E6  6F8C               	movwf	??_defaultNVs& (0+255),b
 24834  0022E8  0EFF               	movlw	255
 24835  0022EA  6F8D               	movwf	(??_defaultNVs+1)& (0+255),b
 24836  0022EC  5171               	movf	?___wmul& (0+255),w,b
 24837  0022EE  278C               	addwf	??_defaultNVs& (0+255),f,b
 24838  0022F0  5172               	movf	(?___wmul+1)& (0+255),w,b
 24839  0022F2  238D               	addwfc	(??_defaultNVs+1)& (0+255),f,b
 24840  0022F4  C08C  F087         	movff	??_defaultNVs,writeFlashByte@flashAddr
 24841  0022F8  C08D  F088         	movff	??_defaultNVs+1,writeFlashByte@flashAddr+1
 24842  0022FC  5187               	movf	writeFlashByte@flashAddr& (0+255),w,b
 24843  0022FE  1188               	iorwf	(writeFlashByte@flashAddr+1)& (0+255),w,b
 24844  002300  A4D8               	btfss	status,2,c
 24845  002302  0E20               	movlw	32
 24846  002304  6F89               	movwf	(writeFlashByte@flashAddr+2)& (0+255),b
 24847  002306  0E10               	movlw	16
 24848  002308  6F8A               	movwf	writeFlashByte@flashData& (0+255),b
 24849  00230A  ECC0  F052         	call	_writeFlashByte	;wreg free
 24850                           
 24851                           ;mioNv.c: 267: break;
 24852  00230E  D0AD               	goto	l18519
 24853  002310                     l18513:
 24854                           
 24855                           ; BSR set to: 0
 24856                           ;mioNv.c: 269: writeFlashByte((BYTE*)(0xFF80U+(16U + 7U*(i) + 2U)), (BYTE)0);
 24857  002310  C08E  F071         	movff	defaultNVs@i,___wmul@multiplier
 24858  002314  6B72               	clrf	(___wmul@multiplier+1)& (0+255),b
 24859  002316  0E00               	movlw	0
 24860  002318  6F74               	movwf	(___wmul@multiplicand+1)& (0+255),b
 24861  00231A  0E07               	movlw	7
 24862  00231C  6F73               	movwf	___wmul@multiplicand& (0+255),b
 24863  00231E  ECF0  F051         	call	___wmul	;wreg free
 24864  002322  0E92               	movlw	146
 24865  002324  6F8C               	movwf	??_defaultNVs& (0+255),b
 24866  002326  0EFF               	movlw	255
 24867  002328  6F8D               	movwf	(??_defaultNVs+1)& (0+255),b
 24868  00232A  5171               	movf	?___wmul& (0+255),w,b
 24869  00232C  278C               	addwf	??_defaultNVs& (0+255),f,b
 24870  00232E  5172               	movf	(?___wmul+1)& (0+255),w,b
 24871  002330  238D               	addwfc	(??_defaultNVs+1)& (0+255),f,b
 24872  002332  C08C  F087         	movff	??_defaultNVs,writeFlashByte@flashAddr
 24873  002336  C08D  F088         	movff	??_defaultNVs+1,writeFlashByte@flashAddr+1
 24874  00233A  5187               	movf	writeFlashByte@flashAddr& (0+255),w,b
 24875  00233C  1188               	iorwf	(writeFlashByte@flashAddr+1)& (0+255),w,b
 24876  00233E  A4D8               	btfss	status,2,c
 24877  002340  0E20               	movlw	32
 24878  002342  6F89               	movwf	(writeFlashByte@flashAddr+2)& (0+255),b
 24879  002344  0E00               	movlw	0
 24880  002346  6F8A               	movwf	writeFlashByte@flashData& (0+255),b
 24881  002348  ECC0  F052         	call	_writeFlashByte	;wreg free
 24882                           
 24883                           ;mioNv.c: 270: writeFlashByte((BYTE*)(0xFF80U+(16U + 7U*(i) + 3U)), (BYTE)123);
 24884  00234C  C08E  F071         	movff	defaultNVs@i,___wmul@multiplier
 24885  002350  6B72               	clrf	(___wmul@multiplier+1)& (0+255),b
 24886  002352  0E00               	movlw	0
 24887  002354  6F74               	movwf	(___wmul@multiplicand+1)& (0+255),b
 24888  002356  0E07               	movlw	7
 24889  002358  6F73               	movwf	___wmul@multiplicand& (0+255),b
 24890  00235A  ECF0  F051         	call	___wmul	;wreg free
 24891  00235E  0E93               	movlw	147
 24892  002360  6F8C               	movwf	??_defaultNVs& (0+255),b
 24893  002362  0EFF               	movlw	255
 24894  002364  6F8D               	movwf	(??_defaultNVs+1)& (0+255),b
 24895  002366  5171               	movf	?___wmul& (0+255),w,b
 24896  002368  278C               	addwf	??_defaultNVs& (0+255),f,b
 24897  00236A  5172               	movf	(?___wmul+1)& (0+255),w,b
 24898  00236C  238D               	addwfc	(??_defaultNVs+1)& (0+255),f,b
 24899  00236E  C08C  F087         	movff	??_defaultNVs,writeFlashByte@flashAddr
 24900  002372  C08D  F088         	movff	??_defaultNVs+1,writeFlashByte@flashAddr+1
 24901  002376  5187               	movf	writeFlashByte@flashAddr& (0+255),w,b
 24902  002378  1188               	iorwf	(writeFlashByte@flashAddr+1)& (0+255),w,b
 24903  00237A  A4D8               	btfss	status,2,c
 24904  00237C  0E20               	movlw	32
 24905  00237E  6F89               	movwf	(writeFlashByte@flashAddr+2)& (0+255),b
 24906  002380  0E7B               	movlw	123
 24907  002382  6F8A               	movwf	writeFlashByte@flashData& (0+255),b
 24908  002384  ECC0  F052         	call	_writeFlashByte	;wreg free
 24909                           
 24910                           ;mioNv.c: 271: writeFlashByte((BYTE*)(0xFF80U+(16U + 7U*(i) + 4U)), (BYTE)32);
 24911  002388  C08E  F071         	movff	defaultNVs@i,___wmul@multiplier
 24912  00238C  6B72               	clrf	(___wmul@multiplier+1)& (0+255),b
 24913  00238E  0E00               	movlw	0
 24914  002390  6F74               	movwf	(___wmul@multiplicand+1)& (0+255),b
 24915  002392  0E07               	movlw	7
 24916  002394  6F73               	movwf	___wmul@multiplicand& (0+255),b
 24917  002396  ECF0  F051         	call	___wmul	;wreg free
 24918  00239A  0E94               	movlw	148
 24919  00239C  6F8C               	movwf	??_defaultNVs& (0+255),b
 24920  00239E  0EFF               	movlw	255
 24921  0023A0  6F8D               	movwf	(??_defaultNVs+1)& (0+255),b
 24922  0023A2  5171               	movf	?___wmul& (0+255),w,b
 24923  0023A4  278C               	addwf	??_defaultNVs& (0+255),f,b
 24924  0023A6  5172               	movf	(?___wmul+1)& (0+255),w,b
 24925  0023A8  238D               	addwfc	(??_defaultNVs+1)& (0+255),f,b
 24926  0023AA  C08C  F087         	movff	??_defaultNVs,writeFlashByte@flashAddr
 24927  0023AE  C08D  F088         	movff	??_defaultNVs+1,writeFlashByte@flashAddr+1
 24928  0023B2  5187               	movf	writeFlashByte@flashAddr& (0+255),w,b
 24929  0023B4  1188               	iorwf	(writeFlashByte@flashAddr+1)& (0+255),w,b
 24930  0023B6  A4D8               	btfss	status,2,c
 24931  0023B8  0E20               	movlw	32
 24932  0023BA  6F89               	movwf	(writeFlashByte@flashAddr+2)& (0+255),b
 24933  0023BC  0E20               	movlw	32
 24934  0023BE  6F8A               	movwf	writeFlashByte@flashData& (0+255),b
 24935  0023C0  ECC0  F052         	call	_writeFlashByte	;wreg free
 24936                           
 24937                           ;mioNv.c: 272: writeFlashByte((BYTE*)(0xFF80U+(16U + 7U*(i) + 5U)), (BYTE)0x07);
 24938  0023C4  C08E  F071         	movff	defaultNVs@i,___wmul@multiplier
 24939  0023C8  6B72               	clrf	(___wmul@multiplier+1)& (0+255),b
 24940  0023CA  0E00               	movlw	0
 24941  0023CC  6F74               	movwf	(___wmul@multiplicand+1)& (0+255),b
 24942  0023CE  0E07               	movlw	7
 24943  0023D0  6F73               	movwf	___wmul@multiplicand& (0+255),b
 24944  0023D2  ECF0  F051         	call	___wmul	;wreg free
 24945  0023D6  0E95               	movlw	149
 24946  0023D8  6F8C               	movwf	??_defaultNVs& (0+255),b
 24947  0023DA  0EFF               	movlw	255
 24948  0023DC  6F8D               	movwf	(??_defaultNVs+1)& (0+255),b
 24949  0023DE  5171               	movf	?___wmul& (0+255),w,b
 24950  0023E0  278C               	addwf	??_defaultNVs& (0+255),f,b
 24951  0023E2  5172               	movf	(?___wmul+1)& (0+255),w,b
 24952  0023E4  238D               	addwfc	(??_defaultNVs+1)& (0+255),f,b
 24953  0023E6  C08C  F087         	movff	??_defaultNVs,writeFlashByte@flashAddr
 24954  0023EA  C08D  F088         	movff	??_defaultNVs+1,writeFlashByte@flashAddr+1
 24955  0023EE  5187               	movf	writeFlashByte@flashAddr& (0+255),w,b
 24956  0023F0  1188               	iorwf	(writeFlashByte@flashAddr+1)& (0+255),w,b
 24957  0023F2  A4D8               	btfss	status,2,c
 24958  0023F4  0E20               	movlw	32
 24959  0023F6  6F89               	movwf	(writeFlashByte@flashAddr+2)& (0+255),b
 24960  0023F8  0E07               	movlw	7
 24961  0023FA  6F8A               	movwf	writeFlashByte@flashData& (0+255),b
 24962  0023FC  ECC0  F052         	call	_writeFlashByte	;wreg free
 24963                           
 24964                           ;mioNv.c: 273: writeFlashByte((BYTE*)(0xFF80U+(16U + 7U*(i) + 6U)), (BYTE)0xFF);
 24965  002400  C08E  F071         	movff	defaultNVs@i,___wmul@multiplier
 24966  002404  6B72               	clrf	(___wmul@multiplier+1)& (0+255),b
 24967  002406  0E00               	movlw	0
 24968  002408  6F74               	movwf	(___wmul@multiplicand+1)& (0+255),b
 24969  00240A  0E07               	movlw	7
 24970  00240C  6F73               	movwf	___wmul@multiplicand& (0+255),b
 24971  00240E  ECF0  F051         	call	___wmul	;wreg free
 24972  002412  0E96               	movlw	150
 24973  002414  6F8C               	movwf	??_defaultNVs& (0+255),b
 24974  002416  0EFF               	movlw	255
 24975  002418  6F8D               	movwf	(??_defaultNVs+1)& (0+255),b
 24976  00241A  5171               	movf	?___wmul& (0+255),w,b
 24977  00241C  278C               	addwf	??_defaultNVs& (0+255),f,b
 24978  00241E  5172               	movf	(?___wmul+1)& (0+255),w,b
 24979  002420  238D               	addwfc	(??_defaultNVs+1)& (0+255),f,b
 24980  002422  C08C  F087         	movff	??_defaultNVs,writeFlashByte@flashAddr
 24981  002426  C08D  F088         	movff	??_defaultNVs+1,writeFlashByte@flashAddr+1
 24982  00242A  5187               	movf	writeFlashByte@flashAddr& (0+255),w,b
 24983  00242C  1188               	iorwf	(writeFlashByte@flashAddr+1)& (0+255),w,b
 24984  00242E  A4D8               	btfss	status,2,c
 24985  002430  0E20               	movlw	32
 24986  002432  6F89               	movwf	(writeFlashByte@flashAddr+2)& (0+255),b
 24987  002434  0EFF               	movlw	255
 24988  002436  6F8A               	movwf	writeFlashByte@flashData& (0+255),b
 24989  002438  ECC0  F052         	call	_writeFlashByte	;wreg free
 24990                           
 24991                           ;mioNv.c: 274: break;
 24992  00243C  D016               	goto	l18519
 24993  00243E                     l18517:
 24994                           
 24995                           ; BSR set to: 0
 24996  00243E  518B               	movf	defaultNVs@type& (0+255),w,b
 24997                           
 24998                           ; Switch size 1, requested type "simple"
 24999                           ; Number of cases is 7, Range of values is 0 to 6
 25000                           ; switch strategies available:
 25001                           ; Name         Instructions Cycles
 25002                           ; simple_byte           22    12 (average)
 25003                           ;	Chosen strategy is simple_byte
 25004  002440  0A00               	xorlw	0	; case 0
 25005  002442  B4D8               	btfsc	status,2,c
 25006  002444  D525               	goto	l18501
 25007  002446  0A01               	xorlw	1	; case 1
 25008  002448  B4D8               	btfsc	status,2,c
 25009  00244A  D55F               	goto	l18503
 25010  00244C  0A03               	xorlw	3	; case 2
 25011  00244E  B4D8               	btfsc	status,2,c
 25012  002450  D599               	goto	l18505
 25013  002452  0A01               	xorlw	1	; case 3
 25014  002454  B4D8               	btfsc	status,2,c
 25015  002456  D60F               	goto	l18507
 25016  002458  0A07               	xorlw	7	; case 4
 25017  00245A  B4D8               	btfsc	status,2,c
 25018  00245C  D6A3               	goto	l18509
 25019  00245E  0A01               	xorlw	1	; case 5
 25020  002460  B4D8               	btfsc	status,2,c
 25021  002462  D719               	goto	l18511
 25022  002464  0A03               	xorlw	3	; case 6
 25023  002466  B4D8               	btfsc	status,2,c
 25024  002468  D753               	goto	l18513
 25025  00246A                     l18519:
 25026                           
 25027                           ; BSR set to: 0
 25028                           ;mioNv.c: 278: loadNvCache();
 25029  00246A  EC12  F04F         	call	_loadNvCache	;wreg free
 25030                           
 25031                           ; BSR set to: 0
 25032  00246E  0012               	return		;funcret
 25033  002470                     __end_of_defaultNVs:
 25034                           	callstack 0
 25035                           
 25036 ;; *************** function ___wmul *****************
 25037 ;; Defined at:
 25038 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\Umul16.c"
 25039 ;; Parameters:    Size  Location     Type
 25040 ;;  multiplier      2   17[BANK0 ] unsigned int 
 25041 ;;  multiplicand    2   19[BANK0 ] unsigned int 
 25042 ;; Auto vars:     Size  Location     Type
 25043 ;;  product         2   21[BANK0 ] unsigned int 
 25044 ;; Return value:  Size  Location     Type
 25045 ;;                  2   17[BANK0 ] unsigned int 
 25046 ;; Registers used:
 25047 ;;		wreg, status,2, status,0, prodl, prodh
 25048 ;; Tracked objects:
 25049 ;;		On entry : 3F/0
 25050 ;;		On exit  : 3F/0
 25051 ;;		Unchanged: 0/0
 25052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 25053 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 25054 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 25055 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 25056 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 25057 ;;Total ram usage:        6 bytes
 25058 ;; Hardware stack levels used: 1
 25059 ;; Hardware stack levels required when called: 8
 25060 ;; This function calls:
 25061 ;;		Nothing
 25062 ;; This function is called by:
 25063 ;;		_pollAnalogue
 25064 ;;		_bounceDown
 25065 ;;		_defaultNVs
 25066 ;; This function uses a non-reentrant model
 25067 ;;
 25068                           
 25069                           	psect	text115
 25070  00A3E0                     __ptext115:
 25071                           	callstack 0
 25072  00A3E0                     ___wmul:
 25073                           	callstack 19
 25074                           
 25075                           ; BSR set to: 0
 25076                           
 25077                           ; BSR set to: 0
 25078                           ;incstack = 0
 25079  00A3E0  5171               	movf	___wmul@multiplier& (0+255),w,b
 25080  00A3E2  0373               	mulwf	___wmul@multiplicand& (0+255),b
 25081  00A3E4  CFF3 F075          	movff	prodl,___wmul@product
 25082  00A3E8  CFF4 F076          	movff	prodh,___wmul@product+1
 25083  00A3EC  5171               	movf	___wmul@multiplier& (0+255),w,b
 25084  00A3EE  0374               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 25085  00A3F0  50F3               	movf	243,w,c
 25086  00A3F2  2776               	addwf	(___wmul@product+1)& (0+255),f,b
 25087  00A3F4  5172               	movf	(___wmul@multiplier+1)& (0+255),w,b
 25088  00A3F6  0373               	mulwf	___wmul@multiplicand& (0+255),b
 25089  00A3F8  50F3               	movf	243,w,c
 25090  00A3FA  2776               	addwf	(___wmul@product+1)& (0+255),f,b
 25091                           
 25092                           ; BSR set to: 0
 25093  00A3FC  C075  F071         	movff	___wmul@product,?___wmul
 25094  00A400  C076  F072         	movff	___wmul@product+1,?___wmul+1
 25095                           
 25096                           ; BSR set to: 0
 25097  00A404  0012               	return		;funcret
 25098  00A406                     __end_of___wmul:
 25099                           	callstack 0
 25100                           
 25101 ;; *************** function _defaultEvents *****************
 25102 ;; Defined at:
 25103 ;;		line 104 in file "../../github/CANMIOfirmware/mioEvents.c"
 25104 ;; Parameters:    Size  Location     Type
 25105 ;;  io              1    wreg     unsigned char 
 25106 ;;  type            1  104[BANK0 ] unsigned char 
 25107 ;; Auto vars:     Size  Location     Type
 25108 ;;  io              1  107[BANK0 ] unsigned char 
 25109 ;;  en              2  105[BANK0 ] unsigned int 
 25110 ;; Return value:  Size  Location     Type
 25111 ;;                  1    wreg      void 
 25112 ;; Registers used:
 25113 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 25114 ;; Tracked objects:
 25115 ;;		On entry : 3F/0
 25116 ;;		On exit  : 3F/0
 25117 ;;		Unchanged: 0/0
 25118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 25119 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 25120 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 25121 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 25122 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 25123 ;;Total ram usage:        4 bytes
 25124 ;; Hardware stack levels used: 1
 25125 ;; Hardware stack levels required when called: 21
 25126 ;; This function calls:
 25127 ;;		_addEvent
 25128 ;;		_clearEvents
 25129 ;; This function is called by:
 25130 ;;		_setType
 25131 ;; This function uses a non-reentrant model
 25132 ;;
 25133                           
 25134                           	psect	text116
 25135  005FB8                     __ptext116:
 25136                           	callstack 0
 25137  005FB8                     _defaultEvents:
 25138                           	callstack 6
 25139                           
 25140                           ; BSR set to: 0
 25141                           ;incstack = 0
 25142                           ;defaultEvents@io stored from wreg
 25143  005FB8  6FCB               	movwf	defaultEvents@io& (0+255),b
 25144                           
 25145                           ;mioEvents.c: 105: WORD en = io+1U;
 25146  005FBA  0E01               	movlw	1
 25147  005FBC  0100               	movlb	0	; () banked
 25148  005FBE  25CB               	addwf	defaultEvents@io& (0+255),w,b
 25149  005FC0  6FC9               	movwf	defaultEvents@en& (0+255),b
 25150  005FC2  6BCA               	clrf	(defaultEvents@en+1)& (0+255),b
 25151  005FC4  0E00               	movlw	0
 25152  005FC6  23CA               	addwfc	(defaultEvents@en+1)& (0+255),f,b
 25153                           
 25154                           ; BSR set to: 0
 25155                           ;mioEvents.c: 106: clearEvents(io);
 25156  005FC8  51CB               	movf	defaultEvents@io& (0+255),w,b
 25157  005FCA  ECE7  F04F         	call	_clearEvents
 25158                           
 25159                           ;mioEvents.c: 109: switch(type) {
 25160  005FCE  D0B9               	goto	l18537
 25161  005FD0                     l18525:
 25162                           
 25163                           ; BSR set to: 0
 25164                           ;mioEvents.c: 113: addEvent(nodeID, 100+en, 0, ((8U + 4U*(io))+0U), 1);
 25165  005FD0  C001  F0B3         	movff	_nodeID,addEvent@nodeNumber
 25166  005FD4  C002  F0B4         	movff	_nodeID+1,addEvent@nodeNumber+1
 25167  005FD8  0E64               	movlw	100
 25168  005FDA  25C9               	addwf	defaultEvents@en& (0+255),w,b
 25169  005FDC  6FB5               	movwf	addEvent@eventNumber& (0+255),b
 25170  005FDE  0E00               	movlw	0
 25171  005FE0  21CA               	addwfc	(defaultEvents@en+1)& (0+255),w,b
 25172  005FE2  6FB6               	movwf	(addEvent@eventNumber+1)& (0+255),b
 25173  005FE4  0E00               	movlw	0
 25174  005FE6  6FB7               	movwf	addEvent@evNum& (0+255),b
 25175  005FE8  51CB               	movf	defaultEvents@io& (0+255),w,b
 25176  005FEA  0D04               	mullw	4
 25177  005FEC  50F3               	movf	243,w,c
 25178  005FEE  0F08               	addlw	8
 25179  005FF0  6FB8               	movwf	addEvent@evVal& (0+255),b
 25180  005FF2  0E01               	movlw	1
 25181  005FF4  6FB9               	movwf	addEvent@forceOwnNN& (0+255),b
 25182  005FF6  EC0F  F02E         	call	_addEvent	;wreg free
 25183  005FFA                     l732:
 25184                           
 25185                           ; BSR set to: 0
 25186                           ;mioEvents.c: 118: addEvent(nodeID, en, 1, ((8U + 5U*(io))+0U), 1);
 25187  005FFA  C001  F0B3         	movff	_nodeID,addEvent@nodeNumber
 25188  005FFE  C002  F0B4         	movff	_nodeID+1,addEvent@nodeNumber+1
 25189  006002  C0C9  F0B5         	movff	defaultEvents@en,addEvent@eventNumber
 25190  006006  C0CA  F0B6         	movff	defaultEvents@en+1,addEvent@eventNumber+1
 25191  00600A  0E01               	movlw	1
 25192  00600C  6FB7               	movwf	addEvent@evNum& (0+255),b
 25193  00600E  51CB               	movf	defaultEvents@io& (0+255),w,b
 25194  006010  0D05               	mullw	5
 25195  006012  50F3               	movf	243,w,c
 25196  006014  0F08               	addlw	8
 25197  006016  6FB8               	movwf	addEvent@evVal& (0+255),b
 25198  006018  0E01               	movlw	1
 25199  00601A  6FB9               	movwf	addEvent@forceOwnNN& (0+255),b
 25200  00601C  EC0F  F02E         	call	_addEvent	;wreg free
 25201                           
 25202                           ;mioEvents.c: 121: break;
 25203  006020  0012               	return	
 25204  006022                     l18527:
 25205                           
 25206                           ; BSR set to: 0
 25207                           ;mioEvents.c: 124: addEvent(nodeID, en, 0, ((8U + 4U*(io))+0U), 1);
 25208  006022  C001  F0B3         	movff	_nodeID,addEvent@nodeNumber
 25209  006026  C002  F0B4         	movff	_nodeID+1,addEvent@nodeNumber+1
 25210  00602A  C0C9  F0B5         	movff	defaultEvents@en,addEvent@eventNumber
 25211  00602E  C0CA  F0B6         	movff	defaultEvents@en+1,addEvent@eventNumber+1
 25212  006032  0E00               	movlw	0
 25213  006034  6FB7               	movwf	addEvent@evNum& (0+255),b
 25214  006036  51CB               	movf	defaultEvents@io& (0+255),w,b
 25215  006038  0D04               	mullw	4
 25216  00603A  50F3               	movf	243,w,c
 25217  00603C  0F08               	addlw	8
 25218  00603E  6FB8               	movwf	addEvent@evVal& (0+255),b
 25219  006040  0E01               	movlw	1
 25220  006042  6FB9               	movwf	addEvent@forceOwnNN& (0+255),b
 25221  006044  EC0F  F02E         	call	_addEvent	;wreg free
 25222                           
 25223                           ;mioEvents.c: 125: break;
 25224  006048  0012               	return	
 25225  00604A                     l18529:
 25226                           
 25227                           ; BSR set to: 0
 25228                           ;mioEvents.c: 129: addEvent(nodeID, 100+en, 0, ((8U + 4U*(io))+0U), 1);
 25229  00604A  C001  F0B3         	movff	_nodeID,addEvent@nodeNumber
 25230  00604E  C002  F0B4         	movff	_nodeID+1,addEvent@nodeNumber+1
 25231  006052  0E64               	movlw	100
 25232  006054  25C9               	addwf	defaultEvents@en& (0+255),w,b
 25233  006056  6FB5               	movwf	addEvent@eventNumber& (0+255),b
 25234  006058  0E00               	movlw	0
 25235  00605A  21CA               	addwfc	(defaultEvents@en+1)& (0+255),w,b
 25236  00605C  6FB6               	movwf	(addEvent@eventNumber+1)& (0+255),b
 25237  00605E  0E00               	movlw	0
 25238  006060  6FB7               	movwf	addEvent@evNum& (0+255),b
 25239  006062  51CB               	movf	defaultEvents@io& (0+255),w,b
 25240  006064  0D04               	mullw	4
 25241  006066  50F3               	movf	243,w,c
 25242  006068  0F08               	addlw	8
 25243  00606A  6FB8               	movwf	addEvent@evVal& (0+255),b
 25244  00606C  0E01               	movlw	1
 25245  00606E  6FB9               	movwf	addEvent@forceOwnNN& (0+255),b
 25246  006070  EC0F  F02E         	call	_addEvent	;wreg free
 25247                           
 25248                           ;mioEvents.c: 130: addEvent(nodeID, 300+en, 0, ((8U + 4U*(io))+1U), 1);
 25249  006074  C001  F0B3         	movff	_nodeID,addEvent@nodeNumber
 25250  006078  C002  F0B4         	movff	_nodeID+1,addEvent@nodeNumber+1
 25251  00607C  0E2C               	movlw	44
 25252  00607E  25C9               	addwf	defaultEvents@en& (0+255),w,b
 25253  006080  6FB5               	movwf	addEvent@eventNumber& (0+255),b
 25254  006082  0E01               	movlw	1
 25255  006084  21CA               	addwfc	(defaultEvents@en+1)& (0+255),w,b
 25256  006086  6FB6               	movwf	(addEvent@eventNumber+1)& (0+255),b
 25257  006088  0E00               	movlw	0
 25258  00608A  6FB7               	movwf	addEvent@evNum& (0+255),b
 25259  00608C  51CB               	movf	defaultEvents@io& (0+255),w,b
 25260  00608E  0D04               	mullw	4
 25261  006090  50F3               	movf	243,w,c
 25262  006092  0F09               	addlw	9
 25263  006094  6FB8               	movwf	addEvent@evVal& (0+255),b
 25264  006096  0E01               	movlw	1
 25265  006098  6FB9               	movwf	addEvent@forceOwnNN& (0+255),b
 25266  00609A  EC0F  F02E         	call	_addEvent	;wreg free
 25267                           
 25268                           ;mioEvents.c: 131: addEvent(nodeID, 200+en, 0, ((8U + 4U*(io))+2U), 1);
 25269  00609E  C001  F0B3         	movff	_nodeID,addEvent@nodeNumber
 25270  0060A2  C002  F0B4         	movff	_nodeID+1,addEvent@nodeNumber+1
 25271  0060A6  0EC8               	movlw	200
 25272  0060A8  25C9               	addwf	defaultEvents@en& (0+255),w,b
 25273  0060AA  6FB5               	movwf	addEvent@eventNumber& (0+255),b
 25274  0060AC  0E00               	movlw	0
 25275  0060AE  21CA               	addwfc	(defaultEvents@en+1)& (0+255),w,b
 25276  0060B0  6FB6               	movwf	(addEvent@eventNumber+1)& (0+255),b
 25277  0060B2  0E00               	movlw	0
 25278  0060B4  6FB7               	movwf	addEvent@evNum& (0+255),b
 25279  0060B6  51CB               	movf	defaultEvents@io& (0+255),w,b
 25280  0060B8  0D04               	mullw	4
 25281  0060BA  50F3               	movf	243,w,c
 25282  0060BC  0F0A               	addlw	10
 25283  0060BE  6FB8               	movwf	addEvent@evVal& (0+255),b
 25284  0060C0  0E01               	movlw	1
 25285  0060C2  6FB9               	movwf	addEvent@forceOwnNN& (0+255),b
 25286  0060C4  EC0F  F02E         	call	_addEvent	;wreg free
 25287                           
 25288                           ;mioEvents.c: 133: addEvent(nodeID, en, 1, ((8U + 5U*(io))+0U), 1);
 25289  0060C8  C001  F0B3         	movff	_nodeID,addEvent@nodeNumber
 25290  0060CC  C002  F0B4         	movff	_nodeID+1,addEvent@nodeNumber+1
 25291  0060D0  C0C9  F0B5         	movff	defaultEvents@en,addEvent@eventNumber
 25292  0060D4  C0CA  F0B6         	movff	defaultEvents@en+1,addEvent@eventNumber+1
 25293  0060D8  0E01               	movlw	1
 25294  0060DA  6FB7               	movwf	addEvent@evNum& (0+255),b
 25295  0060DC  51CB               	movf	defaultEvents@io& (0+255),w,b
 25296  0060DE  0D05               	mullw	5
 25297  0060E0  50F3               	movf	243,w,c
 25298  0060E2  0F08               	addlw	8
 25299  0060E4  6FB8               	movwf	addEvent@evVal& (0+255),b
 25300  0060E6  0E01               	movlw	1
 25301  0060E8  6FB9               	movwf	addEvent@forceOwnNN& (0+255),b
 25302  0060EA  EC0F  F02E         	call	_addEvent	;wreg free
 25303                           
 25304                           ;mioEvents.c: 134: break;
 25305  0060EE  0012               	return	
 25306  0060F0                     l18533:
 25307                           
 25308                           ; BSR set to: 0
 25309                           ;mioEvents.c: 148: addEvent(nodeID, en, 0, ((8U + 4U*(io))+1U), 1);
 25310  0060F0  C001  F0B3         	movff	_nodeID,addEvent@nodeNumber
 25311  0060F4  C002  F0B4         	movff	_nodeID+1,addEvent@nodeNumber+1
 25312  0060F8  C0C9  F0B5         	movff	defaultEvents@en,addEvent@eventNumber
 25313  0060FC  C0CA  F0B6         	movff	defaultEvents@en+1,addEvent@eventNumber+1
 25314  006100  0E00               	movlw	0
 25315  006102  6FB7               	movwf	addEvent@evNum& (0+255),b
 25316  006104  51CB               	movf	defaultEvents@io& (0+255),w,b
 25317  006106  0D04               	mullw	4
 25318  006108  50F3               	movf	243,w,c
 25319  00610A  0F09               	addlw	9
 25320  00610C  6FB8               	movwf	addEvent@evVal& (0+255),b
 25321  00610E  0E01               	movlw	1
 25322  006110  6FB9               	movwf	addEvent@forceOwnNN& (0+255),b
 25323  006112  EC0F  F02E         	call	_addEvent	;wreg free
 25324                           
 25325                           ;mioEvents.c: 149: addEvent(nodeID, 100+en, 0, ((8U + 4U*(io))+0U), 1);
 25326  006116  C001  F0B3         	movff	_nodeID,addEvent@nodeNumber
 25327  00611A  C002  F0B4         	movff	_nodeID+1,addEvent@nodeNumber+1
 25328  00611E  0E64               	movlw	100
 25329  006120  25C9               	addwf	defaultEvents@en& (0+255),w,b
 25330  006122  6FB5               	movwf	addEvent@eventNumber& (0+255),b
 25331  006124  0E00               	movlw	0
 25332  006126  21CA               	addwfc	(defaultEvents@en+1)& (0+255),w,b
 25333  006128  6FB6               	movwf	(addEvent@eventNumber+1)& (0+255),b
 25334  00612A  0E00               	movlw	0
 25335  00612C  6FB7               	movwf	addEvent@evNum& (0+255),b
 25336  00612E  51CB               	movf	defaultEvents@io& (0+255),w,b
 25337  006130  0D04               	mullw	4
 25338  006132  50F3               	movf	243,w,c
 25339  006134  0F08               	addlw	8
 25340  006136  6FB8               	movwf	addEvent@evVal& (0+255),b
 25341  006138  0E01               	movlw	1
 25342  00613A  6FB9               	movwf	addEvent@forceOwnNN& (0+255),b
 25343  00613C  EC0F  F02E         	call	_addEvent	;wreg free
 25344                           
 25345                           ;mioEvents.c: 150: break;
 25346  006140  0012               	return	
 25347  006142                     l18537:
 25348                           
 25349                           ; BSR set to: 0
 25350  006142  51C8               	movf	defaultEvents@type& (0+255),w,b
 25351                           
 25352                           ; Switch size 1, requested type "simple"
 25353                           ; Number of cases is 7, Range of values is 0 to 6
 25354                           ; switch strategies available:
 25355                           ; Name         Instructions Cycles
 25356                           ; simple_byte           22    12 (average)
 25357                           ;	Chosen strategy is simple_byte
 25358  006144  0A00               	xorlw	0	; case 0
 25359  006146  B4D8               	btfsc	status,2,c
 25360  006148  D76C               	goto	l18527
 25361  00614A  0A01               	xorlw	1	; case 1
 25362  00614C  B4D8               	btfsc	status,2,c
 25363  00614E  D755               	goto	l732
 25364  006150  0A03               	xorlw	3	; case 2
 25365  006152  B4D8               	btfsc	status,2,c
 25366  006154  D77A               	goto	l18529
 25367  006156  0A01               	xorlw	1	; case 3
 25368  006158  B4D8               	btfsc	status,2,c
 25369  00615A  D73A               	goto	l18525
 25370  00615C  0A07               	xorlw	7	; case 4
 25371  00615E  B4D8               	btfsc	status,2,c
 25372  006160  0012               	return	
 25373  006162  0A01               	xorlw	1	; case 5
 25374  006164  B4D8               	btfsc	status,2,c
 25375  006166  D75D               	goto	l18527
 25376  006168  0A03               	xorlw	3	; case 6
 25377  00616A  A4D8               	btfss	status,2,c
 25378  00616C  0012               	return	
 25379  00616E  D7C0               	goto	l18533
 25380  006170                     __end_of_defaultEvents:
 25381                           	callstack 0
 25382                           
 25383 ;; *************** function _clearEvents *****************
 25384 ;; Defined at:
 25385 ;;		line 198 in file "../../github/CANMIOfirmware/mioEvents.c"
 25386 ;; Parameters:    Size  Location     Type
 25387 ;;  io              1    wreg     unsigned char 
 25388 ;; Auto vars:     Size  Location     Type
 25389 ;;  io              1   93[BANK0 ] unsigned char 
 25390 ;; Return value:  Size  Location     Type
 25391 ;;                  1    wreg      void 
 25392 ;; Registers used:
 25393 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 25394 ;; Tracked objects:
 25395 ;;		On entry : 3F/0
 25396 ;;		On exit  : 3F/0
 25397 ;;		Unchanged: 0/0
 25398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 25399 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 25400 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 25401 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 25402 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 25403 ;;Total ram usage:        1 bytes
 25404 ;; Hardware stack levels used: 1
 25405 ;; Hardware stack levels required when called: 20
 25406 ;; This function calls:
 25407 ;;		_deleteActionRange
 25408 ;;		_deleteHappeningRange
 25409 ;; This function is called by:
 25410 ;;		_defaultEvents
 25411 ;; This function uses a non-reentrant model
 25412 ;;
 25413                           
 25414                           	psect	text117
 25415  009FCE                     __ptext117:
 25416                           	callstack 0
 25417  009FCE                     _clearEvents:
 25418                           	callstack 6
 25419                           
 25420                           ; BSR set to: 0
 25421                           ;incstack = 0
 25422                           ;clearEvents@io stored from wreg
 25423  009FCE  6FBD               	movwf	clearEvents@io& (0+255),b
 25424                           
 25425                           ;mioEvents.c: 199: deleteActionRange((8U + 5U*(io)), 5U);
 25426  009FD0  0E05               	movlw	5
 25427  009FD2  0100               	movlb	0	; () banked
 25428  009FD4  6FB3               	movwf	deleteActionRange@number& (0+255),b
 25429  009FD6  51BD               	movf	clearEvents@io& (0+255),w,b
 25430  009FD8  0D05               	mullw	5
 25431  009FDA  50F3               	movf	243,w,c
 25432  009FDC  0F08               	addlw	8
 25433  009FDE  EC6E  F041         	call	_deleteActionRange
 25434                           
 25435                           ;mioEvents.c: 200: deleteActionRange((8U + 5U*(io)) | 0x80U, 5U);
 25436  009FE2  0E05               	movlw	5
 25437  009FE4  6FB3               	movwf	deleteActionRange@number& (0+255),b
 25438  009FE6  51BD               	movf	clearEvents@io& (0+255),w,b
 25439  009FE8  0D05               	mullw	5
 25440  009FEA  50F3               	movf	243,w,c
 25441  009FEC  0F08               	addlw	8
 25442  009FEE  0980               	iorlw	128
 25443  009FF0  EC6E  F041         	call	_deleteActionRange
 25444                           
 25445                           ;mioEvents.c: 201: deleteHappeningRange((8U + 4U*(io)), 4U);
 25446  009FF4  0E04               	movlw	4
 25447  009FF6  6FB3               	movwf	deleteHappeningRange@number& (0+255),b
 25448  009FF8  51BD               	movf	clearEvents@io& (0+255),w,b
 25449  009FFA  0D04               	mullw	4
 25450  009FFC  50F3               	movf	243,w,c
 25451  009FFE  0F08               	addlw	8
 25452  00A000  EC18  F041         	call	_deleteHappeningRange
 25453                           
 25454                           ; BSR set to: 0
 25455  00A004  0012               	return		;funcret
 25456  00A006                     __end_of_clearEvents:
 25457                           	callstack 0
 25458                           
 25459 ;; *************** function _deleteHappeningRange *****************
 25460 ;; Defined at:
 25461 ;;		line 152 in file "../../github/CBUSlib/happeningsActions.c"
 25462 ;; Parameters:    Size  Location     Type
 25463 ;;  action          1    wreg     unsigned char 
 25464 ;;  number          1   83[BANK0 ] unsigned char 
 25465 ;; Auto vars:     Size  Location     Type
 25466 ;;  action          1   89[BANK0 ] unsigned char 
 25467 ;;  pa              1   90[BANK0 ] unsigned char 
 25468 ;;  f               1    0        struct .
 25469 ;;  tableIndex      1   91[BANK0 ] unsigned char 
 25470 ;; Return value:  Size  Location     Type
 25471 ;;                  1    wreg      void 
 25472 ;; Registers used:
 25473 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 25474 ;; Tracked objects:
 25475 ;;		On entry : 3F/0
 25476 ;;		On exit  : 3F/0
 25477 ;;		Unchanged: 0/0
 25478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 25479 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 25480 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 25481 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 25482 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 25483 ;;Total ram usage:        9 bytes
 25484 ;; Hardware stack levels used: 1
 25485 ;; Hardware stack levels required when called: 19
 25486 ;; This function calls:
 25487 ;;		_checkRemoveTableEntry
 25488 ;;		_flushFlashImage
 25489 ;;		_readFlashBlock
 25490 ;;		_rebuildHashtable
 25491 ;;		_validStart
 25492 ;;		_writeEv
 25493 ;; This function is called by:
 25494 ;;		_clearEvents
 25495 ;; This function uses a non-reentrant model
 25496 ;;
 25497                           
 25498                           	psect	text118
 25499  008230                     __ptext118:
 25500                           	callstack 0
 25501  008230                     _deleteHappeningRange:
 25502                           	callstack 6
 25503                           
 25504                           ; BSR set to: 0
 25505                           ;incstack = 0
 25506                           ;deleteHappeningRange@action stored from wreg
 25507  008230  6FB9               	movwf	deleteHappeningRange@action& (0+255),b
 25508                           
 25509                           ;happeningsActions.c: 153: unsigned char tableIndex;;happeningsActions.c: 154: for (tabl
      +                          eIndex=0; tableIndex < 255U; tableIndex++) {
 25510  008232  0E00               	movlw	0
 25511  008234  0100               	movlb	0	; () banked
 25512  008236  6FBB               	movwf	deleteHappeningRange@tableIndex& (0+255),b
 25513  008238                     l18175:
 25514                           
 25515                           ; BSR set to: 0
 25516                           ;happeningsActions.c: 155: if ( validStart(tableIndex)) {
 25517  008238  51BB               	movf	deleteHappeningRange@tableIndex& (0+255),w,b
 25518  00823A  ECFE  F050         	call	_validStart
 25519  00823E  0900               	iorlw	0
 25520  008240  B4D8               	btfsc	status,2,c
 25521  008242  D043               	goto	l18185
 25522                           
 25523                           ; BSR set to: 0
 25524  008244  51BB               	movf	deleteHappeningRange@tableIndex& (0+255),w,b
 25525  008246  0D10               	mullw	16
 25526  008248  CFF3 F0B4          	movff	prodl,??_deleteHappeningRange
 25527  00824C  CFF4 F0B5          	movff	prodh,??_deleteHappeningRange+1
 25528  008250  51E9               	movf	_eventTable& (0+255),w,b
 25529  008252  25B4               	addwf	??_deleteHappeningRange& (0+255),w,b
 25530  008254  6F76               	movwf	readFlashBlock@flashAddr& (0+255),b
 25531  008256  51EA               	movf	(_eventTable+1)& (0+255),w,b
 25532  008258  21B5               	addwfc	(??_deleteHappeningRange+1)& (0+255),w,b
 25533  00825A  6F77               	movwf	(readFlashBlock@flashAddr+1)& (0+255),b
 25534  00825C  EC8D  F03D         	call	_readFlashBlock	;wreg free
 25535                           
 25536                           ;happeningsActions.c: 159: pa = readFlashBlock((WORD)(&(eventTable[tableIndex].evs[0])))
      +                          ;
 25537  008260  51BB               	movf	deleteHappeningRange@tableIndex& (0+255),w,b
 25538  008262  0D10               	mullw	16
 25539  008264  CFF3 F0B4          	movff	prodl,??_deleteHappeningRange
 25540  008268  CFF4 F0B5          	movff	prodh,??_deleteHappeningRange+1
 25541  00826C  51E9               	movf	_eventTable& (0+255),w,b
 25542  00826E  27B4               	addwf	??_deleteHappeningRange& (0+255),f,b
 25543  008270  51EA               	movf	(_eventTable+1)& (0+255),w,b
 25544  008272  23B5               	addwfc	(??_deleteHappeningRange+1)& (0+255),f,b
 25545  008274  0E06               	movlw	6
 25546  008276  25B4               	addwf	??_deleteHappeningRange& (0+255),w,b
 25547  008278  6F76               	movwf	readFlashBlock@flashAddr& (0+255),b
 25548  00827A  0E00               	movlw	0
 25549  00827C  21B5               	addwfc	(??_deleteHappeningRange+1)& (0+255),w,b
 25550  00827E  6F77               	movwf	(readFlashBlock@flashAddr+1)& (0+255),b
 25551  008280  EC8D  F03D         	call	_readFlashBlock	;wreg free
 25552  008284  6FBA               	movwf	deleteHappeningRange@pa& (0+255),b
 25553                           
 25554                           ; BSR set to: 0
 25555                           ;happeningsActions.c: 160: if ((pa >= action) && (pa < action+number)) {
 25556  008286  51B9               	movf	deleteHappeningRange@action& (0+255),w,b
 25557  008288  5DBA               	subwf	deleteHappeningRange@pa& (0+255),w,b
 25558  00828A  A0D8               	btfss	status,0,c
 25559  00828C  D01E               	goto	l18185
 25560                           
 25561                           ; BSR set to: 0
 25562  00828E  51B3               	movf	deleteHappeningRange@number& (0+255),w,b
 25563  008290  C0B9  F0B4         	movff	deleteHappeningRange@action,??_deleteHappeningRange
 25564  008294  6BB5               	clrf	(??_deleteHappeningRange+1)& (0+255),b
 25565  008296  27B4               	addwf	??_deleteHappeningRange& (0+255),f,b
 25566  008298  0E00               	movlw	0
 25567  00829A  23B5               	addwfc	(??_deleteHappeningRange+1)& (0+255),f,b
 25568  00829C  51BA               	movf	deleteHappeningRange@pa& (0+255),w,b
 25569  00829E  6FB6               	movwf	(??_deleteHappeningRange+2)& (0+255),b
 25570  0082A0  6BB7               	clrf	(??_deleteHappeningRange+3)& (0+255),b
 25571  0082A2  51B4               	movf	??_deleteHappeningRange& (0+255),w,b
 25572  0082A4  5DB6               	subwf	(??_deleteHappeningRange+2)& (0+255),w,b
 25573  0082A6  51B7               	movf	(??_deleteHappeningRange+3)& (0+255),w,b
 25574  0082A8  0A80               	xorlw	128
 25575  0082AA  6FB8               	movwf	(??_deleteHappeningRange+4)& (0+255),b
 25576  0082AC  51B5               	movf	(??_deleteHappeningRange+1)& (0+255),w,b
 25577  0082AE  0A80               	xorlw	128
 25578  0082B0  59B8               	subwfb	(??_deleteHappeningRange+4)& (0+255),w,b
 25579  0082B2  B0D8               	btfsc	status,0,c
 25580  0082B4  D00A               	goto	l18185
 25581                           
 25582                           ; BSR set to: 0
 25583                           ;happeningsActions.c: 161: writeEv(tableIndex, 0, 0);
 25584  0082B6  0E00               	movlw	0
 25585  0082B8  6FA1               	movwf	writeEv@evNum& (0+255),b
 25586  0082BA  0E00               	movlw	0
 25587  0082BC  6FA2               	movwf	writeEv@evVal& (0+255),b
 25588  0082BE  51BB               	movf	deleteHappeningRange@tableIndex& (0+255),w,b
 25589  0082C0  ECB3  F020         	call	_writeEv
 25590                           
 25591                           ;happeningsActions.c: 162: checkRemoveTableEntry(tableIndex);
 25592  0082C4  51BB               	movf	deleteHappeningRange@tableIndex& (0+255),w,b
 25593  0082C6  ECF1  F04E         	call	_checkRemoveTableEntry
 25594  0082CA                     l18185:
 25595                           
 25596                           ; BSR set to: 0
 25597  0082CA  2BBB               	incf	deleteHappeningRange@tableIndex& (0+255),f,b
 25598                           
 25599                           ; BSR set to: 0
 25600  0082CC  29BB               	incf	deleteHappeningRange@tableIndex& (0+255),w,b
 25601  0082CE  A4D8               	btfss	status,2,c
 25602  0082D0  D7B3               	goto	l18175
 25603                           
 25604                           ; BSR set to: 0
 25605                           ;happeningsActions.c: 163: };happeningsActions.c: 164: };happeningsActions.c: 165: };hap
      +                          peningsActions.c: 166: flushFlashImage();
 25606  0082D2  EC13  F053         	call	_flushFlashImage	;wreg free
 25607                           
 25608                           ; BSR set to: 0
 25609                           ;happeningsActions.c: 168: rebuildHashtable();
 25610  0082D6  ECB2  F034         	call	_rebuildHashtable	;wreg free
 25611                           
 25612                           ; BSR set to: 0
 25613  0082DA  0012               	return		;funcret
 25614  0082DC                     __end_of_deleteHappeningRange:
 25615                           	callstack 0
 25616                           
 25617 ;; *************** function _deleteActionRange *****************
 25618 ;; Defined at:
 25619 ;;		line 226 in file "../../github/CBUSlib/happeningsActions.c"
 25620 ;; Parameters:    Size  Location     Type
 25621 ;;  action          1    wreg     unsigned char 
 25622 ;;  number          1   83[BANK0 ] unsigned char 
 25623 ;; Auto vars:     Size  Location     Type
 25624 ;;  action          1   90[BANK0 ] unsigned char 
 25625 ;;  e               1   91[BANK0 ] unsigned char 
 25626 ;;  updated         1   89[BANK0 ] unsigned char 
 25627 ;;  tableIndex      1   92[BANK0 ] unsigned char 
 25628 ;; Return value:  Size  Location     Type
 25629 ;;                  1    wreg      void 
 25630 ;; Registers used:
 25631 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 25632 ;; Tracked objects:
 25633 ;;		On entry : 3F/0
 25634 ;;		On exit  : 3F/0
 25635 ;;		Unchanged: 0/0
 25636 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 25637 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 25638 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 25639 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 25640 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 25641 ;;Total ram usage:       10 bytes
 25642 ;; Hardware stack levels used: 1
 25643 ;; Hardware stack levels required when called: 19
 25644 ;; This function calls:
 25645 ;;		_checkRemoveTableEntry
 25646 ;;		_flushFlashImage
 25647 ;;		_getEVs
 25648 ;;		_rebuildHashtable
 25649 ;;		_validStart
 25650 ;;		_writeEv
 25651 ;; This function is called by:
 25652 ;;		_clearEvents
 25653 ;; This function uses a non-reentrant model
 25654 ;;
 25655                           
 25656                           	psect	text119
 25657  0082DC                     __ptext119:
 25658                           	callstack 0
 25659  0082DC                     _deleteActionRange:
 25660                           	callstack 6
 25661                           
 25662                           ; BSR set to: 0
 25663                           ;incstack = 0
 25664                           ;deleteActionRange@action stored from wreg
 25665  0082DC  6FBA               	movwf	deleteActionRange@action& (0+255),b
 25666                           
 25667                           ;happeningsActions.c: 227: unsigned char tableIndex;;happeningsActions.c: 228: for (tabl
      +                          eIndex=0; tableIndex < 255U; tableIndex++) {
 25668  0082DE  0E00               	movlw	0
 25669  0082E0  0100               	movlb	0	; () banked
 25670  0082E2  6FBC               	movwf	deleteActionRange@tableIndex& (0+255),b
 25671  0082E4                     l18131:
 25672                           
 25673                           ; BSR set to: 0
 25674                           ;happeningsActions.c: 229: if (validStart(tableIndex)) {
 25675  0082E4  51BC               	movf	deleteActionRange@tableIndex& (0+255),w,b
 25676  0082E6  ECFE  F050         	call	_validStart
 25677  0082EA  0900               	iorlw	0
 25678  0082EC  B4D8               	btfsc	status,2,c
 25679  0082EE  D041               	goto	l18161
 25680                           
 25681                           ; BSR set to: 0
 25682                           ;happeningsActions.c: 230: BOOL updated = 0;
 25683  0082F0  0E00               	movlw	0
 25684  0082F2  6FB9               	movwf	deleteActionRange@updated& (0+255),b
 25685                           
 25686                           ; BSR set to: 0
 25687                           ;happeningsActions.c: 231: unsigned char e;;happeningsActions.c: 232: if (getEVs(tableIn
      +                          dex)) {
 25688  0082F4  51BC               	movf	deleteActionRange@tableIndex& (0+255),w,b
 25689  0082F6  EC7A  F03B         	call	_getEVs
 25690  0082FA  0900               	iorlw	0
 25691  0082FC  A4D8               	btfss	status,2,c
 25692  0082FE  0012               	return	
 25693                           
 25694                           ; BSR set to: 0
 25695                           ;happeningsActions.c: 234: };happeningsActions.c: 236: for (e=1; e<20U; e++) {
 25696  008300  0E01               	movlw	1
 25697  008302  6FBB               	movwf	deleteActionRange@e& (0+255),b
 25698  008304                     l18145:
 25699                           
 25700                           ; BSR set to: 0
 25701                           ;happeningsActions.c: 237: if ((evs[e] >= action) && (evs[e] < action+number)) {
 25702  008304  0E40               	movlw	low _evs
 25703  008306  25BB               	addwf	deleteActionRange@e& (0+255),w,b
 25704  008308  6ED9               	movwf	fsr2l,c
 25705  00830A  6ADA               	clrf	fsr2h,c
 25706  00830C  0E02               	movlw	high _evs
 25707  00830E  22DA               	addwfc	fsr2h,f,c
 25708  008310  51BA               	movf	deleteActionRange@action& (0+255),w,b
 25709  008312  5CDE               	subwf	postinc2,w,c
 25710  008314  A0D8               	btfss	status,0,c
 25711  008316  D023               	goto	l18153
 25712                           
 25713                           ; BSR set to: 0
 25714  008318  51B3               	movf	deleteActionRange@number& (0+255),w,b
 25715  00831A  C0BA  F0B4         	movff	deleteActionRange@action,??_deleteActionRange
 25716  00831E  6BB5               	clrf	(??_deleteActionRange+1)& (0+255),b
 25717  008320  27B4               	addwf	??_deleteActionRange& (0+255),f,b
 25718  008322  0E00               	movlw	0
 25719  008324  23B5               	addwfc	(??_deleteActionRange+1)& (0+255),f,b
 25720  008326  0E40               	movlw	low _evs
 25721  008328  25BB               	addwf	deleteActionRange@e& (0+255),w,b
 25722  00832A  6ED9               	movwf	fsr2l,c
 25723  00832C  6ADA               	clrf	fsr2h,c
 25724  00832E  0E02               	movlw	high _evs
 25725  008330  22DA               	addwfc	fsr2h,f,c
 25726  008332  50DF               	movf	indf2,w,c
 25727  008334  6FB6               	movwf	(??_deleteActionRange+2)& (0+255),b
 25728  008336  6BB7               	clrf	(??_deleteActionRange+3)& (0+255),b
 25729  008338  51B4               	movf	??_deleteActionRange& (0+255),w,b
 25730  00833A  5DB6               	subwf	(??_deleteActionRange+2)& (0+255),w,b
 25731  00833C  51B7               	movf	(??_deleteActionRange+3)& (0+255),w,b
 25732  00833E  0A80               	xorlw	128
 25733  008340  6FB8               	movwf	(??_deleteActionRange+4)& (0+255),b
 25734  008342  51B5               	movf	(??_deleteActionRange+1)& (0+255),w,b
 25735  008344  0A80               	xorlw	128
 25736  008346  59B8               	subwfb	(??_deleteActionRange+4)& (0+255),w,b
 25737  008348  B0D8               	btfsc	status,0,c
 25738  00834A  D009               	goto	l18153
 25739                           
 25740                           ; BSR set to: 0
 25741                           ;happeningsActions.c: 238: writeEv(tableIndex, e, 0);
 25742  00834C  C0BB  F0A1         	movff	deleteActionRange@e,writeEv@evNum
 25743  008350  0E00               	movlw	0
 25744  008352  6FA2               	movwf	writeEv@evVal& (0+255),b
 25745  008354  51BC               	movf	deleteActionRange@tableIndex& (0+255),w,b
 25746  008356  ECB3  F020         	call	_writeEv
 25747                           
 25748                           ; BSR set to: 0
 25749                           ;happeningsActions.c: 239: updated = 1;
 25750  00835A  0E01               	movlw	1
 25751  00835C  6FB9               	movwf	deleteActionRange@updated& (0+255),b
 25752  00835E                     l18153:
 25753                           
 25754                           ; BSR set to: 0
 25755  00835E  2BBB               	incf	deleteActionRange@e& (0+255),f,b
 25756                           
 25757                           ; BSR set to: 0
 25758  008360  0E13               	movlw	19
 25759  008362  65BB               	cpfsgt	deleteActionRange@e& (0+255),b
 25760  008364  D7CF               	goto	l18145
 25761                           
 25762                           ; BSR set to: 0
 25763                           ;happeningsActions.c: 240: };happeningsActions.c: 241: };happeningsActions.c: 242: if (u
      +                          pdated) {
 25764  008366  51B9               	movf	deleteActionRange@updated& (0+255),w,b
 25765  008368  B4D8               	btfsc	status,2,c
 25766  00836A  D003               	goto	l18161
 25767                           
 25768                           ; BSR set to: 0
 25769                           ;happeningsActions.c: 243: checkRemoveTableEntry(tableIndex);
 25770  00836C  51BC               	movf	deleteActionRange@tableIndex& (0+255),w,b
 25771  00836E  ECF1  F04E         	call	_checkRemoveTableEntry
 25772  008372                     l18161:
 25773                           
 25774                           ; BSR set to: 0
 25775  008372  2BBC               	incf	deleteActionRange@tableIndex& (0+255),f,b
 25776                           
 25777                           ; BSR set to: 0
 25778  008374  29BC               	incf	deleteActionRange@tableIndex& (0+255),w,b
 25779  008376  A4D8               	btfss	status,2,c
 25780  008378  D7B5               	goto	l18131
 25781                           
 25782                           ; BSR set to: 0
 25783                           ;happeningsActions.c: 244: };happeningsActions.c: 245: };happeningsActions.c: 246: };hap
      +                          peningsActions.c: 247: flushFlashImage();
 25784  00837A  EC13  F053         	call	_flushFlashImage	;wreg free
 25785                           
 25786                           ; BSR set to: 0
 25787                           ;happeningsActions.c: 249: rebuildHashtable();
 25788  00837E  ECB2  F034         	call	_rebuildHashtable	;wreg free
 25789                           
 25790                           ; BSR set to: 0
 25791  008382  0012               	return		;funcret
 25792  008384                     __end_of_deleteActionRange:
 25793                           	callstack 0
 25794                           
 25795 ;; *************** function _addEvent *****************
 25796 ;; Defined at:
 25797 ;;		line 483 in file "../../github/CBUSlib/events.c"
 25798 ;; Parameters:    Size  Location     Type
 25799 ;;  nodeNumber      2   83[BANK0 ] unsigned int 
 25800 ;;  eventNumber     2   85[BANK0 ] unsigned int 
 25801 ;;  evNum           1   87[BANK0 ] unsigned char 
 25802 ;;  evVal           1   88[BANK0 ] unsigned char 
 25803 ;;  forceOwnNN      1   89[BANK0 ] unsigned char 
 25804 ;; Auto vars:     Size  Location     Type
 25805 ;;  e               1  102[BANK0 ] unsigned char 
 25806 ;;  f               1  101[BANK0 ] struct .
 25807 ;;  tableIndex      1  103[BANK0 ] unsigned char 
 25808 ;;  error           1  100[BANK0 ] unsigned char 
 25809 ;; Return value:  Size  Location     Type
 25810 ;;                  1    wreg      unsigned char 
 25811 ;; Registers used:
 25812 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 25813 ;; Tracked objects:
 25814 ;;		On entry : 3F/0
 25815 ;;		On exit  : 3F/0
 25816 ;;		Unchanged: 0/0
 25817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 25818 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 25819 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 25820 ;;      Temps:          0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 25821 ;;      Totals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 25822 ;;Total ram usage:       21 bytes
 25823 ;; Hardware stack levels used: 1
 25824 ;; Hardware stack levels required when called: 19
 25825 ;; This function calls:
 25826 ;;		_findEvent
 25827 ;;		_flushFlashImage
 25828 ;;		_readFlashBlock
 25829 ;;		_rebuildHashtable
 25830 ;;		_setFlashWord
 25831 ;;		_writeEv
 25832 ;;		_writeFlashByte
 25833 ;; This function is called by:
 25834 ;;		_initialise
 25835 ;;		_defaultEvents
 25836 ;;		_APP_addEvent
 25837 ;; This function uses a non-reentrant model
 25838 ;;
 25839                           
 25840                           	psect	text120
 25841  005C1E                     __ptext120:
 25842                           	callstack 0
 25843  005C1E                     _addEvent:
 25844                           	callstack 7
 25845                           
 25846                           ; BSR set to: 0
 25847                           ;events.c: 484: unsigned char tableIndex;;events.c: 485: unsigned char error;;events.c: 
      +                          487: tableIndex = findEvent(nodeNumber, eventNumber);
 25848                           
 25849                           ; BSR set to: 0
 25850                           ;incstack = 0
 25851  005C1E  C0B3  F08E         	movff	addEvent@nodeNumber,findEvent@nodeNumber
 25852  005C22  C0B4  F08F         	movff	addEvent@nodeNumber+1,findEvent@nodeNumber+1
 25853  005C26  C0B5  F090         	movff	addEvent@eventNumber,findEvent@eventNumber
 25854  005C2A  C0B6  F091         	movff	addEvent@eventNumber+1,findEvent@eventNumber+1
 25855  005C2E  ECD6  F044         	call	_findEvent	;wreg free
 25856  005C32  6FC7               	movwf	addEvent@tableIndex& (0+255),b
 25857                           
 25858                           ; BSR set to: 0
 25859                           ;events.c: 488: if (tableIndex == 0xff) {
 25860  005C34  29C7               	incf	addEvent@tableIndex& (0+255),w,b
 25861  005C36  A4D8               	btfss	status,2,c
 25862  005C38  D0CA               	goto	l18379
 25863                           
 25864                           ; BSR set to: 0
 25865                           ;events.c: 494: if (evVal == 0) {
 25866  005C3A  51B8               	movf	addEvent@evVal& (0+255),w,b
 25867  005C3C  A4D8               	btfss	status,2,c
 25868  005C3E  D002               	goto	l18335
 25869  005C40                     u22620:
 25870                           
 25871                           ; BSR set to: 0
 25872                           ;events.c: 495: return 0;
 25873  005C40  0E00               	movlw	0
 25874  005C42  0012               	return	
 25875  005C44                     l18335:
 25876                           
 25877                           ; BSR set to: 0
 25878                           ;events.c: 496: };events.c: 497: error = 1;
 25879  005C44  0E01               	movlw	1
 25880  005C46  6FC4               	movwf	addEvent@error& (0+255),b
 25881                           
 25882                           ;events.c: 499: for (tableIndex=0; tableIndex<255U; tableIndex++) {
 25883  005C48  0E00               	movlw	0
 25884  005C4A  6FC7               	movwf	addEvent@tableIndex& (0+255),b
 25885  005C4C                     l18341:
 25886                           
 25887                           ; BSR set to: 0
 25888                           ;events.c: 500: EventTableFlags f;;events.c: 501: f.asByte = readFlashBlock((WORD)(&(eve
      +                          ntTable[tableIndex].flags.asByte)));
 25889  005C4C  51C7               	movf	addEvent@tableIndex& (0+255),w,b
 25890  005C4E  0D10               	mullw	16
 25891  005C50  CFF3 F0BA          	movff	prodl,??_addEvent
 25892  005C54  CFF4 F0BB          	movff	prodh,??_addEvent+1
 25893  005C58  51E9               	movf	_eventTable& (0+255),w,b
 25894  005C5A  25BA               	addwf	??_addEvent& (0+255),w,b
 25895  005C5C  6F76               	movwf	readFlashBlock@flashAddr& (0+255),b
 25896  005C5E  51EA               	movf	(_eventTable+1)& (0+255),w,b
 25897  005C60  21BB               	addwfc	(??_addEvent+1)& (0+255),w,b
 25898  005C62  6F77               	movwf	(readFlashBlock@flashAddr+1)& (0+255),b
 25899  005C64  EC8D  F03D         	call	_readFlashBlock	;wreg free
 25900  005C68  6FC5               	movwf	addEvent@f& (0+255),b
 25901                           
 25902                           ; BSR set to: 0
 25903                           ;events.c: 502: if (f.freeEntry) {
 25904  005C6A  AFC5               	btfss	addEvent@f& (0+255),7,b
 25905  005C6C  D0A7               	goto	l18369
 25906                           
 25907                           ; BSR set to: 0
 25908                           ;events.c: 503: unsigned char e;;events.c: 505: setFlashWord((WORD*)&(eventTable[tableIn
      +                          dex].event.NN), nodeNumber);
 25909  005C6E  0E02               	movlw	2
 25910  005C70  6FBA               	movwf	??_addEvent& (0+255),b
 25911  005C72  0E00               	movlw	0
 25912  005C74  6FBB               	movwf	(??_addEvent+1)& (0+255),b
 25913  005C76  51C7               	movf	addEvent@tableIndex& (0+255),w,b
 25914  005C78  0D10               	mullw	16
 25915  005C7A  CFF3 F0BC          	movff	prodl,??_addEvent+2
 25916  005C7E  CFF4 F0BD          	movff	prodh,??_addEvent+3
 25917  005C82  51BC               	movf	(??_addEvent+2)& (0+255),w,b
 25918  005C84  25E9               	addwf	_eventTable& (0+255),w,b
 25919  005C86  6FBE               	movwf	(??_addEvent+4)& (0+255),b
 25920  005C88  51BD               	movf	(??_addEvent+3)& (0+255),w,b
 25921  005C8A  21EA               	addwfc	(_eventTable+1)& (0+255),w,b
 25922  005C8C  6FBF               	movwf	(??_addEvent+5)& (0+255),b
 25923  005C8E  0E00               	movlw	0
 25924  005C90  21EB               	addwfc	(_eventTable+2)& (0+255),w,b
 25925  005C92  6FC0               	movwf	(??_addEvent+6)& (0+255),b
 25926  005C94  51BA               	movf	??_addEvent& (0+255),w,b
 25927  005C96  25BE               	addwf	(??_addEvent+4)& (0+255),w,b
 25928  005C98  6FC1               	movwf	(??_addEvent+7)& (0+255),b
 25929  005C9A  51BB               	movf	(??_addEvent+1)& (0+255),w,b
 25930  005C9C  21BF               	addwfc	(??_addEvent+5)& (0+255),w,b
 25931  005C9E  6FC2               	movwf	(??_addEvent+8)& (0+255),b
 25932  005CA0  0E00               	movlw	0
 25933  005CA2  21C0               	addwfc	(??_addEvent+6)& (0+255),w,b
 25934  005CA4  6FC3               	movwf	(??_addEvent+9)& (0+255),b
 25935  005CA6  C0C1  F087         	movff	??_addEvent+7,setFlashWord@flashAddr
 25936  005CAA  C0C2  F088         	movff	??_addEvent+8,setFlashWord@flashAddr+1
 25937  005CAE  C0C3  F089         	movff	??_addEvent+9,setFlashWord@flashAddr+2
 25938  005CB2  C0B3  F08A         	movff	addEvent@nodeNumber,setFlashWord@flashData
 25939  005CB6  C0B4  F08B         	movff	addEvent@nodeNumber+1,setFlashWord@flashData+1
 25940  005CBA  EC8F  F04F         	call	_setFlashWord	;wreg free
 25941                           
 25942                           ;events.c: 506: setFlashWord((WORD*)&(eventTable[tableIndex].event.EN), eventNumber);
 25943  005CBE  0E04               	movlw	4
 25944  005CC0  6FBA               	movwf	??_addEvent& (0+255),b
 25945  005CC2  0E00               	movlw	0
 25946  005CC4  6FBB               	movwf	(??_addEvent+1)& (0+255),b
 25947  005CC6  51C7               	movf	addEvent@tableIndex& (0+255),w,b
 25948  005CC8  0D10               	mullw	16
 25949  005CCA  CFF3 F0BC          	movff	prodl,??_addEvent+2
 25950  005CCE  CFF4 F0BD          	movff	prodh,??_addEvent+3
 25951  005CD2  51BC               	movf	(??_addEvent+2)& (0+255),w,b
 25952  005CD4  25E9               	addwf	_eventTable& (0+255),w,b
 25953  005CD6  6FBE               	movwf	(??_addEvent+4)& (0+255),b
 25954  005CD8  51BD               	movf	(??_addEvent+3)& (0+255),w,b
 25955  005CDA  21EA               	addwfc	(_eventTable+1)& (0+255),w,b
 25956  005CDC  6FBF               	movwf	(??_addEvent+5)& (0+255),b
 25957  005CDE  0E00               	movlw	0
 25958  005CE0  21EB               	addwfc	(_eventTable+2)& (0+255),w,b
 25959  005CE2  6FC0               	movwf	(??_addEvent+6)& (0+255),b
 25960  005CE4  51BA               	movf	??_addEvent& (0+255),w,b
 25961  005CE6  25BE               	addwf	(??_addEvent+4)& (0+255),w,b
 25962  005CE8  6FC1               	movwf	(??_addEvent+7)& (0+255),b
 25963  005CEA  51BB               	movf	(??_addEvent+1)& (0+255),w,b
 25964  005CEC  21BF               	addwfc	(??_addEvent+5)& (0+255),w,b
 25965  005CEE  6FC2               	movwf	(??_addEvent+8)& (0+255),b
 25966  005CF0  0E00               	movlw	0
 25967  005CF2  21C0               	addwfc	(??_addEvent+6)& (0+255),w,b
 25968  005CF4  6FC3               	movwf	(??_addEvent+9)& (0+255),b
 25969  005CF6  C0C1  F087         	movff	??_addEvent+7,setFlashWord@flashAddr
 25970  005CFA  C0C2  F088         	movff	??_addEvent+8,setFlashWord@flashAddr+1
 25971  005CFE  C0C3  F089         	movff	??_addEvent+9,setFlashWord@flashAddr+2
 25972  005D02  C0B5  F08A         	movff	addEvent@eventNumber,setFlashWord@flashData
 25973  005D06  C0B6  F08B         	movff	addEvent@eventNumber+1,setFlashWord@flashData+1
 25974  005D0A  EC8F  F04F         	call	_setFlashWord	;wreg free
 25975                           
 25976                           ; BSR set to: 0
 25977                           ;events.c: 508: f.asByte = 0;
 25978  005D0E  0E00               	movlw	0
 25979  005D10  6FC5               	movwf	addEvent@f& (0+255),b
 25980                           
 25981                           ; BSR set to: 0
 25982                           ;events.c: 509: f.forceOwnNN = forceOwnNN;
 25983  005D12  B1B9               	btfsc	addEvent@forceOwnNN& (0+255),0,b
 25984  005D14  D002               	bra	u22645
 25985  005D16  9DC5               	bcf	addEvent@f& (0+255),6,b
 25986  005D18  D002               	bra	u22646
 25987  005D1A                     u22645:
 25988  005D1A  0100               	movlb	0	; () banked
 25989  005D1C  8DC5               	bsf	addEvent@f& (0+255),6,b
 25990  005D1E                     u22646:
 25991                           
 25992                           ; BSR set to: 0
 25993                           ;events.c: 510: writeFlashByte((BYTE*)&(eventTable[tableIndex].flags.asByte), f.asByte);
 25994  005D1E  51C7               	movf	addEvent@tableIndex& (0+255),w,b
 25995  005D20  0D10               	mullw	16
 25996  005D22  CFF3 F0BA          	movff	prodl,??_addEvent
 25997  005D26  CFF4 F0BB          	movff	prodh,??_addEvent+1
 25998  005D2A  51BA               	movf	??_addEvent& (0+255),w,b
 25999  005D2C  25E9               	addwf	_eventTable& (0+255),w,b
 26000  005D2E  6FBC               	movwf	(??_addEvent+2)& (0+255),b
 26001  005D30  51BB               	movf	(??_addEvent+1)& (0+255),w,b
 26002  005D32  21EA               	addwfc	(_eventTable+1)& (0+255),w,b
 26003  005D34  6FBD               	movwf	(??_addEvent+3)& (0+255),b
 26004  005D36  0E00               	movlw	0
 26005  005D38  21EB               	addwfc	(_eventTable+2)& (0+255),w,b
 26006  005D3A  6FBE               	movwf	(??_addEvent+4)& (0+255),b
 26007  005D3C  C0BC  F087         	movff	??_addEvent+2,writeFlashByte@flashAddr
 26008  005D40  C0BD  F088         	movff	??_addEvent+3,writeFlashByte@flashAddr+1
 26009  005D44  C0BE  F089         	movff	??_addEvent+4,writeFlashByte@flashAddr+2
 26010  005D48  C0C5  F08A         	movff	addEvent@f,writeFlashByte@flashData
 26011  005D4C  ECC0  F052         	call	_writeFlashByte	;wreg free
 26012                           
 26013                           ;events.c: 512: for (e = 0; e < 10U; e++) {
 26014  005D50  0E00               	movlw	0
 26015  005D52  6FC6               	movwf	addEvent@e& (0+255),b
 26016  005D54                     l18357:
 26017                           
 26018                           ; BSR set to: 0
 26019                           ;events.c: 513: writeFlashByte((BYTE*)&(eventTable[tableIndex].evs[e]), 0);
 26020  005D54  51C7               	movf	addEvent@tableIndex& (0+255),w,b
 26021  005D56  0D10               	mullw	16
 26022  005D58  CFF3 F0BA          	movff	prodl,??_addEvent
 26023  005D5C  CFF4 F0BB          	movff	prodh,??_addEvent+1
 26024  005D60  51C6               	movf	addEvent@e& (0+255),w,b
 26025  005D62  6FBC               	movwf	(??_addEvent+2)& (0+255),b
 26026  005D64  6BBD               	clrf	(??_addEvent+3)& (0+255),b
 26027  005D66  0E06               	movlw	6
 26028  005D68  27BC               	addwf	(??_addEvent+2)& (0+255),f,b
 26029  005D6A  0E00               	movlw	0
 26030  005D6C  23BD               	addwfc	(??_addEvent+3)& (0+255),f,b
 26031  005D6E  51BC               	movf	(??_addEvent+2)& (0+255),w,b
 26032  005D70  25E9               	addwf	_eventTable& (0+255),w,b
 26033  005D72  6FBE               	movwf	(??_addEvent+4)& (0+255),b
 26034  005D74  51BD               	movf	(??_addEvent+3)& (0+255),w,b
 26035  005D76  21EA               	addwfc	(_eventTable+1)& (0+255),w,b
 26036  005D78  6FBF               	movwf	(??_addEvent+5)& (0+255),b
 26037  005D7A  0E00               	movlw	0
 26038  005D7C  21EB               	addwfc	(_eventTable+2)& (0+255),w,b
 26039  005D7E  6FC0               	movwf	(??_addEvent+6)& (0+255),b
 26040  005D80  51BA               	movf	??_addEvent& (0+255),w,b
 26041  005D82  25BE               	addwf	(??_addEvent+4)& (0+255),w,b
 26042  005D84  6FC1               	movwf	(??_addEvent+7)& (0+255),b
 26043  005D86  51BB               	movf	(??_addEvent+1)& (0+255),w,b
 26044  005D88  21BF               	addwfc	(??_addEvent+5)& (0+255),w,b
 26045  005D8A  6FC2               	movwf	(??_addEvent+8)& (0+255),b
 26046  005D8C  0E00               	movlw	0
 26047  005D8E  21C0               	addwfc	(??_addEvent+6)& (0+255),w,b
 26048  005D90  6FC3               	movwf	(??_addEvent+9)& (0+255),b
 26049  005D92  C0C1  F087         	movff	??_addEvent+7,writeFlashByte@flashAddr
 26050  005D96  C0C2  F088         	movff	??_addEvent+8,writeFlashByte@flashAddr+1
 26051  005D9A  C0C3  F089         	movff	??_addEvent+9,writeFlashByte@flashAddr+2
 26052  005D9E  0E00               	movlw	0
 26053  005DA0  6F8A               	movwf	writeFlashByte@flashData& (0+255),b
 26054  005DA2  ECC0  F052         	call	_writeFlashByte	;wreg free
 26055                           
 26056                           ; BSR set to: 0
 26057  005DA6  2BC6               	incf	addEvent@e& (0+255),f,b
 26058                           
 26059                           ; BSR set to: 0
 26060  005DA8  0E09               	movlw	9
 26061  005DAA  65C6               	cpfsgt	addEvent@e& (0+255),b
 26062  005DAC  D7D3               	goto	l18357
 26063                           
 26064                           ; BSR set to: 0
 26065                           ;events.c: 514: };events.c: 515: flushFlashImage();
 26066  005DAE  EC13  F053         	call	_flushFlashImage	;wreg free
 26067                           
 26068                           ; BSR set to: 0
 26069                           ;events.c: 517: rebuildHashtable();
 26070  005DB2  ECB2  F034         	call	_rebuildHashtable	;wreg free
 26071                           
 26072                           ; BSR set to: 0
 26073                           ;events.c: 519: error = 0;
 26074  005DB6  0E00               	movlw	0
 26075  005DB8  6FC4               	movwf	addEvent@error& (0+255),b
 26076                           
 26077                           ;events.c: 520: break;
 26078  005DBA  D004               	goto	u22660
 26079  005DBC                     l18369:
 26080                           
 26081                           ; BSR set to: 0
 26082  005DBC  2BC7               	incf	addEvent@tableIndex& (0+255),f,b
 26083                           
 26084                           ; BSR set to: 0
 26085  005DBE  29C7               	incf	addEvent@tableIndex& (0+255),w,b
 26086  005DC0  A4D8               	btfss	status,2,c
 26087  005DC2  D744               	goto	l18341
 26088  005DC4                     u22660:
 26089                           
 26090                           ; BSR set to: 0
 26091                           ;events.c: 521: };events.c: 522: };events.c: 523: if (error) {
 26092  005DC4  51C4               	movf	addEvent@error& (0+255),w,b
 26093  005DC6  B4D8               	btfsc	status,2,c
 26094  005DC8  D002               	goto	l18379
 26095                           
 26096                           ; BSR set to: 0
 26097                           ;events.c: 524: return 4;
 26098  005DCA  0E04               	movlw	4
 26099  005DCC  0012               	return	
 26100  005DCE                     l18379:
 26101                           
 26102                           ; BSR set to: 0
 26103                           ;events.c: 525: };events.c: 526: };events.c: 528: if (writeEv(tableIndex, evNum, evVal))
      +                           {
 26104  005DCE  C0B7  F0A1         	movff	addEvent@evNum,writeEv@evNum
 26105  005DD2  C0B8  F0A2         	movff	addEvent@evVal,writeEv@evVal
 26106  005DD6  51C7               	movf	addEvent@tableIndex& (0+255),w,b
 26107  005DD8  ECB3  F020         	call	_writeEv
 26108  005DDC  0900               	iorlw	0
 26109  005DDE  B4D8               	btfsc	status,2,c
 26110  005DE0  D002               	goto	l18385
 26111                           
 26112                           ; BSR set to: 0
 26113                           ;events.c: 530: return 6;
 26114  005DE2  0E06               	movlw	6
 26115  005DE4  0012               	return	
 26116  005DE6                     l18385:
 26117                           
 26118                           ; BSR set to: 0
 26119                           ;events.c: 531: };events.c: 533: flushFlashImage();
 26120  005DE6  EC13  F053         	call	_flushFlashImage	;wreg free
 26121                           
 26122                           ; BSR set to: 0
 26123                           ;events.c: 535: rebuildHashtable();
 26124  005DEA  ECB2  F034         	call	_rebuildHashtable	;wreg free
 26125  005DEE  D728               	goto	u22620
 26126  005DF0                     __end_of_addEvent:
 26127                           	callstack 0
 26128                           
 26129 ;; *************** function _writeEv *****************
 26130 ;; Defined at:
 26131 ;;		line 587 in file "../../github/CBUSlib/events.c"
 26132 ;; Parameters:    Size  Location     Type
 26133 ;;  tableIndex      1    wreg     unsigned char 
 26134 ;;  evNum           1   65[BANK0 ] unsigned char 
 26135 ;;  evVal           1   66[BANK0 ] unsigned char 
 26136 ;; Auto vars:     Size  Location     Type
 26137 ;;  tableIndex      1   81[BANK0 ] unsigned char 
 26138 ;;  e               1   79[BANK0 ] unsigned char 
 26139 ;;  nextF           1   78[BANK0 ] struct .
 26140 ;;  nextIdx         1   82[BANK0 ] unsigned char 
 26141 ;;  f               1   80[BANK0 ] struct .
 26142 ;;  startIndex      1   77[BANK0 ] unsigned char 
 26143 ;; Return value:  Size  Location     Type
 26144 ;;                  1    wreg      unsigned char 
 26145 ;; Registers used:
 26146 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 26147 ;; Tracked objects:
 26148 ;;		On entry : 3F/0
 26149 ;;		On exit  : 3F/0
 26150 ;;		Unchanged: 0/0
 26151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 26152 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 26153 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 26154 ;;      Temps:          0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 26155 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 26156 ;;Total ram usage:       18 bytes
 26157 ;; Hardware stack levels used: 1
 26158 ;; Hardware stack levels required when called: 18
 26159 ;; This function calls:
 26160 ;;		_checkRemoveTableEntry
 26161 ;;		_readFlashBlock
 26162 ;;		_setFlashWord
 26163 ;;		_writeFlashByte
 26164 ;; This function is called by:
 26165 ;;		_initialise
 26166 ;;		_APP_addEvent
 26167 ;;		_addEvent
 26168 ;;		_deleteHappeningRange
 26169 ;;		_deleteActionRange
 26170 ;; This function uses a non-reentrant model
 26171 ;;
 26172                           
 26173                           	psect	text121
 26174  004166                     __ptext121:
 26175                           	callstack 0
 26176  004166                     _writeEv:
 26177                           	callstack 11
 26178                           
 26179                           ; BSR set to: 0
 26180                           ;incstack = 0
 26181                           ;writeEv@tableIndex stored from wreg
 26182  004166  6FB1               	movwf	writeEv@tableIndex& (0+255),b
 26183                           
 26184                           ;events.c: 588: EventTableFlags f;;events.c: 589: unsigned char startIndex = tableIndex;
 26185  004168  C0B1  F0AD         	movff	writeEv@tableIndex,writeEv@startIndex
 26186                           
 26187                           ;events.c: 590: if (evNum >= 20U) {
 26188  00416C  0E13               	movlw	19
 26189  00416E  0100               	movlb	0	; () banked
 26190  004170  65A1               	cpfsgt	writeEv@evNum& (0+255),b
 26191  004172  D128               	goto	l18069
 26192                           
 26193                           ; BSR set to: 0
 26194                           ;events.c: 591: return 6;
 26195  004174  0E06               	movlw	6
 26196  004176  0012               	return	
 26197  004178                     l18011:
 26198                           
 26199                           ; BSR set to: 0
 26200                           ;events.c: 594: unsigned char nextIdx;;events.c: 597: evNum -= 10U;
 26201  004178  0E0A               	movlw	10
 26202  00417A  5FA1               	subwf	writeEv@evNum& (0+255),f,b
 26203                           
 26204                           ; BSR set to: 0
 26205                           ;events.c: 598: f.asByte = readFlashBlock((WORD)(&(eventTable[tableIndex].flags.asByte))
      +                          );
 26206  00417C  51B1               	movf	writeEv@tableIndex& (0+255),w,b
 26207  00417E  0D10               	mullw	16
 26208  004180  CFF3 F0A3          	movff	prodl,??_writeEv
 26209  004184  CFF4 F0A4          	movff	prodh,??_writeEv+1
 26210  004188  51E9               	movf	_eventTable& (0+255),w,b
 26211  00418A  25A3               	addwf	??_writeEv& (0+255),w,b
 26212  00418C  6F76               	movwf	readFlashBlock@flashAddr& (0+255),b
 26213  00418E  51EA               	movf	(_eventTable+1)& (0+255),w,b
 26214  004190  21A4               	addwfc	(??_writeEv+1)& (0+255),w,b
 26215  004192  6F77               	movwf	(readFlashBlock@flashAddr+1)& (0+255),b
 26216  004194  EC8D  F03D         	call	_readFlashBlock	;wreg free
 26217  004198  6FB0               	movwf	writeEv@f& (0+255),b
 26218                           
 26219                           ; BSR set to: 0
 26220                           ;events.c: 600: if (f.continued) {
 26221  00419A  A9B0               	btfss	writeEv@f& (0+255),4,b
 26222  00419C  D018               	goto	l18025
 26223                           
 26224                           ; BSR set to: 0
 26225                           ;events.c: 601: tableIndex = readFlashBlock((WORD)(&(eventTable[tableIndex].next)));
 26226  00419E  51B1               	movf	writeEv@tableIndex& (0+255),w,b
 26227  0041A0  0D10               	mullw	16
 26228  0041A2  CFF3 F0A3          	movff	prodl,??_writeEv
 26229  0041A6  CFF4 F0A4          	movff	prodh,??_writeEv+1
 26230  0041AA  51E9               	movf	_eventTable& (0+255),w,b
 26231  0041AC  27A3               	addwf	??_writeEv& (0+255),f,b
 26232  0041AE  51EA               	movf	(_eventTable+1)& (0+255),w,b
 26233  0041B0  23A4               	addwfc	(??_writeEv+1)& (0+255),f,b
 26234  0041B2  0E01               	movlw	1
 26235  0041B4  25A3               	addwf	??_writeEv& (0+255),w,b
 26236  0041B6  6F76               	movwf	readFlashBlock@flashAddr& (0+255),b
 26237  0041B8  0E00               	movlw	0
 26238  0041BA  21A4               	addwfc	(??_writeEv+1)& (0+255),w,b
 26239  0041BC  6F77               	movwf	(readFlashBlock@flashAddr+1)& (0+255),b
 26240  0041BE  EC8D  F03D         	call	_readFlashBlock	;wreg free
 26241  0041C2  6FB1               	movwf	writeEv@tableIndex& (0+255),b
 26242                           
 26243                           ; BSR set to: 0
 26244                           ;events.c: 602: if (tableIndex == 0xff) {
 26245  0041C4  29B1               	incf	writeEv@tableIndex& (0+255),w,b
 26246  0041C6  A4D8               	btfss	status,2,c
 26247  0041C8  D0FD               	goto	l18069
 26248                           
 26249                           ; BSR set to: 0
 26250                           ;events.c: 603: return 7;
 26251  0041CA  0E07               	movlw	7
 26252  0041CC  0012               	return	
 26253  0041CE                     l18025:
 26254                           
 26255                           ; BSR set to: 0
 26256                           ;events.c: 612: if (evVal == 0) {
 26257  0041CE  51A2               	movf	writeEv@evVal& (0+255),w,b
 26258  0041D0  A4D8               	btfss	status,2,c
 26259  0041D2  D002               	goto	l18031
 26260  0041D4                     u22100:
 26261                           
 26262                           ; BSR set to: 0
 26263                           ;events.c: 613: return 0;
 26264  0041D4  0E00               	movlw	0
 26265  0041D6  0012               	return	
 26266  0041D8                     l18031:
 26267                           
 26268                           ; BSR set to: 0
 26269                           ;events.c: 614: };events.c: 616: for (nextIdx = tableIndex+1U ; nextIdx < 255U; nextIdx+
      +                          +) {
 26270  0041D8  29B1               	incf	writeEv@tableIndex& (0+255),w,b
 26271  0041DA  6FB2               	movwf	writeEv@nextIdx& (0+255),b
 26272  0041DC  D0EB               	goto	l18061
 26273  0041DE                     l18035:
 26274                           
 26275                           ; BSR set to: 0
 26276                           ;events.c: 617: EventTableFlags nextF;;events.c: 618: nextF.asByte = readFlashBlock((WOR
      +                          D)(&(eventTable[nextIdx].flags.asByte)));
 26277  0041DE  51B2               	movf	writeEv@nextIdx& (0+255),w,b
 26278  0041E0  0D10               	mullw	16
 26279  0041E2  CFF3 F0A3          	movff	prodl,??_writeEv
 26280  0041E6  CFF4 F0A4          	movff	prodh,??_writeEv+1
 26281  0041EA  51E9               	movf	_eventTable& (0+255),w,b
 26282  0041EC  25A3               	addwf	??_writeEv& (0+255),w,b
 26283  0041EE  6F76               	movwf	readFlashBlock@flashAddr& (0+255),b
 26284  0041F0  51EA               	movf	(_eventTable+1)& (0+255),w,b
 26285  0041F2  21A4               	addwfc	(??_writeEv+1)& (0+255),w,b
 26286  0041F4  6F77               	movwf	(readFlashBlock@flashAddr+1)& (0+255),b
 26287  0041F6  EC8D  F03D         	call	_readFlashBlock	;wreg free
 26288  0041FA  6FAE               	movwf	writeEv@nextF& (0+255),b
 26289                           
 26290                           ; BSR set to: 0
 26291                           ;events.c: 619: if (nextF.freeEntry) {
 26292  0041FC  AFAE               	btfss	writeEv@nextF& (0+255),7,b
 26293  0041FE  D0D9               	goto	l18059
 26294                           
 26295                           ; BSR set to: 0
 26296                           ;events.c: 620: unsigned char e;;events.c: 622: setFlashWord((WORD*)&(eventTable[nextIdx
      +                          ].event.NN), 0xffff);
 26297  004200  0E02               	movlw	2
 26298  004202  6FA3               	movwf	??_writeEv& (0+255),b
 26299  004204  0E00               	movlw	0
 26300  004206  6FA4               	movwf	(??_writeEv+1)& (0+255),b
 26301  004208  51B2               	movf	writeEv@nextIdx& (0+255),w,b
 26302  00420A  0D10               	mullw	16
 26303  00420C  CFF3 F0A5          	movff	prodl,??_writeEv+2
 26304  004210  CFF4 F0A6          	movff	prodh,??_writeEv+3
 26305  004214  51A5               	movf	(??_writeEv+2)& (0+255),w,b
 26306  004216  25E9               	addwf	_eventTable& (0+255),w,b
 26307  004218  6FA7               	movwf	(??_writeEv+4)& (0+255),b
 26308  00421A  51A6               	movf	(??_writeEv+3)& (0+255),w,b
 26309  00421C  21EA               	addwfc	(_eventTable+1)& (0+255),w,b
 26310  00421E  6FA8               	movwf	(??_writeEv+5)& (0+255),b
 26311  004220  0E00               	movlw	0
 26312  004222  21EB               	addwfc	(_eventTable+2)& (0+255),w,b
 26313  004224  6FA9               	movwf	(??_writeEv+6)& (0+255),b
 26314  004226  51A3               	movf	??_writeEv& (0+255),w,b
 26315  004228  25A7               	addwf	(??_writeEv+4)& (0+255),w,b
 26316  00422A  6FAA               	movwf	(??_writeEv+7)& (0+255),b
 26317  00422C  51A4               	movf	(??_writeEv+1)& (0+255),w,b
 26318  00422E  21A8               	addwfc	(??_writeEv+5)& (0+255),w,b
 26319  004230  6FAB               	movwf	(??_writeEv+8)& (0+255),b
 26320  004232  0E00               	movlw	0
 26321  004234  21A9               	addwfc	(??_writeEv+6)& (0+255),w,b
 26322  004236  6FAC               	movwf	(??_writeEv+9)& (0+255),b
 26323  004238  C0AA  F087         	movff	??_writeEv+7,setFlashWord@flashAddr
 26324  00423C  C0AB  F088         	movff	??_writeEv+8,setFlashWord@flashAddr+1
 26325  004240  C0AC  F089         	movff	??_writeEv+9,setFlashWord@flashAddr+2
 26326  004244  0EFF               	movlw	255
 26327  004246  6F8B               	movwf	(setFlashWord@flashData+1)& (0+255),b
 26328  004248  698A               	setf	setFlashWord@flashData& (0+255),b
 26329  00424A  EC8F  F04F         	call	_setFlashWord	;wreg free
 26330                           
 26331                           ;events.c: 623: setFlashWord((WORD*)&(eventTable[nextIdx].event.EN), 0xffff);
 26332  00424E  0E04               	movlw	4
 26333  004250  6FA3               	movwf	??_writeEv& (0+255),b
 26334  004252  0E00               	movlw	0
 26335  004254  6FA4               	movwf	(??_writeEv+1)& (0+255),b
 26336  004256  51B2               	movf	writeEv@nextIdx& (0+255),w,b
 26337  004258  0D10               	mullw	16
 26338  00425A  CFF3 F0A5          	movff	prodl,??_writeEv+2
 26339  00425E  CFF4 F0A6          	movff	prodh,??_writeEv+3
 26340  004262  51A5               	movf	(??_writeEv+2)& (0+255),w,b
 26341  004264  25E9               	addwf	_eventTable& (0+255),w,b
 26342  004266  6FA7               	movwf	(??_writeEv+4)& (0+255),b
 26343  004268  51A6               	movf	(??_writeEv+3)& (0+255),w,b
 26344  00426A  21EA               	addwfc	(_eventTable+1)& (0+255),w,b
 26345  00426C  6FA8               	movwf	(??_writeEv+5)& (0+255),b
 26346  00426E  0E00               	movlw	0
 26347  004270  21EB               	addwfc	(_eventTable+2)& (0+255),w,b
 26348  004272  6FA9               	movwf	(??_writeEv+6)& (0+255),b
 26349  004274  51A3               	movf	??_writeEv& (0+255),w,b
 26350  004276  25A7               	addwf	(??_writeEv+4)& (0+255),w,b
 26351  004278  6FAA               	movwf	(??_writeEv+7)& (0+255),b
 26352  00427A  51A4               	movf	(??_writeEv+1)& (0+255),w,b
 26353  00427C  21A8               	addwfc	(??_writeEv+5)& (0+255),w,b
 26354  00427E  6FAB               	movwf	(??_writeEv+8)& (0+255),b
 26355  004280  0E00               	movlw	0
 26356  004282  21A9               	addwfc	(??_writeEv+6)& (0+255),w,b
 26357  004284  6FAC               	movwf	(??_writeEv+9)& (0+255),b
 26358  004286  C0AA  F087         	movff	??_writeEv+7,setFlashWord@flashAddr
 26359  00428A  C0AB  F088         	movff	??_writeEv+8,setFlashWord@flashAddr+1
 26360  00428E  C0AC  F089         	movff	??_writeEv+9,setFlashWord@flashAddr+2
 26361  004292  0EFF               	movlw	255
 26362  004294  6F8B               	movwf	(setFlashWord@flashData+1)& (0+255),b
 26363  004296  698A               	setf	setFlashWord@flashData& (0+255),b
 26364  004298  EC8F  F04F         	call	_setFlashWord	;wreg free
 26365                           
 26366                           ;events.c: 624: writeFlashByte((BYTE*)&(eventTable[nextIdx].flags.asByte), 0x20);
 26367  00429C  51B2               	movf	writeEv@nextIdx& (0+255),w,b
 26368  00429E  0D10               	mullw	16
 26369  0042A0  CFF3 F0A3          	movff	prodl,??_writeEv
 26370  0042A4  CFF4 F0A4          	movff	prodh,??_writeEv+1
 26371  0042A8  51A3               	movf	??_writeEv& (0+255),w,b
 26372  0042AA  25E9               	addwf	_eventTable& (0+255),w,b
 26373  0042AC  6FA5               	movwf	(??_writeEv+2)& (0+255),b
 26374  0042AE  51A4               	movf	(??_writeEv+1)& (0+255),w,b
 26375  0042B0  21EA               	addwfc	(_eventTable+1)& (0+255),w,b
 26376  0042B2  6FA6               	movwf	(??_writeEv+3)& (0+255),b
 26377  0042B4  0E00               	movlw	0
 26378  0042B6  21EB               	addwfc	(_eventTable+2)& (0+255),w,b
 26379  0042B8  6FA7               	movwf	(??_writeEv+4)& (0+255),b
 26380  0042BA  C0A5  F087         	movff	??_writeEv+2,writeFlashByte@flashAddr
 26381  0042BE  C0A6  F088         	movff	??_writeEv+3,writeFlashByte@flashAddr+1
 26382  0042C2  C0A7  F089         	movff	??_writeEv+4,writeFlashByte@flashAddr+2
 26383  0042C6  0E20               	movlw	32
 26384  0042C8  6F8A               	movwf	writeFlashByte@flashData& (0+255),b
 26385  0042CA  ECC0  F052         	call	_writeFlashByte	;wreg free
 26386                           
 26387                           ; BSR set to: 0
 26388                           ;events.c: 625: for (e = 0; e < 10U; e++) {
 26389  0042CE  0E00               	movlw	0
 26390  0042D0  6FAF               	movwf	writeEv@e& (0+255),b
 26391  0042D2                     l18047:
 26392                           
 26393                           ; BSR set to: 0
 26394                           ;events.c: 626: writeFlashByte((BYTE*)&(eventTable[nextIdx].evs[e]), 0);
 26395  0042D2  51B2               	movf	writeEv@nextIdx& (0+255),w,b
 26396  0042D4  0D10               	mullw	16
 26397  0042D6  CFF3 F0A3          	movff	prodl,??_writeEv
 26398  0042DA  CFF4 F0A4          	movff	prodh,??_writeEv+1
 26399  0042DE  51AF               	movf	writeEv@e& (0+255),w,b
 26400  0042E0  6FA5               	movwf	(??_writeEv+2)& (0+255),b
 26401  0042E2  6BA6               	clrf	(??_writeEv+3)& (0+255),b
 26402  0042E4  0E06               	movlw	6
 26403  0042E6  27A5               	addwf	(??_writeEv+2)& (0+255),f,b
 26404  0042E8  0E00               	movlw	0
 26405  0042EA  23A6               	addwfc	(??_writeEv+3)& (0+255),f,b
 26406  0042EC  51A5               	movf	(??_writeEv+2)& (0+255),w,b
 26407  0042EE  25E9               	addwf	_eventTable& (0+255),w,b
 26408  0042F0  6FA7               	movwf	(??_writeEv+4)& (0+255),b
 26409  0042F2  51A6               	movf	(??_writeEv+3)& (0+255),w,b
 26410  0042F4  21EA               	addwfc	(_eventTable+1)& (0+255),w,b
 26411  0042F6  6FA8               	movwf	(??_writeEv+5)& (0+255),b
 26412  0042F8  0E00               	movlw	0
 26413  0042FA  21EB               	addwfc	(_eventTable+2)& (0+255),w,b
 26414  0042FC  6FA9               	movwf	(??_writeEv+6)& (0+255),b
 26415  0042FE  51A3               	movf	??_writeEv& (0+255),w,b
 26416  004300  25A7               	addwf	(??_writeEv+4)& (0+255),w,b
 26417  004302  6FAA               	movwf	(??_writeEv+7)& (0+255),b
 26418  004304  51A4               	movf	(??_writeEv+1)& (0+255),w,b
 26419  004306  21A8               	addwfc	(??_writeEv+5)& (0+255),w,b
 26420  004308  6FAB               	movwf	(??_writeEv+8)& (0+255),b
 26421  00430A  0E00               	movlw	0
 26422  00430C  21A9               	addwfc	(??_writeEv+6)& (0+255),w,b
 26423  00430E  6FAC               	movwf	(??_writeEv+9)& (0+255),b
 26424  004310  C0AA  F087         	movff	??_writeEv+7,writeFlashByte@flashAddr
 26425  004314  C0AB  F088         	movff	??_writeEv+8,writeFlashByte@flashAddr+1
 26426  004318  C0AC  F089         	movff	??_writeEv+9,writeFlashByte@flashAddr+2
 26427  00431C  0E00               	movlw	0
 26428  00431E  6F8A               	movwf	writeFlashByte@flashData& (0+255),b
 26429  004320  ECC0  F052         	call	_writeFlashByte	;wreg free
 26430                           
 26431                           ; BSR set to: 0
 26432  004324  2BAF               	incf	writeEv@e& (0+255),f,b
 26433                           
 26434                           ; BSR set to: 0
 26435  004326  0E09               	movlw	9
 26436  004328  65AF               	cpfsgt	writeEv@e& (0+255),b
 26437  00432A  D7D3               	goto	l18047
 26438                           
 26439                           ; BSR set to: 0
 26440                           ;events.c: 627: };events.c: 629: writeFlashByte((BYTE*)&(eventTable[tableIndex].next), n
      +                          extIdx);
 26441  00432C  0E01               	movlw	1
 26442  00432E  6FA3               	movwf	??_writeEv& (0+255),b
 26443  004330  0E00               	movlw	0
 26444  004332  6FA4               	movwf	(??_writeEv+1)& (0+255),b
 26445  004334  51B1               	movf	writeEv@tableIndex& (0+255),w,b
 26446  004336  0D10               	mullw	16
 26447  004338  CFF3 F0A5          	movff	prodl,??_writeEv+2
 26448  00433C  CFF4 F0A6          	movff	prodh,??_writeEv+3
 26449  004340  51A5               	movf	(??_writeEv+2)& (0+255),w,b
 26450  004342  25E9               	addwf	_eventTable& (0+255),w,b
 26451  004344  6FA7               	movwf	(??_writeEv+4)& (0+255),b
 26452  004346  51A6               	movf	(??_writeEv+3)& (0+255),w,b
 26453  004348  21EA               	addwfc	(_eventTable+1)& (0+255),w,b
 26454  00434A  6FA8               	movwf	(??_writeEv+5)& (0+255),b
 26455  00434C  0E00               	movlw	0
 26456  00434E  21EB               	addwfc	(_eventTable+2)& (0+255),w,b
 26457  004350  6FA9               	movwf	(??_writeEv+6)& (0+255),b
 26458  004352  51A3               	movf	??_writeEv& (0+255),w,b
 26459  004354  25A7               	addwf	(??_writeEv+4)& (0+255),w,b
 26460  004356  6FAA               	movwf	(??_writeEv+7)& (0+255),b
 26461  004358  51A4               	movf	(??_writeEv+1)& (0+255),w,b
 26462  00435A  21A8               	addwfc	(??_writeEv+5)& (0+255),w,b
 26463  00435C  6FAB               	movwf	(??_writeEv+8)& (0+255),b
 26464  00435E  0E00               	movlw	0
 26465  004360  21A9               	addwfc	(??_writeEv+6)& (0+255),w,b
 26466  004362  6FAC               	movwf	(??_writeEv+9)& (0+255),b
 26467  004364  C0AA  F087         	movff	??_writeEv+7,writeFlashByte@flashAddr
 26468  004368  C0AB  F088         	movff	??_writeEv+8,writeFlashByte@flashAddr+1
 26469  00436C  C0AC  F089         	movff	??_writeEv+9,writeFlashByte@flashAddr+2
 26470  004370  C0B2  F08A         	movff	writeEv@nextIdx,writeFlashByte@flashData
 26471  004374  ECC0  F052         	call	_writeFlashByte	;wreg free
 26472                           
 26473                           ; BSR set to: 0
 26474                           ;events.c: 631: f.continued = 1;
 26475  004378  89B0               	bsf	writeEv@f& (0+255),4,b
 26476                           
 26477                           ;events.c: 632: writeFlashByte((BYTE*)&(eventTable[tableIndex].flags.asByte), f.asByte);
 26478  00437A  51B1               	movf	writeEv@tableIndex& (0+255),w,b
 26479  00437C  0D10               	mullw	16
 26480  00437E  CFF3 F0A3          	movff	prodl,??_writeEv
 26481  004382  CFF4 F0A4          	movff	prodh,??_writeEv+1
 26482  004386  51A3               	movf	??_writeEv& (0+255),w,b
 26483  004388  25E9               	addwf	_eventTable& (0+255),w,b
 26484  00438A  6FA5               	movwf	(??_writeEv+2)& (0+255),b
 26485  00438C  51A4               	movf	(??_writeEv+1)& (0+255),w,b
 26486  00438E  21EA               	addwfc	(_eventTable+1)& (0+255),w,b
 26487  004390  6FA6               	movwf	(??_writeEv+3)& (0+255),b
 26488  004392  0E00               	movlw	0
 26489  004394  21EB               	addwfc	(_eventTable+2)& (0+255),w,b
 26490  004396  6FA7               	movwf	(??_writeEv+4)& (0+255),b
 26491  004398  C0A5  F087         	movff	??_writeEv+2,writeFlashByte@flashAddr
 26492  00439C  C0A6  F088         	movff	??_writeEv+3,writeFlashByte@flashAddr+1
 26493  0043A0  C0A7  F089         	movff	??_writeEv+4,writeFlashByte@flashAddr+2
 26494  0043A4  C0B0  F08A         	movff	writeEv@f,writeFlashByte@flashData
 26495  0043A8  ECC0  F052         	call	_writeFlashByte	;wreg free
 26496                           
 26497                           ; BSR set to: 0
 26498                           ;events.c: 633: tableIndex = nextIdx;
 26499  0043AC  C0B2  F0B1         	movff	writeEv@nextIdx,writeEv@tableIndex
 26500                           
 26501                           ;events.c: 634: break;
 26502  0043B0  D004               	goto	u22140
 26503  0043B2                     l18059:
 26504                           
 26505                           ; BSR set to: 0
 26506  0043B2  2BB2               	incf	writeEv@nextIdx& (0+255),f,b
 26507  0043B4                     l18061:
 26508                           
 26509                           ; BSR set to: 0
 26510  0043B4  29B2               	incf	writeEv@nextIdx& (0+255),w,b
 26511  0043B6  A4D8               	btfss	status,2,c
 26512  0043B8  D712               	goto	l18035
 26513  0043BA                     u22140:
 26514                           
 26515                           ; BSR set to: 0
 26516                           ;events.c: 635: };events.c: 636: };events.c: 637: if (nextIdx >= 255U) {
 26517  0043BA  29B2               	incf	writeEv@nextIdx& (0+255),w,b
 26518  0043BC  A4D8               	btfss	status,2,c
 26519  0043BE  D002               	goto	l18069
 26520                           
 26521                           ; BSR set to: 0
 26522                           ;events.c: 639: return 4;
 26523  0043C0  0E04               	movlw	4
 26524  0043C2  0012               	return	
 26525  0043C4                     l18069:
 26526                           
 26527                           ; BSR set to: 0
 26528  0043C4  0E0A               	movlw	10
 26529  0043C6  61A1               	cpfslt	writeEv@evNum& (0+255),b
 26530  0043C8  D6D7               	goto	l18011
 26531                           
 26532                           ; BSR set to: 0
 26533                           ;events.c: 640: };events.c: 641: };events.c: 642: };events.c: 644: writeFlashByte((BYTE*
      +                          )&(eventTable[tableIndex].evs[evNum]), evVal);
 26534  0043CA  51B1               	movf	writeEv@tableIndex& (0+255),w,b
 26535  0043CC  0D10               	mullw	16
 26536  0043CE  CFF3 F0A3          	movff	prodl,??_writeEv
 26537  0043D2  CFF4 F0A4          	movff	prodh,??_writeEv+1
 26538  0043D6  51A1               	movf	writeEv@evNum& (0+255),w,b
 26539  0043D8  6FA5               	movwf	(??_writeEv+2)& (0+255),b
 26540  0043DA  6BA6               	clrf	(??_writeEv+3)& (0+255),b
 26541  0043DC  0E06               	movlw	6
 26542  0043DE  27A5               	addwf	(??_writeEv+2)& (0+255),f,b
 26543  0043E0  0E00               	movlw	0
 26544  0043E2  23A6               	addwfc	(??_writeEv+3)& (0+255),f,b
 26545  0043E4  51A5               	movf	(??_writeEv+2)& (0+255),w,b
 26546  0043E6  25E9               	addwf	_eventTable& (0+255),w,b
 26547  0043E8  6FA7               	movwf	(??_writeEv+4)& (0+255),b
 26548  0043EA  51A6               	movf	(??_writeEv+3)& (0+255),w,b
 26549  0043EC  21EA               	addwfc	(_eventTable+1)& (0+255),w,b
 26550  0043EE  6FA8               	movwf	(??_writeEv+5)& (0+255),b
 26551  0043F0  0E00               	movlw	0
 26552  0043F2  21EB               	addwfc	(_eventTable+2)& (0+255),w,b
 26553  0043F4  6FA9               	movwf	(??_writeEv+6)& (0+255),b
 26554  0043F6  51A3               	movf	??_writeEv& (0+255),w,b
 26555  0043F8  25A7               	addwf	(??_writeEv+4)& (0+255),w,b
 26556  0043FA  6FAA               	movwf	(??_writeEv+7)& (0+255),b
 26557  0043FC  51A4               	movf	(??_writeEv+1)& (0+255),w,b
 26558  0043FE  21A8               	addwfc	(??_writeEv+5)& (0+255),w,b
 26559  004400  6FAB               	movwf	(??_writeEv+8)& (0+255),b
 26560  004402  0E00               	movlw	0
 26561  004404  21A9               	addwfc	(??_writeEv+6)& (0+255),w,b
 26562  004406  6FAC               	movwf	(??_writeEv+9)& (0+255),b
 26563  004408  C0AA  F087         	movff	??_writeEv+7,writeFlashByte@flashAddr
 26564  00440C  C0AB  F088         	movff	??_writeEv+8,writeFlashByte@flashAddr+1
 26565  004410  C0AC  F089         	movff	??_writeEv+9,writeFlashByte@flashAddr+2
 26566  004414  C0A2  F08A         	movff	writeEv@evVal,writeFlashByte@flashData
 26567  004418  ECC0  F052         	call	_writeFlashByte	;wreg free
 26568                           
 26569                           ;events.c: 646: f.asByte = readFlashBlock((WORD)(&(eventTable[tableIndex].flags.asByte))
      +                          );
 26570  00441C  51B1               	movf	writeEv@tableIndex& (0+255),w,b
 26571  00441E  0D10               	mullw	16
 26572  004420  CFF3 F0A3          	movff	prodl,??_writeEv
 26573  004424  CFF4 F0A4          	movff	prodh,??_writeEv+1
 26574  004428  51E9               	movf	_eventTable& (0+255),w,b
 26575  00442A  25A3               	addwf	??_writeEv& (0+255),w,b
 26576  00442C  6F76               	movwf	readFlashBlock@flashAddr& (0+255),b
 26577  00442E  51EA               	movf	(_eventTable+1)& (0+255),w,b
 26578  004430  21A4               	addwfc	(??_writeEv+1)& (0+255),w,b
 26579  004432  6F77               	movwf	(readFlashBlock@flashAddr+1)& (0+255),b
 26580  004434  EC8D  F03D         	call	_readFlashBlock	;wreg free
 26581  004438  6FB0               	movwf	writeEv@f& (0+255),b
 26582                           
 26583                           ; BSR set to: 0
 26584                           ;events.c: 647: if (f.eVsUsed <= evNum) {
 26585  00443A  51B0               	movf	writeEv@f& (0+255),w,b
 26586  00443C  0B0F               	andlw	15
 26587  00443E  6FA3               	movwf	??_writeEv& (0+255),b
 26588  004440  51A3               	movf	??_writeEv& (0+255),w,b
 26589  004442  5DA1               	subwf	writeEv@evNum& (0+255),w,b
 26590  004444  A0D8               	btfss	status,0,c
 26591  004446  D022               	goto	l18079
 26592                           
 26593                           ; BSR set to: 0
 26594                           ;events.c: 648: f.eVsUsed = evNum+1U;
 26595  004448  C0A1  F0A3         	movff	writeEv@evNum,??_writeEv
 26596  00444C  0E01               	movlw	1
 26597  00444E  27A3               	addwf	??_writeEv& (0+255),f,b
 26598  004450  51B0               	movf	writeEv@f& (0+255),w,b
 26599  004452  19A3               	xorwf	??_writeEv& (0+255),w,b
 26600  004454  0BF0               	andlw	-16
 26601  004456  19A3               	xorwf	??_writeEv& (0+255),w,b
 26602  004458  6FB0               	movwf	writeEv@f& (0+255),b
 26603                           
 26604                           ; BSR set to: 0
 26605                           ;events.c: 649: writeFlashByte((BYTE*)&(eventTable[tableIndex].flags.asByte), f.asByte);
 26606  00445A  51B1               	movf	writeEv@tableIndex& (0+255),w,b
 26607  00445C  0D10               	mullw	16
 26608  00445E  CFF3 F0A3          	movff	prodl,??_writeEv
 26609  004462  CFF4 F0A4          	movff	prodh,??_writeEv+1
 26610  004466  51A3               	movf	??_writeEv& (0+255),w,b
 26611  004468  25E9               	addwf	_eventTable& (0+255),w,b
 26612  00446A  6FA5               	movwf	(??_writeEv+2)& (0+255),b
 26613  00446C  51A4               	movf	(??_writeEv+1)& (0+255),w,b
 26614  00446E  21EA               	addwfc	(_eventTable+1)& (0+255),w,b
 26615  004470  6FA6               	movwf	(??_writeEv+3)& (0+255),b
 26616  004472  0E00               	movlw	0
 26617  004474  21EB               	addwfc	(_eventTable+2)& (0+255),w,b
 26618  004476  6FA7               	movwf	(??_writeEv+4)& (0+255),b
 26619  004478  C0A5  F087         	movff	??_writeEv+2,writeFlashByte@flashAddr
 26620  00447C  C0A6  F088         	movff	??_writeEv+3,writeFlashByte@flashAddr+1
 26621  004480  C0A7  F089         	movff	??_writeEv+4,writeFlashByte@flashAddr+2
 26622  004484  C0B0  F08A         	movff	writeEv@f,writeFlashByte@flashData
 26623  004488  ECC0  F052         	call	_writeFlashByte	;wreg free
 26624  00448C                     l18079:
 26625                           
 26626                           ; BSR set to: 0
 26627                           ;events.c: 650: };events.c: 652: if (evVal == 0) {
 26628  00448C  51A2               	movf	writeEv@evVal& (0+255),w,b
 26629  00448E  A4D8               	btfss	status,2,c
 26630  004490  D6A1               	goto	u22100
 26631                           
 26632                           ; BSR set to: 0
 26633                           ;events.c: 653: checkRemoveTableEntry(startIndex);
 26634  004492  51AD               	movf	writeEv@startIndex& (0+255),w,b
 26635  004494  ECF1  F04E         	call	_checkRemoveTableEntry
 26636  004498  D69D               	goto	u22100
 26637  00449A                     __end_of_writeEv:
 26638                           	callstack 0
 26639                           
 26640 ;; *************** function _setFlashWord *****************
 26641 ;; Defined at:
 26642 ;;		line 354 in file "../../github/CBUSlib/romops.c"
 26643 ;; Parameters:    Size  Location     Type
 26644 ;;  flashAddr       3   39[BANK0 ] PTR unsigned int 
 26645 ;;		 -> ROM(65535), NULL(0), 
 26646 ;;  flashData       2   42[BANK0 ] unsigned int 
 26647 ;; Auto vars:     Size  Location     Type
 26648 ;;		None
 26649 ;; Return value:  Size  Location     Type
 26650 ;;                  1    wreg      void 
 26651 ;; Registers used:
 26652 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 26653 ;; Tracked objects:
 26654 ;;		On entry : 3F/0
 26655 ;;		On exit  : 3F/0
 26656 ;;		Unchanged: 0/0
 26657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 26658 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 26659 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 26660 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 26661 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 26662 ;;Total ram usage:        7 bytes
 26663 ;; Hardware stack levels used: 1
 26664 ;; Hardware stack levels required when called: 14
 26665 ;; This function calls:
 26666 ;;		_writeFlashImage
 26667 ;; This function is called by:
 26668 ;;		_addEvent
 26669 ;;		_writeEv
 26670 ;; This function uses a non-reentrant model
 26671 ;;
 26672                           
 26673                           	psect	text122
 26674  009F1E                     __ptext122:
 26675                           	callstack 0
 26676  009F1E                     _setFlashWord:
 26677                           	callstack 14
 26678                           
 26679                           ; BSR set to: 0
 26680                           ;romops.c: 358: writeFlashImage( (BYTE*)flashAddr, (BYTE)(flashData & 0x00FF) );
 26681                           
 26682                           ; BSR set to: 0
 26683                           ;incstack = 0
 26684  009F1E  C087  F07D         	movff	setFlashWord@flashAddr,writeFlashImage@addr
 26685  009F22  C088  F07E         	movff	setFlashWord@flashAddr+1,writeFlashImage@addr+1
 26686  009F26  C089  F07F         	movff	setFlashWord@flashAddr+2,writeFlashImage@addr+2
 26687  009F2A  C08A  F080         	movff	setFlashWord@flashData,writeFlashImage@data
 26688  009F2E  ECC2  F041         	call	_writeFlashImage	;wreg free
 26689                           
 26690                           ;romops.c: 359: writeFlashImage( ((BYTE*)flashAddr)+1, (BYTE)(flashData >> 8) );
 26691  009F32  0E01               	movlw	1
 26692  009F34  6F8C               	movwf	??_setFlashWord& (0+255),b
 26693  009F36  0E00               	movlw	0
 26694  009F38  6F8D               	movwf	(??_setFlashWord+1)& (0+255),b
 26695  009F3A  518C               	movf	??_setFlashWord& (0+255),w,b
 26696  009F3C  2587               	addwf	setFlashWord@flashAddr& (0+255),w,b
 26697  009F3E  6F7D               	movwf	writeFlashImage@addr& (0+255),b
 26698  009F40  518D               	movf	(??_setFlashWord+1)& (0+255),w,b
 26699  009F42  2188               	addwfc	(setFlashWord@flashAddr+1)& (0+255),w,b
 26700  009F44  6F7E               	movwf	(writeFlashImage@addr+1)& (0+255),b
 26701  009F46  0E00               	movlw	0
 26702  009F48  BF8D               	btfsc	(??_setFlashWord+1)& (0+255),7,b
 26703  009F4A  0EFF               	movlw	255
 26704  009F4C  2189               	addwfc	(setFlashWord@flashAddr+2)& (0+255),w,b
 26705  009F4E  6F7F               	movwf	(writeFlashImage@addr+2)& (0+255),b
 26706  009F50  C08B  F080         	movff	setFlashWord@flashData+1,writeFlashImage@data
 26707  009F54  ECC2  F041         	call	_writeFlashImage	;wreg free
 26708                           
 26709                           ; BSR set to: 0
 26710  009F58  0012               	return		;funcret
 26711  009F5A                     __end_of_setFlashWord:
 26712                           	callstack 0
 26713                           
 26714 ;; *************** function _checkRemoveTableEntry *****************
 26715 ;; Defined at:
 26716 ;;		line 857 in file "../../github/CBUSlib/events.c"
 26717 ;; Parameters:    Size  Location     Type
 26718 ;;  tableIndex      1    wreg     unsigned char 
 26719 ;; Auto vars:     Size  Location     Type
 26720 ;;  tableIndex      1   63[BANK0 ] unsigned char 
 26721 ;;  e               1   64[BANK0 ] unsigned char 
 26722 ;; Return value:  Size  Location     Type
 26723 ;;                  1    wreg      void 
 26724 ;; Registers used:
 26725 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 26726 ;; Tracked objects:
 26727 ;;		On entry : 3F/0
 26728 ;;		On exit  : 3F/0
 26729 ;;		Unchanged: 0/0
 26730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 26731 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 26732 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 26733 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 26734 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 26735 ;;Total ram usage:        2 bytes
 26736 ;; Hardware stack levels used: 1
 26737 ;; Hardware stack levels required when called: 17
 26738 ;; This function calls:
 26739 ;;		_getEVs
 26740 ;;		_removeTableEntry
 26741 ;;		_validStart
 26742 ;; This function is called by:
 26743 ;;		_APP_addEvent
 26744 ;;		_writeEv
 26745 ;;		_deleteHappeningRange
 26746 ;;		_deleteActionRange
 26747 ;; This function uses a non-reentrant model
 26748 ;;
 26749                           
 26750                           	psect	text123
 26751  009DE2                     __ptext123:
 26752                           	callstack 0
 26753  009DE2                     _checkRemoveTableEntry:
 26754                           	callstack 11
 26755                           
 26756                           ; BSR set to: 0
 26757                           ;incstack = 0
 26758                           ;checkRemoveTableEntry@tableIndex stored from wreg
 26759  009DE2  6F9F               	movwf	checkRemoveTableEntry@tableIndex& (0+255),b
 26760                           
 26761                           ;events.c: 858: unsigned char e;;events.c: 860: if ( validStart(tableIndex)) {
 26762  009DE4  0100               	movlb	0	; () banked
 26763  009DE6  519F               	movf	checkRemoveTableEntry@tableIndex& (0+255),w,b
 26764  009DE8  ECFE  F050         	call	_validStart
 26765  009DEC  0900               	iorlw	0
 26766  009DEE  B4D8               	btfsc	status,2,c
 26767  009DF0  0012               	return	
 26768                           
 26769                           ; BSR set to: 0
 26770                           ;events.c: 861: if (getEVs(tableIndex)) {
 26771  009DF2  519F               	movf	checkRemoveTableEntry@tableIndex& (0+255),w,b
 26772  009DF4  EC7A  F03B         	call	_getEVs
 26773  009DF8  0900               	iorlw	0
 26774  009DFA  A4D8               	btfss	status,2,c
 26775  009DFC  0012               	return	
 26776                           
 26777                           ; BSR set to: 0
 26778                           ;events.c: 863: };events.c: 864: for (e=0; e<20U; e++) {
 26779  009DFE  0E00               	movlw	0
 26780  009E00  6FA0               	movwf	checkRemoveTableEntry@e& (0+255),b
 26781  009E02                     l17929:
 26782                           
 26783                           ; BSR set to: 0
 26784                           ;events.c: 865: if (evs[e] != 0) {
 26785  009E02  0E40               	movlw	low _evs
 26786  009E04  25A0               	addwf	checkRemoveTableEntry@e& (0+255),w,b
 26787  009E06  6ED9               	movwf	fsr2l,c
 26788  009E08  6ADA               	clrf	fsr2h,c
 26789  009E0A  0E02               	movlw	high _evs
 26790  009E0C  22DA               	addwfc	fsr2h,f,c
 26791  009E0E  50DF               	movf	indf2,w,c
 26792  009E10  A4D8               	btfss	status,2,c
 26793  009E12  0012               	return	
 26794                           
 26795                           ; BSR set to: 0
 26796  009E14  2BA0               	incf	checkRemoveTableEntry@e& (0+255),f,b
 26797                           
 26798                           ; BSR set to: 0
 26799  009E16  0E13               	movlw	19
 26800  009E18  65A0               	cpfsgt	checkRemoveTableEntry@e& (0+255),b
 26801  009E1A  D7F3               	goto	l17929
 26802                           
 26803                           ; BSR set to: 0
 26804                           ;events.c: 867: };events.c: 868: };events.c: 869: removeTableEntry(tableIndex);
 26805  009E1C  519F               	movf	checkRemoveTableEntry@tableIndex& (0+255),w,b
 26806  009E1E  EC21  F03A         	call	_removeTableEntry
 26807                           
 26808                           ; BSR set to: 0
 26809  009E22  0012               	return		;funcret
 26810  009E24                     __end_of_checkRemoveTableEntry:
 26811                           	callstack 0
 26812                           
 26813 ;; *************** function _removeTableEntry *****************
 26814 ;; Defined at:
 26815 ;;		line 437 in file "../../github/CBUSlib/events.c"
 26816 ;; Parameters:    Size  Location     Type
 26817 ;;  tableIndex      1    wreg     unsigned char 
 26818 ;; Auto vars:     Size  Location     Type
 26819 ;;  tableIndex      1   62[BANK0 ] unsigned char 
 26820 ;;  f               1   61[BANK0 ] struct .
 26821 ;; Return value:  Size  Location     Type
 26822 ;;                  1    wreg      unsigned char 
 26823 ;; Registers used:
 26824 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 26825 ;; Tracked objects:
 26826 ;;		On entry : 3F/0
 26827 ;;		On exit  : 3F/0
 26828 ;;		Unchanged: 0/0
 26829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 26830 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 26831 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 26832 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 26833 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 26834 ;;Total ram usage:        7 bytes
 26835 ;; Hardware stack levels used: 1
 26836 ;; Hardware stack levels required when called: 16
 26837 ;; This function calls:
 26838 ;;		_flushFlashImage
 26839 ;;		_readFlashBlock
 26840 ;;		_rebuildHashtable
 26841 ;;		_validStart
 26842 ;;		_writeFlashByte
 26843 ;; This function is called by:
 26844 ;;		_removeEvent
 26845 ;;		_checkRemoveTableEntry
 26846 ;; This function uses a non-reentrant model
 26847 ;;
 26848                           
 26849                           	psect	text124
 26850  007442                     __ptext124:
 26851                           	callstack 0
 26852  007442                     _removeTableEntry:
 26853                           	callstack 11
 26854                           
 26855                           ; BSR set to: 0
 26856                           ;incstack = 0
 26857                           ;removeTableEntry@tableIndex stored from wreg
 26858  007442  6F9E               	movwf	removeTableEntry@tableIndex& (0+255),b
 26859                           
 26860                           ;events.c: 438: EventTableFlags f;;events.c: 443: if (validStart(tableIndex)) {
 26861  007444  0100               	movlb	0	; () banked
 26862  007446  519E               	movf	removeTableEntry@tableIndex& (0+255),w,b
 26863  007448  ECFE  F050         	call	_validStart
 26864  00744C  0900               	iorlw	0
 26865  00744E  B4D8               	btfsc	status,2,c
 26866  007450  D06F               	goto	l17913
 26867                           
 26868                           ; BSR set to: 0
 26869                           ;events.c: 445: writeFlashByte((BYTE*)&(eventTable[tableIndex].flags.asByte), 0xff);
 26870  007452  519E               	movf	removeTableEntry@tableIndex& (0+255),w,b
 26871  007454  0D10               	mullw	16
 26872  007456  CFF3 F098          	movff	prodl,??_removeTableEntry
 26873  00745A  CFF4 F099          	movff	prodh,??_removeTableEntry+1
 26874  00745E  5198               	movf	??_removeTableEntry& (0+255),w,b
 26875  007460  25E9               	addwf	_eventTable& (0+255),w,b
 26876  007462  6F9A               	movwf	(??_removeTableEntry+2)& (0+255),b
 26877  007464  5199               	movf	(??_removeTableEntry+1)& (0+255),w,b
 26878  007466  21EA               	addwfc	(_eventTable+1)& (0+255),w,b
 26879  007468  6F9B               	movwf	(??_removeTableEntry+3)& (0+255),b
 26880  00746A  0E00               	movlw	0
 26881  00746C  21EB               	addwfc	(_eventTable+2)& (0+255),w,b
 26882  00746E  6F9C               	movwf	(??_removeTableEntry+4)& (0+255),b
 26883  007470  C09A  F087         	movff	??_removeTableEntry+2,writeFlashByte@flashAddr
 26884  007474  C09B  F088         	movff	??_removeTableEntry+3,writeFlashByte@flashAddr+1
 26885  007478  C09C  F089         	movff	??_removeTableEntry+4,writeFlashByte@flashAddr+2
 26886  00747C  0EFF               	movlw	255
 26887  00747E  6F8A               	movwf	writeFlashByte@flashData& (0+255),b
 26888  007480  ECC0  F052         	call	_writeFlashByte	;wreg free
 26889                           
 26890                           ;events.c: 447: f.asByte = readFlashBlock((WORD)(&(eventTable[tableIndex].flags.asByte))
      +                          );
 26891  007484  519E               	movf	removeTableEntry@tableIndex& (0+255),w,b
 26892  007486  0D10               	mullw	16
 26893  007488  CFF3 F098          	movff	prodl,??_removeTableEntry
 26894  00748C  CFF4 F099          	movff	prodh,??_removeTableEntry+1
 26895  007490  51E9               	movf	_eventTable& (0+255),w,b
 26896  007492  2598               	addwf	??_removeTableEntry& (0+255),w,b
 26897  007494  6F76               	movwf	readFlashBlock@flashAddr& (0+255),b
 26898  007496  51EA               	movf	(_eventTable+1)& (0+255),w,b
 26899  007498  2199               	addwfc	(??_removeTableEntry+1)& (0+255),w,b
 26900  00749A  6F77               	movwf	(readFlashBlock@flashAddr+1)& (0+255),b
 26901  00749C  EC8D  F03D         	call	_readFlashBlock	;wreg free
 26902  0074A0  6F9D               	movwf	removeTableEntry@f& (0+255),b
 26903                           
 26904                           ;events.c: 448: while (f.continued) {
 26905  0074A2  D040               	goto	l17907
 26906  0074A4                     l17897:
 26907                           
 26908                           ; BSR set to: 0
 26909                           ;events.c: 449: tableIndex = readFlashBlock((WORD)(& eventTable[tableIndex].next));
 26910  0074A4  519E               	movf	removeTableEntry@tableIndex& (0+255),w,b
 26911  0074A6  0D10               	mullw	16
 26912  0074A8  CFF3 F098          	movff	prodl,??_removeTableEntry
 26913  0074AC  CFF4 F099          	movff	prodh,??_removeTableEntry+1
 26914  0074B0  51E9               	movf	_eventTable& (0+255),w,b
 26915  0074B2  2798               	addwf	??_removeTableEntry& (0+255),f,b
 26916  0074B4  51EA               	movf	(_eventTable+1)& (0+255),w,b
 26917  0074B6  2399               	addwfc	(??_removeTableEntry+1)& (0+255),f,b
 26918  0074B8  0E01               	movlw	1
 26919  0074BA  2598               	addwf	??_removeTableEntry& (0+255),w,b
 26920  0074BC  6F76               	movwf	readFlashBlock@flashAddr& (0+255),b
 26921  0074BE  0E00               	movlw	0
 26922  0074C0  2199               	addwfc	(??_removeTableEntry+1)& (0+255),w,b
 26923  0074C2  6F77               	movwf	(readFlashBlock@flashAddr+1)& (0+255),b
 26924  0074C4  EC8D  F03D         	call	_readFlashBlock	;wreg free
 26925  0074C8  6F9E               	movwf	removeTableEntry@tableIndex& (0+255),b
 26926                           
 26927                           ;events.c: 450: f.asByte = readFlashBlock((WORD)(&(eventTable[tableIndex].flags.asByte))
      +                          );
 26928  0074CA  519E               	movf	removeTableEntry@tableIndex& (0+255),w,b
 26929  0074CC  0D10               	mullw	16
 26930  0074CE  CFF3 F098          	movff	prodl,??_removeTableEntry
 26931  0074D2  CFF4 F099          	movff	prodh,??_removeTableEntry+1
 26932  0074D6  51E9               	movf	_eventTable& (0+255),w,b
 26933  0074D8  2598               	addwf	??_removeTableEntry& (0+255),w,b
 26934  0074DA  6F76               	movwf	readFlashBlock@flashAddr& (0+255),b
 26935  0074DC  51EA               	movf	(_eventTable+1)& (0+255),w,b
 26936  0074DE  2199               	addwfc	(??_removeTableEntry+1)& (0+255),w,b
 26937  0074E0  6F77               	movwf	(readFlashBlock@flashAddr+1)& (0+255),b
 26938  0074E2  EC8D  F03D         	call	_readFlashBlock	;wreg free
 26939  0074E6  6F9D               	movwf	removeTableEntry@f& (0+255),b
 26940                           
 26941                           ; BSR set to: 0
 26942                           ;events.c: 452: if (tableIndex >= 255U) return 6;
 26943  0074E8  299E               	incf	removeTableEntry@tableIndex& (0+255),w,b
 26944  0074EA  A4D8               	btfss	status,2,c
 26945  0074EC  D002               	goto	l17905
 26946                           
 26947                           ; BSR set to: 0
 26948  0074EE  0E06               	movlw	6
 26949  0074F0  0012               	return	
 26950  0074F2                     l17905:
 26951                           
 26952                           ; BSR set to: 0
 26953                           ;events.c: 458: writeFlashByte((BYTE*)&(eventTable[tableIndex].flags.asByte), 0xff);
 26954  0074F2  519E               	movf	removeTableEntry@tableIndex& (0+255),w,b
 26955  0074F4  0D10               	mullw	16
 26956  0074F6  CFF3 F098          	movff	prodl,??_removeTableEntry
 26957  0074FA  CFF4 F099          	movff	prodh,??_removeTableEntry+1
 26958  0074FE  5198               	movf	??_removeTableEntry& (0+255),w,b
 26959  007500  25E9               	addwf	_eventTable& (0+255),w,b
 26960  007502  6F9A               	movwf	(??_removeTableEntry+2)& (0+255),b
 26961  007504  5199               	movf	(??_removeTableEntry+1)& (0+255),w,b
 26962  007506  21EA               	addwfc	(_eventTable+1)& (0+255),w,b
 26963  007508  6F9B               	movwf	(??_removeTableEntry+3)& (0+255),b
 26964  00750A  0E00               	movlw	0
 26965  00750C  21EB               	addwfc	(_eventTable+2)& (0+255),w,b
 26966  00750E  6F9C               	movwf	(??_removeTableEntry+4)& (0+255),b
 26967  007510  C09A  F087         	movff	??_removeTableEntry+2,writeFlashByte@flashAddr
 26968  007514  C09B  F088         	movff	??_removeTableEntry+3,writeFlashByte@flashAddr+1
 26969  007518  C09C  F089         	movff	??_removeTableEntry+4,writeFlashByte@flashAddr+2
 26970  00751C  0EFF               	movlw	255
 26971  00751E  6F8A               	movwf	writeFlashByte@flashData& (0+255),b
 26972  007520  ECC0  F052         	call	_writeFlashByte	;wreg free
 26973  007524                     l17907:
 26974                           
 26975                           ; BSR set to: 0
 26976  007524  B99D               	btfsc	removeTableEntry@f& (0+255),4,b
 26977  007526  D7BE               	goto	l17897
 26978                           
 26979                           ; BSR set to: 0
 26980                           ;events.c: 460: };events.c: 461: flushFlashImage();
 26981  007528  EC13  F053         	call	_flushFlashImage	;wreg free
 26982                           
 26983                           ; BSR set to: 0
 26984                           ;events.c: 464: rebuildHashtable();
 26985  00752C  ECB2  F034         	call	_rebuildHashtable	;wreg free
 26986  007530                     l17913:
 26987                           
 26988                           ; BSR set to: 0
 26989                           ;events.c: 466: };events.c: 467: return 0;
 26990  007530  0E00               	movlw	0
 26991                           
 26992                           ; BSR set to: 0
 26993  007532  0012               	return		;funcret
 26994  007534                     __end_of_removeTableEntry:
 26995                           	callstack 0
 26996                           
 26997 ;; *************** function _getEVs *****************
 26998 ;; Defined at:
 26999 ;;		line 727 in file "../../github/CBUSlib/events.c"
 27000 ;; Parameters:    Size  Location     Type
 27001 ;;  tableIndex      1    wreg     unsigned char 
 27002 ;; Auto vars:     Size  Location     Type
 27003 ;;  tableIndex      1   38[BANK0 ] unsigned char 
 27004 ;;  evIdx           1   37[BANK0 ] unsigned char 
 27005 ;;  evNum           1   39[BANK0 ] unsigned char 
 27006 ;;  f               1   36[BANK0 ] struct .
 27007 ;; Return value:  Size  Location     Type
 27008 ;;                  1    wreg      unsigned char 
 27009 ;; Registers used:
 27010 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 27011 ;; Tracked objects:
 27012 ;;		On entry : 3F/0
 27013 ;;		On exit  : 3F/0
 27014 ;;		Unchanged: 0/0
 27015 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 27016 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 27017 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 27018 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 27019 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 27020 ;;Total ram usage:        7 bytes
 27021 ;; Hardware stack levels used: 1
 27022 ;; Hardware stack levels required when called: 14
 27023 ;; This function calls:
 27024 ;;		_readFlashBlock
 27025 ;;		_validStart
 27026 ;; This function is called by:
 27027 ;;		_processEvent
 27028 ;;		_checkRemoveTableEntry
 27029 ;;		_deleteActionRange
 27030 ;; This function uses a non-reentrant model
 27031 ;;
 27032                           
 27033                           	psect	text125
 27034  0076F4                     __ptext125:
 27035                           	callstack 0
 27036  0076F4                     _getEVs:
 27037                           	callstack 13
 27038                           
 27039                           ; BSR set to: 0
 27040                           ;incstack = 0
 27041                           ;getEVs@tableIndex stored from wreg
 27042  0076F4  6F86               	movwf	getEVs@tableIndex& (0+255),b
 27043                           
 27044                           ;events.c: 728: EventTableFlags f;;events.c: 729: unsigned char evNum;;events.c: 731: if
      +                           ( ! validStart(tableIndex)) {
 27045  0076F6  0100               	movlb	0	; () banked
 27046  0076F8  5186               	movf	getEVs@tableIndex& (0+255),w,b
 27047  0076FA  ECFE  F050         	call	_validStart
 27048  0076FE  0900               	iorlw	0
 27049  007700  A4D8               	btfss	status,2,c
 27050  007702  D002               	goto	l17829
 27051  007704                     u21790:
 27052                           
 27053                           ; BSR set to: 0
 27054                           ;events.c: 733: return 7;
 27055  007704  0E07               	movlw	7
 27056  007706  0012               	return	
 27057  007708                     l17829:
 27058                           
 27059                           ; BSR set to: 0
 27060                           ;events.c: 734: };events.c: 735: for (evNum=0; evNum < 20U; ) {
 27061  007708  0E00               	movlw	0
 27062  00770A  6F87               	movwf	getEVs@evNum& (0+255),b
 27063  00770C                     l17835:
 27064                           
 27065                           ; BSR set to: 0
 27066                           ;events.c: 736: unsigned char evIdx;;events.c: 737: for (evIdx=0; evIdx < 10U; evIdx++) 
      +                          {
 27067  00770C  0E00               	movlw	0
 27068  00770E  6F85               	movwf	getEVs@evIdx& (0+255),b
 27069  007710                     l17841:
 27070                           
 27071                           ; BSR set to: 0
 27072                           ;events.c: 738: evs[evNum] = readFlashBlock((WORD)(&(eventTable[tableIndex].evs[evIdx]))
      +                          );
 27073  007710  5186               	movf	getEVs@tableIndex& (0+255),w,b
 27074  007712  0D10               	mullw	16
 27075  007714  CFF3 F081          	movff	prodl,??_getEVs
 27076  007718  CFF4 F082          	movff	prodh,??_getEVs+1
 27077  00771C  5185               	movf	getEVs@evIdx& (0+255),w,b
 27078  00771E  2781               	addwf	??_getEVs& (0+255),f,b
 27079  007720  0E00               	movlw	0
 27080  007722  2382               	addwfc	(??_getEVs+1)& (0+255),f,b
 27081  007724  51E9               	movf	_eventTable& (0+255),w,b
 27082  007726  2781               	addwf	??_getEVs& (0+255),f,b
 27083  007728  51EA               	movf	(_eventTable+1)& (0+255),w,b
 27084  00772A  2382               	addwfc	(??_getEVs+1)& (0+255),f,b
 27085  00772C  0E06               	movlw	6
 27086  00772E  2581               	addwf	??_getEVs& (0+255),w,b
 27087  007730  6F76               	movwf	readFlashBlock@flashAddr& (0+255),b
 27088  007732  0E00               	movlw	0
 27089  007734  2182               	addwfc	(??_getEVs+1)& (0+255),w,b
 27090  007736  6F77               	movwf	(readFlashBlock@flashAddr+1)& (0+255),b
 27091  007738  EC8D  F03D         	call	_readFlashBlock	;wreg free
 27092  00773C  6F83               	movwf	(??_getEVs+2)& (0+255),b
 27093  00773E  0E40               	movlw	low _evs
 27094  007740  2587               	addwf	getEVs@evNum& (0+255),w,b
 27095  007742  6ED9               	movwf	fsr2l,c
 27096  007744  6ADA               	clrf	fsr2h,c
 27097  007746  0E02               	movlw	high _evs
 27098  007748  22DA               	addwfc	fsr2h,f,c
 27099  00774A  C083  FFDF         	movff	??_getEVs+2,indf2
 27100                           
 27101                           ; BSR set to: 0
 27102                           ;events.c: 739: evNum++;
 27103  00774E  2B87               	incf	getEVs@evNum& (0+255),f,b
 27104                           
 27105                           ; BSR set to: 0
 27106  007750  2B85               	incf	getEVs@evIdx& (0+255),f,b
 27107                           
 27108                           ; BSR set to: 0
 27109  007752  0E09               	movlw	9
 27110  007754  6585               	cpfsgt	getEVs@evIdx& (0+255),b
 27111  007756  D7DC               	goto	l17841
 27112                           
 27113                           ; BSR set to: 0
 27114                           ;events.c: 740: };events.c: 741: f.asByte = readFlashBlock((WORD)(&(eventTable[tableInde
      +                          x].flags.asByte)));
 27115  007758  5186               	movf	getEVs@tableIndex& (0+255),w,b
 27116  00775A  0D10               	mullw	16
 27117  00775C  CFF3 F081          	movff	prodl,??_getEVs
 27118  007760  CFF4 F082          	movff	prodh,??_getEVs+1
 27119  007764  51E9               	movf	_eventTable& (0+255),w,b
 27120  007766  2581               	addwf	??_getEVs& (0+255),w,b
 27121  007768  6F76               	movwf	readFlashBlock@flashAddr& (0+255),b
 27122  00776A  51EA               	movf	(_eventTable+1)& (0+255),w,b
 27123  00776C  2182               	addwfc	(??_getEVs+1)& (0+255),w,b
 27124  00776E  6F77               	movwf	(readFlashBlock@flashAddr+1)& (0+255),b
 27125  007770  EC8D  F03D         	call	_readFlashBlock	;wreg free
 27126  007774  6F84               	movwf	getEVs@f& (0+255),b
 27127                           
 27128                           ; BSR set to: 0
 27129                           ;events.c: 742: if (! f.continued) {
 27130  007776  B984               	btfsc	getEVs@f& (0+255),4,b
 27131  007778  D010               	goto	l17867
 27132  00777A                     u21810:
 27133                           
 27134                           ; BSR set to: 0
 27135                           ;events.c: 743: for (; evNum < 20U; evNum++) {
 27136  00777A  0E13               	movlw	19
 27137  00777C  6587               	cpfsgt	getEVs@evNum& (0+255),b
 27138  00777E  D001               	goto	l17857
 27139  007780  D00A               	goto	l17863
 27140  007782                     l17857:
 27141                           
 27142                           ; BSR set to: 0
 27143                           ;events.c: 744: evs[evNum] = 0;
 27144  007782  0E40               	movlw	low _evs
 27145  007784  2587               	addwf	getEVs@evNum& (0+255),w,b
 27146  007786  6ED9               	movwf	fsr2l,c
 27147  007788  6ADA               	clrf	fsr2h,c
 27148  00778A  0E02               	movlw	high _evs
 27149  00778C  22DA               	addwfc	fsr2h,f,c
 27150  00778E  0E00               	movlw	0
 27151  007790  6EDF               	movwf	indf2,c
 27152                           
 27153                           ; BSR set to: 0
 27154  007792  2B87               	incf	getEVs@evNum& (0+255),f,b
 27155  007794  D7F2               	goto	u21810
 27156  007796                     l17863:
 27157                           
 27158                           ; BSR set to: 0
 27159                           ;events.c: 745: };events.c: 746: return 0;
 27160  007796  0E00               	movlw	0
 27161  007798  0012               	return	
 27162  00779A                     l17867:
 27163                           
 27164                           ; BSR set to: 0
 27165                           ;events.c: 747: };events.c: 748: tableIndex = readFlashBlock((WORD)(&(eventTable[tableIn
      +                          dex].next)));
 27166  00779A  5186               	movf	getEVs@tableIndex& (0+255),w,b
 27167  00779C  0D10               	mullw	16
 27168  00779E  CFF3 F081          	movff	prodl,??_getEVs
 27169  0077A2  CFF4 F082          	movff	prodh,??_getEVs+1
 27170  0077A6  51E9               	movf	_eventTable& (0+255),w,b
 27171  0077A8  2781               	addwf	??_getEVs& (0+255),f,b
 27172  0077AA  51EA               	movf	(_eventTable+1)& (0+255),w,b
 27173  0077AC  2382               	addwfc	(??_getEVs+1)& (0+255),f,b
 27174  0077AE  0E01               	movlw	1
 27175  0077B0  2581               	addwf	??_getEVs& (0+255),w,b
 27176  0077B2  6F76               	movwf	readFlashBlock@flashAddr& (0+255),b
 27177  0077B4  0E00               	movlw	0
 27178  0077B6  2182               	addwfc	(??_getEVs+1)& (0+255),w,b
 27179  0077B8  6F77               	movwf	(readFlashBlock@flashAddr+1)& (0+255),b
 27180  0077BA  EC8D  F03D         	call	_readFlashBlock	;wreg free
 27181  0077BE  6F86               	movwf	getEVs@tableIndex& (0+255),b
 27182                           
 27183                           ; BSR set to: 0
 27184                           ;events.c: 749: if (tableIndex == 0xff) {
 27185  0077C0  2986               	incf	getEVs@tableIndex& (0+255),w,b
 27186  0077C2  B4D8               	btfsc	status,2,c
 27187  0077C4  D79F               	goto	u21790
 27188                           
 27189                           ; BSR set to: 0
 27190  0077C6  0E13               	movlw	19
 27191  0077C8  6587               	cpfsgt	getEVs@evNum& (0+255),b
 27192  0077CA  D7A0               	goto	l17835
 27193  0077CC  D7E4               	goto	l17863
 27194  0077CE                     __end_of_getEVs:
 27195                           	callstack 0
 27196                           
 27197 ;; *************** function _findEvent *****************
 27198 ;; Defined at:
 27199 ;;		line 547 in file "../../github/CBUSlib/events.c"
 27200 ;; Parameters:    Size  Location     Type
 27201 ;;  nodeNumber      2   46[BANK0 ] unsigned int 
 27202 ;;  eventNumber     2   48[BANK0 ] unsigned int 
 27203 ;; Auto vars:     Size  Location     Type
 27204 ;;  en              2   54[BANK0 ] unsigned int 
 27205 ;;  nn              2   52[BANK0 ] unsigned int 
 27206 ;;  tableIndex      1   58[BANK0 ] unsigned char 
 27207 ;;  chainIdx        1   57[BANK0 ] unsigned char 
 27208 ;;  hash            1   56[BANK0 ] unsigned char 
 27209 ;; Return value:  Size  Location     Type
 27210 ;;                  1    wreg      unsigned char 
 27211 ;; Registers used:
 27212 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 27213 ;; Tracked objects:
 27214 ;;		On entry : 3F/0
 27215 ;;		On exit  : 3F/0
 27216 ;;		Unchanged: 0/0
 27217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 27218 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 27219 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 27220 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 27221 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 27222 ;;Total ram usage:       13 bytes
 27223 ;; Hardware stack levels used: 1
 27224 ;; Hardware stack levels required when called: 14
 27225 ;; This function calls:
 27226 ;;		_getEN
 27227 ;;		_getHash
 27228 ;;		_getNN
 27229 ;; This function is called by:
 27230 ;;		_removeEvent
 27231 ;;		_addEvent
 27232 ;;		_parseCbusEvent
 27233 ;;		_doReqev
 27234 ;;		_doAreq
 27235 ;; This function uses a non-reentrant model
 27236 ;;
 27237                           
 27238                           	psect	text126
 27239  0089AC                     __ptext126:
 27240                           	callstack 0
 27241  0089AC                     _findEvent:
 27242                           	callstack 11
 27243                           
 27244                           ; BSR set to: 0
 27245                           ;events.c: 549: unsigned char hash = getHash(nodeNumber, eventNumber);
 27246                           
 27247                           ; BSR set to: 0
 27248                           ;incstack = 0
 27249  0089AC  C08E  F088         	movff	findEvent@nodeNumber,getHash@nn
 27250  0089B0  C08F  F089         	movff	findEvent@nodeNumber+1,getHash@nn+1
 27251  0089B4  C090  F08A         	movff	findEvent@eventNumber,getHash@en
 27252  0089B8  C091  F08B         	movff	findEvent@eventNumber+1,getHash@en+1
 27253  0089BC  EC7A  F052         	call	_getHash	;wreg free
 27254  0089C0  6F98               	movwf	findEvent@hash& (0+255),b
 27255                           
 27256                           ; BSR set to: 0
 27257                           ;events.c: 550: unsigned char chainIdx;;events.c: 551: for (chainIdx=0; chainIdx<20U; ch
      +                          ainIdx++) {
 27258  0089C2  0E00               	movlw	0
 27259  0089C4  6F99               	movwf	findEvent@chainIdx& (0+255),b
 27260  0089C6                     l18233:
 27261                           
 27262                           ; BSR set to: 0
 27263                           ;events.c: 552: unsigned char tableIndex = eventChains[hash][chainIdx];
 27264  0089C6  5198               	movf	findEvent@hash& (0+255),w,b
 27265  0089C8  0D14               	mullw	20
 27266  0089CA  0E00               	movlw	low _eventChains
 27267  0089CC  6F92               	movwf	??_findEvent& (0+255),b
 27268  0089CE  0E07               	movlw	high _eventChains
 27269  0089D0  6F93               	movwf	(??_findEvent+1)& (0+255),b
 27270  0089D2  50F3               	movf	243,w,c
 27271  0089D4  2792               	addwf	??_findEvent& (0+255),f,b
 27272  0089D6  50F4               	movf	244,w,c
 27273  0089D8  2393               	addwfc	(??_findEvent+1)& (0+255),f,b
 27274  0089DA  5199               	movf	findEvent@chainIdx& (0+255),w,b
 27275  0089DC  2592               	addwf	??_findEvent& (0+255),w,b
 27276  0089DE  6ED9               	movwf	fsr2l,c
 27277  0089E0  0E00               	movlw	0
 27278  0089E2  2193               	addwfc	(??_findEvent+1)& (0+255),w,b
 27279  0089E4  6EDA               	movwf	fsr2h,c
 27280  0089E6  50DF               	movf	indf2,w,c
 27281  0089E8  6F9A               	movwf	findEvent@tableIndex& (0+255),b
 27282                           
 27283                           ; BSR set to: 0
 27284                           ;events.c: 553: WORD nn, en;;events.c: 554: if (tableIndex == 0xff) return 0xff;
 27285  0089EA  299A               	incf	findEvent@tableIndex& (0+255),w,b
 27286  0089EC  A4D8               	btfss	status,2,c
 27287  0089EE  D002               	goto	l18241
 27288  0089F0                     u22470:
 27289                           
 27290                           ; BSR set to: 0
 27291  0089F0  0EFF               	movlw	255
 27292  0089F2  0012               	return	
 27293  0089F4                     l18241:
 27294                           
 27295                           ; BSR set to: 0
 27296                           ;events.c: 555: nn = getNN(tableIndex);
 27297  0089F4  519A               	movf	findEvent@tableIndex& (0+255),w,b
 27298  0089F6  ECA8  F043         	call	_getNN
 27299  0089FA  C07D  F094         	movff	?_getNN,findEvent@nn
 27300  0089FE  C07E  F095         	movff	?_getNN+1,findEvent@nn+1
 27301                           
 27302                           ;events.c: 556: en = getEN(tableIndex);
 27303  008A02  519A               	movf	findEvent@tableIndex& (0+255),w,b
 27304  008A04  EC1F  F048         	call	_getEN
 27305  008A08  C07D  F096         	movff	?_getEN,findEvent@en
 27306  008A0C  C07E  F097         	movff	?_getEN+1,findEvent@en+1
 27307                           
 27308                           ; BSR set to: 0
 27309                           ;events.c: 557: if ((nn == nodeNumber) && (en == eventNumber)) {
 27310  008A10  518E               	movf	findEvent@nodeNumber& (0+255),w,b
 27311  008A12  1994               	xorwf	findEvent@nn& (0+255),w,b
 27312  008A14  E10D               	bnz	l18251
 27313  008A16  518F               	movf	(findEvent@nodeNumber+1)& (0+255),w,b
 27314  008A18  1995               	xorwf	(findEvent@nn+1)& (0+255),w,b
 27315  008A1A  A4D8               	btfss	status,2,c
 27316  008A1C  D009               	goto	l18251
 27317                           
 27318                           ; BSR set to: 0
 27319  008A1E  5190               	movf	findEvent@eventNumber& (0+255),w,b
 27320  008A20  1996               	xorwf	findEvent@en& (0+255),w,b
 27321  008A22  E106               	bnz	l18251
 27322  008A24  5191               	movf	(findEvent@eventNumber+1)& (0+255),w,b
 27323  008A26  1997               	xorwf	(findEvent@en+1)& (0+255),w,b
 27324  008A28  A4D8               	btfss	status,2,c
 27325  008A2A  D002               	goto	l18251
 27326                           
 27327                           ; BSR set to: 0
 27328                           ;events.c: 558: return tableIndex;
 27329  008A2C  519A               	movf	findEvent@tableIndex& (0+255),w,b
 27330  008A2E  0012               	return	
 27331  008A30                     l18251:
 27332                           
 27333                           ; BSR set to: 0
 27334  008A30  2B99               	incf	findEvent@chainIdx& (0+255),f,b
 27335                           
 27336                           ; BSR set to: 0
 27337  008A32  0E13               	movlw	19
 27338  008A34  6599               	cpfsgt	findEvent@chainIdx& (0+255),b
 27339  008A36  D7C7               	goto	l18233
 27340  008A38  D7DB               	goto	u22470
 27341  008A3A                     __end_of_findEvent:
 27342                           	callstack 0
 27343                           
 27344 ;; *************** function _configIO *****************
 27345 ;; Defined at:
 27346 ;;		line 664 in file "../../github/CANMIOfirmware/main.c"
 27347 ;; Parameters:    Size  Location     Type
 27348 ;;  i               1    wreg     unsigned char 
 27349 ;; Auto vars:     Size  Location     Type
 27350 ;;  i               1   35[BANK0 ] unsigned char 
 27351 ;;  action          1   34[BANK0 ] unsigned char 
 27352 ;; Return value:  Size  Location     Type
 27353 ;;                  1    wreg      void 
 27354 ;; Registers used:
 27355 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 27356 ;; Tracked objects:
 27357 ;;		On entry : 3F/0
 27358 ;;		On exit  : 30/0
 27359 ;;		Unchanged: 0/0
 27360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 27361 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 27362 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 27363 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 27364 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 27365 ;;Total ram usage:        8 bytes
 27366 ;; Hardware stack levels used: 1
 27367 ;; Hardware stack levels required when called: 10
 27368 ;; This function calls:
 27369 ;;		_ee_read
 27370 ;;		_ee_write
 27371 ;;		_setDigitalOutput
 27372 ;; This function is called by:
 27373 ;;		_initialise
 27374 ;;		_setType
 27375 ;; This function uses a non-reentrant model
 27376 ;;
 27377                           
 27378                           	psect	text127
 27379  002A62                     __ptext127:
 27380                           	callstack 0
 27381  002A62                     _configIO:
 27382                           	callstack 17
 27383                           
 27384                           ; BSR set to: 0
 27385                           ;incstack = 0
 27386                           ;configIO@i stored from wreg
 27387  002A62  6F83               	movwf	configIO@i& (0+255),b
 27388                           
 27389                           ;main.c: 665: unsigned char action;;main.c: 666: if (i >= 16U) return;
 27390  002A64  0E0F               	movlw	15
 27391  002A66  0100               	movlb	0	; () banked
 27392  002A68  6583               	cpfsgt	configIO@i& (0+255),b
 27393  002A6A  D064               	goto	l18443
 27394  002A6C  0012               	return	
 27395  002A6E                     l18425:
 27396                           
 27397                           ; BSR set to: 0
 27398                           ;main.c: 671: if (NV->io[i].flags & 0x04U) {
 27399  002A6E  5183               	movf	configIO@i& (0+255),w,b
 27400  002A70  0D07               	mullw	7
 27401  002A72  C0EC  F07C         	movff	_NV,??_configIO
 27402  002A76  C0ED  F07D         	movff	_NV+1,??_configIO+1
 27403  002A7A  50F3               	movf	243,w,c
 27404  002A7C  277C               	addwf	??_configIO& (0+255),f,b
 27405  002A7E  50F4               	movf	244,w,c
 27406  002A80  237D               	addwfc	(??_configIO+1)& (0+255),f,b
 27407  002A82  0E11               	movlw	17
 27408  002A84  257C               	addwf	??_configIO& (0+255),w,b
 27409  002A86  6ED9               	movwf	fsr2l,c
 27410  002A88  0E00               	movlw	0
 27411  002A8A  217D               	addwfc	(??_configIO+1)& (0+255),w,b
 27412  002A8C  6EDA               	movwf	fsr2h,c
 27413  002A8E  A4DF               	btfss	indf2,2,c
 27414  002A90  D00E               	goto	l18429
 27415                           
 27416                           ; BSR set to: 0
 27417                           ;main.c: 672: setDigitalOutput(i, ee_read((WORD)((WORD)(((BYTE*)(0x3FF-40)))-17)+i));
 27418  002A92  0EC6               	movlw	198
 27419  002A94  2583               	addwf	configIO@i& (0+255),w,b
 27420  002A96  6F71               	movwf	ee_read@addr& (0+255),b
 27421  002A98  6B72               	clrf	(ee_read@addr+1)& (0+255),b
 27422  002A9A  0E03               	movlw	3
 27423  002A9C  2372               	addwfc	(ee_read@addr+1)& (0+255),f,b
 27424  002A9E  EC97  F052         	call	_ee_read	;wreg free
 27425  002AA2  0100               	movlb	0	; () banked
 27426  002AA4  6F77               	movwf	setDigitalOutput@state& (0+255),b
 27427  002AA6  5183               	movf	configIO@i& (0+255),w,b
 27428  002AA8  ECBC  F03F         	call	_setDigitalOutput
 27429                           
 27430                           ;main.c: 673: } else {
 27431  002AAC  D1C0               	goto	l18477
 27432  002AAE                     l18429:
 27433                           
 27434                           ; BSR set to: 0
 27435                           ;main.c: 674: action = (NV->io[i].flags & 0x20U) ? 1U : 2U;
 27436  002AAE  5183               	movf	configIO@i& (0+255),w,b
 27437  002AB0  0D07               	mullw	7
 27438  002AB2  C0EC  F07C         	movff	_NV,??_configIO
 27439  002AB6  C0ED  F07D         	movff	_NV+1,??_configIO+1
 27440  002ABA  50F3               	movf	243,w,c
 27441  002ABC  277C               	addwf	??_configIO& (0+255),f,b
 27442  002ABE  50F4               	movf	244,w,c
 27443  002AC0  237D               	addwfc	(??_configIO+1)& (0+255),f,b
 27444  002AC2  0E11               	movlw	17
 27445  002AC4  257C               	addwf	??_configIO& (0+255),w,b
 27446  002AC6  6ED9               	movwf	fsr2l,c
 27447  002AC8  0E00               	movlw	0
 27448  002ACA  217D               	addwfc	(??_configIO+1)& (0+255),w,b
 27449  002ACC  6EDA               	movwf	fsr2h,c
 27450  002ACE  BADF               	btfsc	indf2,5,c
 27451  002AD0  D004               	goto	l18433
 27452                           
 27453                           ; BSR set to: 0
 27454  002AD2  0E00               	movlw	0
 27455  002AD4  6F81               	movwf	(_configIO$1531+1)& (0+255),b
 27456  002AD6  0E02               	movlw	2
 27457  002AD8  D003               	goto	L22
 27458  002ADA                     l18433:
 27459                           
 27460                           ; BSR set to: 0
 27461  002ADA  0E00               	movlw	0
 27462  002ADC  6F81               	movwf	(_configIO$1531+1)& (0+255),b
 27463  002ADE  0E01               	movlw	1
 27464  002AE0                     L22:
 27465  002AE0  6F80               	movwf	_configIO$1531& (0+255),b
 27466                           
 27467                           ; BSR set to: 0
 27468  002AE2  C080  F082         	movff	_configIO$1531,configIO@action
 27469                           
 27470                           ; BSR set to: 0
 27471                           ;main.c: 675: setDigitalOutput(i, action);
 27472  002AE6  C082  F077         	movff	configIO@action,setDigitalOutput@state
 27473  002AEA  5183               	movf	configIO@i& (0+255),w,b
 27474  002AEC  ECBC  F03F         	call	_setDigitalOutput
 27475                           
 27476                           ; BSR set to: 0
 27477                           ;main.c: 677: ee_write(((WORD)(((BYTE*)(0x3FF-40)))-17)+i, action);
 27478  002AF0  0EC6               	movlw	198
 27479  002AF2  2583               	addwf	configIO@i& (0+255),w,b
 27480  002AF4  6F73               	movwf	ee_write@addr& (0+255),b
 27481  002AF6  6B74               	clrf	(ee_write@addr+1)& (0+255),b
 27482  002AF8  0E03               	movlw	3
 27483  002AFA  2374               	addwfc	(ee_write@addr+1)& (0+255),f,b
 27484  002AFC  C082  F075         	movff	configIO@action,ee_write@data
 27485  002B00  EC1D  F04D         	call	_ee_write	;wreg free
 27486  002B04  D194               	goto	l18477
 27487  002B06                     l18441:
 27488                           
 27489                           ; BSR set to: 0
 27490                           ;main.c: 683: case 3U:;main.c: 686: setDigitalOutput(i, NV->io[i].flags & 0x10U);
 27491  002B06  5183               	movf	configIO@i& (0+255),w,b
 27492  002B08  0D07               	mullw	7
 27493  002B0A  C0EC  F07C         	movff	_NV,??_configIO
 27494  002B0E  C0ED  F07D         	movff	_NV+1,??_configIO+1
 27495  002B12  50F3               	movf	243,w,c
 27496  002B14  277C               	addwf	??_configIO& (0+255),f,b
 27497  002B16  50F4               	movf	244,w,c
 27498  002B18  237D               	addwfc	(??_configIO+1)& (0+255),f,b
 27499  002B1A  0E11               	movlw	17
 27500  002B1C  257C               	addwf	??_configIO& (0+255),w,b
 27501  002B1E  6ED9               	movwf	fsr2l,c
 27502  002B20  0E00               	movlw	0
 27503  002B22  217D               	addwfc	(??_configIO+1)& (0+255),w,b
 27504  002B24  6EDA               	movwf	fsr2h,c
 27505  002B26  50DF               	movf	indf2,w,c
 27506  002B28  0B10               	andlw	16
 27507  002B2A  6F77               	movwf	setDigitalOutput@state& (0+255),b
 27508  002B2C  5183               	movf	configIO@i& (0+255),w,b
 27509  002B2E  ECBC  F03F         	call	_setDigitalOutput
 27510                           
 27511                           ;main.c: 688: }
 27512  002B32  D17D               	goto	l18477
 27513  002B34                     l18443:
 27514                           
 27515                           ; BSR set to: 0
 27516  002B34  5183               	movf	configIO@i& (0+255),w,b
 27517  002B36  0D07               	mullw	7
 27518  002B38  C0EC  F07C         	movff	_NV,??_configIO
 27519  002B3C  C0ED  F07D         	movff	_NV+1,??_configIO+1
 27520  002B40  50F3               	movf	243,w,c
 27521  002B42  277C               	addwf	??_configIO& (0+255),f,b
 27522  002B44  50F4               	movf	244,w,c
 27523  002B46  237D               	addwfc	(??_configIO+1)& (0+255),f,b
 27524  002B48  0E10               	movlw	16
 27525  002B4A  257C               	addwf	??_configIO& (0+255),w,b
 27526  002B4C  6ED9               	movwf	fsr2l,c
 27527  002B4E  0E00               	movlw	0
 27528  002B50  217D               	addwfc	(??_configIO+1)& (0+255),w,b
 27529  002B52  6EDA               	movwf	fsr2h,c
 27530  002B54  50DF               	movf	indf2,w,c
 27531                           
 27532                           ; Switch size 1, requested type "simple"
 27533                           ; Number of cases is 3, Range of values is 1 to 3
 27534                           ; switch strategies available:
 27535                           ; Name         Instructions Cycles
 27536                           ; simple_byte           10     6 (average)
 27537                           ;	Chosen strategy is simple_byte
 27538  002B56  0A01               	xorlw	1	; case 1
 27539  002B58  B4D8               	btfsc	status,2,c
 27540  002B5A  D789               	goto	l18425
 27541  002B5C  0A03               	xorlw	3	; case 2
 27542  002B5E  B4D8               	btfsc	status,2,c
 27543  002B60  D7D2               	goto	l18441
 27544  002B62  0A01               	xorlw	1	; case 3
 27545  002B64  B4D8               	btfsc	status,2,c
 27546  002B66  D7CF               	goto	l18441
 27547  002B68  D162               	goto	l18477
 27548  002B6A                     l18445:
 27549                           
 27550                           ; BSR set to: 0
 27551                           ;main.c: 693: if ((NV->io[i].type == 0U) || (NV->io[i].type == 5U) || (NV->io[i].type ==
      +                           6U)) {
 27552  002B6A  5183               	movf	configIO@i& (0+255),w,b
 27553  002B6C  0D07               	mullw	7
 27554  002B6E  C0EC  F07C         	movff	_NV,??_configIO
 27555  002B72  C0ED  F07D         	movff	_NV+1,??_configIO+1
 27556  002B76  50F3               	movf	243,w,c
 27557  002B78  277C               	addwf	??_configIO& (0+255),f,b
 27558  002B7A  50F4               	movf	244,w,c
 27559  002B7C  237D               	addwfc	(??_configIO+1)& (0+255),f,b
 27560  002B7E  0E10               	movlw	16
 27561  002B80  257C               	addwf	??_configIO& (0+255),w,b
 27562  002B82  6ED9               	movwf	fsr2l,c
 27563  002B84  0E00               	movlw	0
 27564  002B86  217D               	addwfc	(??_configIO+1)& (0+255),w,b
 27565  002B88  6EDA               	movwf	fsr2h,c
 27566  002B8A  50DF               	movf	indf2,w,c
 27567  002B8C  B4D8               	btfsc	status,2,c
 27568  002B8E  D028               	goto	u22750
 27569                           
 27570                           ; BSR set to: 0
 27571  002B90  5183               	movf	configIO@i& (0+255),w,b
 27572  002B92  0D07               	mullw	7
 27573  002B94  C0EC  F07C         	movff	_NV,??_configIO
 27574  002B98  C0ED  F07D         	movff	_NV+1,??_configIO+1
 27575  002B9C  50F3               	movf	243,w,c
 27576  002B9E  277C               	addwf	??_configIO& (0+255),f,b
 27577  002BA0  50F4               	movf	244,w,c
 27578  002BA2  237D               	addwfc	(??_configIO+1)& (0+255),f,b
 27579  002BA4  0E10               	movlw	16
 27580  002BA6  257C               	addwf	??_configIO& (0+255),w,b
 27581  002BA8  6ED9               	movwf	fsr2l,c
 27582  002BAA  0E00               	movlw	0
 27583  002BAC  217D               	addwfc	(??_configIO+1)& (0+255),w,b
 27584  002BAE  6EDA               	movwf	fsr2h,c
 27585  002BB0  0E05               	movlw	5
 27586  002BB2  18DE               	xorwf	postinc2,w,c
 27587  002BB4  B4D8               	btfsc	status,2,c
 27588  002BB6  D014               	goto	u22750
 27589                           
 27590                           ; BSR set to: 0
 27591  002BB8  5183               	movf	configIO@i& (0+255),w,b
 27592  002BBA  0D07               	mullw	7
 27593  002BBC  C0EC  F07C         	movff	_NV,??_configIO
 27594  002BC0  C0ED  F07D         	movff	_NV+1,??_configIO+1
 27595  002BC4  50F3               	movf	243,w,c
 27596  002BC6  277C               	addwf	??_configIO& (0+255),f,b
 27597  002BC8  50F4               	movf	244,w,c
 27598  002BCA  237D               	addwfc	(??_configIO+1)& (0+255),f,b
 27599  002BCC  0E10               	movlw	16
 27600  002BCE  257C               	addwf	??_configIO& (0+255),w,b
 27601  002BD0  6ED9               	movwf	fsr2l,c
 27602  002BD2  0E00               	movlw	0
 27603  002BD4  217D               	addwfc	(??_configIO+1)& (0+255),w,b
 27604  002BD6  6EDA               	movwf	fsr2h,c
 27605  002BD8  0E06               	movlw	6
 27606  002BDA  18DE               	xorwf	postinc2,w,c
 27607  002BDC  A4D8               	btfss	status,2,c
 27608  002BDE  D01D               	goto	l18453
 27609  002BE0                     u22750:
 27610                           
 27611                           ; BSR set to: 0
 27612                           ;main.c: 694: TRISA |= (1U << configs[i].no);
 27613  002BE0  5183               	movf	configIO@i& (0+255),w,b
 27614  002BE2  0D04               	mullw	4
 27615  002BE4  CFF3 F07C          	movff	prodl,??_configIO
 27616  002BE8  0E02               	movlw	2
 27617  002BEA  277C               	addwf	??_configIO& (0+255),f,b
 27618  002BEC  517C               	movf	??_configIO& (0+255),w,b
 27619  002BEE  0F01               	addlw	low _configs
 27620  002BF0  6F7D               	movwf	(??_configIO+1)& (0+255),b
 27621  002BF2  C07D  FFF6         	movff	??_configIO+1,tblptrl
 27622  002BF6                     	if	1	;There is more than 1 active tblptr byte
 27623  002BF6  0E0F               	movlw	high __smallconst
 27624  002BF8  6EF7               	movwf	tblptrh,c
 27625  002BFA                     	endif
 27626  002BFA                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 27627  002BFA  6AF8               	clrf	tblptru,c
 27628  002BFC                     	endif
 27629  002BFC                     	if	0	;tblptru may be non-zero
 27630  002BFC                     	endif
 27631  002BFC  0008               	tblrd		*
 27632  002BFE  CFF5 F07E          	movff	tablat,??_configIO+2
 27633  002C02  0E01               	movlw	1
 27634  002C04  6F7F               	movwf	(??_configIO+3)& (0+255),b
 27635  002C06  2B7E               	incf	(??_configIO+2)& (0+255),f,b
 27636  002C08  D002               	goto	u22764
 27637  002C0A                     u22765:
 27638  002C0A  90D8               	bcf	status,0,c
 27639  002C0C  377F               	rlcf	(??_configIO+3)& (0+255),f,b
 27640  002C0E                     u22764:
 27641  002C0E  2F7E               	decfsz	(??_configIO+2)& (0+255),f,b
 27642  002C10  D7FC               	goto	u22765
 27643  002C12  0100               	movlb	0	; () banked
 27644  002C14  517F               	movf	(??_configIO+3)& (0+255),w,b
 27645  002C16  1292               	iorwf	146,f,c	;volatile
 27646                           
 27647                           ;main.c: 695: } else {
 27648  002C18  D123               	goto	l18479
 27649  002C1A                     l18453:
 27650                           
 27651                           ; BSR set to: 0
 27652                           ;main.c: 696: TRISA &= ~(1U << configs[i].no);
 27653  002C1A  5183               	movf	configIO@i& (0+255),w,b
 27654  002C1C  0D04               	mullw	4
 27655  002C1E  CFF3 F07C          	movff	prodl,??_configIO
 27656  002C22  0E02               	movlw	2
 27657  002C24  277C               	addwf	??_configIO& (0+255),f,b
 27658  002C26  517C               	movf	??_configIO& (0+255),w,b
 27659  002C28  0F01               	addlw	low _configs
 27660  002C2A  6F7D               	movwf	(??_configIO+1)& (0+255),b
 27661  002C2C  C07D  FFF6         	movff	??_configIO+1,tblptrl
 27662  002C30                     	if	1	;There is more than 1 active tblptr byte
 27663  002C30  0E0F               	movlw	high __smallconst
 27664  002C32  6EF7               	movwf	tblptrh,c
 27665  002C34                     	endif
 27666  002C34                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 27667  002C34  6AF8               	clrf	tblptru,c
 27668  002C36                     	endif
 27669  002C36                     	if	0	;tblptru may be non-zero
 27670  002C36                     	endif
 27671  002C36  0008               	tblrd		*
 27672  002C38  CFF5 F07E          	movff	tablat,??_configIO+2
 27673  002C3C  0E01               	movlw	1
 27674  002C3E  6F7F               	movwf	(??_configIO+3)& (0+255),b
 27675  002C40  2B7E               	incf	(??_configIO+2)& (0+255),f,b
 27676  002C42  D002               	goto	u22774
 27677  002C44                     u22775:
 27678  002C44  90D8               	bcf	status,0,c
 27679  002C46  377F               	rlcf	(??_configIO+3)& (0+255),f,b
 27680  002C48                     u22774:
 27681  002C48  2F7E               	decfsz	(??_configIO+2)& (0+255),f,b
 27682  002C4A  D7FC               	goto	u22775
 27683  002C4C  0100               	movlb	0	; () banked
 27684  002C4E  517F               	movf	(??_configIO+3)& (0+255),w,b
 27685  002C50  0AFF               	xorlw	255
 27686  002C52  1692               	andwf	146,f,c	;volatile
 27687  002C54  D105               	goto	l18479
 27688  002C56                     l18455:
 27689                           
 27690                           ; BSR set to: 0
 27691                           ;main.c: 700: if ((NV->io[i].type == 0U) || (NV->io[i].type == 5U) || (NV->io[i].type ==
      +                           6U)) {
 27692  002C56  5183               	movf	configIO@i& (0+255),w,b
 27693  002C58  0D07               	mullw	7
 27694  002C5A  C0EC  F07C         	movff	_NV,??_configIO
 27695  002C5E  C0ED  F07D         	movff	_NV+1,??_configIO+1
 27696  002C62  50F3               	movf	243,w,c
 27697  002C64  277C               	addwf	??_configIO& (0+255),f,b
 27698  002C66  50F4               	movf	244,w,c
 27699  002C68  237D               	addwfc	(??_configIO+1)& (0+255),f,b
 27700  002C6A  0E10               	movlw	16
 27701  002C6C  257C               	addwf	??_configIO& (0+255),w,b
 27702  002C6E  6ED9               	movwf	fsr2l,c
 27703  002C70  0E00               	movlw	0
 27704  002C72  217D               	addwfc	(??_configIO+1)& (0+255),w,b
 27705  002C74  6EDA               	movwf	fsr2h,c
 27706  002C76  50DF               	movf	indf2,w,c
 27707  002C78  B4D8               	btfsc	status,2,c
 27708  002C7A  D028               	goto	u22800
 27709                           
 27710                           ; BSR set to: 0
 27711  002C7C  5183               	movf	configIO@i& (0+255),w,b
 27712  002C7E  0D07               	mullw	7
 27713  002C80  C0EC  F07C         	movff	_NV,??_configIO
 27714  002C84  C0ED  F07D         	movff	_NV+1,??_configIO+1
 27715  002C88  50F3               	movf	243,w,c
 27716  002C8A  277C               	addwf	??_configIO& (0+255),f,b
 27717  002C8C  50F4               	movf	244,w,c
 27718  002C8E  237D               	addwfc	(??_configIO+1)& (0+255),f,b
 27719  002C90  0E10               	movlw	16
 27720  002C92  257C               	addwf	??_configIO& (0+255),w,b
 27721  002C94  6ED9               	movwf	fsr2l,c
 27722  002C96  0E00               	movlw	0
 27723  002C98  217D               	addwfc	(??_configIO+1)& (0+255),w,b
 27724  002C9A  6EDA               	movwf	fsr2h,c
 27725  002C9C  0E05               	movlw	5
 27726  002C9E  18DE               	xorwf	postinc2,w,c
 27727  002CA0  B4D8               	btfsc	status,2,c
 27728  002CA2  D014               	goto	u22800
 27729                           
 27730                           ; BSR set to: 0
 27731  002CA4  5183               	movf	configIO@i& (0+255),w,b
 27732  002CA6  0D07               	mullw	7
 27733  002CA8  C0EC  F07C         	movff	_NV,??_configIO
 27734  002CAC  C0ED  F07D         	movff	_NV+1,??_configIO+1
 27735  002CB0  50F3               	movf	243,w,c
 27736  002CB2  277C               	addwf	??_configIO& (0+255),f,b
 27737  002CB4  50F4               	movf	244,w,c
 27738  002CB6  237D               	addwfc	(??_configIO+1)& (0+255),f,b
 27739  002CB8  0E10               	movlw	16
 27740  002CBA  257C               	addwf	??_configIO& (0+255),w,b
 27741  002CBC  6ED9               	movwf	fsr2l,c
 27742  002CBE  0E00               	movlw	0
 27743  002CC0  217D               	addwfc	(??_configIO+1)& (0+255),w,b
 27744  002CC2  6EDA               	movwf	fsr2h,c
 27745  002CC4  0E06               	movlw	6
 27746  002CC6  18DE               	xorwf	postinc2,w,c
 27747  002CC8  A4D8               	btfss	status,2,c
 27748  002CCA  D01D               	goto	l18463
 27749  002CCC                     u22800:
 27750                           
 27751                           ; BSR set to: 0
 27752                           ;main.c: 701: TRISB |= (1U << configs[i].no);
 27753  002CCC  5183               	movf	configIO@i& (0+255),w,b
 27754  002CCE  0D04               	mullw	4
 27755  002CD0  CFF3 F07C          	movff	prodl,??_configIO
 27756  002CD4  0E02               	movlw	2
 27757  002CD6  277C               	addwf	??_configIO& (0+255),f,b
 27758  002CD8  517C               	movf	??_configIO& (0+255),w,b
 27759  002CDA  0F01               	addlw	low _configs
 27760  002CDC  6F7D               	movwf	(??_configIO+1)& (0+255),b
 27761  002CDE  C07D  FFF6         	movff	??_configIO+1,tblptrl
 27762  002CE2                     	if	1	;There is more than 1 active tblptr byte
 27763  002CE2  0E0F               	movlw	high __smallconst
 27764  002CE4  6EF7               	movwf	tblptrh,c
 27765  002CE6                     	endif
 27766  002CE6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 27767  002CE6  6AF8               	clrf	tblptru,c
 27768  002CE8                     	endif
 27769  002CE8                     	if	0	;tblptru may be non-zero
 27770  002CE8                     	endif
 27771  002CE8  0008               	tblrd		*
 27772  002CEA  CFF5 F07E          	movff	tablat,??_configIO+2
 27773  002CEE  0E01               	movlw	1
 27774  002CF0  6F7F               	movwf	(??_configIO+3)& (0+255),b
 27775  002CF2  2B7E               	incf	(??_configIO+2)& (0+255),f,b
 27776  002CF4  D002               	goto	u22814
 27777  002CF6                     u22815:
 27778  002CF6  90D8               	bcf	status,0,c
 27779  002CF8  377F               	rlcf	(??_configIO+3)& (0+255),f,b
 27780  002CFA                     u22814:
 27781  002CFA  2F7E               	decfsz	(??_configIO+2)& (0+255),f,b
 27782  002CFC  D7FC               	goto	u22815
 27783  002CFE  0100               	movlb	0	; () banked
 27784  002D00  517F               	movf	(??_configIO+3)& (0+255),w,b
 27785  002D02  1293               	iorwf	147,f,c	;volatile
 27786                           
 27787                           ;main.c: 702: } else {
 27788  002D04  D0AD               	goto	l18479
 27789  002D06                     l18463:
 27790                           
 27791                           ; BSR set to: 0
 27792                           ;main.c: 703: TRISB &= ~(1U << configs[i].no);
 27793  002D06  5183               	movf	configIO@i& (0+255),w,b
 27794  002D08  0D04               	mullw	4
 27795  002D0A  CFF3 F07C          	movff	prodl,??_configIO
 27796  002D0E  0E02               	movlw	2
 27797  002D10  277C               	addwf	??_configIO& (0+255),f,b
 27798  002D12  517C               	movf	??_configIO& (0+255),w,b
 27799  002D14  0F01               	addlw	low _configs
 27800  002D16  6F7D               	movwf	(??_configIO+1)& (0+255),b
 27801  002D18  C07D  FFF6         	movff	??_configIO+1,tblptrl
 27802  002D1C                     	if	1	;There is more than 1 active tblptr byte
 27803  002D1C  0E0F               	movlw	high __smallconst
 27804  002D1E  6EF7               	movwf	tblptrh,c
 27805  002D20                     	endif
 27806  002D20                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 27807  002D20  6AF8               	clrf	tblptru,c
 27808  002D22                     	endif
 27809  002D22                     	if	0	;tblptru may be non-zero
 27810  002D22                     	endif
 27811  002D22  0008               	tblrd		*
 27812  002D24  CFF5 F07E          	movff	tablat,??_configIO+2
 27813  002D28  0E01               	movlw	1
 27814  002D2A  6F7F               	movwf	(??_configIO+3)& (0+255),b
 27815  002D2C  2B7E               	incf	(??_configIO+2)& (0+255),f,b
 27816  002D2E  D002               	goto	u22824
 27817  002D30                     u22825:
 27818  002D30  90D8               	bcf	status,0,c
 27819  002D32  377F               	rlcf	(??_configIO+3)& (0+255),f,b
 27820  002D34                     u22824:
 27821  002D34  2F7E               	decfsz	(??_configIO+2)& (0+255),f,b
 27822  002D36  D7FC               	goto	u22825
 27823  002D38  0100               	movlb	0	; () banked
 27824  002D3A  517F               	movf	(??_configIO+3)& (0+255),w,b
 27825  002D3C  0AFF               	xorlw	255
 27826  002D3E  1693               	andwf	147,f,c	;volatile
 27827  002D40  D08F               	goto	l18479
 27828  002D42                     l18465:
 27829                           
 27830                           ; BSR set to: 0
 27831                           ;main.c: 707: if ((NV->io[i].type == 0U) || (NV->io[i].type == 5U) || (NV->io[i].type ==
      +                           6U)) {
 27832  002D42  5183               	movf	configIO@i& (0+255),w,b
 27833  002D44  0D07               	mullw	7
 27834  002D46  C0EC  F07C         	movff	_NV,??_configIO
 27835  002D4A  C0ED  F07D         	movff	_NV+1,??_configIO+1
 27836  002D4E  50F3               	movf	243,w,c
 27837  002D50  277C               	addwf	??_configIO& (0+255),f,b
 27838  002D52  50F4               	movf	244,w,c
 27839  002D54  237D               	addwfc	(??_configIO+1)& (0+255),f,b
 27840  002D56  0E10               	movlw	16
 27841  002D58  257C               	addwf	??_configIO& (0+255),w,b
 27842  002D5A  6ED9               	movwf	fsr2l,c
 27843  002D5C  0E00               	movlw	0
 27844  002D5E  217D               	addwfc	(??_configIO+1)& (0+255),w,b
 27845  002D60  6EDA               	movwf	fsr2h,c
 27846  002D62  50DF               	movf	indf2,w,c
 27847  002D64  B4D8               	btfsc	status,2,c
 27848  002D66  D028               	goto	u22850
 27849                           
 27850                           ; BSR set to: 0
 27851  002D68  5183               	movf	configIO@i& (0+255),w,b
 27852  002D6A  0D07               	mullw	7
 27853  002D6C  C0EC  F07C         	movff	_NV,??_configIO
 27854  002D70  C0ED  F07D         	movff	_NV+1,??_configIO+1
 27855  002D74  50F3               	movf	243,w,c
 27856  002D76  277C               	addwf	??_configIO& (0+255),f,b
 27857  002D78  50F4               	movf	244,w,c
 27858  002D7A  237D               	addwfc	(??_configIO+1)& (0+255),f,b
 27859  002D7C  0E10               	movlw	16
 27860  002D7E  257C               	addwf	??_configIO& (0+255),w,b
 27861  002D80  6ED9               	movwf	fsr2l,c
 27862  002D82  0E00               	movlw	0
 27863  002D84  217D               	addwfc	(??_configIO+1)& (0+255),w,b
 27864  002D86  6EDA               	movwf	fsr2h,c
 27865  002D88  0E05               	movlw	5
 27866  002D8A  18DE               	xorwf	postinc2,w,c
 27867  002D8C  B4D8               	btfsc	status,2,c
 27868  002D8E  D014               	goto	u22850
 27869                           
 27870                           ; BSR set to: 0
 27871  002D90  5183               	movf	configIO@i& (0+255),w,b
 27872  002D92  0D07               	mullw	7
 27873  002D94  C0EC  F07C         	movff	_NV,??_configIO
 27874  002D98  C0ED  F07D         	movff	_NV+1,??_configIO+1
 27875  002D9C  50F3               	movf	243,w,c
 27876  002D9E  277C               	addwf	??_configIO& (0+255),f,b
 27877  002DA0  50F4               	movf	244,w,c
 27878  002DA2  237D               	addwfc	(??_configIO+1)& (0+255),f,b
 27879  002DA4  0E10               	movlw	16
 27880  002DA6  257C               	addwf	??_configIO& (0+255),w,b
 27881  002DA8  6ED9               	movwf	fsr2l,c
 27882  002DAA  0E00               	movlw	0
 27883  002DAC  217D               	addwfc	(??_configIO+1)& (0+255),w,b
 27884  002DAE  6EDA               	movwf	fsr2h,c
 27885  002DB0  0E06               	movlw	6
 27886  002DB2  18DE               	xorwf	postinc2,w,c
 27887  002DB4  A4D8               	btfss	status,2,c
 27888  002DB6  D01D               	goto	l18473
 27889  002DB8                     u22850:
 27890                           
 27891                           ; BSR set to: 0
 27892                           ;main.c: 708: TRISC |= (1U << configs[i].no);
 27893  002DB8  5183               	movf	configIO@i& (0+255),w,b
 27894  002DBA  0D04               	mullw	4
 27895  002DBC  CFF3 F07C          	movff	prodl,??_configIO
 27896  002DC0  0E02               	movlw	2
 27897  002DC2  277C               	addwf	??_configIO& (0+255),f,b
 27898  002DC4  517C               	movf	??_configIO& (0+255),w,b
 27899  002DC6  0F01               	addlw	low _configs
 27900  002DC8  6F7D               	movwf	(??_configIO+1)& (0+255),b
 27901  002DCA  C07D  FFF6         	movff	??_configIO+1,tblptrl
 27902  002DCE                     	if	1	;There is more than 1 active tblptr byte
 27903  002DCE  0E0F               	movlw	high __smallconst
 27904  002DD0  6EF7               	movwf	tblptrh,c
 27905  002DD2                     	endif
 27906  002DD2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 27907  002DD2  6AF8               	clrf	tblptru,c
 27908  002DD4                     	endif
 27909  002DD4                     	if	0	;tblptru may be non-zero
 27910  002DD4                     	endif
 27911  002DD4  0008               	tblrd		*
 27912  002DD6  CFF5 F07E          	movff	tablat,??_configIO+2
 27913  002DDA  0E01               	movlw	1
 27914  002DDC  6F7F               	movwf	(??_configIO+3)& (0+255),b
 27915  002DDE  2B7E               	incf	(??_configIO+2)& (0+255),f,b
 27916  002DE0  D002               	goto	u22864
 27917  002DE2                     u22865:
 27918  002DE2  90D8               	bcf	status,0,c
 27919  002DE4  377F               	rlcf	(??_configIO+3)& (0+255),f,b
 27920  002DE6                     u22864:
 27921  002DE6  2F7E               	decfsz	(??_configIO+2)& (0+255),f,b
 27922  002DE8  D7FC               	goto	u22865
 27923  002DEA  0100               	movlb	0	; () banked
 27924  002DEC  517F               	movf	(??_configIO+3)& (0+255),w,b
 27925  002DEE  1294               	iorwf	148,f,c	;volatile
 27926                           
 27927                           ;main.c: 709: } else {
 27928  002DF0  D037               	goto	l18479
 27929  002DF2                     l18473:
 27930                           
 27931                           ; BSR set to: 0
 27932                           ;main.c: 710: TRISC &= ~(1U << configs[i].no);
 27933  002DF2  5183               	movf	configIO@i& (0+255),w,b
 27934  002DF4  0D04               	mullw	4
 27935  002DF6  CFF3 F07C          	movff	prodl,??_configIO
 27936  002DFA  0E02               	movlw	2
 27937  002DFC  277C               	addwf	??_configIO& (0+255),f,b
 27938  002DFE  517C               	movf	??_configIO& (0+255),w,b
 27939  002E00  0F01               	addlw	low _configs
 27940  002E02  6F7D               	movwf	(??_configIO+1)& (0+255),b
 27941  002E04  C07D  FFF6         	movff	??_configIO+1,tblptrl
 27942  002E08                     	if	1	;There is more than 1 active tblptr byte
 27943  002E08  0E0F               	movlw	high __smallconst
 27944  002E0A  6EF7               	movwf	tblptrh,c
 27945  002E0C                     	endif
 27946  002E0C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 27947  002E0C  6AF8               	clrf	tblptru,c
 27948  002E0E                     	endif
 27949  002E0E                     	if	0	;tblptru may be non-zero
 27950  002E0E                     	endif
 27951  002E0E  0008               	tblrd		*
 27952  002E10  CFF5 F07E          	movff	tablat,??_configIO+2
 27953  002E14  0E01               	movlw	1
 27954  002E16  6F7F               	movwf	(??_configIO+3)& (0+255),b
 27955  002E18  2B7E               	incf	(??_configIO+2)& (0+255),f,b
 27956  002E1A  D002               	goto	u22874
 27957  002E1C                     u22875:
 27958  002E1C  90D8               	bcf	status,0,c
 27959  002E1E  377F               	rlcf	(??_configIO+3)& (0+255),f,b
 27960  002E20                     u22874:
 27961  002E20  2F7E               	decfsz	(??_configIO+2)& (0+255),f,b
 27962  002E22  D7FC               	goto	u22875
 27963  002E24  0100               	movlb	0	; () banked
 27964  002E26  517F               	movf	(??_configIO+3)& (0+255),w,b
 27965  002E28  0AFF               	xorlw	255
 27966  002E2A  1694               	andwf	148,f,c	;volatile
 27967  002E2C  D019               	goto	l18479
 27968  002E2E                     l18477:
 27969                           
 27970                           ; BSR set to: 0
 27971  002E2E  5183               	movf	configIO@i& (0+255),w,b
 27972  002E30  0D04               	mullw	4
 27973  002E32  CFF3 F07C          	movff	prodl,??_configIO
 27974  002E36  0E01               	movlw	1
 27975  002E38  277C               	addwf	??_configIO& (0+255),f,b
 27976  002E3A  517C               	movf	??_configIO& (0+255),w,b
 27977  002E3C  0F01               	addlw	low _configs
 27978  002E3E  6F7D               	movwf	(??_configIO+1)& (0+255),b
 27979  002E40  C07D  FFF6         	movff	??_configIO+1,tblptrl
 27980  002E44                     	if	1	;There is more than 1 active tblptr byte
 27981  002E44  0E0F               	movlw	high __smallconst
 27982  002E46  6EF7               	movwf	tblptrh,c
 27983  002E48                     	endif
 27984  002E48                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 27985  002E48  6AF8               	clrf	tblptru,c
 27986  002E4A                     	endif
 27987  002E4A                     	if	0	;tblptru may be non-zero
 27988  002E4A                     	endif
 27989  002E4A  0008               	tblrd		*
 27990  002E4C  50F5               	movf	tablat,w,c
 27991                           
 27992                           ; Switch size 1, requested type "simple"
 27993                           ; Number of cases is 3, Range of values is 65 to 67
 27994                           ; switch strategies available:
 27995                           ; Name         Instructions Cycles
 27996                           ; simple_byte           10     6 (average)
 27997                           ;	Chosen strategy is simple_byte
 27998  002E4E  0A41               	xorlw	65	; case 65
 27999  002E50  B4D8               	btfsc	status,2,c
 28000  002E52  D68B               	goto	l18445
 28001  002E54  0A03               	xorlw	3	; case 66
 28002  002E56  B4D8               	btfsc	status,2,c
 28003  002E58  D6FE               	goto	l18455
 28004  002E5A  0A01               	xorlw	1	; case 67
 28005  002E5C  B4D8               	btfsc	status,2,c
 28006  002E5E  D771               	goto	l18465
 28007  002E60                     l18479:
 28008                           
 28009                           ; BSR set to: 0
 28010                           ;main.c: 715: if ((NV->io[i].type == 5U) || (NV->io[i].type == 6U)) {
 28011  002E60  5183               	movf	configIO@i& (0+255),w,b
 28012  002E62  0D07               	mullw	7
 28013  002E64  C0EC  F07C         	movff	_NV,??_configIO
 28014  002E68  C0ED  F07D         	movff	_NV+1,??_configIO+1
 28015  002E6C  50F3               	movf	243,w,c
 28016  002E6E  277C               	addwf	??_configIO& (0+255),f,b
 28017  002E70  50F4               	movf	244,w,c
 28018  002E72  237D               	addwfc	(??_configIO+1)& (0+255),f,b
 28019  002E74  0E10               	movlw	16
 28020  002E76  257C               	addwf	??_configIO& (0+255),w,b
 28021  002E78  6ED9               	movwf	fsr2l,c
 28022  002E7A  0E00               	movlw	0
 28023  002E7C  217D               	addwfc	(??_configIO+1)& (0+255),w,b
 28024  002E7E  6EDA               	movwf	fsr2h,c
 28025  002E80  0E05               	movlw	5
 28026  002E82  18DE               	xorwf	postinc2,w,c
 28027  002E84  B4D8               	btfsc	status,2,c
 28028  002E86  D014               	goto	u22890
 28029                           
 28030                           ; BSR set to: 0
 28031  002E88  5183               	movf	configIO@i& (0+255),w,b
 28032  002E8A  0D07               	mullw	7
 28033  002E8C  C0EC  F07C         	movff	_NV,??_configIO
 28034  002E90  C0ED  F07D         	movff	_NV+1,??_configIO+1
 28035  002E94  50F3               	movf	243,w,c
 28036  002E96  277C               	addwf	??_configIO& (0+255),f,b
 28037  002E98  50F4               	movf	244,w,c
 28038  002E9A  237D               	addwfc	(??_configIO+1)& (0+255),f,b
 28039  002E9C  0E10               	movlw	16
 28040  002E9E  257C               	addwf	??_configIO& (0+255),w,b
 28041  002EA0  6ED9               	movwf	fsr2l,c
 28042  002EA2  0E00               	movlw	0
 28043  002EA4  217D               	addwfc	(??_configIO+1)& (0+255),w,b
 28044  002EA6  6EDA               	movwf	fsr2h,c
 28045  002EA8  0E06               	movlw	6
 28046  002EAA  18DE               	xorwf	postinc2,w,c
 28047  002EAC  A4D8               	btfss	status,2,c
 28048  002EAE  D062               	goto	l18491
 28049  002EB0                     u22890:
 28050                           
 28051                           ; BSR set to: 0
 28052                           ;main.c: 717: if (configs[i].an < 8U) {
 28053  002EB0  5183               	movf	configIO@i& (0+255),w,b
 28054  002EB2  0D04               	mullw	4
 28055  002EB4  CFF3 F07C          	movff	prodl,??_configIO
 28056  002EB8  0E03               	movlw	3
 28057  002EBA  277C               	addwf	??_configIO& (0+255),f,b
 28058  002EBC  517C               	movf	??_configIO& (0+255),w,b
 28059  002EBE  0F01               	addlw	low _configs
 28060  002EC0  6F7D               	movwf	(??_configIO+1)& (0+255),b
 28061  002EC2  C07D  FFF6         	movff	??_configIO+1,tblptrl
 28062  002EC6                     	if	1	;There is more than 1 active tblptr byte
 28063  002EC6  0E0F               	movlw	high __smallconst
 28064  002EC8  6EF7               	movwf	tblptrh,c
 28065  002ECA                     	endif
 28066  002ECA                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 28067  002ECA  6AF8               	clrf	tblptru,c
 28068  002ECC                     	endif
 28069  002ECC                     	if	0	;tblptru may be non-zero
 28070  002ECC                     	endif
 28071  002ECC  0E08               	movlw	8
 28072  002ECE  0008               	tblrd		*
 28073  002ED0  60F5               	cpfslt	tablat,c
 28074  002ED2  D01E               	goto	l18487
 28075                           
 28076                           ; BSR set to: 0
 28077                           ;main.c: 718: ANCON0 |= (1U << configs[i].an);
 28078  002ED4  5183               	movf	configIO@i& (0+255),w,b
 28079  002ED6  0D04               	mullw	4
 28080  002ED8  CFF3 F07C          	movff	prodl,??_configIO
 28081  002EDC  0E03               	movlw	3
 28082  002EDE  277C               	addwf	??_configIO& (0+255),f,b
 28083  002EE0  517C               	movf	??_configIO& (0+255),w,b
 28084  002EE2  0F01               	addlw	low _configs
 28085  002EE4  6F7D               	movwf	(??_configIO+1)& (0+255),b
 28086  002EE6  C07D  FFF6         	movff	??_configIO+1,tblptrl
 28087  002EEA                     	if	1	;There is more than 1 active tblptr byte
 28088  002EEA  0E0F               	movlw	high __smallconst
 28089  002EEC  6EF7               	movwf	tblptrh,c
 28090  002EEE                     	endif
 28091  002EEE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 28092  002EEE  6AF8               	clrf	tblptru,c
 28093  002EF0                     	endif
 28094  002EF0                     	if	0	;tblptru may be non-zero
 28095  002EF0                     	endif
 28096  002EF0  0008               	tblrd		*
 28097  002EF2  CFF5 F07E          	movff	tablat,??_configIO+2
 28098  002EF6  0E01               	movlw	1
 28099  002EF8  6F7F               	movwf	(??_configIO+3)& (0+255),b
 28100  002EFA  2B7E               	incf	(??_configIO+2)& (0+255),f,b
 28101  002EFC  D002               	goto	u22914
 28102  002EFE                     u22915:
 28103  002EFE  90D8               	bcf	status,0,c
 28104  002F00  377F               	rlcf	(??_configIO+3)& (0+255),f,b
 28105  002F02                     u22914:
 28106  002F02  2F7E               	decfsz	(??_configIO+2)& (0+255),f,b
 28107  002F04  D7FC               	goto	u22915
 28108  002F06  0100               	movlb	0	; () banked
 28109  002F08  517F               	movf	(??_configIO+3)& (0+255),w,b
 28110  002F0A  010F               	movlb	15	; () banked
 28111  002F0C  135D               	iorwf	93,f,b	;volatile
 28112                           
 28113                           ;main.c: 719: } else if (configs[i].an < 16U) {
 28114  002F0E  0012               	return	
 28115  002F10                     l18487:
 28116                           
 28117                           ; BSR set to: 0
 28118  002F10  5183               	movf	configIO@i& (0+255),w,b
 28119  002F12  0D04               	mullw	4
 28120  002F14  CFF3 F07C          	movff	prodl,??_configIO
 28121  002F18  0E03               	movlw	3
 28122  002F1A  277C               	addwf	??_configIO& (0+255),f,b
 28123  002F1C  517C               	movf	??_configIO& (0+255),w,b
 28124  002F1E  0F01               	addlw	low _configs
 28125  002F20  6F7D               	movwf	(??_configIO+1)& (0+255),b
 28126  002F22  C07D  FFF6         	movff	??_configIO+1,tblptrl
 28127  002F26                     	if	1	;There is more than 1 active tblptr byte
 28128  002F26  0E0F               	movlw	high __smallconst
 28129  002F28  6EF7               	movwf	tblptrh,c
 28130  002F2A                     	endif
 28131  002F2A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 28132  002F2A  6AF8               	clrf	tblptru,c
 28133  002F2C                     	endif
 28134  002F2C                     	if	0	;tblptru may be non-zero
 28135  002F2C                     	endif
 28136  002F2C  0E10               	movlw	16
 28137  002F2E  0008               	tblrd		*
 28138  002F30  60F5               	cpfslt	tablat,c
 28139  002F32  0012               	return	
 28140                           
 28141                           ; BSR set to: 0
 28142                           ;main.c: 720: ANCON1 |= (1U << (configs[i].an - 8U));
 28143  002F34  5183               	movf	configIO@i& (0+255),w,b
 28144  002F36  0D04               	mullw	4
 28145  002F38  CFF3 F07C          	movff	prodl,??_configIO
 28146  002F3C  0E03               	movlw	3
 28147  002F3E  277C               	addwf	??_configIO& (0+255),f,b
 28148  002F40  517C               	movf	??_configIO& (0+255),w,b
 28149  002F42  0F01               	addlw	low _configs
 28150  002F44  6F7D               	movwf	(??_configIO+1)& (0+255),b
 28151  002F46  C07D  FFF6         	movff	??_configIO+1,tblptrl
 28152  002F4A                     	if	1	;There is more than 1 active tblptr byte
 28153  002F4A  0E0F               	movlw	high __smallconst
 28154  002F4C  6EF7               	movwf	tblptrh,c
 28155  002F4E                     	endif
 28156  002F4E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 28157  002F4E  6AF8               	clrf	tblptru,c
 28158  002F50                     	endif
 28159  002F50                     	if	0	;tblptru may be non-zero
 28160  002F50                     	endif
 28161  002F50  0008               	tblrd		*
 28162  002F52  CFF5 F07E          	movff	tablat,??_configIO+2
 28163  002F56  0EF8               	movlw	248
 28164  002F58  277E               	addwf	(??_configIO+2)& (0+255),f,b
 28165  002F5A  0E01               	movlw	1
 28166  002F5C  6F7F               	movwf	(??_configIO+3)& (0+255),b
 28167  002F5E  2B7E               	incf	(??_configIO+2)& (0+255),f,b
 28168  002F60  D002               	goto	u22934
 28169  002F62                     u22935:
 28170  002F62  90D8               	bcf	status,0,c
 28171  002F64  377F               	rlcf	(??_configIO+3)& (0+255),f,b
 28172  002F66                     u22934:
 28173  002F66  2F7E               	decfsz	(??_configIO+2)& (0+255),f,b
 28174  002F68  D7FC               	goto	u22935
 28175  002F6A  0100               	movlb	0	; () banked
 28176  002F6C  517F               	movf	(??_configIO+3)& (0+255),w,b
 28177  002F6E  010F               	movlb	15	; () banked
 28178  002F70  135C               	iorwf	92,f,b	;volatile
 28179  002F72  0012               	return	
 28180  002F74                     l18491:
 28181                           
 28182                           ; BSR set to: 0
 28183                           ;main.c: 724: if (configs[i].an < 8U) {
 28184  002F74  5183               	movf	configIO@i& (0+255),w,b
 28185  002F76  0D04               	mullw	4
 28186  002F78  CFF3 F07C          	movff	prodl,??_configIO
 28187  002F7C  0E03               	movlw	3
 28188  002F7E  277C               	addwf	??_configIO& (0+255),f,b
 28189  002F80  517C               	movf	??_configIO& (0+255),w,b
 28190  002F82  0F01               	addlw	low _configs
 28191  002F84  6F7D               	movwf	(??_configIO+1)& (0+255),b
 28192  002F86  C07D  FFF6         	movff	??_configIO+1,tblptrl
 28193  002F8A                     	if	1	;There is more than 1 active tblptr byte
 28194  002F8A  0E0F               	movlw	high __smallconst
 28195  002F8C  6EF7               	movwf	tblptrh,c
 28196  002F8E                     	endif
 28197  002F8E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 28198  002F8E  6AF8               	clrf	tblptru,c
 28199  002F90                     	endif
 28200  002F90                     	if	0	;tblptru may be non-zero
 28201  002F90                     	endif
 28202  002F90  0E08               	movlw	8
 28203  002F92  0008               	tblrd		*
 28204  002F94  60F5               	cpfslt	tablat,c
 28205  002F96  D01F               	goto	l18495
 28206                           
 28207                           ; BSR set to: 0
 28208                           ;main.c: 725: ANCON0 &= ~(1U << configs[i].an);
 28209  002F98  5183               	movf	configIO@i& (0+255),w,b
 28210  002F9A  0D04               	mullw	4
 28211  002F9C  CFF3 F07C          	movff	prodl,??_configIO
 28212  002FA0  0E03               	movlw	3
 28213  002FA2  277C               	addwf	??_configIO& (0+255),f,b
 28214  002FA4  517C               	movf	??_configIO& (0+255),w,b
 28215  002FA6  0F01               	addlw	low _configs
 28216  002FA8  6F7D               	movwf	(??_configIO+1)& (0+255),b
 28217  002FAA  C07D  FFF6         	movff	??_configIO+1,tblptrl
 28218  002FAE                     	if	1	;There is more than 1 active tblptr byte
 28219  002FAE  0E0F               	movlw	high __smallconst
 28220  002FB0  6EF7               	movwf	tblptrh,c
 28221  002FB2                     	endif
 28222  002FB2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 28223  002FB2  6AF8               	clrf	tblptru,c
 28224  002FB4                     	endif
 28225  002FB4                     	if	0	;tblptru may be non-zero
 28226  002FB4                     	endif
 28227  002FB4  0008               	tblrd		*
 28228  002FB6  CFF5 F07E          	movff	tablat,??_configIO+2
 28229  002FBA  0E01               	movlw	1
 28230  002FBC  6F7F               	movwf	(??_configIO+3)& (0+255),b
 28231  002FBE  2B7E               	incf	(??_configIO+2)& (0+255),f,b
 28232  002FC0  D002               	goto	u22954
 28233  002FC2                     u22955:
 28234  002FC2  90D8               	bcf	status,0,c
 28235  002FC4  377F               	rlcf	(??_configIO+3)& (0+255),f,b
 28236  002FC6                     u22954:
 28237  002FC6  2F7E               	decfsz	(??_configIO+2)& (0+255),f,b
 28238  002FC8  D7FC               	goto	u22955
 28239  002FCA  0100               	movlb	0	; () banked
 28240  002FCC  517F               	movf	(??_configIO+3)& (0+255),w,b
 28241  002FCE  0AFF               	xorlw	255
 28242  002FD0  010F               	movlb	15	; () banked
 28243  002FD2  175D               	andwf	93,f,b	;volatile
 28244                           
 28245                           ;main.c: 726: } else if (configs[i].an < 16U) {
 28246  002FD4  0012               	return	
 28247  002FD6                     l18495:
 28248                           
 28249                           ; BSR set to: 0
 28250  002FD6  5183               	movf	configIO@i& (0+255),w,b
 28251  002FD8  0D04               	mullw	4
 28252  002FDA  CFF3 F07C          	movff	prodl,??_configIO
 28253  002FDE  0E03               	movlw	3
 28254  002FE0  277C               	addwf	??_configIO& (0+255),f,b
 28255  002FE2  517C               	movf	??_configIO& (0+255),w,b
 28256  002FE4  0F01               	addlw	low _configs
 28257  002FE6  6F7D               	movwf	(??_configIO+1)& (0+255),b
 28258  002FE8  C07D  FFF6         	movff	??_configIO+1,tblptrl
 28259  002FEC                     	if	1	;There is more than 1 active tblptr byte
 28260  002FEC  0E0F               	movlw	high __smallconst
 28261  002FEE  6EF7               	movwf	tblptrh,c
 28262  002FF0                     	endif
 28263  002FF0                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 28264  002FF0  6AF8               	clrf	tblptru,c
 28265  002FF2                     	endif
 28266  002FF2                     	if	0	;tblptru may be non-zero
 28267  002FF2                     	endif
 28268  002FF2  0E10               	movlw	16
 28269  002FF4  0008               	tblrd		*
 28270  002FF6  60F5               	cpfslt	tablat,c
 28271  002FF8  0012               	return	
 28272                           
 28273                           ; BSR set to: 0
 28274                           ;main.c: 727: ANCON1 &= ~(1U << (configs[i].an - 8U));
 28275  002FFA  5183               	movf	configIO@i& (0+255),w,b
 28276  002FFC  0D04               	mullw	4
 28277  002FFE  CFF3 F07C          	movff	prodl,??_configIO
 28278  003002  0E03               	movlw	3
 28279  003004  277C               	addwf	??_configIO& (0+255),f,b
 28280  003006  517C               	movf	??_configIO& (0+255),w,b
 28281  003008  0F01               	addlw	low _configs
 28282  00300A  6F7D               	movwf	(??_configIO+1)& (0+255),b
 28283  00300C  C07D  FFF6         	movff	??_configIO+1,tblptrl
 28284  003010                     	if	1	;There is more than 1 active tblptr byte
 28285  003010  0E0F               	movlw	high __smallconst
 28286  003012  6EF7               	movwf	tblptrh,c
 28287  003014                     	endif
 28288  003014                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 28289  003014  6AF8               	clrf	tblptru,c
 28290  003016                     	endif
 28291  003016                     	if	0	;tblptru may be non-zero
 28292  003016                     	endif
 28293  003016  0008               	tblrd		*
 28294  003018  CFF5 F07E          	movff	tablat,??_configIO+2
 28295  00301C  0EF8               	movlw	248
 28296  00301E  277E               	addwf	(??_configIO+2)& (0+255),f,b
 28297  003020  0E01               	movlw	1
 28298  003022  6F7F               	movwf	(??_configIO+3)& (0+255),b
 28299  003024  2B7E               	incf	(??_configIO+2)& (0+255),f,b
 28300  003026  D002               	goto	u22974
 28301  003028                     u22975:
 28302  003028  90D8               	bcf	status,0,c
 28303  00302A  377F               	rlcf	(??_configIO+3)& (0+255),f,b
 28304  00302C                     u22974:
 28305  00302C  2F7E               	decfsz	(??_configIO+2)& (0+255),f,b
 28306  00302E  D7FC               	goto	u22975
 28307  003030  0100               	movlb	0	; () banked
 28308  003032  517F               	movf	(??_configIO+3)& (0+255),w,b
 28309  003034  0AFF               	xorlw	255
 28310  003036  010F               	movlb	15	; () banked
 28311  003038  175C               	andwf	92,f,b	;volatile
 28312  00303A  0012               	return		;funcret
 28313  00303C                     __end_of_configIO:
 28314                           	callstack 0
 28315                           
 28316 ;; *************** function _setDigitalOutput *****************
 28317 ;; Defined at:
 28318 ;;		line 227 in file "../../github/CANMIOfirmware/digitalOut.c"
 28319 ;; Parameters:    Size  Location     Type
 28320 ;;  io              1    wreg     unsigned char 
 28321 ;;  state           1   23[BANK0 ] unsigned char 
 28322 ;; Auto vars:     Size  Location     Type
 28323 ;;  io              1   27[BANK0 ] unsigned char 
 28324 ;;  pinState        1   26[BANK0 ] unsigned char 
 28325 ;; Return value:  Size  Location     Type
 28326 ;;                  1    wreg      void 
 28327 ;; Registers used:
 28328 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 28329 ;; Tracked objects:
 28330 ;;		On entry : 3F/0
 28331 ;;		On exit  : 3F/0
 28332 ;;		Unchanged: 0/0
 28333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 28334 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 28335 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 28336 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 28337 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 28338 ;;Total ram usage:        5 bytes
 28339 ;; Hardware stack levels used: 1
 28340 ;; Hardware stack levels required when called: 9
 28341 ;; This function calls:
 28342 ;;		_setOutputPin
 28343 ;; This function is called by:
 28344 ;;		_configIO
 28345 ;;		_setOutputPosition
 28346 ;; This function uses a non-reentrant model
 28347 ;;
 28348                           
 28349                           	psect	text128
 28350  007F78                     __ptext128:
 28351                           	callstack 0
 28352  007F78                     _setDigitalOutput:
 28353                           	callstack 18
 28354                           
 28355                           ;incstack = 0
 28356                           ;setDigitalOutput@io stored from wreg
 28357  007F78  6F7B               	movwf	setDigitalOutput@io& (0+255),b
 28358                           
 28359                           ;digitalOut.c: 228: BOOL pinState;;digitalOut.c: 229: switch (state) {
 28360  007F7A  D04A               	goto	l18305
 28361  007F7C                     l18289:
 28362                           
 28363                           ; BSR set to: 0
 28364                           ;digitalOut.c: 231: state = 2U;
 28365  007F7C  0E02               	movlw	2
 28366  007F7E  6F77               	movwf	setDigitalOutput@state& (0+255),b
 28367  007F80                     l18291:
 28368                           
 28369                           ; BSR set to: 0
 28370                           ;digitalOut.c: 234: case 2U:;digitalOut.c: 235: pinState = (BOOL)(state == 1U);
 28371  007F80  0577               	decf	setDigitalOutput@state& (0+255),w,b
 28372  007F82  A4D8               	btfss	status,2,c
 28373  007F84  D002               	goto	u22550
 28374  007F86  0E01               	movlw	1
 28375  007F88  D001               	goto	u22560
 28376  007F8A                     u22550:
 28377  007F8A  0E00               	movlw	0
 28378  007F8C                     u22560:
 28379  007F8C  6F7A               	movwf	setDigitalOutput@pinState& (0+255),b
 28380                           
 28381                           ; BSR set to: 0
 28382                           ;digitalOut.c: 239: if (NV->io[io].flags & 0x20U) {
 28383  007F8E  517B               	movf	setDigitalOutput@io& (0+255),w,b
 28384  007F90  0D07               	mullw	7
 28385  007F92  C0EC  F078         	movff	_NV,??_setDigitalOutput
 28386  007F96  C0ED  F079         	movff	_NV+1,??_setDigitalOutput+1
 28387  007F9A  50F3               	movf	243,w,c
 28388  007F9C  2778               	addwf	??_setDigitalOutput& (0+255),f,b
 28389  007F9E  50F4               	movf	244,w,c
 28390  007FA0  2379               	addwfc	(??_setDigitalOutput+1)& (0+255),f,b
 28391  007FA2  0E11               	movlw	17
 28392  007FA4  2578               	addwf	??_setDigitalOutput& (0+255),w,b
 28393  007FA6  6ED9               	movwf	fsr2l,c
 28394  007FA8  0E00               	movlw	0
 28395  007FAA  2179               	addwfc	(??_setDigitalOutput+1)& (0+255),w,b
 28396  007FAC  6EDA               	movwf	fsr2h,c
 28397  007FAE  AADF               	btfss	indf2,5,c
 28398  007FB0  D00B               	goto	l18297
 28399                           
 28400                           ; BSR set to: 0
 28401                           ;digitalOut.c: 240: setOutputPin(io, (BOOL)(! pinState));
 28402  007FB2  517A               	movf	setDigitalOutput@pinState& (0+255),w,b
 28403  007FB4  A4D8               	btfss	status,2,c
 28404  007FB6  D002               	goto	u22580
 28405  007FB8  0E01               	movlw	1
 28406  007FBA  D001               	goto	u22590
 28407  007FBC                     u22580:
 28408  007FBC  0E00               	movlw	0
 28409  007FBE                     u22590:
 28410  007FBE  6F71               	movwf	setOutputPin@state& (0+255),b
 28411  007FC0  517B               	movf	setDigitalOutput@io& (0+255),w,b
 28412  007FC2  EC90  F031         	call	_setOutputPin
 28413                           
 28414                           ;digitalOut.c: 241: } else {
 28415  007FC6  0012               	return	
 28416  007FC8                     l18297:
 28417                           
 28418                           ; BSR set to: 0
 28419                           ;digitalOut.c: 242: setOutputPin(io, pinState);
 28420  007FC8  C07A  F071         	movff	setDigitalOutput@pinState,setOutputPin@state
 28421  007FCC  517B               	movf	setDigitalOutput@io& (0+255),w,b
 28422  007FCE  EC90  F031         	call	_setOutputPin
 28423  007FD2  0012               	return	
 28424  007FD4                     l18299:
 28425                           
 28426                           ; BSR set to: 0
 28427                           ;digitalOut.c: 246: flashDelays[io] = NV->io[io].nv_io.nv_output.output_flash_period;
 28428  007FD4  517B               	movf	setDigitalOutput@io& (0+255),w,b
 28429  007FD6  0D07               	mullw	7
 28430  007FD8  C0EC  F078         	movff	_NV,??_setDigitalOutput
 28431  007FDC  C0ED  F079         	movff	_NV+1,??_setDigitalOutput+1
 28432  007FE0  50F3               	movf	243,w,c
 28433  007FE2  2778               	addwf	??_setDigitalOutput& (0+255),f,b
 28434  007FE4  50F4               	movf	244,w,c
 28435  007FE6  2379               	addwfc	(??_setDigitalOutput+1)& (0+255),f,b
 28436  007FE8  0E13               	movlw	19
 28437  007FEA  2578               	addwf	??_setDigitalOutput& (0+255),w,b
 28438  007FEC  6ED9               	movwf	fsr2l,c
 28439  007FEE  0E00               	movlw	0
 28440  007FF0  2179               	addwfc	(??_setDigitalOutput+1)& (0+255),w,b
 28441  007FF2  6EDA               	movwf	fsr2h,c
 28442  007FF4  0E60               	movlw	low _flashDelays
 28443  007FF6  257B               	addwf	setDigitalOutput@io& (0+255),w,b
 28444  007FF8  6EE1               	movwf	fsr1l,c
 28445  007FFA  6AE2               	clrf	fsr1h,c
 28446  007FFC  0E01               	movlw	high _flashDelays
 28447  007FFE  22E2               	addwfc	fsr1h,f,c
 28448  008000  CFDF FFE7          	movff	indf2,indf1
 28449                           
 28450                           ; BSR set to: 0
 28451                           ;digitalOut.c: 247: setOutputPin(io, 1);
 28452  008004  0E01               	movlw	1
 28453  008006  6F71               	movwf	setOutputPin@state& (0+255),b
 28454  008008  517B               	movf	setDigitalOutput@io& (0+255),w,b
 28455  00800A  EC90  F031         	call	_setOutputPin
 28456                           
 28457                           ;digitalOut.c: 248: break;
 28458  00800E  0012               	return	
 28459  008010                     l18305:
 28460  008010  0100               	movlb	0	; () banked
 28461  008012  5177               	movf	setDigitalOutput@state& (0+255),w,b
 28462                           
 28463                           ; Switch size 1, requested type "simple"
 28464                           ; Number of cases is 3, Range of values is 1 to 3
 28465                           ; switch strategies available:
 28466                           ; Name         Instructions Cycles
 28467                           ; simple_byte           10     6 (average)
 28468                           ;	Chosen strategy is simple_byte
 28469  008014  0A01               	xorlw	1	; case 1
 28470  008016  B4D8               	btfsc	status,2,c
 28471  008018  D7B3               	goto	l18291
 28472  00801A  0A03               	xorlw	3	; case 2
 28473  00801C  B4D8               	btfsc	status,2,c
 28474  00801E  D7B0               	goto	l18291
 28475  008020  0A01               	xorlw	1	; case 3
 28476  008022  B4D8               	btfsc	status,2,c
 28477  008024  D7D7               	goto	l18299
 28478  008026  D7AA               	goto	l18289
 28479  008028                     __end_of_setDigitalOutput:
 28480                           	callstack 0
 28481                           
 28482 ;; *************** function _setOutputPin *****************
 28483 ;; Defined at:
 28484 ;;		line 257 in file "../../github/CANMIOfirmware/digitalOut.c"
 28485 ;; Parameters:    Size  Location     Type
 28486 ;;  io              1    wreg     unsigned char 
 28487 ;;  state           1   17[BANK0 ] unsigned char 
 28488 ;; Auto vars:     Size  Location     Type
 28489 ;;  io              1   22[BANK0 ] unsigned char 
 28490 ;; Return value:  Size  Location     Type
 28491 ;;                  1    wreg      void 
 28492 ;; Registers used:
 28493 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 28494 ;; Tracked objects:
 28495 ;;		On entry : 3F/0
 28496 ;;		On exit  : 3F/0
 28497 ;;		Unchanged: 0/0
 28498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 28499 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 28500 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 28501 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 28502 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 28503 ;;Total ram usage:        6 bytes
 28504 ;; Hardware stack levels used: 1
 28505 ;; Hardware stack levels required when called: 8
 28506 ;; This function calls:
 28507 ;;		Nothing
 28508 ;; This function is called by:
 28509 ;;		_startDigitalOutput
 28510 ;;		_processOutputs
 28511 ;;		_setDigitalOutput
 28512 ;;		_setOutputPosition
 28513 ;;		_setupTimer1
 28514 ;;		_setupTimer3
 28515 ;; This function uses a non-reentrant model
 28516 ;;
 28517                           
 28518                           	psect	text129
 28519  006320                     __ptext129:
 28520                           	callstack 0
 28521  006320                     _setOutputPin:
 28522                           	callstack 20
 28523                           
 28524                           ; BSR set to: 0
 28525                           ;incstack = 0
 28526                           ;setOutputPin@io stored from wreg
 28527  006320  6F76               	movwf	setOutputPin@io& (0+255),b
 28528                           
 28529                           ;digitalOut.c: 258: switch (configs[io].port) {
 28530  006322  D0BA               	goto	l18117
 28531  006324                     l18097:
 28532                           
 28533                           ; BSR set to: 0
 28534                           ;digitalOut.c: 260: if (state) {
 28535  006324  5171               	movf	setOutputPin@state& (0+255),w,b
 28536  006326  B4D8               	btfsc	status,2,c
 28537  006328  D01D               	goto	l18101
 28538                           
 28539                           ; BSR set to: 0
 28540                           ;digitalOut.c: 262: LATA |= (1U<<configs[io].no);
 28541  00632A  5176               	movf	setOutputPin@io& (0+255),w,b
 28542  00632C  0D04               	mullw	4
 28543  00632E  CFF3 F072          	movff	prodl,??_setOutputPin
 28544  006332  0E02               	movlw	2
 28545  006334  2772               	addwf	??_setOutputPin& (0+255),f,b
 28546  006336  5172               	movf	??_setOutputPin& (0+255),w,b
 28547  006338  0F01               	addlw	low _configs
 28548  00633A  6F73               	movwf	(??_setOutputPin+1)& (0+255),b
 28549  00633C  C073  FFF6         	movff	??_setOutputPin+1,tblptrl
 28550  006340                     	if	1	;There is more than 1 active tblptr byte
 28551  006340  0E0F               	movlw	high __smallconst
 28552  006342  6EF7               	movwf	tblptrh,c
 28553  006344                     	endif
 28554  006344                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 28555  006344  6AF8               	clrf	tblptru,c
 28556  006346                     	endif
 28557  006346                     	if	0	;tblptru may be non-zero
 28558  006346                     	endif
 28559  006346  0008               	tblrd		*
 28560  006348  CFF5 F074          	movff	tablat,??_setOutputPin+2
 28561  00634C  0E01               	movlw	1
 28562  00634E  6F75               	movwf	(??_setOutputPin+3)& (0+255),b
 28563  006350  2B74               	incf	(??_setOutputPin+2)& (0+255),f,b
 28564  006352  D002               	goto	u22204
 28565  006354                     u22205:
 28566  006354  90D8               	bcf	status,0,c
 28567  006356  3775               	rlcf	(??_setOutputPin+3)& (0+255),f,b
 28568  006358                     u22204:
 28569  006358  2F74               	decfsz	(??_setOutputPin+2)& (0+255),f,b
 28570  00635A  D7FC               	goto	u22205
 28571  00635C  0100               	movlb	0	; () banked
 28572  00635E  5175               	movf	(??_setOutputPin+3)& (0+255),w,b
 28573  006360  1289               	iorwf	137,f,c	;volatile
 28574                           
 28575                           ;digitalOut.c: 263: } else {
 28576  006362  0012               	return	
 28577  006364                     l18101:
 28578                           
 28579                           ; BSR set to: 0
 28580                           ;digitalOut.c: 265: LATA &= ~(1U<<configs[io].no);
 28581  006364  5176               	movf	setOutputPin@io& (0+255),w,b
 28582  006366  0D04               	mullw	4
 28583  006368  CFF3 F072          	movff	prodl,??_setOutputPin
 28584  00636C  0E02               	movlw	2
 28585  00636E  2772               	addwf	??_setOutputPin& (0+255),f,b
 28586  006370  5172               	movf	??_setOutputPin& (0+255),w,b
 28587  006372  0F01               	addlw	low _configs
 28588  006374  6F73               	movwf	(??_setOutputPin+1)& (0+255),b
 28589  006376  C073  FFF6         	movff	??_setOutputPin+1,tblptrl
 28590  00637A                     	if	1	;There is more than 1 active tblptr byte
 28591  00637A  0E0F               	movlw	high __smallconst
 28592  00637C  6EF7               	movwf	tblptrh,c
 28593  00637E                     	endif
 28594  00637E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 28595  00637E  6AF8               	clrf	tblptru,c
 28596  006380                     	endif
 28597  006380                     	if	0	;tblptru may be non-zero
 28598  006380                     	endif
 28599  006380  0008               	tblrd		*
 28600  006382  CFF5 F074          	movff	tablat,??_setOutputPin+2
 28601  006386  0E01               	movlw	1
 28602  006388  6F75               	movwf	(??_setOutputPin+3)& (0+255),b
 28603  00638A  2B74               	incf	(??_setOutputPin+2)& (0+255),f,b
 28604  00638C  D002               	goto	u22214
 28605  00638E                     u22215:
 28606  00638E  90D8               	bcf	status,0,c
 28607  006390  3775               	rlcf	(??_setOutputPin+3)& (0+255),f,b
 28608  006392                     u22214:
 28609  006392  2F74               	decfsz	(??_setOutputPin+2)& (0+255),f,b
 28610  006394  D7FC               	goto	u22215
 28611  006396  0100               	movlb	0	; () banked
 28612  006398  5175               	movf	(??_setOutputPin+3)& (0+255),w,b
 28613  00639A  0AFF               	xorlw	255
 28614  00639C  1689               	andwf	137,f,c	;volatile
 28615  00639E  0012               	return	
 28616  0063A0                     l18103:
 28617                           
 28618                           ; BSR set to: 0
 28619                           ;digitalOut.c: 269: if (state) {
 28620  0063A0  5171               	movf	setOutputPin@state& (0+255),w,b
 28621  0063A2  B4D8               	btfsc	status,2,c
 28622  0063A4  D01D               	goto	l18107
 28623                           
 28624                           ; BSR set to: 0
 28625                           ;digitalOut.c: 271: LATB |= (1U<<configs[io].no);
 28626  0063A6  5176               	movf	setOutputPin@io& (0+255),w,b
 28627  0063A8  0D04               	mullw	4
 28628  0063AA  CFF3 F072          	movff	prodl,??_setOutputPin
 28629  0063AE  0E02               	movlw	2
 28630  0063B0  2772               	addwf	??_setOutputPin& (0+255),f,b
 28631  0063B2  5172               	movf	??_setOutputPin& (0+255),w,b
 28632  0063B4  0F01               	addlw	low _configs
 28633  0063B6  6F73               	movwf	(??_setOutputPin+1)& (0+255),b
 28634  0063B8  C073  FFF6         	movff	??_setOutputPin+1,tblptrl
 28635  0063BC                     	if	1	;There is more than 1 active tblptr byte
 28636  0063BC  0E0F               	movlw	high __smallconst
 28637  0063BE  6EF7               	movwf	tblptrh,c
 28638  0063C0                     	endif
 28639  0063C0                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 28640  0063C0  6AF8               	clrf	tblptru,c
 28641  0063C2                     	endif
 28642  0063C2                     	if	0	;tblptru may be non-zero
 28643  0063C2                     	endif
 28644  0063C2  0008               	tblrd		*
 28645  0063C4  CFF5 F074          	movff	tablat,??_setOutputPin+2
 28646  0063C8  0E01               	movlw	1
 28647  0063CA  6F75               	movwf	(??_setOutputPin+3)& (0+255),b
 28648  0063CC  2B74               	incf	(??_setOutputPin+2)& (0+255),f,b
 28649  0063CE  D002               	goto	u22234
 28650  0063D0                     u22235:
 28651  0063D0  90D8               	bcf	status,0,c
 28652  0063D2  3775               	rlcf	(??_setOutputPin+3)& (0+255),f,b
 28653  0063D4                     u22234:
 28654  0063D4  2F74               	decfsz	(??_setOutputPin+2)& (0+255),f,b
 28655  0063D6  D7FC               	goto	u22235
 28656  0063D8  0100               	movlb	0	; () banked
 28657  0063DA  5175               	movf	(??_setOutputPin+3)& (0+255),w,b
 28658  0063DC  128A               	iorwf	138,f,c	;volatile
 28659                           
 28660                           ;digitalOut.c: 272: } else {
 28661  0063DE  0012               	return	
 28662  0063E0                     l18107:
 28663                           
 28664                           ; BSR set to: 0
 28665                           ;digitalOut.c: 274: LATB &= ~(1U<<configs[io].no);
 28666  0063E0  5176               	movf	setOutputPin@io& (0+255),w,b
 28667  0063E2  0D04               	mullw	4
 28668  0063E4  CFF3 F072          	movff	prodl,??_setOutputPin
 28669  0063E8  0E02               	movlw	2
 28670  0063EA  2772               	addwf	??_setOutputPin& (0+255),f,b
 28671  0063EC  5172               	movf	??_setOutputPin& (0+255),w,b
 28672  0063EE  0F01               	addlw	low _configs
 28673  0063F0  6F73               	movwf	(??_setOutputPin+1)& (0+255),b
 28674  0063F2  C073  FFF6         	movff	??_setOutputPin+1,tblptrl
 28675  0063F6                     	if	1	;There is more than 1 active tblptr byte
 28676  0063F6  0E0F               	movlw	high __smallconst
 28677  0063F8  6EF7               	movwf	tblptrh,c
 28678  0063FA                     	endif
 28679  0063FA                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 28680  0063FA  6AF8               	clrf	tblptru,c
 28681  0063FC                     	endif
 28682  0063FC                     	if	0	;tblptru may be non-zero
 28683  0063FC                     	endif
 28684  0063FC  0008               	tblrd		*
 28685  0063FE  CFF5 F074          	movff	tablat,??_setOutputPin+2
 28686  006402  0E01               	movlw	1
 28687  006404  6F75               	movwf	(??_setOutputPin+3)& (0+255),b
 28688  006406  2B74               	incf	(??_setOutputPin+2)& (0+255),f,b
 28689  006408  D002               	goto	u22244
 28690  00640A                     u22245:
 28691  00640A  90D8               	bcf	status,0,c
 28692  00640C  3775               	rlcf	(??_setOutputPin+3)& (0+255),f,b
 28693  00640E                     u22244:
 28694  00640E  2F74               	decfsz	(??_setOutputPin+2)& (0+255),f,b
 28695  006410  D7FC               	goto	u22245
 28696  006412  0100               	movlb	0	; () banked
 28697  006414  5175               	movf	(??_setOutputPin+3)& (0+255),w,b
 28698  006416  0AFF               	xorlw	255
 28699  006418  168A               	andwf	138,f,c	;volatile
 28700  00641A  0012               	return	
 28701  00641C                     l18109:
 28702                           
 28703                           ; BSR set to: 0
 28704                           ;digitalOut.c: 278: if (state) {
 28705  00641C  5171               	movf	setOutputPin@state& (0+255),w,b
 28706  00641E  B4D8               	btfsc	status,2,c
 28707  006420  D01D               	goto	l18113
 28708                           
 28709                           ; BSR set to: 0
 28710                           ;digitalOut.c: 280: LATC |= (1U<<configs[io].no);
 28711  006422  5176               	movf	setOutputPin@io& (0+255),w,b
 28712  006424  0D04               	mullw	4
 28713  006426  CFF3 F072          	movff	prodl,??_setOutputPin
 28714  00642A  0E02               	movlw	2
 28715  00642C  2772               	addwf	??_setOutputPin& (0+255),f,b
 28716  00642E  5172               	movf	??_setOutputPin& (0+255),w,b
 28717  006430  0F01               	addlw	low _configs
 28718  006432  6F73               	movwf	(??_setOutputPin+1)& (0+255),b
 28719  006434  C073  FFF6         	movff	??_setOutputPin+1,tblptrl
 28720  006438                     	if	1	;There is more than 1 active tblptr byte
 28721  006438  0E0F               	movlw	high __smallconst
 28722  00643A  6EF7               	movwf	tblptrh,c
 28723  00643C                     	endif
 28724  00643C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 28725  00643C  6AF8               	clrf	tblptru,c
 28726  00643E                     	endif
 28727  00643E                     	if	0	;tblptru may be non-zero
 28728  00643E                     	endif
 28729  00643E  0008               	tblrd		*
 28730  006440  CFF5 F074          	movff	tablat,??_setOutputPin+2
 28731  006444  0E01               	movlw	1
 28732  006446  6F75               	movwf	(??_setOutputPin+3)& (0+255),b
 28733  006448  2B74               	incf	(??_setOutputPin+2)& (0+255),f,b
 28734  00644A  D002               	goto	u22264
 28735  00644C                     u22265:
 28736  00644C  90D8               	bcf	status,0,c
 28737  00644E  3775               	rlcf	(??_setOutputPin+3)& (0+255),f,b
 28738  006450                     u22264:
 28739  006450  2F74               	decfsz	(??_setOutputPin+2)& (0+255),f,b
 28740  006452  D7FC               	goto	u22265
 28741  006454  0100               	movlb	0	; () banked
 28742  006456  5175               	movf	(??_setOutputPin+3)& (0+255),w,b
 28743  006458  128B               	iorwf	139,f,c	;volatile
 28744                           
 28745                           ;digitalOut.c: 281: } else {
 28746  00645A  0012               	return	
 28747  00645C                     l18113:
 28748                           
 28749                           ; BSR set to: 0
 28750                           ;digitalOut.c: 283: LATC &= ~(1U<<configs[io].no);
 28751  00645C  5176               	movf	setOutputPin@io& (0+255),w,b
 28752  00645E  0D04               	mullw	4
 28753  006460  CFF3 F072          	movff	prodl,??_setOutputPin
 28754  006464  0E02               	movlw	2
 28755  006466  2772               	addwf	??_setOutputPin& (0+255),f,b
 28756  006468  5172               	movf	??_setOutputPin& (0+255),w,b
 28757  00646A  0F01               	addlw	low _configs
 28758  00646C  6F73               	movwf	(??_setOutputPin+1)& (0+255),b
 28759  00646E  C073  FFF6         	movff	??_setOutputPin+1,tblptrl
 28760  006472                     	if	1	;There is more than 1 active tblptr byte
 28761  006472  0E0F               	movlw	high __smallconst
 28762  006474  6EF7               	movwf	tblptrh,c
 28763  006476                     	endif
 28764  006476                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 28765  006476  6AF8               	clrf	tblptru,c
 28766  006478                     	endif
 28767  006478                     	if	0	;tblptru may be non-zero
 28768  006478                     	endif
 28769  006478  0008               	tblrd		*
 28770  00647A  CFF5 F074          	movff	tablat,??_setOutputPin+2
 28771  00647E  0E01               	movlw	1
 28772  006480  6F75               	movwf	(??_setOutputPin+3)& (0+255),b
 28773  006482  2B74               	incf	(??_setOutputPin+2)& (0+255),f,b
 28774  006484  D002               	goto	u22274
 28775  006486                     u22275:
 28776  006486  90D8               	bcf	status,0,c
 28777  006488  3775               	rlcf	(??_setOutputPin+3)& (0+255),f,b
 28778  00648A                     u22274:
 28779  00648A  2F74               	decfsz	(??_setOutputPin+2)& (0+255),f,b
 28780  00648C  D7FC               	goto	u22275
 28781  00648E  0100               	movlb	0	; () banked
 28782  006490  5175               	movf	(??_setOutputPin+3)& (0+255),w,b
 28783  006492  0AFF               	xorlw	255
 28784  006494  168B               	andwf	139,f,c	;volatile
 28785  006496  0012               	return	
 28786  006498                     l18117:
 28787  006498  0100               	movlb	0	; () banked
 28788  00649A  5176               	movf	setOutputPin@io& (0+255),w,b
 28789  00649C  0D04               	mullw	4
 28790  00649E  CFF3 F072          	movff	prodl,??_setOutputPin
 28791  0064A2  0E01               	movlw	1
 28792  0064A4  2772               	addwf	??_setOutputPin& (0+255),f,b
 28793  0064A6  5172               	movf	??_setOutputPin& (0+255),w,b
 28794  0064A8  0F01               	addlw	low _configs
 28795  0064AA  6F73               	movwf	(??_setOutputPin+1)& (0+255),b
 28796  0064AC  C073  FFF6         	movff	??_setOutputPin+1,tblptrl
 28797  0064B0                     	if	1	;There is more than 1 active tblptr byte
 28798  0064B0  0E0F               	movlw	high __smallconst
 28799  0064B2  6EF7               	movwf	tblptrh,c
 28800  0064B4                     	endif
 28801  0064B4                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 28802  0064B4  6AF8               	clrf	tblptru,c
 28803  0064B6                     	endif
 28804  0064B6                     	if	0	;tblptru may be non-zero
 28805  0064B6                     	endif
 28806  0064B6  0008               	tblrd		*
 28807  0064B8  50F5               	movf	tablat,w,c
 28808                           
 28809                           ; Switch size 1, requested type "simple"
 28810                           ; Number of cases is 3, Range of values is 65 to 67
 28811                           ; switch strategies available:
 28812                           ; Name         Instructions Cycles
 28813                           ; simple_byte           10     6 (average)
 28814                           ;	Chosen strategy is simple_byte
 28815  0064BA  0A41               	xorlw	65	; case 65
 28816  0064BC  B4D8               	btfsc	status,2,c
 28817  0064BE  D732               	goto	l18097
 28818  0064C0  0A03               	xorlw	3	; case 66
 28819  0064C2  B4D8               	btfsc	status,2,c
 28820  0064C4  D76D               	goto	l18103
 28821  0064C6  0A01               	xorlw	1	; case 67
 28822  0064C8  A4D8               	btfss	status,2,c
 28823  0064CA  0012               	return	
 28824  0064CC  D7A7               	goto	l18109
 28825  0064CE                     __end_of_setOutputPin:
 28826                           	callstack 0
 28827                           
 28828 ;; *************** function _factoryResetGlobalNv *****************
 28829 ;; Defined at:
 28830 ;;		line 195 in file "../../github/CANMIOfirmware/mioNv.c"
 28831 ;; Parameters:    Size  Location     Type
 28832 ;;		None
 28833 ;; Auto vars:     Size  Location     Type
 28834 ;;		None
 28835 ;; Return value:  Size  Location     Type
 28836 ;;                  1    wreg      void 
 28837 ;; Registers used:
 28838 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 28839 ;; Tracked objects:
 28840 ;;		On entry : 0/0
 28841 ;;		On exit  : 3F/0
 28842 ;;		Unchanged: 0/0
 28843 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 28844 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 28845 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 28846 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 28847 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 28848 ;;Total ram usage:        0 bytes
 28849 ;; Hardware stack levels used: 1
 28850 ;; Hardware stack levels required when called: 15
 28851 ;; This function calls:
 28852 ;;		_loadNvCache
 28853 ;;		_writeFlashByte
 28854 ;; This function is called by:
 28855 ;;		_factoryResetFlash
 28856 ;; This function uses a non-reentrant model
 28857 ;;
 28858                           
 28859                           	psect	text130
 28860  008AC4                     __ptext130:
 28861                           	callstack 0
 28862  008AC4                     _factoryResetGlobalNv:
 28863                           	callstack 13
 28864                           
 28865                           ;mioNv.c: 196: writeFlashByte((BYTE*)(0xFF80U + 1U), (BYTE)0);
 28866                           
 28867                           ; BSR set to: 0
 28868                           ;incstack = 0
 28869  008AC4  0E81               	movlw	129
 28870  008AC6  0100               	movlb	0	; () banked
 28871  008AC8  6F87               	movwf	writeFlashByte@flashAddr& (0+255),b
 28872  008ACA  0EFF               	movlw	255
 28873  008ACC  6F88               	movwf	(writeFlashByte@flashAddr+1)& (0+255),b
 28874  008ACE  5187               	movf	writeFlashByte@flashAddr& (0+255),w,b
 28875  008AD0  1188               	iorwf	(writeFlashByte@flashAddr+1)& (0+255),w,b
 28876  008AD2  A4D8               	btfss	status,2,c
 28877  008AD4  0E20               	movlw	32
 28878  008AD6  6F89               	movwf	(writeFlashByte@flashAddr+2)& (0+255),b
 28879  008AD8  0E00               	movlw	0
 28880  008ADA  6F8A               	movwf	writeFlashByte@flashData& (0+255),b
 28881  008ADC  ECC0  F052         	call	_writeFlashByte	;wreg free
 28882                           
 28883                           ;mioNv.c: 197: writeFlashByte((BYTE*)(0xFF80U + 2U), (BYTE)0);
 28884  008AE0  0E82               	movlw	130
 28885  008AE2  6F87               	movwf	writeFlashByte@flashAddr& (0+255),b
 28886  008AE4  0EFF               	movlw	255
 28887  008AE6  6F88               	movwf	(writeFlashByte@flashAddr+1)& (0+255),b
 28888  008AE8  5187               	movf	writeFlashByte@flashAddr& (0+255),w,b
 28889  008AEA  1188               	iorwf	(writeFlashByte@flashAddr+1)& (0+255),w,b
 28890  008AEC  A4D8               	btfss	status,2,c
 28891  008AEE  0E20               	movlw	32
 28892  008AF0  6F89               	movwf	(writeFlashByte@flashAddr+2)& (0+255),b
 28893  008AF2  0E00               	movlw	0
 28894  008AF4  6F8A               	movwf	writeFlashByte@flashData& (0+255),b
 28895  008AF6  ECC0  F052         	call	_writeFlashByte	;wreg free
 28896                           
 28897                           ;mioNv.c: 198: writeFlashByte((BYTE*)(0xFF80U + 3U), (BYTE)234U);
 28898  008AFA  0E83               	movlw	131
 28899  008AFC  6F87               	movwf	writeFlashByte@flashAddr& (0+255),b
 28900  008AFE  0EFF               	movlw	255
 28901  008B00  6F88               	movwf	(writeFlashByte@flashAddr+1)& (0+255),b
 28902  008B02  5187               	movf	writeFlashByte@flashAddr& (0+255),w,b
 28903  008B04  1188               	iorwf	(writeFlashByte@flashAddr+1)& (0+255),w,b
 28904  008B06  A4D8               	btfss	status,2,c
 28905  008B08  0E20               	movlw	32
 28906  008B0A  6F89               	movwf	(writeFlashByte@flashAddr+2)& (0+255),b
 28907  008B0C  0EEA               	movlw	234
 28908  008B0E  6F8A               	movwf	writeFlashByte@flashData& (0+255),b
 28909  008B10  ECC0  F052         	call	_writeFlashByte	;wreg free
 28910                           
 28911                           ;mioNv.c: 199: writeFlashByte((BYTE*)(0xFF80U + 4U), (BYTE)0x33);
 28912  008B14  0E84               	movlw	132
 28913  008B16  6F87               	movwf	writeFlashByte@flashAddr& (0+255),b
 28914  008B18  0EFF               	movlw	255
 28915  008B1A  6F88               	movwf	(writeFlashByte@flashAddr+1)& (0+255),b
 28916  008B1C  5187               	movf	writeFlashByte@flashAddr& (0+255),w,b
 28917  008B1E  1188               	iorwf	(writeFlashByte@flashAddr+1)& (0+255),w,b
 28918  008B20  A4D8               	btfss	status,2,c
 28919  008B22  0E20               	movlw	32
 28920  008B24  6F89               	movwf	(writeFlashByte@flashAddr+2)& (0+255),b
 28921  008B26  0E33               	movlw	51
 28922  008B28  6F8A               	movwf	writeFlashByte@flashData& (0+255),b
 28923  008B2A  ECC0  F052         	call	_writeFlashByte	;wreg free
 28924                           
 28925                           ;mioNv.c: 200: writeFlashByte((BYTE*)(0xFF80U + 5U), (BYTE)10);
 28926  008B2E  0E85               	movlw	133
 28927  008B30  6F87               	movwf	writeFlashByte@flashAddr& (0+255),b
 28928  008B32  0EFF               	movlw	255
 28929  008B34  6F88               	movwf	(writeFlashByte@flashAddr+1)& (0+255),b
 28930  008B36  5187               	movf	writeFlashByte@flashAddr& (0+255),w,b
 28931  008B38  1188               	iorwf	(writeFlashByte@flashAddr+1)& (0+255),w,b
 28932  008B3A  A4D8               	btfss	status,2,c
 28933  008B3C  0E20               	movlw	32
 28934  008B3E  6F89               	movwf	(writeFlashByte@flashAddr+2)& (0+255),b
 28935  008B40  0E0A               	movlw	10
 28936  008B42  6F8A               	movwf	writeFlashByte@flashData& (0+255),b
 28937  008B44  ECC0  F052         	call	_writeFlashByte	;wreg free
 28938                           
 28939                           ;mioNv.c: 202: loadNvCache();
 28940  008B48  EC12  F04F         	call	_loadNvCache	;wreg free
 28941                           
 28942                           ; BSR set to: 0
 28943  008B4C  0012               	return		;funcret
 28944  008B4E                     __end_of_factoryResetGlobalNv:
 28945                           	callstack 0
 28946                           
 28947 ;; *************** function _loadNvCache *****************
 28948 ;; Defined at:
 28949 ;;		line 47 in file "../../github/CANMIOfirmware/nvCache.c"
 28950 ;; Parameters:    Size  Location     Type
 28951 ;;		None
 28952 ;; Auto vars:     Size  Location     Type
 28953 ;;  np              2   32[BANK0 ] PTR unsigned char 
 28954 ;;		 -> nvCache(128), 
 28955 ;;  i               1   34[BANK0 ] unsigned char 
 28956 ;; Return value:  Size  Location     Type
 28957 ;;                  2   29[BANK0 ] PTR struct .
 28958 ;; Registers used:
 28959 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 28960 ;; Tracked objects:
 28961 ;;		On entry : 3E/1
 28962 ;;		On exit  : 3F/0
 28963 ;;		Unchanged: 0/0
 28964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 28965 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 28966 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 28967 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 28968 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 28969 ;;Total ram usage:        6 bytes
 28970 ;; Hardware stack levels used: 1
 28971 ;; Hardware stack levels required when called: 13
 28972 ;; This function calls:
 28973 ;;		_readFlashBlock
 28974 ;; This function is called by:
 28975 ;;		_main
 28976 ;;		_initialise
 28977 ;;		_factoryResetGlobalNv
 28978 ;;		_defaultNVs
 28979 ;;		_doNvset
 28980 ;; This function uses a non-reentrant model
 28981 ;;
 28982                           
 28983                           	psect	text131
 28984  009E24                     __ptext131:
 28985                           	callstack 0
 28986  009E24                     _loadNvCache:
 28987                           	callstack 17
 28988                           
 28989                           ;nvCache.c: 48: BYTE * np = (BYTE*)(&nvCache);
 28990                           
 28991                           ; BSR set to: 0
 28992                           ;incstack = 0
 28993  009E24  0E00               	movlw	low _nvCache
 28994  009E26  0100               	movlb	0	; () banked
 28995  009E28  6F80               	movwf	loadNvCache@np& (0+255),b
 28996  009E2A  0E04               	movlw	high _nvCache
 28997  009E2C  6F81               	movwf	(loadNvCache@np+1)& (0+255),b
 28998                           
 28999                           ; BSR set to: 0
 29000                           ;nvCache.c: 49: unsigned char i;;nvCache.c: 51: for (i=0; i<sizeof(ModuleNvDefs); i++) {
 29001  009E2E  0E00               	movlw	0
 29002  009E30  6F82               	movwf	loadNvCache@i& (0+255),b
 29003  009E32                     l18315:
 29004                           
 29005                           ; BSR set to: 0
 29006                           ;nvCache.c: 52: *(np+i) = readFlashBlock((WORD)(NvBytePtr+i));
 29007  009E32  0E80               	movlw	128
 29008  009E34  2582               	addwf	loadNvCache@i& (0+255),w,b
 29009  009E36  6F76               	movwf	readFlashBlock@flashAddr& (0+255),b
 29010  009E38  6B77               	clrf	(readFlashBlock@flashAddr+1)& (0+255),b
 29011  009E3A  0EFF               	movlw	255
 29012  009E3C  2377               	addwfc	(readFlashBlock@flashAddr+1)& (0+255),f,b
 29013  009E3E  EC8D  F03D         	call	_readFlashBlock	;wreg free
 29014  009E42  6F7F               	movwf	??_loadNvCache& (0+255),b
 29015  009E44  5182               	movf	loadNvCache@i& (0+255),w,b
 29016  009E46  2580               	addwf	loadNvCache@np& (0+255),w,b
 29017  009E48  6ED9               	movwf	fsr2l,c
 29018  009E4A  0E00               	movlw	0
 29019  009E4C  2181               	addwfc	(loadNvCache@np+1)& (0+255),w,b
 29020  009E4E  6EDA               	movwf	fsr2h,c
 29021  009E50  C07F  FFDF         	movff	??_loadNvCache,indf2
 29022                           
 29023                           ; BSR set to: 0
 29024  009E54  2B82               	incf	loadNvCache@i& (0+255),f,b
 29025                           
 29026                           ; BSR set to: 0
 29027  009E56  0E7F               	movlw	127
 29028  009E58  6582               	cpfsgt	loadNvCache@i& (0+255),b
 29029  009E5A  D7EB               	goto	l18315
 29030                           
 29031                           ; BSR set to: 0
 29032                           ;nvCache.c: 53: };nvCache.c: 54: return (ModuleNvDefs*)&nvCache;
 29033  009E5C  0E00               	movlw	low _nvCache
 29034  009E5E  6F7D               	movwf	?_loadNvCache& (0+255),b
 29035  009E60  0E04               	movlw	high _nvCache
 29036  009E62  6F7E               	movwf	(?_loadNvCache+1)& (0+255),b
 29037                           
 29038                           ; BSR set to: 0
 29039  009E64  0012               	return		;funcret
 29040  009E66                     __end_of_loadNvCache:
 29041                           	callstack 0
 29042                           
 29043 ;; *************** function _factoryResetGlobalEvents *****************
 29044 ;; Defined at:
 29045 ;;		line 95 in file "../../github/CANMIOfirmware/mioEvents.c"
 29046 ;; Parameters:    Size  Location     Type
 29047 ;;		None
 29048 ;; Auto vars:     Size  Location     Type
 29049 ;;		None
 29050 ;; Return value:  Size  Location     Type
 29051 ;;                  1    wreg      void 
 29052 ;; Registers used:
 29053 ;;		None
 29054 ;; Tracked objects:
 29055 ;;		On entry : 3F/0
 29056 ;;		On exit  : 3F/0
 29057 ;;		Unchanged: 3F/0
 29058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 29059 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 29060 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 29061 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 29062 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 29063 ;;Total ram usage:        0 bytes
 29064 ;; Hardware stack levels used: 1
 29065 ;; Hardware stack levels required when called: 8
 29066 ;; This function calls:
 29067 ;;		Nothing
 29068 ;; This function is called by:
 29069 ;;		_factoryResetFlash
 29070 ;; This function uses a non-reentrant model
 29071 ;;
 29072                           
 29073                           	psect	text132
 29074  00A72A                     __ptext132:
 29075                           	callstack 0
 29076  00A72A                     _factoryResetGlobalEvents:
 29077                           	callstack 20
 29078                           
 29079                           ; BSR set to: 0
 29080                           
 29081                           ; BSR set to: 0
 29082                           ;incstack = 0
 29083  00A72A  0012               	return		;funcret
 29084  00A72C                     __end_of_factoryResetGlobalEvents:
 29085                           	callstack 0
 29086                           
 29087 ;; *************** function _clearAllEvents *****************
 29088 ;; Defined at:
 29089 ;;		line 303 in file "../../github/CBUSlib/events.c"
 29090 ;; Parameters:    Size  Location     Type
 29091 ;;		None
 29092 ;; Auto vars:     Size  Location     Type
 29093 ;;  tableIndex      1   61[BANK0 ] unsigned char 
 29094 ;; Return value:  Size  Location     Type
 29095 ;;                  1    wreg      void 
 29096 ;; Registers used:
 29097 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 29098 ;; Tracked objects:
 29099 ;;		On entry : 3F/0
 29100 ;;		On exit  : 3F/0
 29101 ;;		Unchanged: 0/0
 29102 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 29103 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 29104 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 29105 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 29106 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 29107 ;;Total ram usage:        6 bytes
 29108 ;; Hardware stack levels used: 1
 29109 ;; Hardware stack levels required when called: 16
 29110 ;; This function calls:
 29111 ;;		_flushFlashImage
 29112 ;;		_rebuildHashtable
 29113 ;;		_writeFlashByte
 29114 ;; This function is called by:
 29115 ;;		_factoryResetFlash
 29116 ;;		_doNnclr
 29117 ;; This function uses a non-reentrant model
 29118 ;;
 29119                           
 29120                           	psect	text133
 29121  009C02                     __ptext133:
 29122                           	callstack 0
 29123  009C02                     _clearAllEvents:
 29124                           	callstack 12
 29125                           
 29126                           ; BSR set to: 0
 29127                           ;events.c: 304: unsigned char tableIndex;;events.c: 305: for (tableIndex=0; tableIndex<2
      +                          55U; tableIndex++) {
 29128                           
 29129                           ; BSR set to: 0
 29130                           ;incstack = 0
 29131  009C02  0E00               	movlw	0
 29132  009C04  6F9D               	movwf	clearAllEvents@tableIndex& (0+255),b
 29133  009C06                     l18867:
 29134                           
 29135                           ; BSR set to: 0
 29136                           ;events.c: 307: writeFlashByte((BYTE*)&(eventTable[tableIndex].flags.asByte), 0xff);
 29137  009C06  519D               	movf	clearAllEvents@tableIndex& (0+255),w,b
 29138  009C08  0D10               	mullw	16
 29139  009C0A  CFF3 F098          	movff	prodl,??_clearAllEvents
 29140  009C0E  CFF4 F099          	movff	prodh,??_clearAllEvents+1
 29141  009C12  5198               	movf	??_clearAllEvents& (0+255),w,b
 29142  009C14  25E9               	addwf	_eventTable& (0+255),w,b
 29143  009C16  6F9A               	movwf	(??_clearAllEvents+2)& (0+255),b
 29144  009C18  5199               	movf	(??_clearAllEvents+1)& (0+255),w,b
 29145  009C1A  21EA               	addwfc	(_eventTable+1)& (0+255),w,b
 29146  009C1C  6F9B               	movwf	(??_clearAllEvents+3)& (0+255),b
 29147  009C1E  0E00               	movlw	0
 29148  009C20  21EB               	addwfc	(_eventTable+2)& (0+255),w,b
 29149  009C22  6F9C               	movwf	(??_clearAllEvents+4)& (0+255),b
 29150  009C24  C09A  F087         	movff	??_clearAllEvents+2,writeFlashByte@flashAddr
 29151  009C28  C09B  F088         	movff	??_clearAllEvents+3,writeFlashByte@flashAddr+1
 29152  009C2C  C09C  F089         	movff	??_clearAllEvents+4,writeFlashByte@flashAddr+2
 29153  009C30  0EFF               	movlw	255
 29154  009C32  6F8A               	movwf	writeFlashByte@flashData& (0+255),b
 29155  009C34  ECC0  F052         	call	_writeFlashByte	;wreg free
 29156                           
 29157                           ; BSR set to: 0
 29158  009C38  2B9D               	incf	clearAllEvents@tableIndex& (0+255),f,b
 29159                           
 29160                           ; BSR set to: 0
 29161  009C3A  299D               	incf	clearAllEvents@tableIndex& (0+255),w,b
 29162  009C3C  A4D8               	btfss	status,2,c
 29163  009C3E  D7E3               	goto	l18867
 29164                           
 29165                           ; BSR set to: 0
 29166                           ;events.c: 308: };events.c: 309: flushFlashImage();
 29167  009C40  EC13  F053         	call	_flushFlashImage	;wreg free
 29168                           
 29169                           ; BSR set to: 0
 29170                           ;events.c: 311: rebuildHashtable();
 29171  009C44  ECB2  F034         	call	_rebuildHashtable	;wreg free
 29172                           
 29173                           ; BSR set to: 0
 29174  009C48  0012               	return		;funcret
 29175  009C4A                     __end_of_clearAllEvents:
 29176                           	callstack 0
 29177                           
 29178 ;; *************** function _writeFlashByte *****************
 29179 ;; Defined at:
 29180 ;;		line 341 in file "../../github/CBUSlib/romops.c"
 29181 ;; Parameters:    Size  Location     Type
 29182 ;;  flashAddr       3   39[BANK0 ] PTR unsigned char 
 29183 ;;		 -> ROM(65535), NULL(0), RAM(3648), 
 29184 ;;  flashData       1   42[BANK0 ] unsigned char 
 29185 ;; Auto vars:     Size  Location     Type
 29186 ;;		None
 29187 ;; Return value:  Size  Location     Type
 29188 ;;                  1    wreg      void 
 29189 ;; Registers used:
 29190 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 29191 ;; Tracked objects:
 29192 ;;		On entry : 3F/0
 29193 ;;		On exit  : 3F/0
 29194 ;;		Unchanged: 0/0
 29195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 29196 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 29197 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 29198 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 29199 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 29200 ;;Total ram usage:        4 bytes
 29201 ;; Hardware stack levels used: 1
 29202 ;; Hardware stack levels required when called: 14
 29203 ;; This function calls:
 29204 ;;		_flushFlashImage
 29205 ;;		_writeFlashImage
 29206 ;; This function is called by:
 29207 ;;		_pollAnalogue
 29208 ;;		_initialise
 29209 ;;		_setType
 29210 ;;		_factoryResetGlobalNv
 29211 ;;		_defaultNVs
 29212 ;;		_clearAllEvents
 29213 ;;		_removeTableEntry
 29214 ;;		_addEvent
 29215 ;;		_writeEv
 29216 ;;		_doNvset
 29217 ;; This function uses a non-reentrant model
 29218 ;;
 29219                           
 29220                           	psect	text134
 29221  00A580                     __ptext134:
 29222                           	callstack 0
 29223  00A580                     _writeFlashByte:
 29224                           	callstack 15
 29225                           
 29226                           ; BSR set to: 0
 29227                           ;romops.c: 345: writeFlashImage( flashAddr, flashData );
 29228                           
 29229                           ; BSR set to: 0
 29230                           ;incstack = 0
 29231  00A580  C087  F07D         	movff	writeFlashByte@flashAddr,writeFlashImage@addr
 29232  00A584  C088  F07E         	movff	writeFlashByte@flashAddr+1,writeFlashImage@addr+1
 29233  00A588  C089  F07F         	movff	writeFlashByte@flashAddr+2,writeFlashImage@addr+2
 29234  00A58C  C08A  F080         	movff	writeFlashByte@flashData,writeFlashImage@data
 29235  00A590  ECC2  F041         	call	_writeFlashImage	;wreg free
 29236                           
 29237                           ;romops.c: 346: flushFlashImage();
 29238  00A594  EC13  F053         	call	_flushFlashImage	;wreg free
 29239                           
 29240                           ; BSR set to: 0
 29241  00A598  0012               	return		;funcret
 29242  00A59A                     __end_of_writeFlashByte:
 29243                           	callstack 0
 29244                           
 29245 ;; *************** function _writeFlashImage *****************
 29246 ;; Defined at:
 29247 ;;		line 308 in file "../../github/CBUSlib/romops.c"
 29248 ;; Parameters:    Size  Location     Type
 29249 ;;  addr            3   29[BANK0 ] PTR unsigned char 
 29250 ;;		 -> ROM(65535), NULL(0), RAM(3648), 
 29251 ;;  data            1   32[BANK0 ] unsigned char 
 29252 ;; Auto vars:     Size  Location     Type
 29253 ;;  offset          2   37[BANK0 ] PTR unsigned char 
 29254 ;;		 -> flashbuf(64), 
 29255 ;; Return value:  Size  Location     Type
 29256 ;;                  1    wreg      void 
 29257 ;; Registers used:
 29258 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 29259 ;; Tracked objects:
 29260 ;;		On entry : 3F/0
 29261 ;;		On exit  : 3F/0
 29262 ;;		Unchanged: 0/0
 29263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 29264 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 29265 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 29266 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 29267 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 29268 ;;Total ram usage:       10 bytes
 29269 ;; Hardware stack levels used: 1
 29270 ;; Hardware stack levels required when called: 13
 29271 ;; This function calls:
 29272 ;;		_readFlashBlock
 29273 ;; This function is called by:
 29274 ;;		_writeFlashByte
 29275 ;;		_setFlashWord
 29276 ;; This function uses a non-reentrant model
 29277 ;;
 29278                           
 29279                           	psect	text135
 29280  008384                     __ptext135:
 29281                           	callstack 0
 29282  008384                     _writeFlashImage:
 29283                           	callstack 15
 29284                           
 29285                           ; BSR set to: 0
 29286                           ;romops.c: 310: unsigned char *offset;;romops.c: 312: if (((WORD)addr < (0xEF80U&0xFFC0)
      +                          ) || ((WORD)addr > 0xFFFF)) {
 29287                           
 29288                           ; BSR set to: 0
 29289                           ;incstack = 0
 29290  008384  0E80               	movlw	128
 29291  008386  5D7D               	subwf	writeFlashImage@addr& (0+255),w,b
 29292  008388  0EEF               	movlw	239
 29293  00838A  597E               	subwfb	(writeFlashImage@addr+1)& (0+255),w,b
 29294  00838C  A0D8               	btfss	status,0,c
 29295  00838E  0012               	return	
 29296                           
 29297                           ; BSR set to: 0
 29298                           ;romops.c: 316: };romops.c: 318: if(flashFlags.valid !=5)
 29299  008390  5005               	movf	_flashFlags^0,w,c
 29300  008392  0B07               	andlw	7
 29301  008394  0A05               	xorlw	5
 29302  008396  B4D8               	btfsc	status,2,c
 29303  008398  D004               	goto	l17695
 29304                           
 29305                           ; BSR set to: 0
 29306                           ;romops.c: 319: {;romops.c: 320: flashFlags.valid=5;
 29307  00839A  5005               	movf	_flashFlags^0,w,c
 29308  00839C  0BF8               	andlw	-8
 29309  00839E  0905               	iorlw	5
 29310  0083A0  6E05               	movwf	_flashFlags^0,c
 29311  0083A2                     l17695:
 29312                           
 29313                           ; BSR set to: 0
 29314                           ;romops.c: 321: };romops.c: 323: if (!flashFlags.loaded || flashblock!=((WORD)addr & 0XF
      +                          FC0))
 29315  0083A2  A605               	btfss	_flashFlags^0,3,c
 29316  0083A4  D017               	goto	u21630
 29317                           
 29318                           ; BSR set to: 0
 29319  0083A6  0EC0               	movlw	192
 29320  0083A8  6F81               	movwf	??_writeFlashImage& (0+255),b
 29321  0083AA  0EFF               	movlw	255
 29322  0083AC  6F82               	movwf	(??_writeFlashImage+1)& (0+255),b
 29323  0083AE  C07D  F083         	movff	writeFlashImage@addr,??_writeFlashImage+2
 29324  0083B2  C07E  F084         	movff	writeFlashImage@addr+1,??_writeFlashImage+3
 29325  0083B6  5181               	movf	??_writeFlashImage& (0+255),w,b
 29326  0083B8  1783               	andwf	(??_writeFlashImage+2)& (0+255),f,b
 29327  0083BA  5182               	movf	(??_writeFlashImage+1)& (0+255),w,b
 29328  0083BC  1784               	andwf	(??_writeFlashImage+3)& (0+255),f,b
 29329  0083BE  0101               	movlb	1	; () banked
 29330  0083C0  51F6               	movf	_flashblock& (0+255),w,b
 29331  0083C2  0100               	movlb	0	; () banked
 29332  0083C4  1983               	xorwf	(??_writeFlashImage+2)& (0+255),w,b
 29333  0083C6  E106               	bnz	u21630
 29334  0083C8  0101               	movlb	1	; () banked
 29335  0083CA  51F7               	movf	(_flashblock+1)& (0+255),w,b
 29336  0083CC  0100               	movlb	0	; () banked
 29337  0083CE  1984               	xorwf	(??_writeFlashImage+3)& (0+255),w,b
 29338  0083D0  B4D8               	btfsc	status,2,c
 29339  0083D2  D006               	goto	l17701
 29340  0083D4                     u21630:
 29341                           
 29342                           ; BSR set to: 0
 29343                           ;romops.c: 324: readFlashBlock((WORD)addr);
 29344  0083D4  C07D  F076         	movff	writeFlashImage@addr,readFlashBlock@flashAddr
 29345  0083D8  C07E  F077         	movff	writeFlashImage@addr+1,readFlashBlock@flashAddr+1
 29346  0083DC  EC8D  F03D         	call	_readFlashBlock	;wreg free
 29347  0083E0                     l17701:
 29348                           
 29349                           ; BSR set to: 0
 29350                           ;romops.c: 326: offset = &flashbuf[(WORD)addr & 0x3F];
 29351  0083E0  0E3F               	movlw	63
 29352  0083E2  157D               	andwf	writeFlashImage@addr& (0+255),w,b
 29353  0083E4  6F81               	movwf	??_writeFlashImage& (0+255),b
 29354  0083E6  0E00               	movlw	0
 29355  0083E8  157E               	andwf	(writeFlashImage@addr+1)& (0+255),w,b
 29356  0083EA  6F82               	movwf	(??_writeFlashImage+1)& (0+255),b
 29357  0083EC  0E48               	movlw	low _flashbuf
 29358  0083EE  2581               	addwf	??_writeFlashImage& (0+255),w,b
 29359  0083F0  6F85               	movwf	writeFlashImage@offset& (0+255),b
 29360  0083F2  0E03               	movlw	high _flashbuf
 29361  0083F4  2182               	addwfc	(??_writeFlashImage+1)& (0+255),w,b
 29362  0083F6  6F86               	movwf	(writeFlashImage@offset+1)& (0+255),b
 29363                           
 29364                           ; BSR set to: 0
 29365                           ;romops.c: 328: if(data !=*offset)
 29366  0083F8  C085  FFD9         	movff	writeFlashImage@offset,fsr2l
 29367  0083FC  C086  FFDA         	movff	writeFlashImage@offset+1,fsr2h
 29368  008400  5180               	movf	writeFlashImage@data& (0+255),w,b
 29369  008402  18DE               	xorwf	postinc2,w,c
 29370  008404  A4D8               	btfss	status,2,c
 29371                           
 29372                           ; BSR set to: 0
 29373                           ;romops.c: 329: flashFlags.modified=1;
 29374  008406  8805               	bsf	_flashFlags^0,4,c
 29375                           
 29376                           ; BSR set to: 0
 29377                           ;romops.c: 331: if(data & ~*offset)
 29378  008408  C085  FFD9         	movff	writeFlashImage@offset,fsr2l
 29379  00840C  C086  FFDA         	movff	writeFlashImage@offset+1,fsr2h
 29380  008410  50DF               	movf	indf2,w,c
 29381  008412  0AFF               	xorlw	255
 29382  008414  1580               	andwf	writeFlashImage@data& (0+255),w,b
 29383  008416  0900               	iorlw	0
 29384  008418  A4D8               	btfss	status,2,c
 29385                           
 29386                           ; BSR set to: 0
 29387                           ;romops.c: 332: flashFlags.zeroto1=1;
 29388  00841A  8A05               	bsf	_flashFlags^0,5,c
 29389                           
 29390                           ; BSR set to: 0
 29391                           ;romops.c: 333: *offset=data;
 29392  00841C  C085  FFD9         	movff	writeFlashImage@offset,fsr2l
 29393  008420  C086  FFDA         	movff	writeFlashImage@offset+1,fsr2h
 29394  008424  C080  FFDF         	movff	writeFlashImage@data,indf2
 29395                           
 29396                           ; BSR set to: 0
 29397  008428  0012               	return		;funcret
 29398  00842A                     __end_of_writeFlashImage:
 29399                           	callstack 0
 29400                           
 29401 ;; *************** function _factoryResetEE *****************
 29402 ;; Defined at:
 29403 ;;		line 551 in file "../../github/CANMIOfirmware/main.c"
 29404 ;; Parameters:    Size  Location     Type
 29405 ;;		None
 29406 ;; Auto vars:     Size  Location     Type
 29407 ;;		None
 29408 ;; Return value:  Size  Location     Type
 29409 ;;                  1    wreg      void 
 29410 ;; Registers used:
 29411 ;;		wreg, status,2, status,0, cstack
 29412 ;; Tracked objects:
 29413 ;;		On entry : 0/1
 29414 ;;		On exit  : 3F/0
 29415 ;;		Unchanged: 0/0
 29416 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 29417 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 29418 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 29419 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 29420 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 29421 ;;Total ram usage:        0 bytes
 29422 ;; Hardware stack levels used: 1
 29423 ;; Hardware stack levels required when called: 11
 29424 ;; This function calls:
 29425 ;;		_ee_write
 29426 ;;		_ee_write_short
 29427 ;; This function is called by:
 29428 ;;		_initialise
 29429 ;;		_factoryReset
 29430 ;; This function uses a non-reentrant model
 29431 ;;
 29432                           
 29433                           	psect	text136
 29434  009C90                     __ptext136:
 29435                           	callstack 0
 29436  009C90                     _factoryResetEE:
 29437                           	callstack 18
 29438                           
 29439                           ;main.c: 552: ee_write((WORD)((BYTE*)(0x3FF)), 0);
 29440                           
 29441                           ; BSR set to: 0
 29442                           ;incstack = 0
 29443  009C90  0E03               	movlw	3
 29444  009C92  0100               	movlb	0	; () banked
 29445  009C94  6F74               	movwf	(ee_write@addr+1)& (0+255),b
 29446  009C96  6973               	setf	ee_write@addr& (0+255),b
 29447  009C98  0E00               	movlw	0
 29448  009C9A  6F75               	movwf	ee_write@data& (0+255),b
 29449  009C9C  EC1D  F04D         	call	_ee_write	;wreg free
 29450                           
 29451                           ;main.c: 553: ee_write((WORD)((BYTE*)(0x3FF-1)), 0x01);
 29452  009CA0  0E03               	movlw	3
 29453  009CA2  6F74               	movwf	(ee_write@addr+1)& (0+255),b
 29454  009CA4  0EFE               	movlw	254
 29455  009CA6  6F73               	movwf	ee_write@addr& (0+255),b
 29456  009CA8  0E01               	movlw	1
 29457  009CAA  6F75               	movwf	ee_write@data& (0+255),b
 29458  009CAC  EC1D  F04D         	call	_ee_write	;wreg free
 29459                           
 29460                           ; BSR set to: 0
 29461                           ;main.c: 554: ee_write_short((WORD)((WORD*)(0x3FF-3)), 0x00);
 29462  009CB0  0E03               	movlw	3
 29463  009CB2  6F78               	movwf	(ee_write_short@addr+1)& (0+255),b
 29464  009CB4  0EFC               	movlw	252
 29465  009CB6  6F77               	movwf	ee_write_short@addr& (0+255),b
 29466  009CB8  0E00               	movlw	0
 29467  009CBA  6F7A               	movwf	(ee_write_short@data+1)& (0+255),b
 29468  009CBC  0E00               	movlw	0
 29469  009CBE  6F79               	movwf	ee_write_short@data& (0+255),b
 29470  009CC0  EC73  F051         	call	_ee_write_short	;wreg free
 29471                           
 29472                           ; BSR set to: 0
 29473                           ;main.c: 555: ee_write((WORD)((BYTE*)(0x3FF-4)), fsSLiM);
 29474  009CC4  0E03               	movlw	3
 29475  009CC6  6F74               	movwf	(ee_write@addr+1)& (0+255),b
 29476  009CC8  0EFB               	movlw	251
 29477  009CCA  6F73               	movwf	ee_write@addr& (0+255),b
 29478  009CCC  0E00               	movlw	0
 29479  009CCE  6F75               	movwf	ee_write@data& (0+255),b
 29480  009CD0  EC1D  F04D         	call	_ee_write	;wreg free
 29481                           
 29482                           ; BSR set to: 0
 29483  009CD4  0012               	return		;funcret
 29484  009CD6                     __end_of_factoryResetEE:
 29485                           	callstack 0
 29486                           
 29487 ;; *************** function _cbusMsgReceived *****************
 29488 ;; Defined at:
 29489 ;;		line 105 in file "../../github/CBUSlib/cbus.c"
 29490 ;; Parameters:    Size  Location     Type
 29491 ;;  cbusNum         1    wreg     unsigned char 
 29492 ;;  msg             2   65[BANK0 ] PTR unsigned char 
 29493 ;;		 -> checkCBUS@msg(20), 
 29494 ;; Auto vars:     Size  Location     Type
 29495 ;;  cbusNum         1   67[BANK0 ] unsigned char 
 29496 ;; Return value:  Size  Location     Type
 29497 ;;                  1    wreg      unsigned char 
 29498 ;; Registers used:
 29499 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 29500 ;; Tracked objects:
 29501 ;;		On entry : 3F/0
 29502 ;;		On exit  : 3F/0
 29503 ;;		Unchanged: 0/0
 29504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 29505 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 29506 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 29507 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 29508 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 29509 ;;Total ram usage:        3 bytes
 29510 ;; Hardware stack levels used: 1
 29511 ;; Hardware stack levels required when called: 16
 29512 ;; This function calls:
 29513 ;;		_canbusRecv
 29514 ;; This function is called by:
 29515 ;;		_checkCBUS
 29516 ;; This function uses a non-reentrant model
 29517 ;;
 29518                           
 29519                           	psect	text137
 29520  00A512                     __ptext137:
 29521                           	callstack 0
 29522  00A512                     _cbusMsgReceived:
 29523                           	callstack 13
 29524                           
 29525                           ; BSR set to: 0
 29526                           ;incstack = 0
 29527                           ;cbusMsgReceived@cbusNum stored from wreg
 29528  00A512  6FA3               	movwf	cbusMsgReceived@cbusNum& (0+255),b
 29529                           
 29530                           ;cbus.c: 110: if (cbusNum == 0)
 29531  00A514  0100               	movlb	0	; () banked
 29532  00A516  51A3               	movf	cbusMsgReceived@cbusNum& (0+255),w,b
 29533  00A518  A4D8               	btfss	status,2,c
 29534  00A51A  D007               	goto	l20389
 29535                           
 29536                           ; BSR set to: 0
 29537                           ;cbus.c: 111: {;cbus.c: 112: return( canbusRecv( (CanPacket *) msg ));
 29538  00A51C  C0A1  F09B         	movff	cbusMsgReceived@msg,canbusRecv@msg
 29539  00A520  C0A2  F09C         	movff	cbusMsgReceived@msg+1,canbusRecv@msg+1
 29540  00A524  ECE7  F03B         	call	_canbusRecv	;wreg free
 29541  00A528  0012               	return	
 29542  00A52A                     l20389:
 29543                           
 29544                           ; BSR set to: 0
 29545                           ;cbus.c: 113: };cbus.c: 122: return 0;
 29546  00A52A  0E00               	movlw	0
 29547                           
 29548                           ; BSR set to: 0
 29549  00A52C  0012               	return		;funcret
 29550  00A52E                     __end_of_cbusMsgReceived:
 29551                           	callstack 0
 29552                           
 29553 ;; *************** function _canbusRecv *****************
 29554 ;; Defined at:
 29555 ;;		line 496 in file "../../github/CBUSlib/can18.c"
 29556 ;; Parameters:    Size  Location     Type
 29557 ;;  msg             2   59[BANK0 ] PTR struct .
 29558 ;;		 -> checkCBUS@msg(20), 
 29559 ;; Auto vars:     Size  Location     Type
 29560 ;;  ptr             2   63[BANK0 ] PTR struct .
 29561 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 29562 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 29563 ;;  msgFound        1   62[BANK0 ] unsigned char 
 29564 ;; Return value:  Size  Location     Type
 29565 ;;                  1    wreg      unsigned char 
 29566 ;; Registers used:
 29567 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 29568 ;; Tracked objects:
 29569 ;;		On entry : 3F/0
 29570 ;;		On exit  : 3F/0
 29571 ;;		Unchanged: 0/0
 29572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 29573 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 29574 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 29575 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 29576 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 29577 ;;Total ram usage:        6 bytes
 29578 ;; Hardware stack levels used: 1
 29579 ;; Hardware stack levels required when called: 15
 29580 ;; This function calls:
 29581 ;;		__PointBuffer
 29582 ;;		_checkIncomingPacket
 29583 ;;		_memcpy
 29584 ;;		_processEnumeration
 29585 ;; This function is called by:
 29586 ;;		_cbusMsgReceived
 29587 ;; This function uses a non-reentrant model
 29588 ;;
 29589                           
 29590                           	psect	text138
 29591  0077CE                     __ptext138:
 29592                           	callstack 0
 29593  0077CE                     _canbusRecv:
 29594                           	callstack 13
 29595                           
 29596                           ; BSR set to: 0
 29597                           ;can18.c: 499: CanPacket *ptr;;can18.c: 500: BOOL msgFound;;can18.c: 502: PIE5bits.FIFOW
      +                          MIE = 0;
 29598                           
 29599                           ; BSR set to: 0
 29600                           ;incstack = 0
 29601  0077CE  9076               	bcf	118,0,c	;volatile
 29602                           
 29603                           ; BSR set to: 0
 29604                           ;can18.c: 504: processEnumeration();
 29605  0077D0  EC06  F034         	call	_processEnumeration	;wreg free
 29606                           
 29607                           ;can18.c: 509: if (rxIndexNextUsed != rxIndexNextFree)
 29608  0077D4  500F               	movf	_rxIndexNextFree^0,w,c
 29609  0077D6  180E               	xorwf	_rxIndexNextUsed^0,w,c
 29610  0077D8  B4D8               	btfsc	status,2,c
 29611  0077DA  D02B               	goto	l20113
 29612                           
 29613                           ;can18.c: 510: {;can18.c: 511: memcpy(msg->buffer, canRxFifo[rxIndexNextUsed].buffer, ca
      +                          nRxFifo[rxIndexNextUsed].buffer[dlc] + 6U);
 29614  0077DC  C09B  F071         	movff	canbusRecv@msg,memcpy@d1
 29615  0077E0  C09C  F072         	movff	canbusRecv@msg+1,memcpy@d1+1
 29616  0077E4  500E               	movf	_rxIndexNextUsed^0,w,c
 29617  0077E6  0D10               	mullw	16
 29618  0077E8  0E00               	movlw	low _canRxFifo
 29619  0077EA  24F3               	addwf	243,w,c
 29620  0077EC  0100               	movlb	0	; () banked
 29621  0077EE  6F73               	movwf	memcpy@s1& (0+255),b
 29622  0077F0  0E05               	movlw	high _canRxFifo
 29623  0077F2  20F4               	addwfc	prodh,w,c
 29624  0077F4  6F74               	movwf	(memcpy@s1+1)& (0+255),b
 29625  0077F6  500E               	movf	_rxIndexNextUsed^0,w,c
 29626  0077F8  0D10               	mullw	16
 29627  0077FA  0E05               	movlw	low (_canRxFifo+5)
 29628  0077FC  24F3               	addwf	243,w,c
 29629  0077FE  6ED9               	movwf	fsr2l,c
 29630  007800  0E05               	movlw	high (_canRxFifo+5)
 29631  007802  20F4               	addwfc	prodh,w,c
 29632  007804  6EDA               	movwf	fsr2h,c
 29633  007806  50DF               	movf	indf2,w,c
 29634  007808  6F9D               	movwf	??_canbusRecv& (0+255),b
 29635  00780A  0E06               	movlw	6
 29636  00780C  259D               	addwf	??_canbusRecv& (0+255),w,b
 29637  00780E  6F75               	movwf	memcpy@n& (0+255),b
 29638  007810  6B76               	clrf	(memcpy@n+1)& (0+255),b
 29639  007812  0E00               	movlw	0
 29640  007814  2376               	addwfc	(memcpy@n+1)& (0+255),f,b
 29641  007816  EC6B  F04E         	call	_memcpy	;wreg free
 29642                           
 29643                           ; BSR set to: 0
 29644                           ;can18.c: 512: rxFifoUsage--;
 29645  00781A  0101               	movlb	1	; () banked
 29646  00781C  07D8               	decf	_rxFifoUsage& (0+255),f,b
 29647                           
 29648                           ; BSR set to: 1
 29649                           ;can18.c: 514: if (++rxIndexNextUsed >= 16U)
 29650  00781E  2A0E               	incf	_rxIndexNextUsed^0,f,c
 29651  007820  0E0F               	movlw	15
 29652  007822  640E               	cpfsgt	_rxIndexNextUsed^0,c
 29653  007824  D002               	goto	l1619
 29654                           
 29655                           ; BSR set to: 1
 29656                           ;can18.c: 515: {;can18.c: 516: rxIndexNextUsed = 0;
 29657  007826  0E00               	movlw	0
 29658  007828  6E0E               	movwf	_rxIndexNextUsed^0,c
 29659  00782A                     l1619:
 29660                           
 29661                           ; BSR set to: 1
 29662                           ;can18.c: 517: };can18.c: 518: msgFound = 1;
 29663  00782A  0E01               	movlw	1
 29664  00782C  0100               	movlb	0	; () banked
 29665  00782E  6F9E               	movwf	canbusRecv@msgFound& (0+255),b
 29666                           
 29667                           ;can18.c: 519: }
 29668  007830  D038               	goto	l20131
 29669  007832                     l20113:
 29670                           
 29671                           ;can18.c: 520: else;can18.c: 521: {;can18.c: 522: msgFound = 0;
 29672  007832  0E00               	movlw	0
 29673  007834  0100               	movlb	0	; () banked
 29674  007836  6F9E               	movwf	canbusRecv@msgFound& (0+255),b
 29675                           
 29676                           ; BSR set to: 0
 29677                           ;can18.c: 525: if (COMSTATbits.NOT_FIFOEMPTY)
 29678  007838  AE71               	btfss	113,7,c	;volatile
 29679  00783A  D033               	goto	l20131
 29680                           
 29681                           ; BSR set to: 0
 29682                           ;can18.c: 526: {;can18.c: 527: ptr = (CanPacket*) _PointBuffer(CANCON & 0x07U);
 29683  00783C  506F               	movf	111,w,c	;volatile
 29684  00783E  0B07               	andlw	7
 29685  007840  ECC5  F048         	call	__PointBuffer
 29686  007844  C071  F09F         	movff	?__PointBuffer,canbusRecv@ptr
 29687  007848  C072  F0A0         	movff	?__PointBuffer+1,canbusRecv@ptr+1
 29688                           
 29689                           ; BSR set to: 0
 29690                           ;can18.c: 528: PIR5bits.RXBnIF = 0;
 29691  00784C  9277               	bcf	119,1,c	;volatile
 29692                           
 29693                           ; BSR set to: 0
 29694                           ;can18.c: 538: if (msgFound = checkIncomingPacket(ptr))
 29695  00784E  C09F  F07B         	movff	canbusRecv@ptr,checkIncomingPacket@ptr
 29696  007852  C0A0  F07C         	movff	canbusRecv@ptr+1,checkIncomingPacket@ptr+1
 29697  007856  ECA8  F038         	call	_checkIncomingPacket	;wreg free
 29698  00785A  6F9E               	movwf	canbusRecv@msgFound& (0+255),b
 29699  00785C  519E               	movf	canbusRecv@msgFound& (0+255),w,b
 29700  00785E  B4D8               	btfsc	status,2,c
 29701  007860  D018               	goto	l20125
 29702                           
 29703                           ; BSR set to: 0
 29704                           ;can18.c: 539: memcpy(msg->buffer, (void*) ptr, ptr->buffer[dlc] + 6U);
 29705  007862  C09B  F071         	movff	canbusRecv@msg,memcpy@d1
 29706  007866  C09C  F072         	movff	canbusRecv@msg+1,memcpy@d1+1
 29707  00786A  C09F  F073         	movff	canbusRecv@ptr,memcpy@s1
 29708  00786E  C0A0  F074         	movff	canbusRecv@ptr+1,memcpy@s1+1
 29709  007872  EE20 F005          	lfsr	2,5
 29710  007876  519F               	movf	canbusRecv@ptr& (0+255),w,b
 29711  007878  26D9               	addwf	fsr2l,f,c
 29712  00787A  51A0               	movf	(canbusRecv@ptr+1)& (0+255),w,b
 29713  00787C  22DA               	addwfc	fsr2h,f,c
 29714  00787E  50DF               	movf	indf2,w,c
 29715  007880  6F9D               	movwf	??_canbusRecv& (0+255),b
 29716  007882  0E06               	movlw	6
 29717  007884  259D               	addwf	??_canbusRecv& (0+255),w,b
 29718  007886  6F75               	movwf	memcpy@n& (0+255),b
 29719  007888  6B76               	clrf	(memcpy@n+1)& (0+255),b
 29720  00788A  0E00               	movlw	0
 29721  00788C  2376               	addwfc	(memcpy@n+1)& (0+255),f,b
 29722  00788E  EC6B  F04E         	call	_memcpy	;wreg free
 29723  007892                     l20125:
 29724                           
 29725                           ; BSR set to: 0
 29726                           ;can18.c: 542: if (PIR5bits.IRXIF) {
 29727  007892  BE77               	btfsc	119,7,c	;volatile
 29728                           
 29729                           ; BSR set to: 0
 29730                           ;can18.c: 543: PIR5bits.IRXIF = 0;
 29731  007894  9E77               	bcf	119,7,c	;volatile
 29732                           
 29733                           ; BSR set to: 0
 29734                           ;can18.c: 544: };can18.c: 546: ptr->buffer[con] &= 0x7f;
 29735  007896  C09F  FFD9         	movff	canbusRecv@ptr,fsr2l
 29736  00789A  C0A0  FFDA         	movff	canbusRecv@ptr+1,fsr2h
 29737  00789E  0E7F               	movlw	127
 29738  0078A0  16DF               	andwf	indf2,f,c
 29739  0078A2                     l20131:
 29740                           
 29741                           ; BSR set to: 0
 29742                           ;can18.c: 551: };can18.c: 552: };can18.c: 554: PIE5bits.FIFOWMIE = 1;
 29743  0078A2  8076               	bsf	118,0,c	;volatile
 29744                           
 29745                           ; BSR set to: 0
 29746                           ;can18.c: 555: return msgFound;
 29747  0078A4  519E               	movf	canbusRecv@msgFound& (0+255),w,b
 29748                           
 29749                           ; BSR set to: 0
 29750  0078A6  0012               	return		;funcret
 29751  0078A8                     __end_of_canbusRecv:
 29752                           	callstack 0
 29753                           
 29754 ;; *************** function _processEnumeration *****************
 29755 ;; Defined at:
 29756 ;;		line 645 in file "../../github/CBUSlib/can18.c"
 29757 ;; Parameters:    Size  Location     Type
 29758 ;;		None
 29759 ;; Auto vars:     Size  Location     Type
 29760 ;;  i               1   58[BANK0 ] unsigned char 
 29761 ;;  newCanId        1   57[BANK0 ] unsigned char 
 29762 ;;  enumResult      1   56[BANK0 ] unsigned char 
 29763 ;; Return value:  Size  Location     Type
 29764 ;;                  1    wreg      void 
 29765 ;; Registers used:
 29766 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 29767 ;; Tracked objects:
 29768 ;;		On entry : 3F/0
 29769 ;;		On exit  : 30/0
 29770 ;;		Unchanged: 0/0
 29771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 29772 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 29773 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 29774 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 29775 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 29776 ;;Total ram usage:        7 bytes
 29777 ;; Hardware stack levels used: 1
 29778 ;; Hardware stack levels required when called: 14
 29779 ;; This function calls:
 29780 ;;		_cbusSendOpcMyNN
 29781 ;;		_doError
 29782 ;;		_setNewCanId
 29783 ;;		_tickGet
 29784 ;; This function is called by:
 29785 ;;		_canbusRecv
 29786 ;; This function uses a non-reentrant model
 29787 ;;
 29788                           
 29789                           	psect	text139
 29790  00680C                     __ptext139:
 29791                           	callstack 0
 29792  00680C                     _processEnumeration:
 29793                           	callstack 13
 29794                           
 29795                           ; BSR set to: 0
 29796                           ;can18.c: 648: BYTE i, newCanId, enumResult;;can18.c: 650: if (enumerationRequired && ((
      +                          tickGet() - enumerationStartTime.Val) > 2 * (62500/10) ))
 29797                           
 29798                           ; BSR set to: 0
 29799                           ;incstack = 0
 29800  00680C  5009               	movf	_enumerationRequired^0,w,c
 29801  00680E  B4D8               	btfsc	status,2,c
 29802  006810  D041               	goto	l19431
 29803                           
 29804                           ; BSR set to: 0
 29805  006812  ECA3  F04B         	call	_tickGet	;wreg free
 29806  006816  0101               	movlb	1	; () banked
 29807  006818  51B0               	movf	_enumerationStartTime& (0+255),w,b
 29808  00681A  0100               	movlb	0	; () banked
 29809  00681C  5D71               	subwf	?_tickGet& (0+255),w,b
 29810  00681E  6F94               	movwf	??_processEnumeration& (0+255),b
 29811  006820  0101               	movlb	1	; () banked
 29812  006822  51B1               	movf	(_enumerationStartTime+1)& (0+255),w,b
 29813  006824  0100               	movlb	0	; () banked
 29814  006826  5972               	subwfb	(?_tickGet+1)& (0+255),w,b
 29815  006828  6F95               	movwf	(??_processEnumeration+1)& (0+255),b
 29816  00682A  0101               	movlb	1	; () banked
 29817  00682C  51B2               	movf	(_enumerationStartTime+2)& (0+255),w,b
 29818  00682E  0100               	movlb	0	; () banked
 29819  006830  5973               	subwfb	(?_tickGet+2)& (0+255),w,b
 29820  006832  6F96               	movwf	(??_processEnumeration+2)& (0+255),b
 29821  006834  0101               	movlb	1	; () banked
 29822  006836  51B3               	movf	(_enumerationStartTime+3)& (0+255),w,b
 29823  006838  0100               	movlb	0	; () banked
 29824  00683A  5974               	subwfb	(?_tickGet+3)& (0+255),w,b
 29825  00683C  6F97               	movwf	(??_processEnumeration+3)& (0+255),b
 29826  00683E  5197               	movf	(??_processEnumeration+3)& (0+255),w,b
 29827  006840  1196               	iorwf	(??_processEnumeration+2)& (0+255),w,b
 29828  006842  E106               	bnz	u24040
 29829  006844  0ED5               	movlw	213
 29830  006846  5D94               	subwf	??_processEnumeration& (0+255),w,b
 29831  006848  0E30               	movlw	48
 29832  00684A  5995               	subwfb	(??_processEnumeration+1)& (0+255),w,b
 29833  00684C  A0D8               	btfss	status,0,c
 29834  00684E  D022               	goto	l19431
 29835  006850                     u24040:
 29836                           
 29837                           ; BSR set to: 0
 29838                           ;can18.c: 651: {;can18.c: 652: for (i=1; i< (0x7F/8)+1; i++)
 29839  006850  0E01               	movlw	1
 29840  006852  6F9A               	movwf	processEnumeration@i& (0+255),b
 29841  006854                     l19419:
 29842                           
 29843                           ; BSR set to: 0
 29844                           ;can18.c: 653: enumerationResults[i] = 0;
 29845  006854  0E54               	movlw	low _enumerationResults
 29846  006856  259A               	addwf	processEnumeration@i& (0+255),w,b
 29847  006858  6ED9               	movwf	fsr2l,c
 29848  00685A  6ADA               	clrf	fsr2h,c
 29849  00685C  0E02               	movlw	high _enumerationResults
 29850  00685E  22DA               	addwfc	fsr2h,f,c
 29851  006860  0E00               	movlw	0
 29852  006862  6EDF               	movwf	indf2,c
 29853                           
 29854                           ; BSR set to: 0
 29855  006864  2B9A               	incf	processEnumeration@i& (0+255),f,b
 29856                           
 29857                           ; BSR set to: 0
 29858  006866  0E0F               	movlw	15
 29859  006868  659A               	cpfsgt	processEnumeration@i& (0+255),b
 29860  00686A  D7F4               	goto	l19419
 29861                           
 29862                           ; BSR set to: 0
 29863                           ;can18.c: 654: enumerationResults[0] = 1;
 29864  00686C  0E01               	movlw	1
 29865  00686E  0102               	movlb	2	; () banked
 29866  006870  6F54               	movwf	_enumerationResults& (0+255),b
 29867                           
 29868                           ;can18.c: 656: enumerationInProgress = 1;
 29869  006872  0E01               	movlw	1
 29870  006874  6E07               	movwf	_enumerationInProgress^0,c
 29871                           
 29872                           ;can18.c: 657: enumerationRequired = 0;
 29873  006876  0E00               	movlw	0
 29874  006878  6E09               	movwf	_enumerationRequired^0,c
 29875                           
 29876                           ; BSR set to: 2
 29877                           ;can18.c: 658: enumerationStartTime.Val = tickGet();
 29878  00687A  ECA3  F04B         	call	_tickGet	;wreg free
 29879  00687E  C071  F1B0         	movff	?_tickGet,_enumerationStartTime
 29880  006882  C072  F1B1         	movff	?_tickGet+1,_enumerationStartTime+1
 29881  006886  C073  F1B2         	movff	?_tickGet+2,_enumerationStartTime+2
 29882  00688A  C074  F1B3         	movff	?_tickGet+3,_enumerationStartTime+3
 29883                           
 29884                           ; BSR set to: 0
 29885                           ;can18.c: 659: TXB1CONbits.TXREQ = 1;
 29886  00688E  010F               	movlb	15	; () banked
 29887  006890  8710               	bsf	16,3,b	;volatile
 29888                           
 29889                           ;can18.c: 660: }
 29890  006892  0012               	return	
 29891  006894                     l19431:
 29892                           
 29893                           ; BSR set to: 0
 29894                           ;can18.c: 661: else if (enumerationInProgress && ((tickGet() - enumerationStartTime.Val)
      +                           > (62500/10) ))
 29895  006894  5007               	movf	_enumerationInProgress^0,w,c
 29896  006896  B4D8               	btfsc	status,2,c
 29897  006898  0012               	return	
 29898                           
 29899                           ; BSR set to: 0
 29900  00689A  ECA3  F04B         	call	_tickGet	;wreg free
 29901  00689E  0101               	movlb	1	; () banked
 29902  0068A0  51B0               	movf	_enumerationStartTime& (0+255),w,b
 29903  0068A2  0100               	movlb	0	; () banked
 29904  0068A4  5D71               	subwf	?_tickGet& (0+255),w,b
 29905  0068A6  6F94               	movwf	??_processEnumeration& (0+255),b
 29906  0068A8  0101               	movlb	1	; () banked
 29907  0068AA  51B1               	movf	(_enumerationStartTime+1)& (0+255),w,b
 29908  0068AC  0100               	movlb	0	; () banked
 29909  0068AE  5972               	subwfb	(?_tickGet+1)& (0+255),w,b
 29910  0068B0  6F95               	movwf	(??_processEnumeration+1)& (0+255),b
 29911  0068B2  0101               	movlb	1	; () banked
 29912  0068B4  51B2               	movf	(_enumerationStartTime+2)& (0+255),w,b
 29913  0068B6  0100               	movlb	0	; () banked
 29914  0068B8  5973               	subwfb	(?_tickGet+2)& (0+255),w,b
 29915  0068BA  6F96               	movwf	(??_processEnumeration+2)& (0+255),b
 29916  0068BC  0101               	movlb	1	; () banked
 29917  0068BE  51B3               	movf	(_enumerationStartTime+3)& (0+255),w,b
 29918  0068C0  0100               	movlb	0	; () banked
 29919  0068C2  5974               	subwfb	(?_tickGet+3)& (0+255),w,b
 29920  0068C4  6F97               	movwf	(??_processEnumeration+3)& (0+255),b
 29921  0068C6  5197               	movf	(??_processEnumeration+3)& (0+255),w,b
 29922  0068C8  1196               	iorwf	(??_processEnumeration+2)& (0+255),w,b
 29923  0068CA  E106               	bnz	u24070
 29924  0068CC  0E6B               	movlw	107
 29925  0068CE  5D94               	subwf	??_processEnumeration& (0+255),w,b
 29926  0068D0  0E18               	movlw	24
 29927  0068D2  5995               	subwfb	(??_processEnumeration+1)& (0+255),w,b
 29928  0068D4  A0D8               	btfss	status,0,c
 29929  0068D6  0012               	return	
 29930  0068D8                     u24070:
 29931                           
 29932                           ; BSR set to: 0
 29933                           ;can18.c: 662: {;can18.c: 666: for (i=0; (enumerationResults[i] == 0xFF) && (i < (0x7F/8
      +                          )+1); i++) {
 29934  0068D8  0E00               	movlw	0
 29935  0068DA  6F9A               	movwf	processEnumeration@i& (0+255),b
 29936  0068DC  D001               	goto	l19439
 29937  0068DE                     l19437:
 29938                           
 29939                           ; BSR set to: 0
 29940                           ;can18.c: 667: ;
 29941  0068DE  2B9A               	incf	processEnumeration@i& (0+255),f,b
 29942  0068E0                     l19439:
 29943                           
 29944                           ; BSR set to: 0
 29945  0068E0  0E54               	movlw	low _enumerationResults
 29946  0068E2  259A               	addwf	processEnumeration@i& (0+255),w,b
 29947  0068E4  6ED9               	movwf	fsr2l,c
 29948  0068E6  6ADA               	clrf	fsr2h,c
 29949  0068E8  0E02               	movlw	high _enumerationResults
 29950  0068EA  22DA               	addwfc	fsr2h,f,c
 29951  0068EC  28DE               	incf	postinc2,w,c
 29952  0068EE  A4D8               	btfss	status,2,c
 29953  0068F0  D003               	goto	u24090
 29954                           
 29955                           ; BSR set to: 0
 29956  0068F2  0E0F               	movlw	15
 29957  0068F4  659A               	cpfsgt	processEnumeration@i& (0+255),b
 29958  0068F6  D7F3               	goto	l19437
 29959  0068F8                     u24090:
 29960                           
 29961                           ; BSR set to: 0
 29962                           ;can18.c: 668: };can18.c: 670: if ((enumResult = enumerationResults[i]) != 0xFF)
 29963  0068F8  0E54               	movlw	low _enumerationResults
 29964  0068FA  259A               	addwf	processEnumeration@i& (0+255),w,b
 29965  0068FC  6ED9               	movwf	fsr2l,c
 29966  0068FE  6ADA               	clrf	fsr2h,c
 29967  006900  0E02               	movlw	high _enumerationResults
 29968  006902  22DA               	addwfc	fsr2h,f,c
 29969  006904  50DF               	movf	indf2,w,c
 29970  006906  6F98               	movwf	processEnumeration@enumResult& (0+255),b
 29971  006908  2998               	incf	processEnumeration@enumResult& (0+255),w,b
 29972  00690A  B4D8               	btfsc	status,2,c
 29973  00690C  D020               	goto	l19465
 29974                           
 29975                           ; BSR set to: 0
 29976                           ;can18.c: 671: {;can18.c: 672: for (newCanId = i*8U; (enumResult & 0x01U); newCanId++) {
 29977  00690E  519A               	movf	processEnumeration@i& (0+255),w,b
 29978  006910  0D08               	mullw	8
 29979  006912  CFF3 F099          	movff	prodl,processEnumeration@newCanId
 29980  006916  D003               	goto	l19451
 29981  006918                     l19447:
 29982                           
 29983                           ; BSR set to: 0
 29984                           ;can18.c: 673: enumResult >>= 1;
 29985  006918  90D8               	bcf	status,0,c
 29986  00691A  3398               	rrcf	processEnumeration@enumResult& (0+255),f,b
 29987                           
 29988                           ; BSR set to: 0
 29989  00691C  2B99               	incf	processEnumeration@newCanId& (0+255),f,b
 29990  00691E                     l19451:
 29991                           
 29992                           ; BSR set to: 0
 29993  00691E  B198               	btfsc	processEnumeration@enumResult& (0+255),0,b
 29994  006920  D7FB               	goto	l19447
 29995                           
 29996                           ; BSR set to: 0
 29997                           ;can18.c: 674: };can18.c: 675: if ((newCanId >= 1) && (newCanId <= 99)) {
 29998  006922  5199               	movf	processEnumeration@newCanId& (0+255),w,b
 29999  006924  B4D8               	btfsc	status,2,c
 30000  006926  D019               	goto	l19469
 30001                           
 30002                           ; BSR set to: 0
 30003  006928  0E64               	movlw	100
 30004  00692A  6199               	cpfslt	processEnumeration@newCanId& (0+255),b
 30005  00692C  D016               	goto	l19469
 30006                           
 30007                           ; BSR set to: 0
 30008                           ;can18.c: 676: canID = newCanId;
 30009  00692E  C099  F02C         	movff	processEnumeration@newCanId,_canID
 30010                           
 30011                           ; BSR set to: 0
 30012                           ;can18.c: 677: setNewCanId(canID);
 30013  006932  502C               	movf	_canID^0,w,c
 30014  006934  ECA7  F045         	call	_setNewCanId
 30015                           
 30016                           ; BSR set to: 0
 30017                           ;can18.c: 678: if (resultRequired) {
 30018  006938  5008               	movf	_resultRequired^0,w,c
 30019  00693A  B4D8               	btfsc	status,2,c
 30020  00693C  D00E               	goto	l19469
 30021                           
 30022                           ; BSR set to: 0
 30023                           ;can18.c: 679: cbusSendOpcMyNN( 0, 0x52, cbusMsg );
 30024  00693E  0E52               	movlw	82
 30025  006940  6F91               	movwf	cbusSendOpcMyNN@opc& (0+255),b
 30026  006942  0E1C               	movlw	low _cbusMsg
 30027  006944  6F92               	movwf	cbusSendOpcMyNN@msg& (0+255),b
 30028  006946  0E00               	movlw	0
 30029  006948  EC6B  F052         	call	_cbusSendOpcMyNN
 30030  00694C  D006               	goto	l19469
 30031  00694E                     l19465:
 30032                           
 30033                           ; BSR set to: 0
 30034                           ;can18.c: 683: else;can18.c: 684: {;can18.c: 685: if (resultRequired) {
 30035  00694E  5008               	movf	_resultRequired^0,w,c
 30036  006950  B4D8               	btfsc	status,2,c
 30037  006952  D003               	goto	l19469
 30038                           
 30039                           ; BSR set to: 0
 30040                           ;can18.c: 686: doError(7);
 30041  006954  0E07               	movlw	7
 30042  006956  EC5C  F052         	call	_doError
 30043  00695A                     l19469:
 30044                           
 30045                           ; BSR set to: 0
 30046                           ;can18.c: 687: };can18.c: 688: };can18.c: 689: enumerationRequired = enumerationInProgre
      +                          ss = 0;
 30047  00695A  0E00               	movlw	0
 30048  00695C  6E07               	movwf	_enumerationInProgress^0,c
 30049  00695E  C007  F009         	movff	_enumerationInProgress,_enumerationRequired
 30050  006962  0012               	return		;funcret
 30051  006964                     __end_of_processEnumeration:
 30052                           	callstack 0
 30053                           
 30054 ;; *************** function _setNewCanId *****************
 30055 ;; Defined at:
 30056 ;;		line 307 in file "../../github/CBUSlib/can18.c"
 30057 ;; Parameters:    Size  Location     Type
 30058 ;;  newCanId        1    wreg     unsigned char 
 30059 ;; Auto vars:     Size  Location     Type
 30060 ;;  newCanId        1   25[BANK0 ] unsigned char 
 30061 ;; Return value:  Size  Location     Type
 30062 ;;                  1    wreg      unsigned char 
 30063 ;; Registers used:
 30064 ;;		wreg, status,2, status,0, cstack
 30065 ;; Tracked objects:
 30066 ;;		On entry : 3F/0
 30067 ;;		On exit  : 3F/0
 30068 ;;		Unchanged: 0/0
 30069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 30070 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 30071 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 30072 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 30073 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 30074 ;;Total ram usage:        3 bytes
 30075 ;; Hardware stack levels used: 1
 30076 ;; Hardware stack levels required when called: 10
 30077 ;; This function calls:
 30078 ;;		_ee_write
 30079 ;; This function is called by:
 30080 ;;		_processEnumeration
 30081 ;;		_parseFLiMCmd
 30082 ;; This function uses a non-reentrant model
 30083 ;;
 30084                           
 30085                           	psect	text140
 30086  008B4E                     __ptext140:
 30087                           	callstack 0
 30088  008B4E                     _setNewCanId:
 30089                           	callstack 17
 30090                           
 30091                           ;incstack = 0
 30092                           ;setNewCanId@newCanId stored from wreg
 30093  008B4E  6F79               	movwf	setNewCanId@newCanId& (0+255),b
 30094                           
 30095                           ;can18.c: 310: if ((newCanId >= 1) && (newCanId <= 99)) {
 30096  008B50  0100               	movlb	0	; () banked
 30097  008B52  5179               	movf	setNewCanId@newCanId& (0+255),w,b
 30098  008B54  B4D8               	btfsc	status,2,c
 30099  008B56  D03E               	goto	l19151
 30100                           
 30101                           ; BSR set to: 0
 30102  008B58  0E64               	movlw	100
 30103  008B5A  6179               	cpfslt	setNewCanId@newCanId& (0+255),b
 30104  008B5C  D03B               	goto	l19151
 30105                           
 30106                           ; BSR set to: 0
 30107                           ;can18.c: 311: canID = newCanId;
 30108  008B5E  C079  F02C         	movff	setNewCanId@newCanId,_canID
 30109                           
 30110                           ; BSR set to: 0
 30111                           ;can18.c: 312: TXB0SIDH &= 0b11110000;
 30112  008B62  0EF0               	movlw	240
 30113  008B64  010F               	movlb	15	; () banked
 30114  008B66  1721               	andwf	33,f,b	;volatile
 30115                           
 30116                           ;can18.c: 313: TXB0SIDH |= ((newCanId & 0x78U) >>3U);
 30117  008B68  0100               	movlb	0	; () banked
 30118  008B6A  3979               	swapf	setNewCanId@newCanId& (0+255),w,b
 30119  008B6C  46E8               	rlncf	wreg,f,c
 30120  008B6E  0B1F               	andlw	31
 30121  008B70  0B0F               	andlw	15
 30122  008B72  010F               	movlb	15	; () banked
 30123  008B74  1321               	iorwf	33,f,b	;volatile
 30124                           
 30125                           ;can18.c: 314: TXB0SIDL = ( newCanId & 0x07U) << 5U;
 30126  008B76  C079  F077         	movff	setNewCanId@newCanId,??_setNewCanId
 30127  008B7A  0E07               	movlw	7
 30128  008B7C  0100               	movlb	0	; () banked
 30129  008B7E  1777               	andwf	??_setNewCanId& (0+255),f,b
 30130  008B80  0E05               	movlw	5
 30131  008B82  6F78               	movwf	(??_setNewCanId+1)& (0+255),b
 30132  008B84                     u23655:
 30133  008B84  90D8               	bcf	status,0,c
 30134  008B86  3777               	rlcf	??_setNewCanId& (0+255),f,b
 30135  008B88  2F78               	decfsz	(??_setNewCanId+1)& (0+255),f,b
 30136  008B8A  D7FC               	goto	u23655
 30137  008B8C  5177               	movf	??_setNewCanId& (0+255),w,b
 30138  008B8E  010F               	movlb	15	; () banked
 30139  008B90  6F22               	movwf	34,b	;volatile
 30140                           
 30141                           ;can18.c: 316: TXB1SIDH &= 0b11110000;
 30142  008B92  0EF0               	movlw	240
 30143  008B94  1711               	andwf	17,f,b	;volatile
 30144                           
 30145                           ;can18.c: 317: TXB1SIDH |= ((newCanId & 0x78U) >>3U);
 30146  008B96  0100               	movlb	0	; () banked
 30147  008B98  3979               	swapf	setNewCanId@newCanId& (0+255),w,b
 30148  008B9A  46E8               	rlncf	wreg,f,c
 30149  008B9C  0B1F               	andlw	31
 30150  008B9E  0B0F               	andlw	15
 30151  008BA0  010F               	movlb	15	; () banked
 30152  008BA2  1311               	iorwf	17,f,b	;volatile
 30153                           
 30154                           ; BSR set to: 15
 30155                           ;can18.c: 318: TXB1SIDL = TXB0SIDL;
 30156  008BA4  CF22 FF12          	movff	3874,3858	;volatile
 30157                           
 30158                           ;can18.c: 320: TXB2SIDH &= 0b11110000;
 30159  008BA8  0EF0               	movlw	240
 30160  008BAA  1701               	andwf	1,f,b	;volatile
 30161                           
 30162                           ;can18.c: 321: TXB2SIDH |= ((newCanId & 0x78U) >>3U);
 30163  008BAC  0100               	movlb	0	; () banked
 30164  008BAE  3979               	swapf	setNewCanId@newCanId& (0+255),w,b
 30165  008BB0  46E8               	rlncf	wreg,f,c
 30166  008BB2  0B1F               	andlw	31
 30167  008BB4  0B0F               	andlw	15
 30168  008BB6  010F               	movlb	15	; () banked
 30169  008BB8  1301               	iorwf	1,f,b	;volatile
 30170                           
 30171                           ; BSR set to: 15
 30172                           ;can18.c: 322: TXB2SIDL = TXB0SIDL;
 30173  008BBA  CF22 FF02          	movff	3874,3842	;volatile
 30174                           
 30175                           ; BSR set to: 15
 30176                           ;can18.c: 324: ee_write((WORD)((BYTE*)(0x3FF-1)), newCanId );
 30177  008BBE  0E03               	movlw	3
 30178  008BC0  0100               	movlb	0	; () banked
 30179  008BC2  6F74               	movwf	(ee_write@addr+1)& (0+255),b
 30180  008BC4  0EFE               	movlw	254
 30181  008BC6  6F73               	movwf	ee_write@addr& (0+255),b
 30182  008BC8  C079  F075         	movff	setNewCanId@newCanId,ee_write@data
 30183  008BCC  EC1D  F04D         	call	_ee_write	;wreg free
 30184                           
 30185                           ; BSR set to: 0
 30186                           ;can18.c: 325: return 1;
 30187  008BD0  0E01               	movlw	1
 30188  008BD2  0012               	return	
 30189  008BD4                     l19151:
 30190                           
 30191                           ; BSR set to: 0
 30192                           ;can18.c: 327: return 0;
 30193  008BD4  0E00               	movlw	0
 30194                           
 30195                           ; BSR set to: 0
 30196  008BD6  0012               	return		;funcret
 30197  008BD8                     __end_of_setNewCanId:
 30198                           	callstack 0
 30199                           
 30200 ;; *************** function _doError *****************
 30201 ;; Defined at:
 30202 ;;		line 742 in file "../../github/CBUSlib/FliM.c"
 30203 ;; Parameters:    Size  Location     Type
 30204 ;;  code            1    wreg     unsigned char 
 30205 ;; Auto vars:     Size  Location     Type
 30206 ;;  code            1   51[BANK0 ] unsigned char 
 30207 ;; Return value:  Size  Location     Type
 30208 ;;                  1    wreg      void 
 30209 ;; Registers used:
 30210 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 30211 ;; Tracked objects:
 30212 ;;		On entry : 3F/0
 30213 ;;		On exit  : 3F/0
 30214 ;;		Unchanged: 0/0
 30215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 30216 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 30217 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 30218 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 30219 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 30220 ;;Total ram usage:        1 bytes
 30221 ;; Hardware stack levels used: 1
 30222 ;; Hardware stack levels required when called: 13
 30223 ;; This function calls:
 30224 ;;		_cbusSendMsgNN
 30225 ;; This function is called by:
 30226 ;;		_processEnumeration
 30227 ;;		_doNenrd
 30228 ;;		_parseFLiMCmd
 30229 ;;		_doRqnpn
 30230 ;;		_doNvrd
 30231 ;;		_doNvset
 30232 ;;		_doAreq
 30233 ;; This function uses a non-reentrant model
 30234 ;;
 30235                           
 30236                           	psect	text141
 30237  00A4B8                     __ptext141:
 30238                           	callstack 0
 30239  00A4B8                     _doError:
 30240                           	callstack 13
 30241                           
 30242                           ; BSR set to: 0
 30243                           ;incstack = 0
 30244                           ;doError@code stored from wreg
 30245  00A4B8  6F93               	movwf	doError@code& (0+255),b
 30246                           
 30247                           ;FliM.c: 744: cbusMsg[d0] = 0x6F;
 30248  00A4BA  0E6F               	movlw	111
 30249  00A4BC  6E22               	movwf	(_cbusMsg+6)^0,c
 30250                           
 30251                           ;FliM.c: 745: cbusMsg[d3] = code;
 30252  00A4BE  C093  F025         	movff	doError@code,_cbusMsg+9
 30253                           
 30254                           ;FliM.c: 746: cbusSendMsgNN(0xFF, -1, cbusMsg);
 30255  00A4C2  0EFF               	movlw	255
 30256  00A4C4  0100               	movlb	0	; () banked
 30257  00A4C6  6F90               	movwf	(cbusSendMsgNN@eventNode+1)& (0+255),b
 30258  00A4C8  698F               	setf	cbusSendMsgNN@eventNode& (0+255),b
 30259  00A4CA  0E1C               	movlw	low _cbusMsg
 30260  00A4CC  6F91               	movwf	cbusSendMsgNN@msg& (0+255),b
 30261  00A4CE  0EFF               	movlw	255
 30262  00A4D0  EC52  F04F         	call	_cbusSendMsgNN
 30263                           
 30264                           ; BSR set to: 0
 30265  00A4D4  0012               	return		;funcret
 30266  00A4D6                     __end_of_doError:
 30267                           	callstack 0
 30268                           
 30269 ;; *************** function _cbusSendOpcMyNN *****************
 30270 ;; Defined at:
 30271 ;;		line 149 in file "../../github/CBUSlib/cbus.c"
 30272 ;; Parameters:    Size  Location     Type
 30273 ;;  cbusNum         1    wreg     unsigned char 
 30274 ;;  opc             1   49[BANK0 ] unsigned char 
 30275 ;;  msg             1   50[BANK0 ] PTR unsigned char 
 30276 ;;		 -> cbusMsg(16), 
 30277 ;; Auto vars:     Size  Location     Type
 30278 ;;  cbusNum         1   51[BANK0 ] unsigned char 
 30279 ;; Return value:  Size  Location     Type
 30280 ;;                  1    wreg      unsigned char 
 30281 ;; Registers used:
 30282 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 30283 ;; Tracked objects:
 30284 ;;		On entry : 3F/0
 30285 ;;		On exit  : 3F/0
 30286 ;;		Unchanged: 0/0
 30287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 30288 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 30289 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 30290 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 30291 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 30292 ;;Total ram usage:        3 bytes
 30293 ;; Hardware stack levels used: 1
 30294 ;; Hardware stack levels required when called: 13
 30295 ;; This function calls:
 30296 ;;		_cbusSendMsgMyNN
 30297 ;; This function is called by:
 30298 ;;		_checkCBUS
 30299 ;;		_processEnumeration
 30300 ;;		_doNnevn
 30301 ;;		_doNenrd
 30302 ;;		_doRqevn
 30303 ;;		_doNvset
 30304 ;;		_doSnn
 30305 ;;		_doNnclr
 30306 ;;		_doEvlrn
 30307 ;;		_doReval
 30308 ;;		_doReqev
 30309 ;;		_doTimedResponse
 30310 ;; This function uses a non-reentrant model
 30311 ;;
 30312                           
 30313                           	psect	text142
 30314  00A4D6                     __ptext142:
 30315                           	callstack 0
 30316  00A4D6                     _cbusSendOpcMyNN:
 30317                           	callstack 16
 30318                           
 30319                           ; BSR set to: 0
 30320                           ;incstack = 0
 30321                           ;cbusSendOpcMyNN@cbusNum stored from wreg
 30322  00A4D6  6F93               	movwf	cbusSendOpcMyNN@cbusNum& (0+255),b
 30323                           
 30324                           ;cbus.c: 151: msg[d0] = opc;
 30325  00A4D8  0100               	movlb	0	; () banked
 30326  00A4DA  5192               	movf	cbusSendOpcMyNN@msg& (0+255),w,b
 30327  00A4DC  6ED9               	movwf	fsr2l,c
 30328  00A4DE  6ADA               	clrf	fsr2h,c
 30329  00A4E0  0E06               	movlw	6
 30330  00A4E2  26D9               	addwf	fsr2l,f,c
 30331  00A4E4  C091  FFDF         	movff	cbusSendOpcMyNN@opc,indf2
 30332                           
 30333                           ; BSR set to: 0
 30334                           ;cbus.c: 152: return cbusSendMsgMyNN(cbusNum, msg);
 30335  00A4E8  C092  F08F         	movff	cbusSendOpcMyNN@msg,cbusSendMsgMyNN@msg
 30336  00A4EC  5193               	movf	cbusSendOpcMyNN@cbusNum& (0+255),w,b
 30337  00A4EE  EC8A  F051         	call	_cbusSendMsgMyNN
 30338                           
 30339                           ; BSR set to: 0
 30340  00A4F2  0012               	return		;funcret
 30341  00A4F4                     __end_of_cbusSendOpcMyNN:
 30342                           	callstack 0
 30343                           
 30344 ;; *************** function _cbusSendMsgMyNN *****************
 30345 ;; Defined at:
 30346 ;;		line 255 in file "../../github/CBUSlib/cbus.c"
 30347 ;; Parameters:    Size  Location     Type
 30348 ;;  cbusNum         1    wreg     unsigned char 
 30349 ;;  msg             1   47[BANK0 ] PTR unsigned char 
 30350 ;;		 -> cbusMsg(16), 
 30351 ;; Auto vars:     Size  Location     Type
 30352 ;;  cbusNum         1   48[BANK0 ] unsigned char 
 30353 ;; Return value:  Size  Location     Type
 30354 ;;                  1    wreg      unsigned char 
 30355 ;; Registers used:
 30356 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 30357 ;; Tracked objects:
 30358 ;;		On entry : 3F/0
 30359 ;;		On exit  : 3F/0
 30360 ;;		Unchanged: 0/0
 30361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 30362 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 30363 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 30364 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 30365 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 30366 ;;Total ram usage:        2 bytes
 30367 ;; Hardware stack levels used: 1
 30368 ;; Hardware stack levels required when called: 12
 30369 ;; This function calls:
 30370 ;;		_cbusSendMsg
 30371 ;; This function is called by:
 30372 ;;		_cbusSendOpcMyNN
 30373 ;;		_doNvrd
 30374 ;; This function uses a non-reentrant model
 30375 ;;
 30376                           
 30377                           	psect	text143
 30378  00A314                     __ptext143:
 30379                           	callstack 0
 30380  00A314                     _cbusSendMsgMyNN:
 30381                           	callstack 16
 30382                           
 30383                           ; BSR set to: 0
 30384                           ;incstack = 0
 30385                           ;cbusSendMsgMyNN@cbusNum stored from wreg
 30386  00A314  6F90               	movwf	cbusSendMsgMyNN@cbusNum& (0+255),b
 30387                           
 30388                           ;cbus.c: 257: msg[d1] = nodeID>>8;
 30389  00A316  0100               	movlb	0	; () banked
 30390  00A318  518F               	movf	cbusSendMsgMyNN@msg& (0+255),w,b
 30391  00A31A  6ED9               	movwf	fsr2l,c
 30392  00A31C  6ADA               	clrf	fsr2h,c
 30393  00A31E  0E07               	movlw	7
 30394  00A320  26D9               	addwf	fsr2l,f,c
 30395  00A322  C002  FFDF         	movff	_nodeID+1,indf2
 30396                           
 30397                           ;cbus.c: 258: msg[d2] = nodeID & 0xFF;
 30398  00A326  518F               	movf	cbusSendMsgMyNN@msg& (0+255),w,b
 30399  00A328  6ED9               	movwf	fsr2l,c
 30400  00A32A  6ADA               	clrf	fsr2h,c
 30401  00A32C  0E08               	movlw	8
 30402  00A32E  26D9               	addwf	fsr2l,f,c
 30403  00A330  C001  FFDF         	movff	_nodeID,indf2
 30404                           
 30405                           ; BSR set to: 0
 30406                           ;cbus.c: 259: return cbusSendMsg(cbusNum, msg);
 30407  00A334  C08F  F08B         	movff	cbusSendMsgMyNN@msg,cbusSendMsg@msg
 30408  00A338  5190               	movf	cbusSendMsgMyNN@cbusNum& (0+255),w,b
 30409  00A33A  ECAD  F04F         	call	_cbusSendMsg
 30410                           
 30411                           ; BSR set to: 0
 30412  00A33E  0012               	return		;funcret
 30413  00A340                     __end_of_cbusSendMsgMyNN:
 30414                           	callstack 0
 30415                           
 30416 ;; *************** function _checkIncomingPacket *****************
 30417 ;; Defined at:
 30418 ;;		line 700 in file "../../github/CBUSlib/can18.c"
 30419 ;; Parameters:    Size  Location     Type
 30420 ;;  ptr             2   27[BANK0 ] PTR struct .
 30421 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 30422 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 30423 ;; Auto vars:     Size  Location     Type
 30424 ;;  incomingCanI    1   34[BANK0 ] unsigned char 
 30425 ;;  msgFound        1   33[BANK0 ] unsigned char 
 30426 ;; Return value:  Size  Location     Type
 30427 ;;                  1    wreg      unsigned char 
 30428 ;; Registers used:
 30429 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 30430 ;; Tracked objects:
 30431 ;;		On entry : 3F/0
 30432 ;;		On exit  : 3F/0
 30433 ;;		Unchanged: 0/0
 30434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 30435 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 30436 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 30437 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 30438 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 30439 ;;Total ram usage:        8 bytes
 30440 ;; Hardware stack levels used: 1
 30441 ;; Hardware stack levels required when called: 9
 30442 ;; This function calls:
 30443 ;;		_doEnum
 30444 ;;		_tickGet
 30445 ;; This function is called by:
 30446 ;;		_canbusRecv
 30447 ;; This function uses a non-reentrant model
 30448 ;;
 30449                           
 30450                           	psect	text144
 30451  007150                     __ptext144:
 30452                           	callstack 0
 30453  007150                     _checkIncomingPacket:
 30454                           	callstack 18
 30455                           
 30456                           ; BSR set to: 0
 30457                           ;can18.c: 703: BYTE incomingCanId;;can18.c: 704: BOOL msgFound;;can18.c: 706: msgFound =
      +                           0;
 30458                           
 30459                           ; BSR set to: 0
 30460                           ;incstack = 0
 30461  007150  0E00               	movlw	0
 30462  007152  6F81               	movwf	checkIncomingPacket@msgFound& (0+255),b
 30463                           
 30464                           ; BSR set to: 0
 30465                           ;can18.c: 707: incomingCanId = (unsigned char)((unsigned char)((unsigned char)(ptr->buff
      +                          er[(unsigned char)sidh] << 3U) + (unsigned char)(ptr->buffer[(unsigned char)sidl] >> 5U)
      +                          ) & 0x7fU);
 30466  007154  EE20 F002          	lfsr	2,2
 30467  007158  517B               	movf	checkIncomingPacket@ptr& (0+255),w,b
 30468  00715A  26D9               	addwf	fsr2l,f,c
 30469  00715C  517C               	movf	(checkIncomingPacket@ptr+1)& (0+255),w,b
 30470  00715E  22DA               	addwfc	fsr2h,f,c
 30471  007160  50DF               	movf	indf2,w,c
 30472  007162  6F7D               	movwf	??_checkIncomingPacket& (0+255),b
 30473  007164  0E05               	movlw	5
 30474  007166  6F7E               	movwf	(??_checkIncomingPacket+1)& (0+255),b
 30475  007168                     u24165:
 30476  007168  90D8               	bcf	status,0,c
 30477  00716A  337D               	rrcf	??_checkIncomingPacket& (0+255),f,b
 30478  00716C  2F7E               	decfsz	(??_checkIncomingPacket+1)& (0+255),f,b
 30479  00716E  D7FC               	goto	u24165
 30480  007170  EE20 F001          	lfsr	2,1
 30481  007174  517B               	movf	checkIncomingPacket@ptr& (0+255),w,b
 30482  007176  26D9               	addwf	fsr2l,f,c
 30483  007178  517C               	movf	(checkIncomingPacket@ptr+1)& (0+255),w,b
 30484  00717A  22DA               	addwfc	fsr2h,f,c
 30485  00717C  50DF               	movf	indf2,w,c
 30486  00717E  0D08               	mullw	8
 30487  007180  50F3               	movf	243,w,c
 30488  007182  257D               	addwf	??_checkIncomingPacket& (0+255),w,b
 30489  007184  0B7F               	andlw	127
 30490  007186  6F82               	movwf	checkIncomingPacket@incomingCanId& (0+255),b
 30491                           
 30492                           ; BSR set to: 0
 30493                           ;can18.c: 709: if (enumerationInProgress) {
 30494  007188  5007               	movf	_enumerationInProgress^0,w,c
 30495  00718A  B4D8               	btfsc	status,2,c
 30496  00718C  D01B               	goto	l19501
 30497                           
 30498                           ; BSR set to: 0
 30499                           ;can18.c: 710: ( enumerationResults[incomingCanId>>3] |= ( 1<<(incomingCanId & 0x07) ) )
      +                          ;
 30500  00718E  C082  F07D         	movff	checkIncomingPacket@incomingCanId,??_checkIncomingPacket
 30501  007192  0E07               	movlw	7
 30502  007194  177D               	andwf	??_checkIncomingPacket& (0+255),f,b
 30503  007196  0E01               	movlw	1
 30504  007198  6F7E               	movwf	(??_checkIncomingPacket+1)& (0+255),b
 30505  00719A  2B7D               	incf	??_checkIncomingPacket& (0+255),f,b
 30506  00719C  D002               	goto	u24184
 30507  00719E                     u24185:
 30508  00719E  90D8               	bcf	status,0,c
 30509  0071A0  377E               	rlcf	(??_checkIncomingPacket+1)& (0+255),f,b
 30510  0071A2                     u24184:
 30511  0071A2  2F7D               	decfsz	??_checkIncomingPacket& (0+255),f,b
 30512  0071A4  D7FC               	goto	u24185
 30513  0071A6  0100               	movlb	0	; () banked
 30514  0071A8  3982               	swapf	checkIncomingPacket@incomingCanId& (0+255),w,b
 30515  0071AA  46E8               	rlncf	wreg,f,c
 30516  0071AC  0B1F               	andlw	31
 30517  0071AE  6F7F               	movwf	(??_checkIncomingPacket+2)& (0+255),b
 30518  0071B0  6B80               	clrf	(??_checkIncomingPacket+3)& (0+255),b
 30519  0071B2  0E54               	movlw	low _enumerationResults
 30520  0071B4  257F               	addwf	(??_checkIncomingPacket+2)& (0+255),w,b
 30521  0071B6  6ED9               	movwf	fsr2l,c
 30522  0071B8  0E02               	movlw	high _enumerationResults
 30523  0071BA  2180               	addwfc	(??_checkIncomingPacket+3)& (0+255),w,b
 30524  0071BC  6EDA               	movwf	fsr2h,c
 30525  0071BE  517E               	movf	(??_checkIncomingPacket+1)& (0+255),w,b
 30526  0071C0  12DF               	iorwf	indf2,f,c
 30527                           
 30528                           ;can18.c: 711: } else if (!enumerationRequired && (incomingCanId == canID))
 30529  0071C2  D014               	goto	l19509
 30530  0071C4                     l19501:
 30531                           
 30532                           ; BSR set to: 0
 30533  0071C4  5009               	movf	_enumerationRequired^0,w,c
 30534  0071C6  A4D8               	btfss	status,2,c
 30535  0071C8  D011               	goto	l19509
 30536                           
 30537                           ; BSR set to: 0
 30538  0071CA  502C               	movf	_canID^0,w,c
 30539  0071CC  1982               	xorwf	checkIncomingPacket@incomingCanId& (0+255),w,b
 30540  0071CE  A4D8               	btfss	status,2,c
 30541  0071D0  D00D               	goto	l19509
 30542                           
 30543                           ; BSR set to: 0
 30544                           ;can18.c: 712: {;can18.c: 715: doEnum(0);
 30545  0071D2  0E00               	movlw	0
 30546  0071D4  EC26  F053         	call	_doEnum
 30547                           
 30548                           ;can18.c: 716: enumerationStartTime.Val = tickGet();
 30549  0071D8  ECA3  F04B         	call	_tickGet	;wreg free
 30550  0071DC  C071  F1B0         	movff	?_tickGet,_enumerationStartTime
 30551  0071E0  C072  F1B1         	movff	?_tickGet+1,_enumerationStartTime+1
 30552  0071E4  C073  F1B2         	movff	?_tickGet+2,_enumerationStartTime+2
 30553  0071E8  C074  F1B3         	movff	?_tickGet+3,_enumerationStartTime+3
 30554  0071EC                     l19509:
 30555                           
 30556                           ; BSR set to: 0
 30557                           ;can18.c: 717: };can18.c: 721: if (ptr->buffer[dlc] & 0x40 )
 30558  0071EC  EE20 F005          	lfsr	2,5
 30559  0071F0  517B               	movf	checkIncomingPacket@ptr& (0+255),w,b
 30560  0071F2  26D9               	addwf	fsr2l,f,c
 30561  0071F4  517C               	movf	(checkIncomingPacket@ptr+1)& (0+255),w,b
 30562  0071F6  22DA               	addwfc	fsr2h,f,c
 30563  0071F8  ACDF               	btfss	indf2,6,c
 30564  0071FA  D00D               	goto	l19515
 30565                           
 30566                           ; BSR set to: 0
 30567                           ;can18.c: 722: {;can18.c: 723: TXB2CONbits.TXREQ = 1;
 30568  0071FC  010F               	movlb	15	; () banked
 30569  0071FE  8700               	bsf	0,3,b	;volatile
 30570                           
 30571                           ; BSR set to: 15
 30572                           ;can18.c: 724: enumerationStartTime.Val = tickGet();
 30573  007200  ECA3  F04B         	call	_tickGet	;wreg free
 30574  007204  C071  F1B0         	movff	?_tickGet,_enumerationStartTime
 30575  007208  C072  F1B1         	movff	?_tickGet+1,_enumerationStartTime+1
 30576  00720C  C073  F1B2         	movff	?_tickGet+2,_enumerationStartTime+2
 30577  007210  C074  F1B3         	movff	?_tickGet+3,_enumerationStartTime+3
 30578                           
 30579                           ;can18.c: 725: }
 30580  007214  D01A               	goto	l19519
 30581  007216                     l19515:
 30582                           
 30583                           ; BSR set to: 0
 30584                           ;can18.c: 726: else;can18.c: 727: {;can18.c: 728: msgFound = ptr->buffer[dlc] & 0x0FU;
 30585  007216  EE20 F005          	lfsr	2,5
 30586  00721A  517B               	movf	checkIncomingPacket@ptr& (0+255),w,b
 30587  00721C  26D9               	addwf	fsr2l,f,c
 30588  00721E  517C               	movf	(checkIncomingPacket@ptr+1)& (0+255),w,b
 30589  007220  22DA               	addwfc	fsr2h,f,c
 30590  007222  50DF               	movf	indf2,w,c
 30591  007224  0B0F               	andlw	15
 30592  007226  6F81               	movwf	checkIncomingPacket@msgFound& (0+255),b
 30593                           
 30594                           ;can18.c: 729: if (ptr->buffer[dlc] > 8)
 30595  007228  EE20 F005          	lfsr	2,5
 30596  00722C  517B               	movf	checkIncomingPacket@ptr& (0+255),w,b
 30597  00722E  26D9               	addwf	fsr2l,f,c
 30598  007230  517C               	movf	(checkIncomingPacket@ptr+1)& (0+255),w,b
 30599  007232  22DA               	addwfc	fsr2h,f,c
 30600  007234  0E08               	movlw	8
 30601  007236  64DF               	cpfsgt	indf2,c
 30602  007238  D008               	goto	l19519
 30603                           
 30604                           ; BSR set to: 0
 30605                           ;can18.c: 730: ptr->buffer[dlc] = 8;
 30606  00723A  EE20 F005          	lfsr	2,5
 30607  00723E  517B               	movf	checkIncomingPacket@ptr& (0+255),w,b
 30608  007240  26D9               	addwf	fsr2l,f,c
 30609  007242  517C               	movf	(checkIncomingPacket@ptr+1)& (0+255),w,b
 30610  007244  22DA               	addwfc	fsr2h,f,c
 30611  007246  0E08               	movlw	8
 30612  007248  6EDF               	movwf	indf2,c
 30613  00724A                     l19519:
 30614                           
 30615                           ; BSR set to: 0
 30616                           ;can18.c: 731: };can18.c: 733: return( msgFound );
 30617  00724A  5181               	movf	checkIncomingPacket@msgFound& (0+255),w,b
 30618                           
 30619                           ; BSR set to: 0
 30620  00724C  0012               	return		;funcret
 30621  00724E                     __end_of_checkIncomingPacket:
 30622                           	callstack 0
 30623                           
 30624 ;; *************** function _doEnum *****************
 30625 ;; Defined at:
 30626 ;;		line 635 in file "../../github/CBUSlib/can18.c"
 30627 ;; Parameters:    Size  Location     Type
 30628 ;;  sendResult      1    wreg     unsigned char 
 30629 ;; Auto vars:     Size  Location     Type
 30630 ;;  sendResult      1   17[BANK0 ] unsigned char 
 30631 ;; Return value:  Size  Location     Type
 30632 ;;                  1    wreg      void 
 30633 ;; Registers used:
 30634 ;;		wreg, status,2
 30635 ;; Tracked objects:
 30636 ;;		On entry : 3F/0
 30637 ;;		On exit  : 0/0
 30638 ;;		Unchanged: 0/0
 30639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 30640 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 30641 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 30642 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 30643 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 30644 ;;Total ram usage:        1 bytes
 30645 ;; Hardware stack levels used: 1
 30646 ;; Hardware stack levels required when called: 8
 30647 ;; This function calls:
 30648 ;;		Nothing
 30649 ;; This function is called by:
 30650 ;;		_checkIncomingPacket
 30651 ;;		_parseFLiMCmd
 30652 ;; This function uses a non-reentrant model
 30653 ;;
 30654                           
 30655                           	psect	text145
 30656  00A64C                     __ptext145:
 30657                           	callstack 0
 30658  00A64C                     _doEnum:
 30659                           	callstack 19
 30660                           
 30661                           ; BSR set to: 0
 30662                           ;incstack = 0
 30663                           ;doEnum@sendResult stored from wreg
 30664  00A64C  6F71               	movwf	doEnum@sendResult& (0+255),b
 30665                           
 30666                           ;can18.c: 636: resultRequired = sendResult;
 30667  00A64E  C071  F008         	movff	doEnum@sendResult,_resultRequired
 30668                           
 30669                           ;can18.c: 637: if (! enumerationInProgress) {
 30670  00A652  5007               	movf	_enumerationInProgress^0,w,c
 30671  00A654  A4D8               	btfss	status,2,c
 30672  00A656  0012               	return	
 30673                           
 30674                           ;can18.c: 638: enumerationRequired = 1;
 30675  00A658  0E01               	movlw	1
 30676  00A65A  6E09               	movwf	_enumerationRequired^0,c
 30677  00A65C  0012               	return		;funcret
 30678  00A65E                     __end_of_doEnum:
 30679                           	callstack 0
 30680                           
 30681 ;; *************** function __PointBuffer *****************
 30682 ;; Defined at:
 30683 ;;		line 792 in file "../../github/CBUSlib/can18.c"
 30684 ;; Parameters:    Size  Location     Type
 30685 ;;  b               1    wreg     unsigned char 
 30686 ;; Auto vars:     Size  Location     Type
 30687 ;;  b               1   19[BANK0 ] unsigned char 
 30688 ;;  pt              2   20[BANK0 ] PTR unsigned char 
 30689 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 30690 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 30691 ;; Return value:  Size  Location     Type
 30692 ;;                  2   17[BANK0 ] PTR unsigned char 
 30693 ;; Registers used:
 30694 ;;		wreg, status,2, status,0
 30695 ;; Tracked objects:
 30696 ;;		On entry : 3F/0
 30697 ;;		On exit  : 3F/0
 30698 ;;		Unchanged: 0/0
 30699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 30700 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 30701 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 30702 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 30703 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 30704 ;;Total ram usage:        5 bytes
 30705 ;; Hardware stack levels used: 1
 30706 ;; Hardware stack levels required when called: 8
 30707 ;; This function calls:
 30708 ;;		Nothing
 30709 ;; This function is called by:
 30710 ;;		_canbusRecv
 30711 ;; This function uses a non-reentrant model
 30712 ;;
 30713                           
 30714                           	psect	text146
 30715  00918A                     __ptext146:
 30716                           	callstack 0
 30717  00918A                     __PointBuffer:
 30718                           	callstack 19
 30719                           
 30720                           ;incstack = 0
 30721                           ;__PointBuffer@b stored from wreg
 30722  00918A  6F73               	movwf	__PointBuffer@b& (0+255),b
 30723                           
 30724                           ;can18.c: 793: BYTE* pt;;can18.c: 795: switch (b) {
 30725  00918C  D016               	goto	l19491
 30726  00918E                     l19473:
 30727                           
 30728                           ; BSR set to: 0
 30729                           ;can18.c: 797: pt = (BYTE*) & RXB0CON;
 30730  00918E  0E60               	movlw	96
 30731  009190  D001               	goto	L23
 30732  009192                     l19475:
 30733                           
 30734                           ; BSR set to: 0
 30735                           ;can18.c: 800: pt = (BYTE*) & RXB1CON;
 30736  009192  0E30               	movlw	48
 30737  009194                     L23:
 30738  009194  6F74               	movwf	__PointBuffer@pt& (0+255),b
 30739  009196  0E0F               	movlw	15
 30740  009198  D002               	goto	L24
 30741  00919A                     l19477:
 30742                           
 30743                           ; BSR set to: 0
 30744                           ;can18.c: 803: pt = (BYTE*) & B0CON;
 30745  00919A  0E80               	movlw	128
 30746  00919C  D00B               	goto	L29
 30747  00919E                     L24:
 30748  00919E  6F75               	movwf	(__PointBuffer@pt+1)& (0+255),b
 30749                           
 30750                           ;can18.c: 804: break;
 30751  0091A0  D024               	goto	l1699
 30752  0091A2                     l19479:
 30753                           
 30754                           ; BSR set to: 0
 30755                           ;can18.c: 806: pt = (BYTE*) & B1CON;
 30756  0091A2  0E90               	movlw	144
 30757  0091A4  D007               	goto	L29
 30758  0091A6                     l19481:
 30759                           
 30760                           ; BSR set to: 0
 30761                           ;can18.c: 809: pt = (BYTE*) & B2CON;
 30762  0091A6  0EA0               	movlw	160
 30763  0091A8  D005               	goto	L29
 30764  0091AA                     l19483:
 30765                           
 30766                           ; BSR set to: 0
 30767                           ;can18.c: 812: pt = (BYTE*) & B3CON;
 30768  0091AA  0EB0               	movlw	176
 30769  0091AC  D003               	goto	L29
 30770  0091AE                     l19485:
 30771                           
 30772                           ; BSR set to: 0
 30773                           ;can18.c: 815: pt = (BYTE*) & B4CON;
 30774  0091AE  0EC0               	movlw	192
 30775  0091B0  D001               	goto	L29
 30776  0091B2                     l19487:
 30777                           
 30778                           ; BSR set to: 0
 30779                           ;can18.c: 818: pt = (BYTE*) & B5CON;
 30780  0091B2  0ED0               	movlw	208
 30781  0091B4                     L29:
 30782  0091B4  6F74               	movwf	__PointBuffer@pt& (0+255),b
 30783  0091B6  0E0E               	movlw	14
 30784  0091B8  D7F2               	goto	L24
 30785  0091BA                     l19491:
 30786  0091BA  0100               	movlb	0	; () banked
 30787  0091BC  5173               	movf	__PointBuffer@b& (0+255),w,b
 30788                           
 30789                           ; Switch size 1, requested type "simple"
 30790                           ; Number of cases is 7, Range of values is 0 to 6
 30791                           ; switch strategies available:
 30792                           ; Name         Instructions Cycles
 30793                           ; simple_byte           22    12 (average)
 30794                           ;	Chosen strategy is simple_byte
 30795  0091BE  0A00               	xorlw	0	; case 0
 30796  0091C0  B4D8               	btfsc	status,2,c
 30797  0091C2  D7E5               	goto	l19473
 30798  0091C4  0A01               	xorlw	1	; case 1
 30799  0091C6  B4D8               	btfsc	status,2,c
 30800  0091C8  D7E4               	goto	l19475
 30801  0091CA  0A03               	xorlw	3	; case 2
 30802  0091CC  B4D8               	btfsc	status,2,c
 30803  0091CE  D7E5               	goto	l19477
 30804  0091D0  0A01               	xorlw	1	; case 3
 30805  0091D2  B4D8               	btfsc	status,2,c
 30806  0091D4  D7E6               	goto	l19479
 30807  0091D6  0A07               	xorlw	7	; case 4
 30808  0091D8  B4D8               	btfsc	status,2,c
 30809  0091DA  D7E5               	goto	l19481
 30810  0091DC  0A01               	xorlw	1	; case 5
 30811  0091DE  B4D8               	btfsc	status,2,c
 30812  0091E0  D7E4               	goto	l19483
 30813  0091E2  0A03               	xorlw	3	; case 6
 30814  0091E4  B4D8               	btfsc	status,2,c
 30815  0091E6  D7E3               	goto	l19485
 30816  0091E8  D7E4               	goto	l19487
 30817  0091EA                     l1699:
 30818                           
 30819                           ; BSR set to: 0
 30820                           ;can18.c: 821: return (pt);
 30821  0091EA  C074  F071         	movff	__PointBuffer@pt,?__PointBuffer
 30822  0091EE  C075  F072         	movff	__PointBuffer@pt+1,?__PointBuffer+1
 30823                           
 30824                           ; BSR set to: 0
 30825  0091F2  0012               	return		;funcret
 30826  0091F4                     __end_of__PointBuffer:
 30827                           	callstack 0
 30828                           
 30829 ;; *************** function _FLiMSWCheck *****************
 30830 ;; Defined at:
 30831 ;;		line 134 in file "../../github/CBUSlib/FliM.c"
 30832 ;; Parameters:    Size  Location     Type
 30833 ;;		None
 30834 ;; Auto vars:     Size  Location     Type
 30835 ;;		None
 30836 ;; Return value:  Size  Location     Type
 30837 ;;                  1    wreg      void 
 30838 ;; Registers used:
 30839 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 30840 ;; Tracked objects:
 30841 ;;		On entry : 0/0
 30842 ;;		On exit  : 0/0
 30843 ;;		Unchanged: 0/0
 30844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 30845 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 30846 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 30847 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 30848 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 30849 ;;Total ram usage:        4 bytes
 30850 ;; Hardware stack levels used: 1
 30851 ;; Hardware stack levels required when called: 17
 30852 ;; This function calls:
 30853 ;;		_SLiMRevert
 30854 ;;		_SaveNodeDetails
 30855 ;;		_requestNodeNumber
 30856 ;;		_setSLiMLed
 30857 ;;		_setStatusLed
 30858 ;;		_startFLiMFlash
 30859 ;;		_tickGet
 30860 ;; This function is called by:
 30861 ;;		_main
 30862 ;; This function uses a non-reentrant model
 30863 ;;
 30864                           
 30865                           	psect	text147
 30866  00666E                     __ptext147:
 30867                           	callstack 0
 30868  00666E                     _FLiMSWCheck:
 30869                           	callstack 13
 30870                           
 30871                           ;FliM.c: 137: switch (flimState)
 30872                           
 30873                           ; BSR set to: 0
 30874                           ;incstack = 0
 30875  00666E  D0BA               	goto	l21439
 30876  006670                     l2138:
 30877                           
 30878                           ;FliM.c: 140: case fsSLiM:;FliM.c: 141: if (!PORTAbits.RA2)
 30879  006670  B480               	btfsc	128,2,c	;volatile
 30880  006672  0012               	return	
 30881                           
 30882                           ;FliM.c: 142: {;FliM.c: 143: prevFlimState = flimState;
 30883  006674  C016  F006         	movff	_flimState,_prevFlimState
 30884                           
 30885                           ;FliM.c: 144: flimState = fsPressed;
 30886  006678  0E02               	movlw	2
 30887  00667A  6E16               	movwf	_flimState^0,c
 30888                           
 30889                           ;FliM.c: 146: cbusMsg[d1] = (nodeID >>8)&0xff;
 30890  00667C  C002  F023         	movff	_nodeID+1,_cbusMsg+7
 30891                           
 30892                           ;FliM.c: 147: cbusMsg[d2] = nodeID & 0xff;
 30893  006680  C001  F024         	movff	_nodeID,_cbusMsg+8
 30894  006684                     l21391:
 30895                           
 30896                           ;FliM.c: 148: switchTime.Val = tickGet();
 30897  006684  ECA3  F04B         	call	_tickGet	;wreg free
 30898  006688  C071  F1AC         	movff	?_tickGet,_switchTime
 30899  00668C  C072  F1AD         	movff	?_tickGet+1,_switchTime+1
 30900  006690  C073  F1AE         	movff	?_tickGet+2,_switchTime+2
 30901  006694  C074  F1AF         	movff	?_tickGet+3,_switchTime+3
 30902  006698  0012               	return	
 30903  00669A                     l2141:
 30904                           
 30905                           ;FliM.c: 153: if (!PORTAbits.RA2)
 30906  00669A  B480               	btfsc	128,2,c	;volatile
 30907  00669C  D026               	goto	l21399
 30908                           
 30909                           ;FliM.c: 154: {;FliM.c: 155: if ((tickGet() - switchTime.Val) > 4 * 62500)
 30910  00669E  ECA3  F04B         	call	_tickGet	;wreg free
 30911  0066A2  0101               	movlb	1	; () banked
 30912  0066A4  51AC               	movf	_switchTime& (0+255),w,b
 30913  0066A6  0100               	movlb	0	; () banked
 30914  0066A8  5D71               	subwf	?_tickGet& (0+255),w,b
 30915  0066AA  6FA1               	movwf	??_FLiMSWCheck& (0+255),b
 30916  0066AC  0101               	movlb	1	; () banked
 30917  0066AE  51AD               	movf	(_switchTime+1)& (0+255),w,b
 30918  0066B0  0100               	movlb	0	; () banked
 30919  0066B2  5972               	subwfb	(?_tickGet+1)& (0+255),w,b
 30920  0066B4  6FA2               	movwf	(??_FLiMSWCheck+1)& (0+255),b
 30921  0066B6  0101               	movlb	1	; () banked
 30922  0066B8  51AE               	movf	(_switchTime+2)& (0+255),w,b
 30923  0066BA  0100               	movlb	0	; () banked
 30924  0066BC  5973               	subwfb	(?_tickGet+2)& (0+255),w,b
 30925  0066BE  6FA3               	movwf	(??_FLiMSWCheck+2)& (0+255),b
 30926  0066C0  0101               	movlb	1	; () banked
 30927  0066C2  51AF               	movf	(_switchTime+3)& (0+255),w,b
 30928  0066C4  0100               	movlb	0	; () banked
 30929  0066C6  5974               	subwfb	(?_tickGet+3)& (0+255),w,b
 30930  0066C8  6FA4               	movwf	(??_FLiMSWCheck+3)& (0+255),b
 30931  0066CA  51A4               	movf	(??_FLiMSWCheck+3)& (0+255),w,b
 30932  0066CC  E108               	bnz	u27430
 30933  0066CE  0E91               	movlw	145
 30934  0066D0  5DA1               	subwf	??_FLiMSWCheck& (0+255),w,b
 30935  0066D2  0ED0               	movlw	208
 30936  0066D4  59A2               	subwfb	(??_FLiMSWCheck+1)& (0+255),w,b
 30937  0066D6  0E03               	movlw	3
 30938  0066D8  59A3               	subwfb	(??_FLiMSWCheck+2)& (0+255),w,b
 30939  0066DA  A0D8               	btfss	status,0,c
 30940  0066DC  0012               	return	
 30941  0066DE                     u27430:
 30942                           
 30943                           ; BSR set to: 0
 30944                           ;FliM.c: 156: {;FliM.c: 157: flimState = fsFlashing;
 30945  0066DE  0E03               	movlw	3
 30946  0066E0  6E16               	movwf	_flimState^0,c
 30947                           
 30948                           ; BSR set to: 0
 30949                           ;FliM.c: 158: startFLiMFlash(0);
 30950  0066E2  0E00               	movlw	0
 30951  0066E4  EC3A  F052         	call	_startFLiMFlash
 30952  0066E8  0012               	return	
 30953  0066EA                     l21399:
 30954                           
 30955                           ;FliM.c: 161: else if ((prevFlimState == fsFLiM) && ((tickGet() - switchTime.Val) > (625
      +                          00/10)))
 30956  0066EA  0406               	decf	_prevFlimState^0,w,c
 30957  0066EC  A4D8               	btfss	status,2,c
 30958  0066EE  D027               	goto	l2145
 30959  0066F0  ECA3  F04B         	call	_tickGet	;wreg free
 30960  0066F4  0101               	movlb	1	; () banked
 30961  0066F6  51AC               	movf	_switchTime& (0+255),w,b
 30962  0066F8  0100               	movlb	0	; () banked
 30963  0066FA  5D71               	subwf	?_tickGet& (0+255),w,b
 30964  0066FC  6FA1               	movwf	??_FLiMSWCheck& (0+255),b
 30965  0066FE  0101               	movlb	1	; () banked
 30966  006700  51AD               	movf	(_switchTime+1)& (0+255),w,b
 30967  006702  0100               	movlb	0	; () banked
 30968  006704  5972               	subwfb	(?_tickGet+1)& (0+255),w,b
 30969  006706  6FA2               	movwf	(??_FLiMSWCheck+1)& (0+255),b
 30970  006708  0101               	movlb	1	; () banked
 30971  00670A  51AE               	movf	(_switchTime+2)& (0+255),w,b
 30972  00670C  0100               	movlb	0	; () banked
 30973  00670E  5973               	subwfb	(?_tickGet+2)& (0+255),w,b
 30974  006710  6FA3               	movwf	(??_FLiMSWCheck+2)& (0+255),b
 30975  006712  0101               	movlb	1	; () banked
 30976  006714  51AF               	movf	(_switchTime+3)& (0+255),w,b
 30977  006716  0100               	movlb	0	; () banked
 30978  006718  5974               	subwfb	(?_tickGet+3)& (0+255),w,b
 30979  00671A  6FA4               	movwf	(??_FLiMSWCheck+3)& (0+255),b
 30980  00671C  51A4               	movf	(??_FLiMSWCheck+3)& (0+255),w,b
 30981  00671E  11A3               	iorwf	(??_FLiMSWCheck+2)& (0+255),w,b
 30982  006720  E106               	bnz	u27450
 30983  006722  0E6B               	movlw	107
 30984  006724  5DA1               	subwf	??_FLiMSWCheck& (0+255),w,b
 30985  006726  0E18               	movlw	24
 30986  006728  59A2               	subwfb	(??_FLiMSWCheck+1)& (0+255),w,b
 30987  00672A  A0D8               	btfss	status,0,c
 30988  00672C  D008               	goto	l2145
 30989  00672E                     u27450:
 30990                           
 30991                           ; BSR set to: 0
 30992                           ;FliM.c: 162: {;FliM.c: 163: flimState = fsFLiMSetup;
 30993  00672E  0E04               	movlw	4
 30994  006730  6E16               	movwf	_flimState^0,c
 30995                           
 30996                           ; BSR set to: 0
 30997                           ;FliM.c: 164: startFLiMFlash(0);
 30998  006732  0E00               	movlw	0
 30999  006734  EC3A  F052         	call	_startFLiMFlash
 31000  006738                     l21407:
 31001                           
 31002                           ;FliM.c: 165: requestNodeNumber();
 31003  006738  ECD9  F052         	call	_requestNodeNumber	;wreg free
 31004                           
 31005                           ;FliM.c: 166: }
 31006  00673C  0012               	return	
 31007  00673E                     l2145:
 31008                           
 31009                           ;FliM.c: 167: else;FliM.c: 168: {;FliM.c: 169: flimState = prevFlimState;
 31010  00673E  C006  F016         	movff	_prevFlimState,_flimState
 31011  006742  0012               	return	
 31012  006744                     l2147:
 31013                           
 31014                           ;FliM.c: 174: if (PORTAbits.RA2)
 31015  006744  A480               	btfss	128,2,c	;volatile
 31016  006746  0012               	return	
 31017                           
 31018                           ;FliM.c: 175: {;FliM.c: 176: if (prevFlimState == fsSLiM)
 31019  006748  5006               	movf	_prevFlimState^0,w,c
 31020  00674A  A4D8               	btfss	status,2,c
 31021  00674C  D003               	goto	l21415
 31022                           
 31023                           ;FliM.c: 177: {;FliM.c: 178: flimState = fsFLiMSetup;
 31024  00674E  0E04               	movlw	4
 31025  006750  6E16               	movwf	_flimState^0,c
 31026  006752  D7F2               	goto	l21407
 31027  006754                     l21415:
 31028                           
 31029                           ;FliM.c: 182: else;FliM.c: 183: {;FliM.c: 184: flimState = fsSLiM;
 31030  006754  0E00               	movlw	0
 31031  006756  6E16               	movwf	_flimState^0,c
 31032                           
 31033                           ;FliM.c: 185: SLiMRevert();
 31034  006758  ECE5  F052         	call	_SLiMRevert	;wreg free
 31035                           
 31036                           ; BSR set to: 0
 31037                           ;FliM.c: 186: setSLiMLed();
 31038  00675C  EC4E  F053         	call	_setSLiMLed	;wreg free
 31039                           
 31040                           ; BSR set to: 1
 31041                           ;FliM.c: 187: nodeID = 0;
 31042  006760  0E00               	movlw	0
 31043  006762  6E02               	movwf	(_nodeID+1)^0,c
 31044  006764  0E00               	movlw	0
 31045  006766  6E01               	movwf	_nodeID^0,c
 31046                           
 31047                           ; BSR set to: 1
 31048                           ;FliM.c: 188: SaveNodeDetails(nodeID, fsSLiM);
 31049  006768  C001  F098         	movff	_nodeID,SaveNodeDetails@nodeID
 31050  00676C  C002  F099         	movff	_nodeID+1,SaveNodeDetails@nodeID+1
 31051  006770  0E00               	movlw	0
 31052  006772  0100               	movlb	0	; () banked
 31053  006774  6F9A               	movwf	SaveNodeDetails@flimState& (0+255),b
 31054  006776  ECB5  F051         	call	_SaveNodeDetails	;wreg free
 31055  00677A  0012               	return	
 31056  00677C                     l2151:
 31057                           
 31058                           ;FliM.c: 203: if (!PORTAbits.RA2)
 31059  00677C  B480               	btfsc	128,2,c	;volatile
 31060  00677E  0012               	return	
 31061                           
 31062                           ;FliM.c: 204: {;FliM.c: 205: flimState = fsPressedSetup;
 31063  006780  0E09               	movlw	9
 31064  006782  6E16               	movwf	_flimState^0,c
 31065  006784  D77F               	goto	l21391
 31066  006786                     l2153:
 31067                           
 31068                           ;FliM.c: 211: if (PORTAbits.RA2)
 31069  006786  A480               	btfss	128,2,c	;volatile
 31070  006788  0012               	return	
 31071                           
 31072                           ;FliM.c: 212: {;FliM.c: 213: if (((tickGet() - switchTime.Val) > (62500/10)))
 31073  00678A  ECA3  F04B         	call	_tickGet	;wreg free
 31074  00678E  0101               	movlb	1	; () banked
 31075  006790  51AC               	movf	_switchTime& (0+255),w,b
 31076  006792  0100               	movlb	0	; () banked
 31077  006794  5D71               	subwf	?_tickGet& (0+255),w,b
 31078  006796  6FA1               	movwf	??_FLiMSWCheck& (0+255),b
 31079  006798  0101               	movlb	1	; () banked
 31080  00679A  51AD               	movf	(_switchTime+1)& (0+255),w,b
 31081  00679C  0100               	movlb	0	; () banked
 31082  00679E  5972               	subwfb	(?_tickGet+1)& (0+255),w,b
 31083  0067A0  6FA2               	movwf	(??_FLiMSWCheck+1)& (0+255),b
 31084  0067A2  0101               	movlb	1	; () banked
 31085  0067A4  51AE               	movf	(_switchTime+2)& (0+255),w,b
 31086  0067A6  0100               	movlb	0	; () banked
 31087  0067A8  5973               	subwfb	(?_tickGet+2)& (0+255),w,b
 31088  0067AA  6FA3               	movwf	(??_FLiMSWCheck+2)& (0+255),b
 31089  0067AC  0101               	movlb	1	; () banked
 31090  0067AE  51AF               	movf	(_switchTime+3)& (0+255),w,b
 31091  0067B0  0100               	movlb	0	; () banked
 31092  0067B2  5974               	subwfb	(?_tickGet+3)& (0+255),w,b
 31093  0067B4  6FA4               	movwf	(??_FLiMSWCheck+3)& (0+255),b
 31094  0067B6  51A4               	movf	(??_FLiMSWCheck+3)& (0+255),w,b
 31095  0067B8  11A3               	iorwf	(??_FLiMSWCheck+2)& (0+255),w,b
 31096  0067BA  E106               	bnz	u27500
 31097  0067BC  0E6B               	movlw	107
 31098  0067BE  5DA1               	subwf	??_FLiMSWCheck& (0+255),w,b
 31099  0067C0  0E18               	movlw	24
 31100  0067C2  59A2               	subwfb	(??_FLiMSWCheck+1)& (0+255),w,b
 31101  0067C4  A0D8               	btfss	status,0,c
 31102  0067C6  D00B               	goto	l21435
 31103  0067C8                     u27500:
 31104                           
 31105                           ; BSR set to: 0
 31106                           ;FliM.c: 214: {;FliM.c: 215: flimState = prevFlimState;
 31107  0067C8  C006  F016         	movff	_prevFlimState,_flimState
 31108                           
 31109                           ; BSR set to: 0
 31110                           ;FliM.c: 216: setStatusLed(flimState == fsFLiM);
 31111  0067CC  0416               	decf	_flimState^0,w,c
 31112  0067CE  A4D8               	btfss	status,2,c
 31113  0067D0  D002               	goto	u27510
 31114  0067D2  0E01               	movlw	1
 31115  0067D4  D001               	goto	u27520
 31116  0067D6                     u27510:
 31117  0067D6  0E00               	movlw	0
 31118  0067D8                     u27520:
 31119  0067D8  ECCD  F052         	call	_setStatusLed
 31120                           
 31121                           ;FliM.c: 217: }
 31122  0067DC  0012               	return	
 31123  0067DE                     l21435:
 31124                           
 31125                           ; BSR set to: 0
 31126                           ;FliM.c: 218: else;FliM.c: 219: flimState = fsFLiMSetup;
 31127  0067DE  0E04               	movlw	4
 31128  0067E0  6E16               	movwf	_flimState^0,c
 31129  0067E2  0012               	return	
 31130  0067E4                     l21439:
 31131  0067E4  5016               	movf	_flimState^0,w,c
 31132                           
 31133                           ; Switch size 1, requested type "simple"
 31134                           ; Number of cases is 6, Range of values is 0 to 9
 31135                           ; switch strategies available:
 31136                           ; Name         Instructions Cycles
 31137                           ; simple_byte           19    10 (average)
 31138                           ;	Chosen strategy is simple_byte
 31139  0067E6  0A00               	xorlw	0	; case 0
 31140  0067E8  B4D8               	btfsc	status,2,c
 31141  0067EA  D742               	goto	l2138
 31142  0067EC  0A01               	xorlw	1	; case 1
 31143  0067EE  B4D8               	btfsc	status,2,c
 31144  0067F0  D73F               	goto	l2138
 31145  0067F2  0A03               	xorlw	3	; case 2
 31146  0067F4  B4D8               	btfsc	status,2,c
 31147  0067F6  D751               	goto	l2141
 31148  0067F8  0A01               	xorlw	1	; case 3
 31149  0067FA  B4D8               	btfsc	status,2,c
 31150  0067FC  D7A3               	goto	l2147
 31151  0067FE  0A07               	xorlw	7	; case 4
 31152  006800  B4D8               	btfsc	status,2,c
 31153  006802  D7BC               	goto	l2151
 31154  006804  0A0D               	xorlw	13	; case 9
 31155  006806  A4D8               	btfss	status,2,c
 31156  006808  0012               	return	
 31157  00680A  D7BD               	goto	l2153
 31158  00680C                     __end_of_FLiMSWCheck:
 31159                           	callstack 0
 31160                           
 31161 ;; *************** function _startFLiMFlash *****************
 31162 ;; Defined at:
 31163 ;;		line 118 in file "../../github/CBUSlib/StatusLeds.c"
 31164 ;; Parameters:    Size  Location     Type
 31165 ;;  fast            1    wreg     unsigned char 
 31166 ;; Auto vars:     Size  Location     Type
 31167 ;;  fast            1   28[BANK0 ] unsigned char 
 31168 ;; Return value:  Size  Location     Type
 31169 ;;                  1    wreg      void 
 31170 ;; Registers used:
 31171 ;;		wreg, status,2, status,0, cstack
 31172 ;; Tracked objects:
 31173 ;;		On entry : 3F/0
 31174 ;;		On exit  : 3F/0
 31175 ;;		Unchanged: 0/0
 31176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 31177 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 31178 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 31179 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 31180 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 31181 ;;Total ram usage:        3 bytes
 31182 ;; Hardware stack levels used: 1
 31183 ;; Hardware stack levels required when called: 10
 31184 ;; This function calls:
 31185 ;;		_doFLiMFlash
 31186 ;; This function is called by:
 31187 ;;		_FLiMSWCheck
 31188 ;; This function uses a non-reentrant model
 31189 ;;
 31190                           
 31191                           	psect	text148
 31192  00A474                     __ptext148:
 31193                           	callstack 0
 31194  00A474                     _startFLiMFlash:
 31195                           	callstack 19
 31196                           
 31197                           ;incstack = 0
 31198                           ;startFLiMFlash@fast stored from wreg
 31199  00A474  6F7C               	movwf	startFLiMFlash@fast& (0+255),b
 31200                           
 31201                           ;StatusLeds.c: 120: flashState = (fast? flFLiMFast : flFLiMSlow);
 31202  00A476  0100               	movlb	0	; () banked
 31203  00A478  517C               	movf	startFLiMFlash@fast& (0+255),w,b
 31204  00A47A  A4D8               	btfss	status,2,c
 31205  00A47C  D004               	goto	l20935
 31206                           
 31207                           ; BSR set to: 0
 31208  00A47E  0E00               	movlw	0
 31209  00A480  6F7E               	movwf	(_startFLiMFlash$4937+1)& (0+255),b
 31210  00A482  0E01               	movlw	1
 31211  00A484  D003               	goto	L30
 31212  00A486                     l20935:
 31213                           
 31214                           ; BSR set to: 0
 31215  00A486  0E00               	movlw	0
 31216  00A488  6F7E               	movwf	(_startFLiMFlash$4937+1)& (0+255),b
 31217  00A48A  0E02               	movlw	2
 31218  00A48C                     L30:
 31219  00A48C  6F7D               	movwf	_startFLiMFlash$4937& (0+255),b
 31220                           
 31221                           ; BSR set to: 0
 31222  00A48E  C07D  F1D3         	movff	_startFLiMFlash$4937,_flashState
 31223                           
 31224                           ; BSR set to: 0
 31225                           ;StatusLeds.c: 121: doFLiMFlash();
 31226  00A492  EC1E  F050         	call	_doFLiMFlash	;wreg free
 31227                           
 31228                           ; BSR set to: 0
 31229  00A496  0012               	return		;funcret
 31230  00A498                     __end_of_startFLiMFlash:
 31231                           	callstack 0
 31232                           
 31233 ;; *************** function _doFLiMFlash *****************
 31234 ;; Defined at:
 31235 ;;		line 108 in file "../../github/CBUSlib/StatusLeds.c"
 31236 ;; Parameters:    Size  Location     Type
 31237 ;;		None
 31238 ;; Auto vars:     Size  Location     Type
 31239 ;;		None
 31240 ;; Return value:  Size  Location     Type
 31241 ;;                  1    wreg      void 
 31242 ;; Registers used:
 31243 ;;		wreg, status,2, status,0, cstack
 31244 ;; Tracked objects:
 31245 ;;		On entry : 3D/0
 31246 ;;		On exit  : 3F/0
 31247 ;;		Unchanged: 0/0
 31248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 31249 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 31250 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 31251 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 31252 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 31253 ;;Total ram usage:        1 bytes
 31254 ;; Hardware stack levels used: 1
 31255 ;; Hardware stack levels required when called: 9
 31256 ;; This function calls:
 31257 ;;		_tickGet
 31258 ;; This function is called by:
 31259 ;;		_startFLiMFlash
 31260 ;;		_checkFlashing
 31261 ;; This function uses a non-reentrant model
 31262 ;;
 31263                           
 31264                           	psect	text149
 31265  00A03C                     __ptext149:
 31266                           	callstack 0
 31267  00A03C                     _doFLiMFlash:
 31268                           	callstack 20
 31269                           
 31270                           ;StatusLeds.c: 110: LATBbits.LATB6 = (BOOL)(! LATBbits.LATB6);
 31271                           
 31272                           ; BSR set to: 0
 31273                           ;incstack = 0
 31274  00A03C  BC8A               	btfsc	138,6,c	;volatile
 31275  00A03E  D004               	goto	u25170
 31276  00A040  0100               	movlb	0	; () banked
 31277  00A042  6B7B               	clrf	??_doFLiMFlash& (0+255),b
 31278  00A044  2B7B               	incf	??_doFLiMFlash& (0+255),f,b
 31279  00A046  D002               	goto	u25188
 31280  00A048                     u25170:
 31281  00A048  0100               	movlb	0	; () banked
 31282  00A04A  6B7B               	clrf	??_doFLiMFlash& (0+255),b
 31283  00A04C                     u25188:
 31284  00A04C  3B7B               	swapf	??_doFLiMFlash& (0+255),f,b
 31285  00A04E  477B               	rlncf	??_doFLiMFlash& (0+255),f,b
 31286  00A050  477B               	rlncf	??_doFLiMFlash& (0+255),f,b
 31287  00A052  508A               	movf	138,w,c	;volatile
 31288  00A054  197B               	xorwf	??_doFLiMFlash& (0+255),w,b
 31289  00A056  0BBF               	andlw	-65
 31290  00A058  197B               	xorwf	??_doFLiMFlash& (0+255),w,b
 31291  00A05A  6E8A               	movwf	138,c	;volatile
 31292                           
 31293                           ; BSR set to: 0
 31294                           ;StatusLeds.c: 111: flashTime.Val = tickGet();
 31295  00A05C  ECA3  F04B         	call	_tickGet	;wreg free
 31296  00A060  C071  F1A4         	movff	?_tickGet,_flashTime
 31297  00A064  C072  F1A5         	movff	?_tickGet+1,_flashTime+1
 31298  00A068  C073  F1A6         	movff	?_tickGet+2,_flashTime+2
 31299  00A06C  C074  F1A7         	movff	?_tickGet+3,_flashTime+3
 31300                           
 31301                           ; BSR set to: 0
 31302  00A070  0012               	return		;funcret
 31303  00A072                     __end_of_doFLiMFlash:
 31304                           	callstack 0
 31305                           
 31306 ;; *************** function _setStatusLed *****************
 31307 ;; Defined at:
 31308 ;;		line 97 in file "../../github/CBUSlib/StatusLeds.c"
 31309 ;; Parameters:    Size  Location     Type
 31310 ;;  FLiMLED         1    wreg     unsigned char 
 31311 ;; Auto vars:     Size  Location     Type
 31312 ;;  FLiMLED         1   17[BANK0 ] unsigned char 
 31313 ;; Return value:  Size  Location     Type
 31314 ;;                  1    wreg      void 
 31315 ;; Registers used:
 31316 ;;		wreg, status,2, cstack
 31317 ;; Tracked objects:
 31318 ;;		On entry : 3E/1
 31319 ;;		On exit  : 3F/1
 31320 ;;		Unchanged: 0/0
 31321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 31322 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 31323 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 31324 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 31325 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 31326 ;;Total ram usage:        1 bytes
 31327 ;; Hardware stack levels used: 1
 31328 ;; Hardware stack levels required when called: 9
 31329 ;; This function calls:
 31330 ;;		_setFLiMLed
 31331 ;;		_setSLiMLed
 31332 ;; This function is called by:
 31333 ;;		_flimInit
 31334 ;;		_FLiMSWCheck
 31335 ;; This function uses a non-reentrant model
 31336 ;;
 31337                           
 31338                           	psect	text150
 31339  00A59A                     __ptext150:
 31340                           	callstack 0
 31341  00A59A                     _setStatusLed:
 31342                           	callstack 18
 31343                           
 31344                           ; BSR set to: 0
 31345                           ;incstack = 0
 31346                           ;setStatusLed@FLiMLED stored from wreg
 31347  00A59A  0100               	movlb	0	; () banked
 31348  00A59C  6F71               	movwf	setStatusLed@FLiMLED& (0+255),b
 31349                           
 31350                           ;StatusLeds.c: 99: if (FLiMLED)
 31351  00A59E  0100               	movlb	0	; () banked
 31352  00A5A0  5171               	movf	setStatusLed@FLiMLED& (0+255),w,b
 31353  00A5A2  B4D8               	btfsc	status,2,c
 31354  00A5A4  D003               	goto	l19589
 31355                           
 31356                           ; BSR set to: 0
 31357                           ;StatusLeds.c: 100: setFLiMLed();
 31358  00A5A6  EC54  F053         	call	_setFLiMLed	;wreg free
 31359  00A5AA  0012               	return	
 31360  00A5AC                     l19589:
 31361                           
 31362                           ; BSR set to: 0
 31363                           ;StatusLeds.c: 101: else;StatusLeds.c: 102: setSLiMLed();
 31364  00A5AC  EC4E  F053         	call	_setSLiMLed	;wreg free
 31365                           
 31366                           ; BSR set to: 1
 31367  00A5B0  0012               	return		;funcret
 31368  00A5B2                     __end_of_setStatusLed:
 31369                           	callstack 0
 31370                           
 31371 ;; *************** function _setSLiMLed *****************
 31372 ;; Defined at:
 31373 ;;		line 77 in file "../../github/CBUSlib/StatusLeds.c"
 31374 ;; Parameters:    Size  Location     Type
 31375 ;;		None
 31376 ;; Auto vars:     Size  Location     Type
 31377 ;;		None
 31378 ;; Return value:  Size  Location     Type
 31379 ;;                  1    wreg      void 
 31380 ;; Registers used:
 31381 ;;		wreg, status,2
 31382 ;; Tracked objects:
 31383 ;;		On entry : 3F/0
 31384 ;;		On exit  : 3F/1
 31385 ;;		Unchanged: 0/0
 31386 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 31387 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 31388 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 31389 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 31390 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 31391 ;;Total ram usage:        0 bytes
 31392 ;; Hardware stack levels used: 1
 31393 ;; Hardware stack levels required when called: 8
 31394 ;; This function calls:
 31395 ;;		Nothing
 31396 ;; This function is called by:
 31397 ;;		_FLiMSWCheck
 31398 ;;		_setStatusLed
 31399 ;; This function uses a non-reentrant model
 31400 ;;
 31401                           
 31402                           	psect	text151
 31403  00A69C                     __ptext151:
 31404                           	callstack 0
 31405  00A69C                     _setSLiMLed:
 31406                           	callstack 18
 31407                           
 31408                           ; BSR set to: 0
 31409                           ;StatusLeds.c: 79: LATBbits.LATB6 = 0;
 31410                           
 31411                           ; BSR set to: 1
 31412                           ;incstack = 0
 31413  00A69C  9C8A               	bcf	138,6,c	;volatile
 31414                           
 31415                           ;StatusLeds.c: 80: LATBbits.LATB7 = 1;
 31416  00A69E  8E8A               	bsf	138,7,c	;volatile
 31417                           
 31418                           ; BSR set to: 0
 31419                           ;StatusLeds.c: 81: flashState = flNone;
 31420  00A6A0  0E00               	movlw	0
 31421  00A6A2  0101               	movlb	1	; () banked
 31422  00A6A4  6FD3               	movwf	_flashState& (0+255),b
 31423                           
 31424                           ; BSR set to: 1
 31425  00A6A6  0012               	return		;funcret
 31426  00A6A8                     __end_of_setSLiMLed:
 31427                           	callstack 0
 31428                           
 31429 ;; *************** function _setFLiMLed *****************
 31430 ;; Defined at:
 31431 ;;		line 86 in file "../../github/CBUSlib/StatusLeds.c"
 31432 ;; Parameters:    Size  Location     Type
 31433 ;;		None
 31434 ;; Auto vars:     Size  Location     Type
 31435 ;;		None
 31436 ;; Return value:  Size  Location     Type
 31437 ;;                  1    wreg      void 
 31438 ;; Registers used:
 31439 ;;		wreg, status,2
 31440 ;; Tracked objects:
 31441 ;;		On entry : 3F/0
 31442 ;;		On exit  : 3F/1
 31443 ;;		Unchanged: 0/0
 31444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 31445 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 31446 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 31447 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 31448 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 31449 ;;Total ram usage:        0 bytes
 31450 ;; Hardware stack levels used: 1
 31451 ;; Hardware stack levels required when called: 8
 31452 ;; This function calls:
 31453 ;;		Nothing
 31454 ;; This function is called by:
 31455 ;;		_doSnn
 31456 ;;		_setStatusLed
 31457 ;; This function uses a non-reentrant model
 31458 ;;
 31459                           
 31460                           	psect	text152
 31461  00A6A8                     __ptext152:
 31462                           	callstack 0
 31463  00A6A8                     _setFLiMLed:
 31464                           	callstack 18
 31465                           
 31466                           ; BSR set to: 0
 31467                           ;StatusLeds.c: 88: LATBbits.LATB6 = 1;
 31468                           
 31469                           ; BSR set to: 1
 31470                           ;incstack = 0
 31471  00A6A8  8C8A               	bsf	138,6,c	;volatile
 31472                           
 31473                           ;StatusLeds.c: 89: LATBbits.LATB7 = 0;
 31474  00A6AA  9E8A               	bcf	138,7,c	;volatile
 31475                           
 31476                           ; BSR set to: 0
 31477                           ;StatusLeds.c: 90: flashState = flNone;
 31478  00A6AC  0E00               	movlw	0
 31479  00A6AE  0101               	movlb	1	; () banked
 31480  00A6B0  6FD3               	movwf	_flashState& (0+255),b
 31481                           
 31482                           ; BSR set to: 1
 31483  00A6B2  0012               	return		;funcret
 31484  00A6B4                     __end_of_setFLiMLed:
 31485                           	callstack 0
 31486                           
 31487 ;; *************** function _requestNodeNumber *****************
 31488 ;; Defined at:
 31489 ;;		line 272 in file "../../github/CBUSlib/FliM.c"
 31490 ;; Parameters:    Size  Location     Type
 31491 ;;		None
 31492 ;; Auto vars:     Size  Location     Type
 31493 ;;  local_cbusMs    9   56[BANK0 ] unsigned char [9]
 31494 ;; Return value:  Size  Location     Type
 31495 ;;                  1    wreg      void 
 31496 ;; Registers used:
 31497 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 31498 ;; Tracked objects:
 31499 ;;		On entry : 0/0
 31500 ;;		On exit  : 3F/0
 31501 ;;		Unchanged: 0/0
 31502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 31503 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 31504 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 31505 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 31506 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 31507 ;;Total ram usage:        9 bytes
 31508 ;; Hardware stack levels used: 1
 31509 ;; Hardware stack levels required when called: 14
 31510 ;; This function calls:
 31511 ;;		_cbusSendOpcNN
 31512 ;; This function is called by:
 31513 ;;		_FLiMSWCheck
 31514 ;; This function uses a non-reentrant model
 31515 ;;
 31516                           
 31517                           	psect	text153
 31518  00A5B2                     __ptext153:
 31519                           	callstack 0
 31520  00A5B2                     _requestNodeNumber:
 31521                           	callstack 15
 31522                           
 31523                           ;FliM.c: 274: BYTE local_cbusMsg[d0+3];;FliM.c: 277: cbusSendOpcNN(0xFF, 0x50, -1, local
      +                          _cbusMsg);
 31524                           
 31525                           ; BSR set to: 1
 31526                           ;incstack = 0
 31527  00A5B2  0E50               	movlw	80
 31528  00A5B4  0100               	movlb	0	; () banked
 31529  00A5B6  6F93               	movwf	cbusSendOpcNN@opc& (0+255),b
 31530  00A5B8  0EFF               	movlw	255
 31531  00A5BA  6F95               	movwf	(cbusSendOpcNN@nodeID+1)& (0+255),b
 31532  00A5BC  6994               	setf	cbusSendOpcNN@nodeID& (0+255),b
 31533  00A5BE  0E98               	movlw	low requestNodeNumber@local_cbusMsg
 31534  00A5C0  6F96               	movwf	cbusSendOpcNN@msg& (0+255),b
 31535  00A5C2  0EFF               	movlw	255
 31536  00A5C4  EC03  F052         	call	_cbusSendOpcNN
 31537                           
 31538                           ; BSR set to: 0
 31539  00A5C8  0012               	return		;funcret
 31540  00A5CA                     __end_of_requestNodeNumber:
 31541                           	callstack 0
 31542                           
 31543 ;; *************** function _SaveNodeDetails *****************
 31544 ;; Defined at:
 31545 ;;		line 767 in file "../../github/CBUSlib/FliM.c"
 31546 ;; Parameters:    Size  Location     Type
 31547 ;;  nodeID          2   56[BANK0 ] unsigned int 
 31548 ;;  flimState       1   58[BANK0 ] enum E12263
 31549 ;; Auto vars:     Size  Location     Type
 31550 ;;		None
 31551 ;; Return value:  Size  Location     Type
 31552 ;;                  1    wreg      void 
 31553 ;; Registers used:
 31554 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 31555 ;; Tracked objects:
 31556 ;;		On entry : 3F/0
 31557 ;;		On exit  : 3F/0
 31558 ;;		Unchanged: 0/0
 31559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 31560 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 31561 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 31562 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 31563 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 31564 ;;Total ram usage:        3 bytes
 31565 ;; Hardware stack levels used: 1
 31566 ;; Hardware stack levels required when called: 16
 31567 ;; This function calls:
 31568 ;;		_ee_write
 31569 ;;		_ee_write_short
 31570 ;;		_rebuildHashtable
 31571 ;; This function is called by:
 31572 ;;		_FLiMSWCheck
 31573 ;;		_doSnn
 31574 ;; This function uses a non-reentrant model
 31575 ;;
 31576                           
 31577                           	psect	text154
 31578  00A36A                     __ptext154:
 31579                           	callstack 0
 31580  00A36A                     _SaveNodeDetails:
 31581                           	callstack 10
 31582                           
 31583                           ; BSR set to: 0
 31584                           ;FliM.c: 769: ee_write_short((WORD)((WORD*)(0x3FF-3)), nodeID);
 31585                           
 31586                           ; BSR set to: 0
 31587                           ;incstack = 0
 31588  00A36A  0E03               	movlw	3
 31589  00A36C  6F78               	movwf	(ee_write_short@addr+1)& (0+255),b
 31590  00A36E  0EFC               	movlw	252
 31591  00A370  6F77               	movwf	ee_write_short@addr& (0+255),b
 31592  00A372  C098  F079         	movff	SaveNodeDetails@nodeID,ee_write_short@data
 31593  00A376  C099  F07A         	movff	SaveNodeDetails@nodeID+1,ee_write_short@data+1
 31594  00A37A  EC73  F051         	call	_ee_write_short	;wreg free
 31595                           
 31596                           ; BSR set to: 0
 31597                           ;FliM.c: 770: ee_write((WORD)((BYTE*)(0x3FF-4)), flimState);
 31598  00A37E  0E03               	movlw	3
 31599  00A380  6F74               	movwf	(ee_write@addr+1)& (0+255),b
 31600  00A382  0EFB               	movlw	251
 31601  00A384  6F73               	movwf	ee_write@addr& (0+255),b
 31602  00A386  C09A  F075         	movff	SaveNodeDetails@flimState,ee_write@data
 31603  00A38A  EC1D  F04D         	call	_ee_write	;wreg free
 31604                           
 31605                           ; BSR set to: 0
 31606                           ;FliM.c: 772: rebuildHashtable();
 31607  00A38E  ECB2  F034         	call	_rebuildHashtable	;wreg free
 31608                           
 31609                           ; BSR set to: 0
 31610  00A392  0012               	return		;funcret
 31611  00A394                     __end_of_SaveNodeDetails:
 31612                           	callstack 0
 31613                           
 31614 ;; *************** function _rebuildHashtable *****************
 31615 ;; Defined at:
 31616 ;;		line 905 in file "../../github/CBUSlib/events.c"
 31617 ;; Parameters:    Size  Location     Type
 31618 ;;		None
 31619 ;; Auto vars:     Size  Location     Type
 31620 ;;  e               1    0        unsigned char 
 31621 ;;  a               2   50[BANK0 ] int 
 31622 ;;  tableIndex      1   55[BANK0 ] unsigned char 
 31623 ;;  chainIdx        1   54[BANK0 ] unsigned char 
 31624 ;;  happening       1   53[BANK0 ] unsigned char 
 31625 ;;  hash            1   52[BANK0 ] unsigned char 
 31626 ;; Return value:  Size  Location     Type
 31627 ;;                  1    wreg      void 
 31628 ;; Registers used:
 31629 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 31630 ;; Tracked objects:
 31631 ;;		On entry : 3F/0
 31632 ;;		On exit  : 3F/0
 31633 ;;		Unchanged: 0/0
 31634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 31635 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 31636 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 31637 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 31638 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 31639 ;;Total ram usage:       10 bytes
 31640 ;; Hardware stack levels used: 1
 31641 ;; Hardware stack levels required when called: 15
 31642 ;; This function calls:
 31643 ;;		_getEN
 31644 ;;		_getEv
 31645 ;;		_getHash
 31646 ;;		_getNN
 31647 ;;		_validStart
 31648 ;; This function is called by:
 31649 ;;		_APP_addEvent
 31650 ;;		_eventsInit
 31651 ;;		_clearAllEvents
 31652 ;;		_removeTableEntry
 31653 ;;		_addEvent
 31654 ;;		_SaveNodeDetails
 31655 ;;		_deleteHappeningRange
 31656 ;;		_deleteActionRange
 31657 ;; This function uses a non-reentrant model
 31658 ;;
 31659                           
 31660                           	psect	text155
 31661  006964                     __ptext155:
 31662                           	callstack 0
 31663  006964                     _rebuildHashtable:
 31664                           	callstack 11
 31665                           
 31666                           ; BSR set to: 0
 31667                           ;events.c: 907: unsigned char hash;;events.c: 908: unsigned char chainIdx;;events.c: 909
      +                          : unsigned char tableIndex;;events.c: 910: int a;;events.c: 913: unsigned char happening
      +                          ;;events.c: 914: for (happening=0; happening<(8U + 16U * 4U); happening++) {
 31668                           
 31669                           ; BSR set to: 0
 31670                           ;incstack = 0
 31671  006964  0E00               	movlw	0
 31672  006966  6F95               	movwf	rebuildHashtable@happening& (0+255),b
 31673  006968                     l17721:
 31674                           
 31675                           ; BSR set to: 0
 31676                           ;events.c: 915: happening2Event[happening] = 0xff;
 31677  006968  0E00               	movlw	low _happening2Event
 31678  00696A  2595               	addwf	rebuildHashtable@happening& (0+255),w,b
 31679  00696C  6ED9               	movwf	fsr2l,c
 31680  00696E  6ADA               	clrf	fsr2h,c
 31681  006970  0E03               	movlw	high _happening2Event
 31682  006972  22DA               	addwfc	fsr2h,f,c
 31683  006974  0EFF               	movlw	255
 31684  006976  6EDF               	movwf	indf2,c
 31685                           
 31686                           ; BSR set to: 0
 31687  006978  2B95               	incf	rebuildHashtable@happening& (0+255),f,b
 31688                           
 31689                           ; BSR set to: 0
 31690  00697A  0E47               	movlw	71
 31691  00697C  6595               	cpfsgt	rebuildHashtable@happening& (0+255),b
 31692  00697E  D7F4               	goto	l17721
 31693                           
 31694                           ; BSR set to: 0
 31695                           ;events.c: 916: };events.c: 918: for (hash=0; hash<32U; hash++) {
 31696  006980  0E00               	movlw	0
 31697  006982  6F94               	movwf	rebuildHashtable@hash& (0+255),b
 31698  006984                     l17733:
 31699                           
 31700                           ; BSR set to: 0
 31701                           ;events.c: 919: for (chainIdx=0; chainIdx < 20U; chainIdx++) {
 31702  006984  0E00               	movlw	0
 31703  006986  6F96               	movwf	rebuildHashtable@chainIdx& (0+255),b
 31704  006988                     l17739:
 31705                           
 31706                           ; BSR set to: 0
 31707                           ;events.c: 920: eventChains[hash][chainIdx] = 0xff;
 31708  006988  5194               	movf	rebuildHashtable@hash& (0+255),w,b
 31709  00698A  0D14               	mullw	20
 31710  00698C  0E00               	movlw	low _eventChains
 31711  00698E  6F8E               	movwf	??_rebuildHashtable& (0+255),b
 31712  006990  0E07               	movlw	high _eventChains
 31713  006992  6F8F               	movwf	(??_rebuildHashtable+1)& (0+255),b
 31714  006994  50F3               	movf	243,w,c
 31715  006996  278E               	addwf	??_rebuildHashtable& (0+255),f,b
 31716  006998  50F4               	movf	244,w,c
 31717  00699A  238F               	addwfc	(??_rebuildHashtable+1)& (0+255),f,b
 31718  00699C  5196               	movf	rebuildHashtable@chainIdx& (0+255),w,b
 31719  00699E  258E               	addwf	??_rebuildHashtable& (0+255),w,b
 31720  0069A0  6ED9               	movwf	fsr2l,c
 31721  0069A2  0E00               	movlw	0
 31722  0069A4  218F               	addwfc	(??_rebuildHashtable+1)& (0+255),w,b
 31723  0069A6  6EDA               	movwf	fsr2h,c
 31724  0069A8  0EFF               	movlw	255
 31725  0069AA  6EDF               	movwf	indf2,c
 31726                           
 31727                           ; BSR set to: 0
 31728  0069AC  2B96               	incf	rebuildHashtable@chainIdx& (0+255),f,b
 31729                           
 31730                           ; BSR set to: 0
 31731  0069AE  0E13               	movlw	19
 31732  0069B0  6596               	cpfsgt	rebuildHashtable@chainIdx& (0+255),b
 31733  0069B2  D7EA               	goto	l17739
 31734                           
 31735                           ; BSR set to: 0
 31736  0069B4  2B94               	incf	rebuildHashtable@hash& (0+255),f,b
 31737                           
 31738                           ; BSR set to: 0
 31739  0069B6  0E1F               	movlw	31
 31740  0069B8  6594               	cpfsgt	rebuildHashtable@hash& (0+255),b
 31741  0069BA  D7E4               	goto	l17733
 31742                           
 31743                           ; BSR set to: 0
 31744                           ;events.c: 921: };events.c: 922: };events.c: 925: for (tableIndex=0; tableIndex<255U; ta
      +                          bleIndex++) {
 31745  0069BC  0E00               	movlw	0
 31746  0069BE  6F97               	movwf	rebuildHashtable@tableIndex& (0+255),b
 31747  0069C0                     l17755:
 31748                           
 31749                           ; BSR set to: 0
 31750                           ;events.c: 926: if (validStart(tableIndex)) {
 31751  0069C0  5197               	movf	rebuildHashtable@tableIndex& (0+255),w,b
 31752  0069C2  ECFE  F050         	call	_validStart
 31753  0069C6  0900               	iorlw	0
 31754  0069C8  B4D8               	btfsc	status,2,c
 31755  0069CA  D066               	goto	u21740
 31756                           
 31757                           ; BSR set to: 0
 31758                           ;events.c: 927: unsigned char e;;events.c: 932: a = getEv(tableIndex, 0);
 31759  0069CC  0E00               	movlw	0
 31760  0069CE  6F81               	movwf	getEv@evNum& (0+255),b
 31761  0069D0  5197               	movf	rebuildHashtable@tableIndex& (0+255),w,b
 31762  0069D2  EC22  F038         	call	_getEv
 31763  0069D6  C081  F092         	movff	?_getEv,rebuildHashtable@a
 31764  0069DA  C082  F093         	movff	?_getEv+1,rebuildHashtable@a+1
 31765                           
 31766                           ; BSR set to: 0
 31767                           ;events.c: 933: if (a >= 0) {
 31768  0069DE  BF93               	btfsc	(rebuildHashtable@a+1)& (0+255),7,b
 31769  0069E0  D01E               	goto	l17769
 31770                           
 31771                           ; BSR set to: 0
 31772                           ;events.c: 934: happening = (unsigned char)a;
 31773  0069E2  C092  F095         	movff	rebuildHashtable@a,rebuildHashtable@happening
 31774                           
 31775                           ; BSR set to: 0
 31776                           ;events.c: 935: if ((happening >= 1U) && (happening-1U< (8U + 16U * 4U))) {
 31777  0069E6  5195               	movf	rebuildHashtable@happening& (0+255),w,b
 31778  0069E8  B4D8               	btfsc	status,2,c
 31779  0069EA  D019               	goto	l17769
 31780                           
 31781                           ; BSR set to: 0
 31782  0069EC  0EFF               	movlw	255
 31783  0069EE  6F8E               	movwf	??_rebuildHashtable& (0+255),b
 31784  0069F0  0EFF               	movlw	255
 31785  0069F2  6F8F               	movwf	(??_rebuildHashtable+1)& (0+255),b
 31786  0069F4  5195               	movf	rebuildHashtable@happening& (0+255),w,b
 31787  0069F6  6F90               	movwf	(??_rebuildHashtable+2)& (0+255),b
 31788  0069F8  6B91               	clrf	(??_rebuildHashtable+3)& (0+255),b
 31789  0069FA  518E               	movf	??_rebuildHashtable& (0+255),w,b
 31790  0069FC  2790               	addwf	(??_rebuildHashtable+2)& (0+255),f,b
 31791  0069FE  518F               	movf	(??_rebuildHashtable+1)& (0+255),w,b
 31792  006A00  2391               	addwfc	(??_rebuildHashtable+3)& (0+255),f,b
 31793  006A02  5191               	movf	(??_rebuildHashtable+3)& (0+255),w,b
 31794  006A04  E10C               	bnz	l17769
 31795  006A06  0E48               	movlw	72
 31796  006A08  5D90               	subwf	(??_rebuildHashtable+2)& (0+255),w,b
 31797  006A0A  B0D8               	btfsc	status,0,c
 31798  006A0C  D008               	goto	l17769
 31799                           
 31800                           ; BSR set to: 0
 31801                           ;events.c: 936: happening2Event[happening-1U] = tableIndex;
 31802  006A0E  0EFF               	movlw	low (_happening2Event+65535)
 31803  006A10  2595               	addwf	rebuildHashtable@happening& (0+255),w,b
 31804  006A12  6ED9               	movwf	fsr2l,c
 31805  006A14  6ADA               	clrf	fsr2h,c
 31806  006A16  0E02               	movlw	high (_happening2Event+65535)
 31807  006A18  22DA               	addwfc	fsr2h,f,c
 31808  006A1A  C097  FFDF         	movff	rebuildHashtable@tableIndex,indf2
 31809  006A1E                     l17769:
 31810                           
 31811                           ; BSR set to: 0
 31812                           ;events.c: 937: };events.c: 938: };events.c: 940: hash = getHash(getNN(tableIndex), getE
      +                          N(tableIndex));
 31813  006A1E  5197               	movf	rebuildHashtable@tableIndex& (0+255),w,b
 31814  006A20  ECA8  F043         	call	_getNN
 31815  006A24  C07D  F088         	movff	?_getNN,getHash@nn
 31816  006A28  C07E  F089         	movff	?_getNN+1,getHash@nn+1
 31817  006A2C  5197               	movf	rebuildHashtable@tableIndex& (0+255),w,b
 31818  006A2E  EC1F  F048         	call	_getEN
 31819  006A32  C07D  F08A         	movff	?_getEN,getHash@en
 31820  006A36  C07E  F08B         	movff	?_getEN+1,getHash@en+1
 31821  006A3A  EC7A  F052         	call	_getHash	;wreg free
 31822  006A3E  6F94               	movwf	rebuildHashtable@hash& (0+255),b
 31823                           
 31824                           ; BSR set to: 0
 31825                           ;events.c: 942: for (chainIdx=0; chainIdx<20U; chainIdx++) {
 31826  006A40  0E00               	movlw	0
 31827  006A42  6F96               	movwf	rebuildHashtable@chainIdx& (0+255),b
 31828  006A44                     l17777:
 31829                           
 31830                           ; BSR set to: 0
 31831                           ;events.c: 943: if (eventChains[hash][chainIdx] == 0xff) {
 31832  006A44  5194               	movf	rebuildHashtable@hash& (0+255),w,b
 31833  006A46  0D14               	mullw	20
 31834  006A48  0E00               	movlw	low _eventChains
 31835  006A4A  6F8E               	movwf	??_rebuildHashtable& (0+255),b
 31836  006A4C  0E07               	movlw	high _eventChains
 31837  006A4E  6F8F               	movwf	(??_rebuildHashtable+1)& (0+255),b
 31838  006A50  50F3               	movf	243,w,c
 31839  006A52  278E               	addwf	??_rebuildHashtable& (0+255),f,b
 31840  006A54  50F4               	movf	244,w,c
 31841  006A56  238F               	addwfc	(??_rebuildHashtable+1)& (0+255),f,b
 31842  006A58  5196               	movf	rebuildHashtable@chainIdx& (0+255),w,b
 31843  006A5A  258E               	addwf	??_rebuildHashtable& (0+255),w,b
 31844  006A5C  6ED9               	movwf	fsr2l,c
 31845  006A5E  0E00               	movlw	0
 31846  006A60  218F               	addwfc	(??_rebuildHashtable+1)& (0+255),w,b
 31847  006A62  6EDA               	movwf	fsr2h,c
 31848  006A64  28DE               	incf	postinc2,w,c
 31849  006A66  A4D8               	btfss	status,2,c
 31850  006A68  D013               	goto	l17781
 31851                           
 31852                           ; BSR set to: 0
 31853                           ;events.c: 945: eventChains[hash][chainIdx] = tableIndex;
 31854  006A6A  5194               	movf	rebuildHashtable@hash& (0+255),w,b
 31855  006A6C  0D14               	mullw	20
 31856  006A6E  0E00               	movlw	low _eventChains
 31857  006A70  6F8E               	movwf	??_rebuildHashtable& (0+255),b
 31858  006A72  0E07               	movlw	high _eventChains
 31859  006A74  6F8F               	movwf	(??_rebuildHashtable+1)& (0+255),b
 31860  006A76  50F3               	movf	243,w,c
 31861  006A78  278E               	addwf	??_rebuildHashtable& (0+255),f,b
 31862  006A7A  50F4               	movf	244,w,c
 31863  006A7C  238F               	addwfc	(??_rebuildHashtable+1)& (0+255),f,b
 31864  006A7E  5196               	movf	rebuildHashtable@chainIdx& (0+255),w,b
 31865  006A80  258E               	addwf	??_rebuildHashtable& (0+255),w,b
 31866  006A82  6ED9               	movwf	fsr2l,c
 31867  006A84  0E00               	movlw	0
 31868  006A86  218F               	addwfc	(??_rebuildHashtable+1)& (0+255),w,b
 31869  006A88  6EDA               	movwf	fsr2h,c
 31870  006A8A  C097  FFDF         	movff	rebuildHashtable@tableIndex,indf2
 31871                           
 31872                           ;events.c: 946: break;
 31873  006A8E  D004               	goto	u21740
 31874  006A90                     l17781:
 31875                           
 31876                           ; BSR set to: 0
 31877  006A90  2B96               	incf	rebuildHashtable@chainIdx& (0+255),f,b
 31878                           
 31879                           ; BSR set to: 0
 31880  006A92  0E13               	movlw	19
 31881  006A94  6596               	cpfsgt	rebuildHashtable@chainIdx& (0+255),b
 31882  006A96  D7D6               	goto	l17777
 31883  006A98                     u21740:
 31884                           
 31885                           ; BSR set to: 0
 31886  006A98  2B97               	incf	rebuildHashtable@tableIndex& (0+255),f,b
 31887                           
 31888                           ; BSR set to: 0
 31889  006A9A  2997               	incf	rebuildHashtable@tableIndex& (0+255),w,b
 31890  006A9C  B4D8               	btfsc	status,2,c
 31891  006A9E  0012               	return	
 31892  006AA0  D78F               	goto	l17755
 31893  006AA2                     __end_of_rebuildHashtable:
 31894                           	callstack 0
 31895                           
 31896 ;; *************** function _getNN *****************
 31897 ;; Defined at:
 31898 ;;		line 763 in file "../../github/CBUSlib/events.c"
 31899 ;; Parameters:    Size  Location     Type
 31900 ;;  tableIndex      1    wreg     unsigned char 
 31901 ;; Auto vars:     Size  Location     Type
 31902 ;;  tableIndex      1   39[BANK0 ] unsigned char 
 31903 ;;  lo              2   36[BANK0 ] unsigned int 
 31904 ;;  hi              2   34[BANK0 ] unsigned int 
 31905 ;;  f               1   38[BANK0 ] struct .
 31906 ;; Return value:  Size  Location     Type
 31907 ;;                  2   29[BANK0 ] unsigned int 
 31908 ;; Registers used:
 31909 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 31910 ;; Tracked objects:
 31911 ;;		On entry : 3F/0
 31912 ;;		On exit  : 3F/0
 31913 ;;		Unchanged: 0/0
 31914 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 31915 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 31916 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 31917 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 31918 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 31919 ;;Total ram usage:       11 bytes
 31920 ;; Hardware stack levels used: 1
 31921 ;; Hardware stack levels required when called: 13
 31922 ;; This function calls:
 31923 ;;		_readFlashBlock
 31924 ;; This function is called by:
 31925 ;;		_doNenrd
 31926 ;;		_findEvent
 31927 ;;		_rebuildHashtable
 31928 ;;		_getProducedEvent
 31929 ;;		_doTimedResponse
 31930 ;; This function uses a non-reentrant model
 31931 ;;
 31932                           
 31933                           	psect	text156
 31934  008750                     __ptext156:
 31935                           	callstack 0
 31936  008750                     _getNN:
 31937                           	callstack 13
 31938                           
 31939                           ; BSR set to: 0
 31940                           ;incstack = 0
 31941                           ;getNN@tableIndex stored from wreg
 31942  008750  6F87               	movwf	getNN@tableIndex& (0+255),b
 31943                           
 31944                           ;events.c: 764: WORD hi;;events.c: 765: WORD lo;;events.c: 766: EventTableFlags f;;event
      +                          s.c: 768: f.asByte = readFlashBlock((WORD)(&(eventTable[tableIndex].flags.asByte)));
 31945  008752  0100               	movlb	0	; () banked
 31946  008754  5187               	movf	getNN@tableIndex& (0+255),w,b
 31947  008756  0D10               	mullw	16
 31948  008758  CFF3 F07F          	movff	prodl,??_getNN
 31949  00875C  CFF4 F080          	movff	prodh,??_getNN+1
 31950  008760  51E9               	movf	_eventTable& (0+255),w,b
 31951  008762  257F               	addwf	??_getNN& (0+255),w,b
 31952  008764  6F76               	movwf	readFlashBlock@flashAddr& (0+255),b
 31953  008766  51EA               	movf	(_eventTable+1)& (0+255),w,b
 31954  008768  2180               	addwfc	(??_getNN+1)& (0+255),w,b
 31955  00876A  6F77               	movwf	(readFlashBlock@flashAddr+1)& (0+255),b
 31956  00876C  EC8D  F03D         	call	_readFlashBlock	;wreg free
 31957  008770  6F86               	movwf	getNN@f& (0+255),b
 31958                           
 31959                           ; BSR set to: 0
 31960                           ;events.c: 769: if (f.forceOwnNN) {
 31961  008772  AD86               	btfss	getNN@f& (0+255),6,b
 31962  008774  D005               	goto	l17665
 31963                           
 31964                           ; BSR set to: 0
 31965                           ;events.c: 770: return nodeID;
 31966  008776  C001  F07D         	movff	_nodeID,?_getNN
 31967  00877A  C002  F07E         	movff	_nodeID+1,?_getNN+1
 31968  00877E  0012               	return	
 31969  008780                     l17665:
 31970                           
 31971                           ; BSR set to: 0
 31972                           ;events.c: 771: };events.c: 772: lo=readFlashBlock((WORD)(&(eventTable[tableIndex].event
      +                          .NN)));
 31973  008780  5187               	movf	getNN@tableIndex& (0+255),w,b
 31974  008782  0D10               	mullw	16
 31975  008784  CFF3 F07F          	movff	prodl,??_getNN
 31976  008788  CFF4 F080          	movff	prodh,??_getNN+1
 31977  00878C  51E9               	movf	_eventTable& (0+255),w,b
 31978  00878E  277F               	addwf	??_getNN& (0+255),f,b
 31979  008790  51EA               	movf	(_eventTable+1)& (0+255),w,b
 31980  008792  2380               	addwfc	(??_getNN+1)& (0+255),f,b
 31981  008794  0E02               	movlw	2
 31982  008796  257F               	addwf	??_getNN& (0+255),w,b
 31983  008798  6F76               	movwf	readFlashBlock@flashAddr& (0+255),b
 31984  00879A  0E00               	movlw	0
 31985  00879C  2180               	addwfc	(??_getNN+1)& (0+255),w,b
 31986  00879E  6F77               	movwf	(readFlashBlock@flashAddr+1)& (0+255),b
 31987  0087A0  EC8D  F03D         	call	_readFlashBlock	;wreg free
 31988  0087A4  6F81               	movwf	(??_getNN+2)& (0+255),b
 31989  0087A6  5181               	movf	(??_getNN+2)& (0+255),w,b
 31990  0087A8  6F84               	movwf	getNN@lo& (0+255),b
 31991  0087AA  6B85               	clrf	(getNN@lo+1)& (0+255),b
 31992                           
 31993                           ;events.c: 773: hi = readFlashBlock((WORD)(&(eventTable[tableIndex].event.NN))+1);
 31994  0087AC  5187               	movf	getNN@tableIndex& (0+255),w,b
 31995  0087AE  0D10               	mullw	16
 31996  0087B0  CFF3 F07F          	movff	prodl,??_getNN
 31997  0087B4  CFF4 F080          	movff	prodh,??_getNN+1
 31998  0087B8  51E9               	movf	_eventTable& (0+255),w,b
 31999  0087BA  277F               	addwf	??_getNN& (0+255),f,b
 32000  0087BC  51EA               	movf	(_eventTable+1)& (0+255),w,b
 32001  0087BE  2380               	addwfc	(??_getNN+1)& (0+255),f,b
 32002  0087C0  0E03               	movlw	3
 32003  0087C2  257F               	addwf	??_getNN& (0+255),w,b
 32004  0087C4  6F76               	movwf	readFlashBlock@flashAddr& (0+255),b
 32005  0087C6  0E00               	movlw	0
 32006  0087C8  2180               	addwfc	(??_getNN+1)& (0+255),w,b
 32007  0087CA  6F77               	movwf	(readFlashBlock@flashAddr+1)& (0+255),b
 32008  0087CC  EC8D  F03D         	call	_readFlashBlock	;wreg free
 32009  0087D0  6F81               	movwf	(??_getNN+2)& (0+255),b
 32010  0087D2  5181               	movf	(??_getNN+2)& (0+255),w,b
 32011  0087D4  6F82               	movwf	getNN@hi& (0+255),b
 32012  0087D6  6B83               	clrf	(getNN@hi+1)& (0+255),b
 32013                           
 32014                           ; BSR set to: 0
 32015                           ;events.c: 774: return lo | (hi << 8);
 32016  0087D8  5182               	movf	getNN@hi& (0+255),w,b
 32017  0087DA  6F80               	movwf	(??_getNN+1)& (0+255),b
 32018  0087DC  6B7F               	clrf	??_getNN& (0+255),b
 32019  0087DE  5184               	movf	getNN@lo& (0+255),w,b
 32020  0087E0  117F               	iorwf	??_getNN& (0+255),w,b
 32021  0087E2  6F7D               	movwf	?_getNN& (0+255),b
 32022  0087E4  5185               	movf	(getNN@lo+1)& (0+255),w,b
 32023  0087E6  1180               	iorwf	(??_getNN+1)& (0+255),w,b
 32024  0087E8  6F7E               	movwf	(?_getNN+1)& (0+255),b
 32025                           
 32026                           ; BSR set to: 0
 32027  0087EA  0012               	return		;funcret
 32028  0087EC                     __end_of_getNN:
 32029                           	callstack 0
 32030                           
 32031 ;; *************** function _getHash *****************
 32032 ;; Defined at:
 32033 ;;		line 891 in file "../../github/CBUSlib/events.c"
 32034 ;; Parameters:    Size  Location     Type
 32035 ;;  nn              2   40[BANK0 ] unsigned int 
 32036 ;;  en              2   42[BANK0 ] unsigned int 
 32037 ;; Auto vars:     Size  Location     Type
 32038 ;;  hash            1   45[BANK0 ] unsigned char 
 32039 ;; Return value:  Size  Location     Type
 32040 ;;                  1    wreg      unsigned char 
 32041 ;; Registers used:
 32042 ;;		wreg, status,2, status,0, prodl, prodh
 32043 ;; Tracked objects:
 32044 ;;		On entry : 3F/0
 32045 ;;		On exit  : 3F/0
 32046 ;;		Unchanged: 0/0
 32047 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 32048 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 32049 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 32050 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 32051 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 32052 ;;Total ram usage:        6 bytes
 32053 ;; Hardware stack levels used: 1
 32054 ;; Hardware stack levels required when called: 8
 32055 ;; This function calls:
 32056 ;;		Nothing
 32057 ;; This function is called by:
 32058 ;;		_findEvent
 32059 ;;		_rebuildHashtable
 32060 ;; This function uses a non-reentrant model
 32061 ;;
 32062                           
 32063                           	psect	text157
 32064  00A4F4                     __ptext157:
 32065                           	callstack 0
 32066  00A4F4                     _getHash:
 32067                           	callstack 17
 32068                           
 32069                           ; BSR set to: 0
 32070                           ;events.c: 892: unsigned char hash;;events.c: 894: hash = nn ^ (nn >> 8U);
 32071                           
 32072                           ; BSR set to: 0
 32073                           ;incstack = 0
 32074  00A4F4  5189               	movf	(getHash@nn+1)& (0+255),w,b
 32075  00A4F6  1988               	xorwf	getHash@nn& (0+255),w,b
 32076  00A4F8  6F8D               	movwf	getHash@hash& (0+255),b
 32077                           
 32078                           ; BSR set to: 0
 32079                           ;events.c: 895: hash = 7U*hash + (en ^ (en>>8U));
 32080  00A4FA  518B               	movf	(getHash@en+1)& (0+255),w,b
 32081  00A4FC  198A               	xorwf	getHash@en& (0+255),w,b
 32082  00A4FE  6F8C               	movwf	??_getHash& (0+255),b
 32083  00A500  518D               	movf	getHash@hash& (0+255),w,b
 32084  00A502  0D07               	mullw	7
 32085  00A504  50F3               	movf	243,w,c
 32086  00A506  258C               	addwf	??_getHash& (0+255),w,b
 32087  00A508  6F8D               	movwf	getHash@hash& (0+255),b
 32088                           
 32089                           ; BSR set to: 0
 32090                           ;events.c: 897: hash %= 32U;
 32091  00A50A  0E1F               	movlw	31
 32092  00A50C  178D               	andwf	getHash@hash& (0+255),f,b
 32093                           
 32094                           ; BSR set to: 0
 32095                           ;events.c: 898: return hash;
 32096  00A50E  518D               	movf	getHash@hash& (0+255),w,b
 32097                           
 32098                           ; BSR set to: 0
 32099  00A510  0012               	return		;funcret
 32100  00A512                     __end_of_getHash:
 32101                           	callstack 0
 32102                           
 32103 ;; *************** function _getEv *****************
 32104 ;; Defined at:
 32105 ;;		line 665 in file "../../github/CBUSlib/events.c"
 32106 ;; Parameters:    Size  Location     Type
 32107 ;;  tableIndex      1    wreg     unsigned char 
 32108 ;;  evNum           1   33[BANK0 ] unsigned char 
 32109 ;; Auto vars:     Size  Location     Type
 32110 ;;  tableIndex      1   41[BANK0 ] unsigned char 
 32111 ;;  f               1   40[BANK0 ] struct .
 32112 ;; Return value:  Size  Location     Type
 32113 ;;                  2   33[BANK0 ] int 
 32114 ;; Registers used:
 32115 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 32116 ;; Tracked objects:
 32117 ;;		On entry : 3F/0
 32118 ;;		On exit  : 3F/0
 32119 ;;		Unchanged: 0/0
 32120 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 32121 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 32122 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 32123 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 32124 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 32125 ;;Total ram usage:        9 bytes
 32126 ;; Hardware stack levels used: 1
 32127 ;; Hardware stack levels required when called: 14
 32128 ;; This function calls:
 32129 ;;		_readFlashBlock
 32130 ;;		_validStart
 32131 ;; This function is called by:
 32132 ;;		_initialise
 32133 ;;		_rebuildHashtable
 32134 ;;		_doReval
 32135 ;;		_doReqev
 32136 ;;		_doAreq
 32137 ;; This function uses a non-reentrant model
 32138 ;;
 32139                           
 32140                           	psect	text158
 32141  007044                     __ptext158:
 32142                           	callstack 0
 32143  007044                     _getEv:
 32144                           	callstack 11
 32145                           
 32146                           ; BSR set to: 0
 32147                           ;incstack = 0
 32148                           ;getEv@tableIndex stored from wreg
 32149  007044  6F89               	movwf	getEv@tableIndex& (0+255),b
 32150                           
 32151                           ;events.c: 666: EventTableFlags f;;events.c: 667: if ( ! validStart(tableIndex)) {
 32152  007046  0100               	movlb	0	; () banked
 32153  007048  5189               	movf	getEv@tableIndex& (0+255),w,b
 32154  00704A  ECFE  F050         	call	_validStart
 32155  00704E  0900               	iorlw	0
 32156  007050  A4D8               	btfss	status,2,c
 32157  007052  D005               	goto	l17623
 32158  007054                     u21530:
 32159                           
 32160                           ; BSR set to: 0
 32161                           ;events.c: 669: return -7;
 32162  007054  0EFF               	movlw	255
 32163  007056  6F82               	movwf	(?_getEv+1)& (0+255),b
 32164  007058  0EF9               	movlw	249
 32165  00705A  6F81               	movwf	?_getEv& (0+255),b
 32166  00705C  0012               	return	
 32167  00705E                     l17623:
 32168                           
 32169                           ; BSR set to: 0
 32170                           ;events.c: 670: };events.c: 671: if (evNum >= 20U) {
 32171  00705E  0E13               	movlw	19
 32172  007060  6581               	cpfsgt	getEv@evNum& (0+255),b
 32173  007062  D005               	goto	l17629
 32174                           
 32175                           ; BSR set to: 0
 32176                           ;events.c: 672: return -6;
 32177  007064  0EFF               	movlw	255
 32178  007066  6F82               	movwf	(?_getEv+1)& (0+255),b
 32179  007068  0EFA               	movlw	250
 32180  00706A  6F81               	movwf	?_getEv& (0+255),b
 32181  00706C  0012               	return	
 32182  00706E                     l17629:
 32183                           
 32184                           ; BSR set to: 0
 32185                           ;events.c: 673: };events.c: 674: f.asByte = readFlashBlock((WORD)(&(eventTable[tableInde
      +                          x].flags.asByte)));
 32186  00706E  5189               	movf	getEv@tableIndex& (0+255),w,b
 32187  007070  0D10               	mullw	16
 32188  007072  CFF3 F083          	movff	prodl,??_getEv
 32189  007076  CFF4 F084          	movff	prodh,??_getEv+1
 32190  00707A  51E9               	movf	_eventTable& (0+255),w,b
 32191  00707C  2583               	addwf	??_getEv& (0+255),w,b
 32192  00707E  6F76               	movwf	readFlashBlock@flashAddr& (0+255),b
 32193  007080  51EA               	movf	(_eventTable+1)& (0+255),w,b
 32194  007082  2184               	addwfc	(??_getEv+1)& (0+255),w,b
 32195  007084  6F77               	movwf	(readFlashBlock@flashAddr+1)& (0+255),b
 32196  007086  EC8D  F03D         	call	_readFlashBlock	;wreg free
 32197  00708A  6F88               	movwf	getEv@f& (0+255),b
 32198                           
 32199                           ;events.c: 675: while (evNum >= 10U) {
 32200  00708C  D02E               	goto	l17647
 32201  00708E                     l1915:
 32202                           
 32203                           ; BSR set to: 0
 32204                           ;events.c: 677: if (! f.continued) {
 32205  00708E  B988               	btfsc	getEv@f& (0+255),4,b
 32206  007090  D005               	goto	l17635
 32207  007092                     u21550:
 32208                           
 32209                           ; BSR set to: 0
 32210                           ;events.c: 678: return -5;
 32211  007092  0EFF               	movlw	255
 32212  007094  6F82               	movwf	(?_getEv+1)& (0+255),b
 32213  007096  0EFB               	movlw	251
 32214  007098  6F81               	movwf	?_getEv& (0+255),b
 32215  00709A  0012               	return	
 32216  00709C                     l17635:
 32217                           
 32218                           ; BSR set to: 0
 32219                           ;events.c: 679: };events.c: 680: tableIndex = readFlashBlock((WORD)(&(eventTable[tableIn
      +                          dex].next)));
 32220  00709C  5189               	movf	getEv@tableIndex& (0+255),w,b
 32221  00709E  0D10               	mullw	16
 32222  0070A0  CFF3 F083          	movff	prodl,??_getEv
 32223  0070A4  CFF4 F084          	movff	prodh,??_getEv+1
 32224  0070A8  51E9               	movf	_eventTable& (0+255),w,b
 32225  0070AA  2783               	addwf	??_getEv& (0+255),f,b
 32226  0070AC  51EA               	movf	(_eventTable+1)& (0+255),w,b
 32227  0070AE  2384               	addwfc	(??_getEv+1)& (0+255),f,b
 32228  0070B0  0E01               	movlw	1
 32229  0070B2  2583               	addwf	??_getEv& (0+255),w,b
 32230  0070B4  6F76               	movwf	readFlashBlock@flashAddr& (0+255),b
 32231  0070B6  0E00               	movlw	0
 32232  0070B8  2184               	addwfc	(??_getEv+1)& (0+255),w,b
 32233  0070BA  6F77               	movwf	(readFlashBlock@flashAddr+1)& (0+255),b
 32234  0070BC  EC8D  F03D         	call	_readFlashBlock	;wreg free
 32235  0070C0  6F89               	movwf	getEv@tableIndex& (0+255),b
 32236                           
 32237                           ; BSR set to: 0
 32238                           ;events.c: 681: if (tableIndex == 0xff) {
 32239  0070C2  2989               	incf	getEv@tableIndex& (0+255),w,b
 32240  0070C4  B4D8               	btfsc	status,2,c
 32241  0070C6  D7C6               	goto	u21530
 32242                           
 32243                           ; BSR set to: 0
 32244                           ;events.c: 683: };events.c: 684: f.asByte = readFlashBlock((WORD)(&(eventTable[tableInde
      +                          x].flags.asByte)));
 32245  0070C8  5189               	movf	getEv@tableIndex& (0+255),w,b
 32246  0070CA  0D10               	mullw	16
 32247  0070CC  CFF3 F083          	movff	prodl,??_getEv
 32248  0070D0  CFF4 F084          	movff	prodh,??_getEv+1
 32249  0070D4  51E9               	movf	_eventTable& (0+255),w,b
 32250  0070D6  2583               	addwf	??_getEv& (0+255),w,b
 32251  0070D8  6F76               	movwf	readFlashBlock@flashAddr& (0+255),b
 32252  0070DA  51EA               	movf	(_eventTable+1)& (0+255),w,b
 32253  0070DC  2184               	addwfc	(??_getEv+1)& (0+255),w,b
 32254  0070DE  6F77               	movwf	(readFlashBlock@flashAddr+1)& (0+255),b
 32255  0070E0  EC8D  F03D         	call	_readFlashBlock	;wreg free
 32256  0070E4  6F88               	movwf	getEv@f& (0+255),b
 32257                           
 32258                           ; BSR set to: 0
 32259                           ;events.c: 685: evNum -= 10U;
 32260  0070E6  0E0A               	movlw	10
 32261  0070E8  5F81               	subwf	getEv@evNum& (0+255),f,b
 32262  0070EA                     l17647:
 32263                           
 32264                           ; BSR set to: 0
 32265  0070EA  0E0A               	movlw	10
 32266  0070EC  6181               	cpfslt	getEv@evNum& (0+255),b
 32267  0070EE  D7CF               	goto	l1915
 32268                           
 32269                           ; BSR set to: 0
 32270                           ;events.c: 686: };events.c: 687: if (evNum+1 > f.eVsUsed) {
 32271  0070F0  5181               	movf	getEv@evNum& (0+255),w,b
 32272  0070F2  6F83               	movwf	??_getEv& (0+255),b
 32273  0070F4  6B84               	clrf	(??_getEv+1)& (0+255),b
 32274  0070F6  0E01               	movlw	1
 32275  0070F8  2783               	addwf	??_getEv& (0+255),f,b
 32276  0070FA  0E00               	movlw	0
 32277  0070FC  2384               	addwfc	(??_getEv+1)& (0+255),f,b
 32278  0070FE  5188               	movf	getEv@f& (0+255),w,b
 32279  007100  0B0F               	andlw	15
 32280  007102  6F85               	movwf	(??_getEv+2)& (0+255),b
 32281  007104  6B86               	clrf	(??_getEv+3)& (0+255),b
 32282  007106  5183               	movf	??_getEv& (0+255),w,b
 32283  007108  5D85               	subwf	(??_getEv+2)& (0+255),w,b
 32284  00710A  5186               	movf	(??_getEv+3)& (0+255),w,b
 32285  00710C  0A80               	xorlw	128
 32286  00710E  6F87               	movwf	(??_getEv+4)& (0+255),b
 32287  007110  5184               	movf	(??_getEv+1)& (0+255),w,b
 32288  007112  0A80               	xorlw	128
 32289  007114  5987               	subwfb	(??_getEv+4)& (0+255),w,b
 32290  007116  A0D8               	btfss	status,0,c
 32291  007118  D7BC               	goto	u21550
 32292                           
 32293                           ; BSR set to: 0
 32294                           ;events.c: 689: };events.c: 691: return readFlashBlock((WORD)(&(eventTable[tableIndex].e
      +                          vs[evNum])));
 32295  00711A  5189               	movf	getEv@tableIndex& (0+255),w,b
 32296  00711C  0D10               	mullw	16
 32297  00711E  CFF3 F083          	movff	prodl,??_getEv
 32298  007122  CFF4 F084          	movff	prodh,??_getEv+1
 32299  007126  5181               	movf	getEv@evNum& (0+255),w,b
 32300  007128  2783               	addwf	??_getEv& (0+255),f,b
 32301  00712A  0E00               	movlw	0
 32302  00712C  2384               	addwfc	(??_getEv+1)& (0+255),f,b
 32303  00712E  51E9               	movf	_eventTable& (0+255),w,b
 32304  007130  2783               	addwf	??_getEv& (0+255),f,b
 32305  007132  51EA               	movf	(_eventTable+1)& (0+255),w,b
 32306  007134  2384               	addwfc	(??_getEv+1)& (0+255),f,b
 32307  007136  0E06               	movlw	6
 32308  007138  2583               	addwf	??_getEv& (0+255),w,b
 32309  00713A  6F76               	movwf	readFlashBlock@flashAddr& (0+255),b
 32310  00713C  0E00               	movlw	0
 32311  00713E  2184               	addwfc	(??_getEv+1)& (0+255),w,b
 32312  007140  6F77               	movwf	(readFlashBlock@flashAddr+1)& (0+255),b
 32313  007142  EC8D  F03D         	call	_readFlashBlock	;wreg free
 32314  007146  6F85               	movwf	(??_getEv+2)& (0+255),b
 32315  007148  5185               	movf	(??_getEv+2)& (0+255),w,b
 32316  00714A  6F81               	movwf	?_getEv& (0+255),b
 32317  00714C  6B82               	clrf	(?_getEv+1)& (0+255),b
 32318                           
 32319                           ; BSR set to: 0
 32320  00714E  0012               	return		;funcret
 32321  007150                     __end_of_getEv:
 32322                           	callstack 0
 32323                           
 32324 ;; *************** function _validStart *****************
 32325 ;; Defined at:
 32326 ;;		line 287 in file "../../github/CBUSlib/events.c"
 32327 ;; Parameters:    Size  Location     Type
 32328 ;;  tableIndex      1    wreg     unsigned char 
 32329 ;; Auto vars:     Size  Location     Type
 32330 ;;  tableIndex      1   31[BANK0 ] unsigned char 
 32331 ;;  f               1   32[BANK0 ] struct .
 32332 ;; Return value:  Size  Location     Type
 32333 ;;                  1    wreg      unsigned char 
 32334 ;; Registers used:
 32335 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 32336 ;; Tracked objects:
 32337 ;;		On entry : 3F/0
 32338 ;;		On exit  : 3F/0
 32339 ;;		Unchanged: 0/0
 32340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 32341 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 32342 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 32343 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 32344 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 32345 ;;Total ram usage:        4 bytes
 32346 ;; Hardware stack levels used: 1
 32347 ;; Hardware stack levels required when called: 13
 32348 ;; This function calls:
 32349 ;;		_readFlashBlock
 32350 ;; This function is called by:
 32351 ;;		_doNenrd
 32352 ;;		_doRqevn
 32353 ;;		_removeTableEntry
 32354 ;;		_getEv
 32355 ;;		_numEv
 32356 ;;		_getEVs
 32357 ;;		_checkRemoveTableEntry
 32358 ;;		_rebuildHashtable
 32359 ;;		_doReval
 32360 ;;		_deleteHappeningRange
 32361 ;;		_deleteActionRange
 32362 ;;		_doTimedResponse
 32363 ;; This function uses a non-reentrant model
 32364 ;;
 32365                           
 32366                           	psect	text159
 32367  00A1FC                     __ptext159:
 32368                           	callstack 0
 32369  00A1FC                     _validStart:
 32370                           	callstack 14
 32371                           
 32372                           ; BSR set to: 0
 32373                           ;incstack = 0
 32374                           ;validStart@tableIndex stored from wreg
 32375  00A1FC  6F7F               	movwf	validStart@tableIndex& (0+255),b
 32376                           
 32377                           ;events.c: 288: EventTableFlags f;;events.c: 292: f.asByte = readFlashBlock((WORD)(& (ev
      +                          entTable[tableIndex].flags.asByte)));
 32378  00A1FE  0100               	movlb	0	; () banked
 32379  00A200  517F               	movf	validStart@tableIndex& (0+255),w,b
 32380  00A202  0D10               	mullw	16
 32381  00A204  CFF3 F07D          	movff	prodl,??_validStart
 32382  00A208  CFF4 F07E          	movff	prodh,??_validStart+1
 32383  00A20C  51E9               	movf	_eventTable& (0+255),w,b
 32384  00A20E  257D               	addwf	??_validStart& (0+255),w,b
 32385  00A210  6F76               	movwf	readFlashBlock@flashAddr& (0+255),b
 32386  00A212  51EA               	movf	(_eventTable+1)& (0+255),w,b
 32387  00A214  217E               	addwfc	(??_validStart+1)& (0+255),w,b
 32388  00A216  6F77               	movwf	(readFlashBlock@flashAddr+1)& (0+255),b
 32389  00A218  EC8D  F03D         	call	_readFlashBlock	;wreg free
 32390  00A21C  6F80               	movwf	validStart@f& (0+255),b
 32391                           
 32392                           ; BSR set to: 0
 32393                           ;events.c: 293: if (( !f.freeEntry) && ( ! f.continuation)) {
 32394  00A21E  AF80               	btfss	validStart@f& (0+255),7,b
 32395                           
 32396                           ; BSR set to: 0
 32397  00A220  BB80               	btfsc	validStart@f& (0+255),5,b
 32398  00A222  D002               	goto	l17613
 32399                           
 32400                           ; BSR set to: 0
 32401                           ;events.c: 294: return 1;
 32402  00A224  0E01               	movlw	1
 32403  00A226  0012               	return	
 32404  00A228                     l17613:
 32405                           
 32406                           ; BSR set to: 0
 32407                           ;events.c: 296: return 0;
 32408  00A228  0E00               	movlw	0
 32409                           
 32410                           ; BSR set to: 0
 32411  00A22A  0012               	return		;funcret
 32412  00A22C                     __end_of_validStart:
 32413                           	callstack 0
 32414                           
 32415 ;; *************** function _getEN *****************
 32416 ;; Defined at:
 32417 ;;		line 784 in file "../../github/CBUSlib/events.c"
 32418 ;; Parameters:    Size  Location     Type
 32419 ;;  tableIndex      1    wreg     unsigned char 
 32420 ;; Auto vars:     Size  Location     Type
 32421 ;;  tableIndex      1   38[BANK0 ] unsigned char 
 32422 ;;  lo              2   36[BANK0 ] unsigned int 
 32423 ;;  hi              2   34[BANK0 ] unsigned int 
 32424 ;; Return value:  Size  Location     Type
 32425 ;;                  2   29[BANK0 ] unsigned int 
 32426 ;; Registers used:
 32427 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 32428 ;; Tracked objects:
 32429 ;;		On entry : 3F/0
 32430 ;;		On exit  : 3F/0
 32431 ;;		Unchanged: 0/0
 32432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 32433 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 32434 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 32435 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 32436 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 32437 ;;Total ram usage:       10 bytes
 32438 ;; Hardware stack levels used: 1
 32439 ;; Hardware stack levels required when called: 13
 32440 ;; This function calls:
 32441 ;;		_readFlashBlock
 32442 ;; This function is called by:
 32443 ;;		_doNenrd
 32444 ;;		_findEvent
 32445 ;;		_rebuildHashtable
 32446 ;;		_getProducedEvent
 32447 ;;		_doTimedResponse
 32448 ;; This function uses a non-reentrant model
 32449 ;;
 32450                           
 32451                           	psect	text160
 32452  00903E                     __ptext160:
 32453                           	callstack 0
 32454  00903E                     _getEN:
 32455                           	callstack 13
 32456                           
 32457                           ; BSR set to: 0
 32458                           ;incstack = 0
 32459                           ;getEN@tableIndex stored from wreg
 32460  00903E  6F86               	movwf	getEN@tableIndex& (0+255),b
 32461                           
 32462                           ;events.c: 785: WORD hi;;events.c: 786: WORD lo;;events.c: 788: lo=readFlashBlock((WORD)
      +                          (&(eventTable[tableIndex].event.EN)));
 32463  009040  0100               	movlb	0	; () banked
 32464  009042  5186               	movf	getEN@tableIndex& (0+255),w,b
 32465  009044  0D10               	mullw	16
 32466  009046  CFF3 F07F          	movff	prodl,??_getEN
 32467  00904A  CFF4 F080          	movff	prodh,??_getEN+1
 32468  00904E  51E9               	movf	_eventTable& (0+255),w,b
 32469  009050  277F               	addwf	??_getEN& (0+255),f,b
 32470  009052  51EA               	movf	(_eventTable+1)& (0+255),w,b
 32471  009054  2380               	addwfc	(??_getEN+1)& (0+255),f,b
 32472  009056  0E04               	movlw	4
 32473  009058  257F               	addwf	??_getEN& (0+255),w,b
 32474  00905A  6F76               	movwf	readFlashBlock@flashAddr& (0+255),b
 32475  00905C  0E00               	movlw	0
 32476  00905E  2180               	addwfc	(??_getEN+1)& (0+255),w,b
 32477  009060  6F77               	movwf	(readFlashBlock@flashAddr+1)& (0+255),b
 32478  009062  EC8D  F03D         	call	_readFlashBlock	;wreg free
 32479  009066  6F81               	movwf	(??_getEN+2)& (0+255),b
 32480  009068  5181               	movf	(??_getEN+2)& (0+255),w,b
 32481  00906A  6F84               	movwf	getEN@lo& (0+255),b
 32482  00906C  6B85               	clrf	(getEN@lo+1)& (0+255),b
 32483                           
 32484                           ;events.c: 789: hi = readFlashBlock((WORD)(&(eventTable[tableIndex].event.EN))+1);
 32485  00906E  5186               	movf	getEN@tableIndex& (0+255),w,b
 32486  009070  0D10               	mullw	16
 32487  009072  CFF3 F07F          	movff	prodl,??_getEN
 32488  009076  CFF4 F080          	movff	prodh,??_getEN+1
 32489  00907A  51E9               	movf	_eventTable& (0+255),w,b
 32490  00907C  277F               	addwf	??_getEN& (0+255),f,b
 32491  00907E  51EA               	movf	(_eventTable+1)& (0+255),w,b
 32492  009080  2380               	addwfc	(??_getEN+1)& (0+255),f,b
 32493  009082  0E05               	movlw	5
 32494  009084  257F               	addwf	??_getEN& (0+255),w,b
 32495  009086  6F76               	movwf	readFlashBlock@flashAddr& (0+255),b
 32496  009088  0E00               	movlw	0
 32497  00908A  2180               	addwfc	(??_getEN+1)& (0+255),w,b
 32498  00908C  6F77               	movwf	(readFlashBlock@flashAddr+1)& (0+255),b
 32499  00908E  EC8D  F03D         	call	_readFlashBlock	;wreg free
 32500  009092  6F81               	movwf	(??_getEN+2)& (0+255),b
 32501  009094  5181               	movf	(??_getEN+2)& (0+255),w,b
 32502  009096  6F82               	movwf	getEN@hi& (0+255),b
 32503  009098  6B83               	clrf	(getEN@hi+1)& (0+255),b
 32504                           
 32505                           ; BSR set to: 0
 32506                           ;events.c: 790: return lo | (hi << 8);
 32507  00909A  5182               	movf	getEN@hi& (0+255),w,b
 32508  00909C  6F80               	movwf	(??_getEN+1)& (0+255),b
 32509  00909E  6B7F               	clrf	??_getEN& (0+255),b
 32510  0090A0  5184               	movf	getEN@lo& (0+255),w,b
 32511  0090A2  117F               	iorwf	??_getEN& (0+255),w,b
 32512  0090A4  6F7D               	movwf	?_getEN& (0+255),b
 32513  0090A6  5185               	movf	(getEN@lo+1)& (0+255),w,b
 32514  0090A8  1180               	iorwf	(??_getEN+1)& (0+255),w,b
 32515  0090AA  6F7E               	movwf	(?_getEN+1)& (0+255),b
 32516                           
 32517                           ; BSR set to: 0
 32518  0090AC  0012               	return		;funcret
 32519  0090AE                     __end_of_getEN:
 32520                           	callstack 0
 32521                           
 32522 ;; *************** function _readFlashBlock *****************
 32523 ;; Defined at:
 32524 ;;		line 243 in file "../../github/CBUSlib/romops.c"
 32525 ;; Parameters:    Size  Location     Type
 32526 ;;  flashAddr       2   22[BANK0 ] unsigned int 
 32527 ;; Auto vars:     Size  Location     Type
 32528 ;;  i               1   28[BANK0 ] unsigned char 
 32529 ;;  ptr             2    0        unsigned int 
 32530 ;; Return value:  Size  Location     Type
 32531 ;;                  1    wreg      unsigned char 
 32532 ;; Registers used:
 32533 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 32534 ;; Tracked objects:
 32535 ;;		On entry : 3F/0
 32536 ;;		On exit  : 3F/0
 32537 ;;		Unchanged: 0/0
 32538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 32539 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 32540 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 32541 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 32542 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 32543 ;;Total ram usage:        7 bytes
 32544 ;; Hardware stack levels used: 1
 32545 ;; Hardware stack levels required when called: 12
 32546 ;; This function calls:
 32547 ;;		_flushFlashImage
 32548 ;; This function is called by:
 32549 ;;		_loadNvCache
 32550 ;;		_validStart
 32551 ;;		_doNnevn
 32552 ;;		_removeTableEntry
 32553 ;;		_addEvent
 32554 ;;		_writeEv
 32555 ;;		_getEv
 32556 ;;		_numEv
 32557 ;;		_getEVs
 32558 ;;		_getNN
 32559 ;;		_getEN
 32560 ;;		_doNvrd
 32561 ;;		_deleteHappeningRange
 32562 ;;		_writeFlashImage
 32563 ;; This function uses a non-reentrant model
 32564 ;;
 32565                           
 32566                           	psect	text161
 32567  007B1A                     __ptext161:
 32568                           	callstack 0
 32569  007B1A                     _readFlashBlock:
 32570                           	callstack 13
 32571                           
 32572                           ; BSR set to: 0
 32573                           ;romops.c: 245: WORD ptr;;romops.c: 247: if ((flashAddr < (0xEF80U&0xFFC0)) || (flashAdd
      +                          r > 0xFFFF)) {
 32574                           
 32575                           ; BSR set to: 0
 32576                           ;incstack = 0
 32577  007B1A  0E80               	movlw	128
 32578  007B1C  5D76               	subwf	readFlashBlock@flashAddr& (0+255),w,b
 32579  007B1E  0EEF               	movlw	239
 32580  007B20  5977               	subwfb	(readFlashBlock@flashAddr+1)& (0+255),w,b
 32581  007B22  B0D8               	btfsc	status,0,c
 32582  007B24  D002               	goto	l17561
 32583                           
 32584                           ; BSR set to: 0
 32585                           ;romops.c: 250: return 0xff;
 32586  007B26  0EFF               	movlw	255
 32587  007B28  0012               	return	
 32588  007B2A                     l17561:
 32589                           
 32590                           ; BSR set to: 0
 32591                           ;romops.c: 251: };romops.c: 253: if(flashFlags.valid !=5)
 32592  007B2A  5005               	movf	_flashFlags^0,w,c
 32593  007B2C  0B07               	andlw	7
 32594  007B2E  0A05               	xorlw	5
 32595  007B30  B4D8               	btfsc	status,2,c
 32596  007B32  D002               	goto	l17565
 32597                           
 32598                           ; BSR set to: 0
 32599                           ;romops.c: 254: {;romops.c: 255: flashFlags.asByte=5;
 32600  007B34  0E05               	movlw	5
 32601  007B36  6E05               	movwf	_flashFlags^0,c
 32602  007B38                     l17565:
 32603                           
 32604                           ; BSR set to: 0
 32605                           ;romops.c: 256: };romops.c: 258: if(flashFlags.loaded && flashblock!=(flashAddr & 0XFFC0
      +                          ))
 32606  007B38  A605               	btfss	_flashFlags^0,3,c
 32607  007B3A  D01B               	goto	l17573
 32608                           
 32609                           ; BSR set to: 0
 32610  007B3C  0EC0               	movlw	192
 32611  007B3E  6F78               	movwf	??_readFlashBlock& (0+255),b
 32612  007B40  0EFF               	movlw	255
 32613  007B42  6F79               	movwf	(??_readFlashBlock+1)& (0+255),b
 32614  007B44  C076  F07A         	movff	readFlashBlock@flashAddr,??_readFlashBlock+2
 32615  007B48  C077  F07B         	movff	readFlashBlock@flashAddr+1,??_readFlashBlock+3
 32616  007B4C  5178               	movf	??_readFlashBlock& (0+255),w,b
 32617  007B4E  177A               	andwf	(??_readFlashBlock+2)& (0+255),f,b
 32618  007B50  5179               	movf	(??_readFlashBlock+1)& (0+255),w,b
 32619  007B52  177B               	andwf	(??_readFlashBlock+3)& (0+255),f,b
 32620  007B54  0101               	movlb	1	; () banked
 32621  007B56  51F6               	movf	_flashblock& (0+255),w,b
 32622  007B58  0100               	movlb	0	; () banked
 32623  007B5A  197A               	xorwf	(??_readFlashBlock+2)& (0+255),w,b
 32624  007B5C  E106               	bnz	u21480
 32625  007B5E  0101               	movlb	1	; () banked
 32626  007B60  51F7               	movf	(_flashblock+1)& (0+255),w,b
 32627  007B62  0100               	movlb	0	; () banked
 32628  007B64  197B               	xorwf	(??_readFlashBlock+3)& (0+255),w,b
 32629  007B66  B4D8               	btfsc	status,2,c
 32630  007B68  D004               	goto	l17573
 32631  007B6A                     u21480:
 32632                           
 32633                           ; BSR set to: 0
 32634                           ;romops.c: 259: {;romops.c: 261: flushFlashImage();
 32635  007B6A  EC13  F053         	call	_flushFlashImage	;wreg free
 32636                           
 32637                           ; BSR set to: 0
 32638                           ;romops.c: 262: flashFlags.asByte=5;
 32639  007B6E  0E05               	movlw	5
 32640  007B70  6E05               	movwf	_flashFlags^0,c
 32641  007B72                     l17573:
 32642                           
 32643                           ; BSR set to: 0
 32644                           ;romops.c: 263: };romops.c: 265: if(!flashFlags.loaded)
 32645  007B72  B605               	btfsc	_flashFlags^0,3,c
 32646  007B74  D024               	goto	l17597
 32647                           
 32648                           ; BSR set to: 0
 32649                           ;romops.c: 266: {;romops.c: 268: flashblock = flashAddr & 0xFFC0;
 32650  007B76  0EC0               	movlw	192
 32651  007B78  1576               	andwf	readFlashBlock@flashAddr& (0+255),w,b
 32652  007B7A  0101               	movlb	1	; () banked
 32653  007B7C  6FF6               	movwf	_flashblock& (0+255),b
 32654  007B7E  0EFF               	movlw	255
 32655  007B80  0100               	movlb	0	; () banked
 32656  007B82  1577               	andwf	(readFlashBlock@flashAddr+1)& (0+255),w,b
 32657  007B84  0101               	movlb	1	; () banked
 32658  007B86  6FF7               	movwf	(_flashblock+1)& (0+255),b
 32659                           
 32660                           ; BSR set to: 1
 32661                           ;romops.c: 270: EECON1=0X80;
 32662  007B88  0E80               	movlw	128
 32663  007B8A  6E7F               	movwf	127,c	;volsfr
 32664                           
 32665                           ; BSR set to: 1
 32666                           ;romops.c: 271: TBLPTR = flashblock;
 32667  007B8C  C1F6  FFF6         	movff	_flashblock,tblptrl	;volatile
 32668  007B90  C1F7  FFF7         	movff	_flashblock+1,tblptrh	;volatile
 32669  007B94  6AF8               	clrf	248,c	;volatile
 32670                           
 32671                           ; BSR set to: 1
 32672                           ;romops.c: 272: for (unsigned char i=0; i<64; i++) {
 32673  007B96  0E00               	movlw	0
 32674  007B98  0100               	movlb	0	; () banked
 32675  007B9A  6F7C               	movwf	readFlashBlock@i& (0+255),b
 32676  007B9C                     l2462:
 32677                           
 32678                           ; BSR set to: 0
 32679  007B9C  0009               	tblrd		*+	;# 
 32680                           
 32681                           ;romops.c: 274: flashbuf[i] = TABLAT;
 32682  007B9E  0E48               	movlw	low _flashbuf
 32683  007BA0  0100               	movlb	0	; () banked
 32684  007BA2  257C               	addwf	readFlashBlock@i& (0+255),w,b
 32685  007BA4  6ED9               	movwf	fsr2l,c
 32686  007BA6  6ADA               	clrf	fsr2h,c
 32687  007BA8  0E03               	movlw	high _flashbuf
 32688  007BAA  22DA               	addwfc	fsr2h,f,c
 32689  007BAC  CFF5 FFDF          	movff	tablat,indf2	;volatile
 32690                           
 32691                           ; BSR set to: 0
 32692  007BB0  2B7C               	incf	readFlashBlock@i& (0+255),f,b
 32693                           
 32694                           ; BSR set to: 0
 32695  007BB2  0E3F               	movlw	63
 32696  007BB4  657C               	cpfsgt	readFlashBlock@i& (0+255),b
 32697  007BB6  D7F2               	goto	l2462
 32698                           
 32699                           ; BSR set to: 0
 32700                           ;romops.c: 275: };romops.c: 295: TBLPTRU = 0x00;
 32701  007BB8  0E00               	movlw	0
 32702  007BBA  6EF8               	movwf	248,c	;volatile
 32703                           
 32704                           ; BSR set to: 0
 32705                           ;romops.c: 296: flashFlags.loaded = 1;
 32706  007BBC  8605               	bsf	_flashFlags^0,3,c
 32707  007BBE                     l17597:
 32708                           
 32709                           ; BSR set to: 0
 32710                           ;romops.c: 298: };romops.c: 299: return flashbuf[flashAddr & 0X3F];
 32711  007BBE  0E3F               	movlw	63
 32712  007BC0  1576               	andwf	readFlashBlock@flashAddr& (0+255),w,b
 32713  007BC2  6F78               	movwf	??_readFlashBlock& (0+255),b
 32714  007BC4  0E00               	movlw	0
 32715  007BC6  1577               	andwf	(readFlashBlock@flashAddr+1)& (0+255),w,b
 32716  007BC8  6F79               	movwf	(??_readFlashBlock+1)& (0+255),b
 32717  007BCA  0E48               	movlw	low _flashbuf
 32718  007BCC  2578               	addwf	??_readFlashBlock& (0+255),w,b
 32719  007BCE  6ED9               	movwf	fsr2l,c
 32720  007BD0  0E03               	movlw	high _flashbuf
 32721  007BD2  2179               	addwfc	(??_readFlashBlock+1)& (0+255),w,b
 32722  007BD4  6EDA               	movwf	fsr2h,c
 32723  007BD6  50DF               	movf	indf2,w,c
 32724                           
 32725                           ; BSR set to: 0
 32726  007BD8  0012               	return		;funcret
 32727  007BDA                     __end_of_readFlashBlock:
 32728                           	callstack 0
 32729                           
 32730 ;; *************** function _flushFlashImage *****************
 32731 ;; Defined at:
 32732 ;;		line 217 in file "../../github/CBUSlib/romops.c"
 32733 ;; Parameters:    Size  Location     Type
 32734 ;;		None
 32735 ;; Auto vars:     Size  Location     Type
 32736 ;;		None
 32737 ;; Return value:  Size  Location     Type
 32738 ;;                  1    wreg      void 
 32739 ;; Registers used:
 32740 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 32741 ;; Tracked objects:
 32742 ;;		On entry : 3F/0
 32743 ;;		On exit  : 3F/0
 32744 ;;		Unchanged: 0/0
 32745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 32746 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 32747 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 32748 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 32749 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 32750 ;;Total ram usage:        0 bytes
 32751 ;; Hardware stack levels used: 1
 32752 ;; Hardware stack levels required when called: 11
 32753 ;; This function calls:
 32754 ;;		_writeFlashShort
 32755 ;;		_writeFlashWithErase
 32756 ;; This function is called by:
 32757 ;;		_factoryResetFlash
 32758 ;;		_clearAllEvents
 32759 ;;		_removeTableEntry
 32760 ;;		_addEvent
 32761 ;;		_deleteHappeningRange
 32762 ;;		_deleteActionRange
 32763 ;;		_readFlashBlock
 32764 ;;		_writeFlashByte
 32765 ;; This function uses a non-reentrant model
 32766 ;;
 32767                           
 32768                           	psect	text162
 32769  00A626                     __ptext162:
 32770                           	callstack 0
 32771  00A626                     _flushFlashImage:
 32772                           	callstack 13
 32773                           
 32774                           ; BSR set to: 0
 32775                           ;romops.c: 219: if (flashFlags.modified)
 32776                           
 32777                           ; BSR set to: 0
 32778                           ;incstack = 0
 32779  00A626  A805               	btfss	_flashFlags^0,4,c
 32780  00A628  0012               	return	
 32781                           
 32782                           ; BSR set to: 0
 32783                           ;romops.c: 220: {;romops.c: 221: if(flashFlags.zeroto1)
 32784  00A62A  AA05               	btfss	_flashFlags^0,5,c
 32785  00A62C  D003               	goto	l17553
 32786                           
 32787                           ; BSR set to: 0
 32788                           ;romops.c: 222: writeFlashWithErase();
 32789  00A62E  EC39  F050         	call	_writeFlashWithErase	;wreg free
 32790  00A632  0012               	return	
 32791  00A634                     l17553:
 32792                           
 32793                           ; BSR set to: 0
 32794                           ;romops.c: 223: else;romops.c: 224: writeFlashShort();
 32795  00A634  ECF5  F046         	call	_writeFlashShort	;wreg free
 32796                           
 32797                           ; BSR set to: 0
 32798  00A638  0012               	return		;funcret
 32799  00A63A                     __end_of_flushFlashImage:
 32800                           	callstack 0
 32801                           
 32802 ;; *************** function _writeFlashWithErase *****************
 32803 ;; Defined at:
 32804 ;;		line 192 in file "../../github/CBUSlib/romops.c"
 32805 ;; Parameters:    Size  Location     Type
 32806 ;;		None
 32807 ;; Auto vars:     Size  Location     Type
 32808 ;;		None
 32809 ;; Return value:  Size  Location     Type
 32810 ;;                  1    wreg      void 
 32811 ;; Registers used:
 32812 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 32813 ;; Tracked objects:
 32814 ;;		On entry : 3F/0
 32815 ;;		On exit  : 3F/0
 32816 ;;		Unchanged: 0/0
 32817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 32818 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 32819 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 32820 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 32821 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 32822 ;;Total ram usage:        0 bytes
 32823 ;; Hardware stack levels used: 1
 32824 ;; Hardware stack levels required when called: 10
 32825 ;; This function calls:
 32826 ;;		_isSuitableTimeToWriteFlash
 32827 ;;		_writeFlashShort
 32828 ;; This function is called by:
 32829 ;;		_flushFlashImage
 32830 ;; This function uses a non-reentrant model
 32831 ;;
 32832                           
 32833                           	psect	text163
 32834  00A072                     __ptext163:
 32835                           	callstack 0
 32836  00A072                     _writeFlashWithErase:
 32837                           	callstack 13
 32838                           
 32839                           ; BSR set to: 0
 32840                           ;romops.c: 196: while (! isSuitableTimeToWriteFlash());
 32841                           
 32842                           ; BSR set to: 0
 32843                           ;incstack = 0
 32844  00A072  EC8C  F053         	call	_isSuitableTimeToWriteFlash	;wreg free
 32845  00A076  0900               	iorlw	0
 32846  00A078  B4D8               	btfsc	status,2,c
 32847  00A07A  D7FB               	goto	__ptext163
 32848                           
 32849                           ;romops.c: 198: TBLPTR=flashblock;
 32850  00A07C  C1F6  FFF6         	movff	_flashblock,tblptrl	;volatile
 32851  00A080  C1F7  FFF7         	movff	_flashblock+1,tblptrh	;volatile
 32852  00A084  6AF8               	clrf	248,c	;volatile
 32853                           
 32854                           ;romops.c: 199: TBLPTRU = 0x00;
 32855  00A086  0E00               	movlw	0
 32856  00A088  6EF8               	movwf	248,c	;volatile
 32857                           
 32858                           ;romops.c: 200: EECON1bits.EEPGD = 1;
 32859  00A08A  8E7F               	bsf	127,7,c	;volsfr
 32860                           
 32861                           ;romops.c: 201: EECON1bits.CFGS = 0;
 32862  00A08C  9C7F               	bcf	127,6,c	;volsfr
 32863                           
 32864                           ;romops.c: 202: EECON1bits.WREN = 1;
 32865  00A08E  847F               	bsf	127,2,c	;volsfr
 32866                           
 32867                           ;romops.c: 203: EECON1bits.FREE = 1;
 32868  00A090  887F               	bsf	127,4,c	;volsfr
 32869                           
 32870                           ;romops.c: 204: (INTCONbits.GIE = 0);
 32871  00A092  9EF2               	bcf	242,7,c	;volatile
 32872                           
 32873                           ;romops.c: 205: EECON2 = 0x55;
 32874  00A094  0E55               	movlw	85
 32875  00A096  6E7E               	movwf	126,c	;volsfr
 32876                           
 32877                           ;romops.c: 206: EECON2 = 0xaa;
 32878  00A098  0EAA               	movlw	170
 32879  00A09A  6E7E               	movwf	126,c	;volsfr
 32880                           
 32881                           ;romops.c: 207: EECON1bits.WR = 1;
 32882  00A09C  827F               	bsf	127,1,c	;volsfr
 32883                           
 32884                           ;romops.c: 208: (INTCONbits.GIE = 1);
 32885  00A09E  8EF2               	bsf	242,7,c	;volatile
 32886                           
 32887                           ;romops.c: 209: EECON1bits.WREN = 0;
 32888  00A0A0  947F               	bcf	127,2,c	;volsfr
 32889                           
 32890                           ;romops.c: 211: writeFlashShort();
 32891  00A0A2  ECF5  F046         	call	_writeFlashShort	;wreg free
 32892                           
 32893                           ; BSR set to: 0
 32894  00A0A6  0012               	return		;funcret
 32895  00A0A8                     __end_of_writeFlashWithErase:
 32896                           	callstack 0
 32897                           
 32898 ;; *************** function _writeFlashShort *****************
 32899 ;; Defined at:
 32900 ;;		line 101 in file "../../github/CBUSlib/romops.c"
 32901 ;; Parameters:    Size  Location     Type
 32902 ;;		None
 32903 ;; Auto vars:     Size  Location     Type
 32904 ;;  i               1   21[BANK0 ] unsigned char 
 32905 ;; Return value:  Size  Location     Type
 32906 ;;                  1    wreg      void 
 32907 ;; Registers used:
 32908 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 32909 ;; Tracked objects:
 32910 ;;		On entry : 0/0
 32911 ;;		On exit  : 3F/0
 32912 ;;		Unchanged: 0/0
 32913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 32914 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 32915 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 32916 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 32917 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 32918 ;;Total ram usage:        5 bytes
 32919 ;; Hardware stack levels used: 1
 32920 ;; Hardware stack levels required when called: 8
 32921 ;; This function calls:
 32922 ;;		Nothing
 32923 ;; This function is called by:
 32924 ;;		_writeFlashWithErase
 32925 ;;		_flushFlashImage
 32926 ;; This function uses a non-reentrant model
 32927 ;;
 32928                           
 32929                           	psect	text164
 32930  008DEA                     __ptext164:
 32931                           	callstack 0
 32932  008DEA                     _writeFlashShort:
 32933                           	callstack 14
 32934                           
 32935                           ;romops.c: 105: TBLPTR = flashblock & ~(64 - 1);
 32936                           
 32937                           ; BSR set to: 0
 32938                           ;incstack = 0
 32939  008DEA  0EC0               	movlw	192
 32940  008DEC  0100               	movlb	0	; () banked
 32941  008DEE  6F71               	movwf	??_writeFlashShort& (0+255),b
 32942  008DF0  0EFF               	movlw	255
 32943  008DF2  6F72               	movwf	(??_writeFlashShort+1)& (0+255),b
 32944  008DF4  C1F6  F073         	movff	_flashblock,??_writeFlashShort+2
 32945  008DF8  C1F7  F074         	movff	_flashblock+1,??_writeFlashShort+3
 32946  008DFC  5171               	movf	??_writeFlashShort& (0+255),w,b
 32947  008DFE  1773               	andwf	(??_writeFlashShort+2)& (0+255),f,b
 32948  008E00  5172               	movf	(??_writeFlashShort+1)& (0+255),w,b
 32949  008E02  1774               	andwf	(??_writeFlashShort+3)& (0+255),f,b
 32950  008E04  C073  FFF6         	movff	??_writeFlashShort+2,tblptrl	;volatile
 32951  008E08  C074  FFF7         	movff	??_writeFlashShort+3,tblptrh	;volatile
 32952  008E0C  6AF8               	clrf	248,c	;volatile
 32953                           
 32954                           ; BSR set to: 0
 32955                           ;romops.c: 106: (INTCONbits.GIE = 0);
 32956  008E0E  9EF2               	bcf	242,7,c	;volatile
 32957                           
 32958                           ; BSR set to: 0
 32959                           ;romops.c: 107: for (unsigned char i=0; i<64; i++) {
 32960  008E10  0E00               	movlw	0
 32961  008E12  6F75               	movwf	writeFlashShort@i& (0+255),b
 32962  008E14                     l17489:
 32963                           
 32964                           ; BSR set to: 0
 32965                           ;romops.c: 108: TABLAT = flashbuf[i];
 32966  008E14  0E48               	movlw	low _flashbuf
 32967  008E16  2575               	addwf	writeFlashShort@i& (0+255),w,b
 32968  008E18  6ED9               	movwf	fsr2l,c
 32969  008E1A  6ADA               	clrf	fsr2h,c
 32970  008E1C  0E03               	movlw	high _flashbuf
 32971  008E1E  22DA               	addwfc	fsr2h,f,c
 32972  008E20  50DF               	movf	indf2,w,c
 32973  008E22  6EF5               	movwf	245,c	;volatile
 32974  008E24  000D               	tblwt		*+	;# 
 32975  008E26  0100               	movlb	0	; () banked
 32976  008E28  2B75               	incf	writeFlashShort@i& (0+255),f,b
 32977                           
 32978                           ; BSR set to: 0
 32979  008E2A  0E3F               	movlw	63
 32980  008E2C  6575               	cpfsgt	writeFlashShort@i& (0+255),b
 32981  008E2E  D7F2               	goto	l17489
 32982                           
 32983                           ; BSR set to: 0
 32984                           ;romops.c: 110: };romops.c: 117: TBLPTR = flashblock & ~(64 - 1);
 32985  008E30  0EC0               	movlw	192
 32986  008E32  6F71               	movwf	??_writeFlashShort& (0+255),b
 32987  008E34  0EFF               	movlw	255
 32988  008E36  6F72               	movwf	(??_writeFlashShort+1)& (0+255),b
 32989  008E38  C1F6  F073         	movff	_flashblock,??_writeFlashShort+2
 32990  008E3C  C1F7  F074         	movff	_flashblock+1,??_writeFlashShort+3
 32991  008E40  5171               	movf	??_writeFlashShort& (0+255),w,b
 32992  008E42  1773               	andwf	(??_writeFlashShort+2)& (0+255),f,b
 32993  008E44  5172               	movf	(??_writeFlashShort+1)& (0+255),w,b
 32994  008E46  1774               	andwf	(??_writeFlashShort+3)& (0+255),f,b
 32995  008E48  C073  FFF6         	movff	??_writeFlashShort+2,tblptrl	;volatile
 32996  008E4C  C074  FFF7         	movff	??_writeFlashShort+3,tblptrh	;volatile
 32997  008E50  6AF8               	clrf	248,c	;volatile
 32998                           
 32999                           ; BSR set to: 0
 33000                           ;romops.c: 118: EECON1bits.EEPGD = 1;
 33001  008E52  8E7F               	bsf	127,7,c	;volsfr
 33002                           
 33003                           ; BSR set to: 0
 33004                           ;romops.c: 119: EECON1bits.CFGS = 0;
 33005  008E54  9C7F               	bcf	127,6,c	;volsfr
 33006                           
 33007                           ; BSR set to: 0
 33008                           ;romops.c: 120: EECON1bits.FREE = 0;
 33009  008E56  987F               	bcf	127,4,c	;volsfr
 33010                           
 33011                           ; BSR set to: 0
 33012                           ;romops.c: 121: EECON1bits.WREN = 1;
 33013  008E58  847F               	bsf	127,2,c	;volsfr
 33014                           
 33015                           ; BSR set to: 0
 33016                           ;romops.c: 123: EECON2 = 0x55;
 33017  008E5A  0E55               	movlw	85
 33018  008E5C  6E7E               	movwf	126,c	;volsfr
 33019                           
 33020                           ; BSR set to: 0
 33021                           ;romops.c: 124: EECON2 = 0xAA;
 33022  008E5E  0EAA               	movlw	170
 33023  008E60  6E7E               	movwf	126,c	;volsfr
 33024                           
 33025                           ; BSR set to: 0
 33026                           ;romops.c: 125: EECON1bits.WR = 1;
 33027  008E62  827F               	bsf	127,1,c	;volsfr
 33028                           
 33029                           ; BSR set to: 0
 33030                           ;romops.c: 126: (INTCONbits.GIE = 1);
 33031  008E64  8EF2               	bsf	242,7,c	;volatile
 33032                           
 33033                           ; BSR set to: 0
 33034                           ;romops.c: 127: EECON1bits.WREN = 0;
 33035  008E66  947F               	bcf	127,2,c	;volsfr
 33036                           
 33037                           ; BSR set to: 0
 33038                           ;romops.c: 184: (INTCONbits.GIE = 1);
 33039  008E68  8EF2               	bsf	242,7,c	;volatile
 33040                           
 33041                           ; BSR set to: 0
 33042  008E6A  0012               	return		;funcret
 33043  008E6C                     __end_of_writeFlashShort:
 33044                           	callstack 0
 33045                           
 33046 ;; *************** function _isSuitableTimeToWriteFlash *****************
 33047 ;; Defined at:
 33048 ;;		line 583 in file "../../github/CANMIOfirmware/main.c"
 33049 ;; Parameters:    Size  Location     Type
 33050 ;;		None
 33051 ;; Auto vars:     Size  Location     Type
 33052 ;;		None
 33053 ;; Return value:  Size  Location     Type
 33054 ;;                  1    wreg      unsigned char 
 33055 ;; Registers used:
 33056 ;;		wreg, cstack
 33057 ;; Tracked objects:
 33058 ;;		On entry : 0/0
 33059 ;;		On exit  : 0/0
 33060 ;;		Unchanged: 0/0
 33061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 33062 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 33063 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 33064 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 33065 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 33066 ;;Total ram usage:        0 bytes
 33067 ;; Hardware stack levels used: 1
 33068 ;; Hardware stack levels required when called: 9
 33069 ;; This function calls:
 33070 ;;		_isNoServoPulses
 33071 ;; This function is called by:
 33072 ;;		_writeFlashWithErase
 33073 ;; This function uses a non-reentrant model
 33074 ;;
 33075                           
 33076                           	psect	text165
 33077  00A718                     __ptext165:
 33078                           	callstack 0
 33079  00A718                     _isSuitableTimeToWriteFlash:
 33080                           	callstack 13
 33081                           
 33082                           ;main.c: 585: return isNoServoPulses();
 33083                           
 33084                           ; BSR set to: 0
 33085                           ;incstack = 0
 33086  00A718  EC40  F053         	call	_isNoServoPulses	;wreg free
 33087  00A71C  0012               	return		;funcret
 33088  00A71E                     __end_of_isSuitableTimeToWriteFlash:
 33089                           	callstack 0
 33090                           
 33091 ;; *************** function _isNoServoPulses *****************
 33092 ;; Defined at:
 33093 ;;		line 635 in file "../../github/CANMIOfirmware/servo.c"
 33094 ;; Parameters:    Size  Location     Type
 33095 ;;		None
 33096 ;; Auto vars:     Size  Location     Type
 33097 ;;		None
 33098 ;; Return value:  Size  Location     Type
 33099 ;;                  1    wreg      unsigned char 
 33100 ;; Registers used:
 33101 ;;		wreg
 33102 ;; Tracked objects:
 33103 ;;		On entry : 0/0
 33104 ;;		On exit  : 0/0
 33105 ;;		Unchanged: 0/0
 33106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 33107 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 33108 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 33109 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 33110 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 33111 ;;Total ram usage:        0 bytes
 33112 ;; Hardware stack levels used: 1
 33113 ;; Hardware stack levels required when called: 8
 33114 ;; This function calls:
 33115 ;;		Nothing
 33116 ;; This function is called by:
 33117 ;;		_isSuitableTimeToWriteFlash
 33118 ;; This function uses a non-reentrant model
 33119 ;;
 33120                           
 33121                           	psect	text166
 33122  00A680                     __ptext166:
 33123                           	callstack 0
 33124  00A680                     _isNoServoPulses:
 33125                           	callstack 13
 33126                           
 33127                           ;servo.c: 637: if (T1CONbits.TMR1ON) return 0;
 33128                           
 33129                           ;incstack = 0
 33130  00A680  A0CD               	btfss	205,0,c	;volatile
 33131  00A682  D002               	goto	l1370
 33132  00A684                     u21390:
 33133  00A684  0E00               	movlw	0
 33134  00A686  0012               	return	
 33135  00A688                     l1370:
 33136                           
 33137                           ;servo.c: 638: if (T3CONbits.TMR3ON) return 0;
 33138  00A688  B0B1               	btfsc	177,0,c	;volatile
 33139  00A68A  D7FC               	goto	u21390
 33140                           
 33141                           ;servo.c: 639: return 1;
 33142  00A68C  0E01               	movlw	1
 33143  00A68E  0012               	return		;funcret
 33144  00A690                     __end_of_isNoServoPulses:
 33145                           	callstack 0
 33146                           
 33147 ;; *************** function _ee_write_short *****************
 33148 ;; Defined at:
 33149 ;;		line 463 in file "../../github/CBUSlib/romops.c"
 33150 ;; Parameters:    Size  Location     Type
 33151 ;;  addr            2   23[BANK0 ] unsigned int 
 33152 ;;  data            2   25[BANK0 ] unsigned int 
 33153 ;; Auto vars:     Size  Location     Type
 33154 ;;  ee_addr         2   27[BANK0 ] unsigned int 
 33155 ;; Return value:  Size  Location     Type
 33156 ;;                  1    wreg      void 
 33157 ;; Registers used:
 33158 ;;		wreg, status,2, status,0, cstack
 33159 ;; Tracked objects:
 33160 ;;		On entry : 3F/0
 33161 ;;		On exit  : 3F/0
 33162 ;;		Unchanged: 0/0
 33163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 33164 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 33165 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 33166 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 33167 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 33168 ;;Total ram usage:        6 bytes
 33169 ;; Hardware stack levels used: 1
 33170 ;; Hardware stack levels required when called: 10
 33171 ;; This function calls:
 33172 ;;		_ee_write
 33173 ;; This function is called by:
 33174 ;;		_factoryResetEE
 33175 ;;		_SaveNodeDetails
 33176 ;; This function uses a non-reentrant model
 33177 ;;
 33178                           
 33179                           	psect	text167
 33180  00A2E6                     __ptext167:
 33181                           	callstack 0
 33182  00A2E6                     _ee_write_short:
 33183                           	callstack 18
 33184                           
 33185                           ; BSR set to: 0
 33186                           ;romops.c: 464: WORD ee_addr = addr;
 33187                           
 33188                           ;incstack = 0
 33189  00A2E6  C077  F07B         	movff	ee_write_short@addr,ee_write_short@ee_addr
 33190  00A2EA  C078  F07C         	movff	ee_write_short@addr+1,ee_write_short@ee_addr+1
 33191                           
 33192                           ; BSR set to: 0
 33193                           ;romops.c: 465: ee_write(ee_addr++, (BYTE)(data&0xFF));
 33194  00A2EE  C07B  F073         	movff	ee_write_short@ee_addr,ee_write@addr
 33195  00A2F2  C07C  F074         	movff	ee_write_short@ee_addr+1,ee_write@addr+1
 33196  00A2F6  C079  F075         	movff	ee_write_short@data,ee_write@data
 33197  00A2FA  EC1D  F04D         	call	_ee_write	;wreg free
 33198                           
 33199                           ; BSR set to: 0
 33200  00A2FE  4B7B               	infsnz	ee_write_short@ee_addr& (0+255),f,b
 33201  00A300  2B7C               	incf	(ee_write_short@ee_addr+1)& (0+255),f,b
 33202                           
 33203                           ; BSR set to: 0
 33204                           ;romops.c: 466: ee_write(ee_addr, (BYTE)(data>>8));
 33205  00A302  C07B  F073         	movff	ee_write_short@ee_addr,ee_write@addr
 33206  00A306  C07C  F074         	movff	ee_write_short@ee_addr+1,ee_write@addr+1
 33207  00A30A  C07A  F075         	movff	ee_write_short@data+1,ee_write@data
 33208  00A30E  EC1D  F04D         	call	_ee_write	;wreg free
 33209                           
 33210                           ; BSR set to: 0
 33211  00A312  0012               	return		;funcret
 33212  00A314                     __end_of_ee_write_short:
 33213                           	callstack 0
 33214                           
 33215 ;; *************** function _ee_write *****************
 33216 ;; Defined at:
 33217 ;;		line 409 in file "../../github/CBUSlib/romops.c"
 33218 ;; Parameters:    Size  Location     Type
 33219 ;;  addr            2   19[BANK0 ] unsigned int 
 33220 ;;  data            1   21[BANK0 ] unsigned char 
 33221 ;; Auto vars:     Size  Location     Type
 33222 ;;  interruptEna    1   22[BANK0 ] unsigned char 
 33223 ;; Return value:  Size  Location     Type
 33224 ;;                  1    wreg      void 
 33225 ;; Registers used:
 33226 ;;		wreg, status,2, cstack
 33227 ;; Tracked objects:
 33228 ;;		On entry : 3F/0
 33229 ;;		On exit  : 3F/0
 33230 ;;		Unchanged: 0/0
 33231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 33232 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 33233 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 33234 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 33235 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 33236 ;;Total ram usage:        4 bytes
 33237 ;; Hardware stack levels used: 1
 33238 ;; Hardware stack levels required when called: 9
 33239 ;; This function calls:
 33240 ;;		_ee_read
 33241 ;; This function is called by:
 33242 ;;		_startDigitalOutput
 33243 ;;		_inputScan
 33244 ;;		_initialise
 33245 ;;		_factoryResetEE
 33246 ;;		_configIO
 33247 ;;		_pollServos
 33248 ;;		_canInit
 33249 ;;		_setNewCanId
 33250 ;;		_parseFLiMCmd
 33251 ;;		_SaveNodeDetails
 33252 ;;		_sendProducedEvent
 33253 ;;		_ee_write_short
 33254 ;; This function uses a non-reentrant model
 33255 ;;
 33256                           
 33257                           	psect	text168
 33258  009A3A                     __ptext168:
 33259                           	callstack 0
 33260  009A3A                     _ee_write:
 33261                           	callstack 18
 33262                           
 33263                           ; BSR set to: 0
 33264                           ;romops.c: 410: BYTE interruptEnabled;;romops.c: 411: interruptEnabled = INTCONbits.GIE;
 33265                           
 33266                           ; BSR set to: 0
 33267                           ;incstack = 0
 33268  009A3A  0E00               	movlw	0
 33269  009A3C  BEF2               	btfsc	242,7,c	;volatile
 33270  009A3E  0E01               	movlw	1
 33271  009A40  6F76               	movwf	ee_write@interruptEnabled& (0+255),b
 33272  009A42                     l18261:
 33273                           
 33274                           ; BSR set to: 0
 33275                           ;romops.c: 413: EEADRH = addr >> 8;
 33276  009A42  C074  FF75         	movff	ee_write@addr+1,3957	;volatile
 33277                           
 33278                           ; BSR set to: 0
 33279                           ;romops.c: 414: EEADR = addr & 0xFF;
 33280  009A46  C073  FF74         	movff	ee_write@addr,3956	;volatile
 33281                           
 33282                           ; BSR set to: 0
 33283                           ;romops.c: 415: EEDATA = data;
 33284  009A4A  C075  FF73         	movff	ee_write@data,3955	;volatile
 33285                           
 33286                           ; BSR set to: 0
 33287                           ;romops.c: 416: EECON1bits.EEPGD = 0;
 33288  009A4E  9E7F               	bcf	127,7,c	;volsfr
 33289                           
 33290                           ; BSR set to: 0
 33291                           ;romops.c: 417: EECON1bits.CFGS = 0;
 33292  009A50  9C7F               	bcf	127,6,c	;volsfr
 33293                           
 33294                           ; BSR set to: 0
 33295                           ;romops.c: 418: EECON1bits.WREN = 1;
 33296  009A52  847F               	bsf	127,2,c	;volsfr
 33297                           
 33298                           ; BSR set to: 0
 33299                           ;romops.c: 419: (INTCONbits.GIE = 0);
 33300  009A54  9EF2               	bcf	242,7,c	;volatile
 33301                           
 33302                           ; BSR set to: 0
 33303                           ;romops.c: 420: EECON2 = 0x55;
 33304  009A56  0E55               	movlw	85
 33305  009A58  6E7E               	movwf	126,c	;volsfr
 33306                           
 33307                           ; BSR set to: 0
 33308                           ;romops.c: 421: EECON2 = 0xAA;
 33309  009A5A  0EAA               	movlw	170
 33310  009A5C  6E7E               	movwf	126,c	;volsfr
 33311                           
 33312                           ; BSR set to: 0
 33313                           ;romops.c: 422: EECON1bits.WR = 1;
 33314  009A5E  827F               	bsf	127,1,c	;volsfr
 33315  009A60                     l2498:
 33316                           
 33317                           ; BSR set to: 0
 33318  009A60  B27F               	btfsc	127,1,c	;volsfr
 33319  009A62  D7FE               	goto	l2498
 33320                           
 33321                           ; BSR set to: 0
 33322                           ;romops.c: 431: if (interruptEnabled) {
 33323  009A64  5176               	movf	ee_write@interruptEnabled& (0+255),w,b
 33324  009A66  A4D8               	btfss	status,2,c
 33325                           
 33326                           ; BSR set to: 0
 33327                           ;romops.c: 432: (INTCONbits.GIE = 1);
 33328  009A68  8EF2               	bsf	242,7,c	;volatile
 33329  009A6A                     l2502:
 33330                           
 33331                           ; BSR set to: 0
 33332  009A6A  ACB7               	btfss	183,6,c	;volatile
 33333  009A6C  D7FE               	goto	l2502
 33334                           
 33335                           ; BSR set to: 0
 33336                           ;romops.c: 436: PIR4bits.EEIF = 0;
 33337  009A6E  9CB7               	bcf	183,6,c	;volatile
 33338                           
 33339                           ;romops.c: 437: EECON1bits.WREN = 0;
 33340  009A70  947F               	bcf	127,2,c	;volsfr
 33341                           
 33342                           ; BSR set to: 0
 33343                           ;romops.c: 438: } while (ee_read(addr) != data);
 33344  009A72  C073  F071         	movff	ee_write@addr,ee_read@addr
 33345  009A76  C074  F072         	movff	ee_write@addr+1,ee_read@addr+1
 33346  009A7A  EC97  F052         	call	_ee_read	;wreg free
 33347  009A7E  0100               	movlb	0	; () banked
 33348  009A80  1975               	xorwf	ee_write@data& (0+255),w,b
 33349  009A82  B4D8               	btfsc	status,2,c
 33350  009A84  0012               	return	
 33351  009A86  D7DD               	goto	l18261
 33352  009A88                     __end_of_ee_write:
 33353                           	callstack 0
 33354                           
 33355 ;; *************** function _ee_read *****************
 33356 ;; Defined at:
 33357 ;;		line 382 in file "../../github/CBUSlib/romops.c"
 33358 ;; Parameters:    Size  Location     Type
 33359 ;;  addr            2   17[BANK0 ] unsigned int 
 33360 ;; Auto vars:     Size  Location     Type
 33361 ;;		None
 33362 ;; Return value:  Size  Location     Type
 33363 ;;                  1    wreg      unsigned char 
 33364 ;; Registers used:
 33365 ;;		wreg, status,2
 33366 ;; Tracked objects:
 33367 ;;		On entry : 3F/0
 33368 ;;		On exit  : 0/0
 33369 ;;		Unchanged: 0/0
 33370 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 33371 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 33372 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 33373 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 33374 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 33375 ;;Total ram usage:        2 bytes
 33376 ;; Hardware stack levels used: 1
 33377 ;; Hardware stack levels required when called: 8
 33378 ;; This function calls:
 33379 ;;		Nothing
 33380 ;; This function is called by:
 33381 ;;		_initInputScan
 33382 ;;		_initialise
 33383 ;;		_configIO
 33384 ;;		_APP_doSOD
 33385 ;;		_initServos
 33386 ;;		_canInit
 33387 ;;		_flimInit
 33388 ;;		_sendProducedEvent
 33389 ;;		_doAreq
 33390 ;;		_ee_write
 33391 ;;		_ee_read_short
 33392 ;; This function uses a non-reentrant model
 33393 ;;
 33394                           
 33395                           	psect	text169
 33396  00A52E                     __ptext169:
 33397                           	callstack 0
 33398  00A52E                     _ee_read:
 33399                           	callstack 18
 33400                           
 33401                           ; BSR set to: 0
 33402                           
 33403                           ; BSR set to: 0
 33404                           ;romops.c: 384: ;
 33405                           
 33406                           ; BSR set to: 0
 33407                           ;incstack = 0
 33408  00A52E  B27F               	btfsc	127,1,c	;volsfr
 33409  00A530  D7FE               	goto	__ptext169
 33410                           
 33411                           ; BSR set to: 0
 33412                           ;romops.c: 386: EEADRH = addr >> 8;
 33413  00A532  C072  FF75         	movff	ee_read@addr+1,3957	;volatile
 33414                           
 33415                           ;romops.c: 387: EEADR = addr & 0xFF;
 33416  00A536  C071  FF74         	movff	ee_read@addr,3956	;volatile
 33417                           
 33418                           ;romops.c: 388: EECON1bits.EEPGD = 0;
 33419  00A53A  9E7F               	bcf	127,7,c	;volsfr
 33420                           
 33421                           ;romops.c: 389: EECON1bits.CFGS = 0;
 33422  00A53C  9C7F               	bcf	127,6,c	;volsfr
 33423                           
 33424                           ;romops.c: 390: EECON1bits.RD = 1;
 33425  00A53E  807F               	bsf	127,0,c	;volsfr
 33426  00A540                     l2491:
 33427                           
 33428                           ; BSR set to: 0
 33429  00A540  B07F               	btfsc	127,0,c	;volsfr
 33430  00A542  D7FE               	goto	l2491
 33431                           
 33432                           ; BSR set to: 0
 33433  00A544  F000               	nop		;# 
 33434                           
 33435                           ;romops.c: 400: return EEDATA;
 33436  00A546  5073               	movf	115,w,c	;volatile
 33437  00A548  0012               	return		;funcret
 33438  00A54A                     __end_of_ee_read:
 33439                           	callstack 0
 33440                           
 33441 ;; *************** function _SLiMRevert *****************
 33442 ;; Defined at:
 33443 ;;		line 286 in file "../../github/CBUSlib/FliM.c"
 33444 ;; Parameters:    Size  Location     Type
 33445 ;;		None
 33446 ;; Auto vars:     Size  Location     Type
 33447 ;;		None
 33448 ;; Return value:  Size  Location     Type
 33449 ;;                  1    wreg      void 
 33450 ;; Registers used:
 33451 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 33452 ;; Tracked objects:
 33453 ;;		On entry : 0/0
 33454 ;;		On exit  : 3F/0
 33455 ;;		Unchanged: 0/0
 33456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 33457 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 33458 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 33459 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 33460 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 33461 ;;Total ram usage:        0 bytes
 33462 ;; Hardware stack levels used: 1
 33463 ;; Hardware stack levels required when called: 14
 33464 ;; This function calls:
 33465 ;;		_cbusSendOpcNN
 33466 ;; This function is called by:
 33467 ;;		_FLiMSWCheck
 33468 ;; This function uses a non-reentrant model
 33469 ;;
 33470                           
 33471                           	psect	text170
 33472  00A5CA                     __ptext170:
 33473                           	callstack 0
 33474  00A5CA                     _SLiMRevert:
 33475                           	callstack 15
 33476                           
 33477                           ;FliM.c: 290: cbusSendOpcNN(0xFF, 0x51, -1, cbusMsg);
 33478                           
 33479                           ;incstack = 0
 33480  00A5CA  0E51               	movlw	81
 33481  00A5CC  0100               	movlb	0	; () banked
 33482  00A5CE  6F93               	movwf	cbusSendOpcNN@opc& (0+255),b
 33483  00A5D0  0EFF               	movlw	255
 33484  00A5D2  6F95               	movwf	(cbusSendOpcNN@nodeID+1)& (0+255),b
 33485  00A5D4  6994               	setf	cbusSendOpcNN@nodeID& (0+255),b
 33486  00A5D6  0E1C               	movlw	low _cbusMsg
 33487  00A5D8  6F96               	movwf	cbusSendOpcNN@msg& (0+255),b
 33488  00A5DA  0EFF               	movlw	255
 33489  00A5DC  EC03  F052         	call	_cbusSendOpcNN
 33490                           
 33491                           ; BSR set to: 0
 33492  00A5E0  0012               	return		;funcret
 33493  00A5E2                     __end_of_SLiMRevert:
 33494                           	callstack 0
 33495                           
 33496 ;; *************** function _cbusSendOpcNN *****************
 33497 ;; Defined at:
 33498 ;;		line 166 in file "../../github/CBUSlib/cbus.c"
 33499 ;; Parameters:    Size  Location     Type
 33500 ;;  cbusNum         1    wreg     unsigned char 
 33501 ;;  opc             1   51[BANK0 ] unsigned char 
 33502 ;;  nodeID          2   52[BANK0 ] unsigned int 
 33503 ;;  msg             1   54[BANK0 ] PTR unsigned char 
 33504 ;;		 -> requestNodeNumber@local_cbusMsg(9), cbusMsg(16), 
 33505 ;; Auto vars:     Size  Location     Type
 33506 ;;  cbusNum         1   55[BANK0 ] unsigned char 
 33507 ;; Return value:  Size  Location     Type
 33508 ;;                  1    wreg      unsigned char 
 33509 ;; Registers used:
 33510 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 33511 ;; Tracked objects:
 33512 ;;		On entry : 3F/0
 33513 ;;		On exit  : 3F/0
 33514 ;;		Unchanged: 0/0
 33515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 33516 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 33517 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 33518 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 33519 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 33520 ;;Total ram usage:        5 bytes
 33521 ;; Hardware stack levels used: 1
 33522 ;; Hardware stack levels required when called: 13
 33523 ;; This function calls:
 33524 ;;		_cbusSendMsgNN
 33525 ;; This function is called by:
 33526 ;;		_pollAnalogue
 33527 ;;		_requestNodeNumber
 33528 ;;		_SLiMRevert
 33529 ;; This function uses a non-reentrant model
 33530 ;;
 33531                           
 33532                           	psect	text171
 33533  00A406                     __ptext171:
 33534                           	callstack 0
 33535  00A406                     _cbusSendOpcNN:
 33536                           	callstack 16
 33537                           
 33538                           ; BSR set to: 0
 33539                           ;incstack = 0
 33540                           ;cbusSendOpcNN@cbusNum stored from wreg
 33541  00A406  6F97               	movwf	cbusSendOpcNN@cbusNum& (0+255),b
 33542                           
 33543                           ;cbus.c: 168: msg[d0] = opc;
 33544  00A408  0100               	movlb	0	; () banked
 33545  00A40A  5196               	movf	cbusSendOpcNN@msg& (0+255),w,b
 33546  00A40C  6ED9               	movwf	fsr2l,c
 33547  00A40E  6ADA               	clrf	fsr2h,c
 33548  00A410  0E06               	movlw	6
 33549  00A412  26D9               	addwf	fsr2l,f,c
 33550  00A414  C093  FFDF         	movff	cbusSendOpcNN@opc,indf2
 33551                           
 33552                           ; BSR set to: 0
 33553                           ;cbus.c: 169: return cbusSendMsgNN(cbusNum, nodeID, msg);;	Return value of _cbusSendOpcN
      +                          N is never used
 33554  00A418  C094  F08F         	movff	cbusSendOpcNN@nodeID,cbusSendMsgNN@eventNode
 33555  00A41C  C095  F090         	movff	cbusSendOpcNN@nodeID+1,cbusSendMsgNN@eventNode+1
 33556  00A420  C096  F091         	movff	cbusSendOpcNN@msg,cbusSendMsgNN@msg
 33557  00A424  5197               	movf	cbusSendOpcNN@cbusNum& (0+255),w,b
 33558  00A426  EC52  F04F         	call	_cbusSendMsgNN
 33559                           
 33560                           ; BSR set to: 0
 33561  00A42A  0012               	return		;funcret
 33562  00A42C                     __end_of_cbusSendOpcNN:
 33563                           	callstack 0
 33564                           
 33565 ;; *************** function _cbusSendMsgNN *****************
 33566 ;; Defined at:
 33567 ;;		line 270 in file "../../github/CBUSlib/cbus.c"
 33568 ;; Parameters:    Size  Location     Type
 33569 ;;  cbusNum         1    wreg     unsigned char 
 33570 ;;  eventNode       2   47[BANK0 ] unsigned int 
 33571 ;;  msg             1   49[BANK0 ] PTR unsigned char 
 33572 ;;		 -> requestNodeNumber@local_cbusMsg(9), cbusSendDataEvent@msg(14), cbusSendEvent@msg(10), cbusSendMyEvent@msg(10), 
 33573 ;;		 -> cbusMsg(16), 
 33574 ;; Auto vars:     Size  Location     Type
 33575 ;;  cbusNum         1   50[BANK0 ] unsigned char 
 33576 ;; Return value:  Size  Location     Type
 33577 ;;                  1    wreg      unsigned char 
 33578 ;; Registers used:
 33579 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 33580 ;; Tracked objects:
 33581 ;;		On entry : 3F/0
 33582 ;;		On exit  : 3F/0
 33583 ;;		Unchanged: 0/0
 33584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 33585 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 33586 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 33587 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 33588 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 33589 ;;Total ram usage:        4 bytes
 33590 ;; Hardware stack levels used: 1
 33591 ;; Hardware stack levels required when called: 12
 33592 ;; This function calls:
 33593 ;;		_cbusSendMsg
 33594 ;; This function is called by:
 33595 ;;		_cbusSendOpcNN
 33596 ;;		_cbusSendEventWithData
 33597 ;;		_QNNrespond
 33598 ;;		_doRqnpn
 33599 ;;		_doError
 33600 ;; This function uses a non-reentrant model
 33601 ;;
 33602                           
 33603                           	psect	text172
 33604  009EA4                     __ptext172:
 33605                           	callstack 0
 33606  009EA4                     _cbusSendMsgNN:
 33607                           	callstack 13
 33608                           
 33609                           ; BSR set to: 0
 33610                           ;incstack = 0
 33611                           ;cbusSendMsgNN@cbusNum stored from wreg
 33612  009EA4  6F92               	movwf	cbusSendMsgNN@cbusNum& (0+255),b
 33613                           
 33614                           ;cbus.c: 272: if (eventNode == -1)
 33615  009EA6  0100               	movlb	0	; () banked
 33616  009EA8  298F               	incf	cbusSendMsgNN@eventNode& (0+255),w,b
 33617  009EAA  E107               	bnz	l18407
 33618  009EAC  2990               	incf	(cbusSendMsgNN@eventNode+1)& (0+255),w,b
 33619  009EAE  A4D8               	btfss	status,2,c
 33620  009EB0  D004               	goto	l18407
 33621                           
 33622                           ; BSR set to: 0
 33623                           ;cbus.c: 273: eventNode = nodeID;
 33624  009EB2  C001  F08F         	movff	_nodeID,cbusSendMsgNN@eventNode
 33625  009EB6  C002  F090         	movff	_nodeID+1,cbusSendMsgNN@eventNode+1
 33626  009EBA                     l18407:
 33627                           
 33628                           ; BSR set to: 0
 33629                           ;cbus.c: 275: msg[d1] = eventNode>>8;
 33630  009EBA  5191               	movf	cbusSendMsgNN@msg& (0+255),w,b
 33631  009EBC  6ED9               	movwf	fsr2l,c
 33632  009EBE  6ADA               	clrf	fsr2h,c
 33633  009EC0  0E07               	movlw	7
 33634  009EC2  26D9               	addwf	fsr2l,f,c
 33635  009EC4  C090  FFDF         	movff	cbusSendMsgNN@eventNode+1,indf2
 33636                           
 33637                           ;cbus.c: 276: msg[d2] = eventNode & 0xFF;
 33638  009EC8  5191               	movf	cbusSendMsgNN@msg& (0+255),w,b
 33639  009ECA  6ED9               	movwf	fsr2l,c
 33640  009ECC  6ADA               	clrf	fsr2h,c
 33641  009ECE  0E08               	movlw	8
 33642  009ED0  26D9               	addwf	fsr2l,f,c
 33643  009ED2  C08F  FFDF         	movff	cbusSendMsgNN@eventNode,indf2
 33644                           
 33645                           ; BSR set to: 0
 33646                           ;cbus.c: 277: return cbusSendMsg(cbusNum, msg);
 33647  009ED6  C091  F08B         	movff	cbusSendMsgNN@msg,cbusSendMsg@msg
 33648  009EDA  5192               	movf	cbusSendMsgNN@cbusNum& (0+255),w,b
 33649  009EDC  ECAD  F04F         	call	_cbusSendMsg
 33650                           
 33651                           ; BSR set to: 0
 33652  009EE0  0012               	return		;funcret
 33653  009EE2                     __end_of_cbusSendMsgNN:
 33654                           	callstack 0
 33655                           
 33656 ;; *************** function _cbusSendMsg *****************
 33657 ;; Defined at:
 33658 ;;		line 290 in file "../../github/CBUSlib/cbus.c"
 33659 ;; Parameters:    Size  Location     Type
 33660 ;;  cbusNum         1    wreg     unsigned char 
 33661 ;;  msg             1   43[BANK0 ] PTR unsigned char 
 33662 ;;		 -> requestNodeNumber@local_cbusMsg(9), cbusSendDataEvent@msg(14), cbusSendEvent@msg(10), cbusSendMyEvent@msg(10), 
 33663 ;;		 -> cbusMsg(16), 
 33664 ;; Auto vars:     Size  Location     Type
 33665 ;;  cbusNum         1   46[BANK0 ] unsigned char 
 33666 ;; Return value:  Size  Location     Type
 33667 ;;                  1    wreg      unsigned char 
 33668 ;; Registers used:
 33669 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 33670 ;; Tracked objects:
 33671 ;;		On entry : 3F/0
 33672 ;;		On exit  : 3F/0
 33673 ;;		Unchanged: 0/0
 33674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 33675 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 33676 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 33677 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 33678 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 33679 ;;Total ram usage:        4 bytes
 33680 ;; Hardware stack levels used: 1
 33681 ;; Hardware stack levels required when called: 11
 33682 ;; This function calls:
 33683 ;;		_canSend
 33684 ;; This function is called by:
 33685 ;;		_cbusSendMsgMyNN
 33686 ;;		_cbusSendMsgNN
 33687 ;;		_doRqnp
 33688 ;;		_doRqmn
 33689 ;;		_doAreq
 33690 ;; This function uses a non-reentrant model
 33691 ;;
 33692                           
 33693                           	psect	text173
 33694  009F5A                     __ptext173:
 33695                           	callstack 0
 33696  009F5A                     _cbusSendMsg:
 33697                           	callstack 13
 33698                           
 33699                           ; BSR set to: 0
 33700                           ;incstack = 0
 33701                           ;cbusSendMsg@cbusNum stored from wreg
 33702  009F5A  6F8E               	movwf	cbusSendMsg@cbusNum& (0+255),b
 33703                           
 33704                           ;cbus.c: 293: if ((cbusNum == 0) || (cbusNum == 0xFF) )
 33705  009F5C  0100               	movlb	0	; () banked
 33706  009F5E  518E               	movf	cbusSendMsg@cbusNum& (0+255),w,b
 33707  009F60  B4D8               	btfsc	status,2,c
 33708  009F62  D003               	goto	u22450
 33709                           
 33710                           ; BSR set to: 0
 33711  009F64  298E               	incf	cbusSendMsg@cbusNum& (0+255),w,b
 33712  009F66  A4D8               	btfss	status,2,c
 33713  009F68  D014               	goto	l18221
 33714  009F6A                     u22450:
 33715                           
 33716                           ; BSR set to: 0
 33717                           ;cbus.c: 294: return canSend( msg, (unsigned char)((unsigned char)(msg[d0] >> 5U)+1U));
 33718  009F6A  C08B  F088         	movff	cbusSendMsg@msg,canSend@msg
 33719  009F6E  518B               	movf	cbusSendMsg@msg& (0+255),w,b
 33720  009F70  6ED9               	movwf	fsr2l,c
 33721  009F72  6ADA               	clrf	fsr2h,c
 33722  009F74  0E06               	movlw	6
 33723  009F76  26D9               	addwf	fsr2l,f,c
 33724  009F78  50DF               	movf	indf2,w,c
 33725  009F7A  6F8C               	movwf	??_cbusSendMsg& (0+255),b
 33726  009F7C  0E05               	movlw	5
 33727  009F7E  6F8D               	movwf	(??_cbusSendMsg+1)& (0+255),b
 33728  009F80                     u22465:
 33729  009F80  90D8               	bcf	status,0,c
 33730  009F82  338C               	rrcf	??_cbusSendMsg& (0+255),f,b
 33731  009F84  2F8D               	decfsz	(??_cbusSendMsg+1)& (0+255),f,b
 33732  009F86  D7FC               	goto	u22465
 33733  009F88  298C               	incf	??_cbusSendMsg& (0+255),w,b
 33734  009F8A  6F89               	movwf	canSend@msgLen& (0+255),b
 33735  009F8C  ECA5  F052         	call	_canSend	;wreg free
 33736  009F90  0012               	return	
 33737  009F92                     l18221:
 33738                           
 33739                           ; BSR set to: 0
 33740                           ;cbus.c: 305: return 1;
 33741  009F92  0E01               	movlw	1
 33742                           
 33743                           ; BSR set to: 0
 33744  009F94  0012               	return		;funcret
 33745  009F96                     __end_of_cbusSendMsg:
 33746                           	callstack 0
 33747                           
 33748 ;; *************** function _canSend *****************
 33749 ;; Defined at:
 33750 ;;		line 334 in file "../../github/CBUSlib/can18.c"
 33751 ;; Parameters:    Size  Location     Type
 33752 ;;  msg             1   40[BANK0 ] PTR unsigned char 
 33753 ;;		 -> requestNodeNumber@local_cbusMsg(9), cbusSendDataEvent@msg(14), cbusSendEvent@msg(10), cbusSendMyEvent@msg(10), 
 33754 ;;		 -> cbusMsg(16), 
 33755 ;;  msgLen          1   41[BANK0 ] unsigned char 
 33756 ;; Auto vars:     Size  Location     Type
 33757 ;;  success         1   42[BANK0 ] unsigned char 
 33758 ;; Return value:  Size  Location     Type
 33759 ;;                  1    wreg      unsigned char 
 33760 ;; Registers used:
 33761 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 33762 ;; Tracked objects:
 33763 ;;		On entry : 3F/0
 33764 ;;		On exit  : 3F/0
 33765 ;;		Unchanged: 0/0
 33766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 33767 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 33768 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 33769 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 33770 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 33771 ;;Total ram usage:        3 bytes
 33772 ;; Hardware stack levels used: 1
 33773 ;; Hardware stack levels required when called: 10
 33774 ;; This function calls:
 33775 ;;		_canTX
 33776 ;; This function is called by:
 33777 ;;		_cbusSendMsg
 33778 ;; This function uses a non-reentrant model
 33779 ;;
 33780                           
 33781                           	psect	text174
 33782  00A54A                     __ptext174:
 33783                           	callstack 0
 33784  00A54A                     _canSend:
 33785                           	callstack 13
 33786                           
 33787                           ; BSR set to: 0
 33788                           ;can18.c: 337: BOOL success;;can18.c: 342: msg[dlc] = msgLen;
 33789                           
 33790                           ; BSR set to: 0
 33791                           ;incstack = 0
 33792  00A54A  5188               	movf	canSend@msg& (0+255),w,b
 33793  00A54C  6ED9               	movwf	fsr2l,c
 33794  00A54E  6ADA               	clrf	fsr2h,c
 33795  00A550  0E05               	movlw	5
 33796  00A552  26D9               	addwf	fsr2l,f,c
 33797  00A554  C089  FFDF         	movff	canSend@msgLen,indf2
 33798                           
 33799                           ; BSR set to: 0
 33800                           ;can18.c: 343: success = canTX((CanPacket*)msg);
 33801  00A558  C088  F07C         	movff	canSend@msg,canTX@msg
 33802  00A55C  ECB8  F030         	call	_canTX	;wreg free
 33803  00A560  6F8A               	movwf	canSend@success& (0+255),b
 33804                           
 33805                           ; BSR set to: 0
 33806                           ;can18.c: 344: return( success );
 33807  00A562  518A               	movf	canSend@success& (0+255),w,b
 33808                           
 33809                           ; BSR set to: 0
 33810  00A564  0012               	return		;funcret
 33811  00A566                     __end_of_canSend:
 33812                           	callstack 0
 33813                           
 33814 ;; *************** function _canTX *****************
 33815 ;; Defined at:
 33816 ;;		line 350 in file "../../github/CBUSlib/can18.c"
 33817 ;; Parameters:    Size  Location     Type
 33818 ;;  msg             1   28[BANK0 ] PTR struct .
 33819 ;;		 -> requestNodeNumber@local_cbusMsg(9), cbusSendDataEvent@msg(14), cbusSendEvent@msg(10), cbusSendMyEvent@msg(10), 
 33820 ;;		 -> cbusMsg(16), 
 33821 ;; Auto vars:     Size  Location     Type
 33822 ;;  ptr             2   34[BANK0 ] PTR unsigned char 
 33823 ;;		 -> TXB0CON(1), 
 33824 ;;  hiIndex         1   39[BANK0 ] unsigned char 
 33825 ;;  fullUp          1   38[BANK0 ] unsigned char 
 33826 ;; Return value:  Size  Location     Type
 33827 ;;                  1    wreg      unsigned char 
 33828 ;; Registers used:
 33829 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 33830 ;; Tracked objects:
 33831 ;;		On entry : 3F/0
 33832 ;;		On exit  : 3F/0
 33833 ;;		Unchanged: 0/0
 33834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 33835 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 33836 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 33837 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 33838 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 33839 ;;Total ram usage:       12 bytes
 33840 ;; Hardware stack levels used: 1
 33841 ;; Hardware stack levels required when called: 9
 33842 ;; This function calls:
 33843 ;;		_memcpy
 33844 ;;		_tickGet
 33845 ;; This function is called by:
 33846 ;;		_canSend
 33847 ;; This function uses a non-reentrant model
 33848 ;;
 33849                           
 33850                           	psect	text175
 33851  006170                     __ptext175:
 33852                           	callstack 0
 33853  006170                     _canTX:
 33854                           	callstack 13
 33855                           
 33856                           ; BSR set to: 0
 33857                           ;can18.c: 352: BYTE* ptr;;can18.c: 353: BOOL fullUp;;can18.c: 354: BYTE hiIndex;;can18.c
      +                          : 356: msg->buffer[con] = 0;
 33858                           
 33859                           ; BSR set to: 0
 33860                           ;incstack = 0
 33861  006170  517C               	movf	canTX@msg& (0+255),w,b
 33862  006172  6ED9               	movwf	fsr2l,c
 33863  006174  6ADA               	clrf	fsr2h,c
 33864  006176  0E00               	movlw	0
 33865  006178  6EDF               	movwf	indf2,c
 33866                           
 33867                           ; BSR set to: 0
 33868                           ;can18.c: 357: msg->buffer[dlc] &= 0x0F;
 33869  00617A  517C               	movf	canTX@msg& (0+255),w,b
 33870  00617C  6ED9               	movwf	fsr2l,c
 33871  00617E  6ADA               	clrf	fsr2h,c
 33872  006180  0E05               	movlw	5
 33873  006182  26D9               	addwf	fsr2l,f,c
 33874  006184  0E0F               	movlw	15
 33875  006186  16DF               	andwf	indf2,f,c
 33876                           
 33877                           ; BSR set to: 0
 33878                           ;can18.c: 358: msg->buffer[sidh] = 0b10110000 | ((canID & 0x78U) >>3U);
 33879  006188  517C               	movf	canTX@msg& (0+255),w,b
 33880  00618A  6ED9               	movwf	fsr2l,c
 33881  00618C  6ADA               	clrf	fsr2h,c
 33882  00618E  0E01               	movlw	1
 33883  006190  26D9               	addwf	fsr2l,f,c
 33884  006192  382C               	swapf	_canID^0,w,c
 33885  006194  46E8               	rlncf	wreg,f,c
 33886  006196  0B1F               	andlw	31
 33887  006198  0B0F               	andlw	15
 33888  00619A  09B0               	iorlw	176
 33889  00619C  6EDF               	movwf	indf2,c
 33890                           
 33891                           ; BSR set to: 0
 33892                           ;can18.c: 359: msg->buffer[sidl] = (canID & 0x07U) << 5U;
 33893  00619E  517C               	movf	canTX@msg& (0+255),w,b
 33894  0061A0  6ED9               	movwf	fsr2l,c
 33895  0061A2  6ADA               	clrf	fsr2h,c
 33896  0061A4  0E02               	movlw	2
 33897  0061A6  26D9               	addwf	fsr2l,f,c
 33898  0061A8  C02C  F07D         	movff	_canID,??_canTX
 33899  0061AC  0E07               	movlw	7
 33900  0061AE  177D               	andwf	??_canTX& (0+255),f,b
 33901  0061B0  0E05               	movlw	5
 33902  0061B2  6F7E               	movwf	(??_canTX+1)& (0+255),b
 33903  0061B4                     u21935:
 33904  0061B4  90D8               	bcf	status,0,c
 33905  0061B6  377D               	rlcf	??_canTX& (0+255),f,b
 33906  0061B8  2F7E               	decfsz	(??_canTX+1)& (0+255),f,b
 33907  0061BA  D7FC               	goto	u21935
 33908  0061BC  517D               	movf	??_canTX& (0+255),w,b
 33909  0061BE  6EDF               	movwf	indf2,c
 33910                           
 33911                           ; BSR set to: 0
 33912                           ;can18.c: 361: if (msg->buffer[dlc] > 8)
 33913  0061C0  517C               	movf	canTX@msg& (0+255),w,b
 33914  0061C2  6ED9               	movwf	fsr2l,c
 33915  0061C4  6ADA               	clrf	fsr2h,c
 33916  0061C6  0E05               	movlw	5
 33917  0061C8  26D9               	addwf	fsr2l,f,c
 33918  0061CA  0E08               	movlw	8
 33919  0061CC  64DF               	cpfsgt	indf2,c
 33920  0061CE  D007               	goto	l17951
 33921                           
 33922                           ; BSR set to: 0
 33923                           ;can18.c: 362: msg->buffer[dlc] = 8;
 33924  0061D0  517C               	movf	canTX@msg& (0+255),w,b
 33925  0061D2  6ED9               	movwf	fsr2l,c
 33926  0061D4  6ADA               	clrf	fsr2h,c
 33927  0061D6  0E05               	movlw	5
 33928  0061D8  26D9               	addwf	fsr2l,f,c
 33929  0061DA  0E08               	movlw	8
 33930  0061DC  6EDF               	movwf	indf2,c
 33931  0061DE                     l17951:
 33932                           
 33933                           ; BSR set to: 0
 33934                           ;can18.c: 365: PIE5bits.TXBnIE = 0;
 33935  0061DE  9876               	bcf	118,4,c	;volatile
 33936                           
 33937                           ; BSR set to: 0
 33938                           ;can18.c: 369: if (((txIndexNextUsed == txIndexNextFree) || canTransmitFailed) && (!TXB0
      +                          CONbits.TXREQ))
 33939  0061E0  5011               	movf	_txIndexNextFree^0,w,c
 33940  0061E2  1810               	xorwf	_txIndexNextUsed^0,w,c
 33941  0061E4  B4D8               	btfsc	status,2,c
 33942  0061E6  D003               	goto	u21960
 33943                           
 33944                           ; BSR set to: 0
 33945  0061E8  500C               	movf	_canTransmitFailed^0,w,c
 33946  0061EA  B4D8               	btfsc	status,2,c
 33947  0061EC  D032               	goto	l17971
 33948  0061EE                     u21960:
 33949                           
 33950                           ; BSR set to: 0
 33951  0061EE  010F               	movlb	15	; () banked
 33952  0061F0  B720               	btfsc	32,3,b	;volatile
 33953  0061F2  D02F               	goto	l17971
 33954                           
 33955                           ; BSR set to: 15
 33956                           ;can18.c: 370: {;can18.c: 371: ptr = (BYTE*) & TXB0CON;
 33957  0061F4  0E20               	movlw	32
 33958  0061F6  0100               	movlb	0	; () banked
 33959  0061F8  6F82               	movwf	canTX@ptr& (0+255),b
 33960  0061FA  0E0F               	movlw	15
 33961  0061FC  6F83               	movwf	(canTX@ptr+1)& (0+255),b
 33962                           
 33963                           ; BSR set to: 0
 33964                           ;can18.c: 372: memcpy(ptr, (void *) msg->buffer, msg->buffer[dlc] + 6U);
 33965  0061FE  C082  F071         	movff	canTX@ptr,memcpy@d1
 33966  006202  C083  F072         	movff	canTX@ptr+1,memcpy@d1+1
 33967  006206  C07C  F073         	movff	canTX@msg,memcpy@s1
 33968  00620A  6B74               	clrf	(memcpy@s1+1)& (0+255),b
 33969  00620C  517C               	movf	canTX@msg& (0+255),w,b
 33970  00620E  6ED9               	movwf	fsr2l,c
 33971  006210  6ADA               	clrf	fsr2h,c
 33972  006212  0E05               	movlw	5
 33973  006214  26D9               	addwf	fsr2l,f,c
 33974  006216  50DF               	movf	indf2,w,c
 33975  006218  6F7D               	movwf	??_canTX& (0+255),b
 33976  00621A  0E06               	movlw	6
 33977  00621C  257D               	addwf	??_canTX& (0+255),w,b
 33978  00621E  6F75               	movwf	memcpy@n& (0+255),b
 33979  006220  6B76               	clrf	(memcpy@n+1)& (0+255),b
 33980  006222  0E00               	movlw	0
 33981  006224  2376               	addwfc	(memcpy@n+1)& (0+255),f,b
 33982  006226  EC6B  F04E         	call	_memcpy	;wreg free
 33983                           
 33984                           ; BSR set to: 0
 33985                           ;can18.c: 374: larbRetryCount = 10;
 33986  00622A  0E0A               	movlw	10
 33987  00622C  6E0D               	movwf	_larbRetryCount^0,c
 33988                           
 33989                           ; BSR set to: 0
 33990                           ;can18.c: 375: canTransmitTimeout.Val = tickGet();
 33991  00622E  ECA3  F04B         	call	_tickGet	;wreg free
 33992  006232  C071  F1B4         	movff	?_tickGet,_canTransmitTimeout
 33993  006236  C072  F1B5         	movff	?_tickGet+1,_canTransmitTimeout+1
 33994  00623A  C073  F1B6         	movff	?_tickGet+2,_canTransmitTimeout+2
 33995  00623E  C074  F1B7         	movff	?_tickGet+3,_canTransmitTimeout+3
 33996                           
 33997                           ; BSR set to: 0
 33998                           ;can18.c: 376: canTransmitFailed = 0;
 33999  006242  0E00               	movlw	0
 34000  006244  6E0C               	movwf	_canTransmitFailed^0,c
 34001                           
 34002                           ; BSR set to: 0
 34003                           ;can18.c: 378: TXB0CONbits.TXREQ = 1;
 34004  006246  010F               	movlb	15	; () banked
 34005  006248  8720               	bsf	32,3,b	;volatile
 34006                           
 34007                           ; BSR set to: 15
 34008                           ;can18.c: 379: fullUp = 0;
 34009  00624A  0E00               	movlw	0
 34010  00624C  0100               	movlb	0	; () banked
 34011  00624E  6F86               	movwf	canTX@fullUp& (0+255),b
 34012                           
 34013                           ;can18.c: 380: }
 34014  006250  D05F               	goto	l17995
 34015  006252                     l17971:
 34016                           
 34017                           ;can18.c: 381: else;can18.c: 382: {;can18.c: 383: if (!(fullUp = (unsigned char)(txIndex
      +                          NextFree == 0xFFU)))
 34018  006252  2811               	incf	_txIndexNextFree^0,w,c
 34019  006254  A4D8               	btfss	status,2,c
 34020  006256  D002               	goto	u21980
 34021  006258  0E01               	movlw	1
 34022  00625A  D001               	goto	u21990
 34023  00625C                     u21980:
 34024  00625C  0E00               	movlw	0
 34025  00625E                     u21990:
 34026  00625E  0100               	movlb	0	; () banked
 34027  006260  6F86               	movwf	canTX@fullUp& (0+255),b
 34028  006262  5186               	movf	canTX@fullUp& (0+255),w,b
 34029  006264  A4D8               	btfss	status,2,c
 34030  006266  D027               	goto	l17983
 34031                           
 34032                           ; BSR set to: 0
 34033                           ;can18.c: 384: {;can18.c: 385: memcpy( canTxFifo[txIndexNextFree].buffer, msg->buffer, m
      +                          sg->buffer[dlc] + 6U);
 34034  006268  5011               	movf	_txIndexNextFree^0,w,c
 34035  00626A  0D10               	mullw	16
 34036  00626C  0E00               	movlw	low _canTxFifo
 34037  00626E  24F3               	addwf	243,w,c
 34038  006270  6F71               	movwf	memcpy@d1& (0+255),b
 34039  006272  0E06               	movlw	high _canTxFifo
 34040  006274  20F4               	addwfc	prodh,w,c
 34041  006276  6F72               	movwf	(memcpy@d1+1)& (0+255),b
 34042  006278  C07C  F073         	movff	canTX@msg,memcpy@s1
 34043  00627C  6B74               	clrf	(memcpy@s1+1)& (0+255),b
 34044  00627E  517C               	movf	canTX@msg& (0+255),w,b
 34045  006280  6ED9               	movwf	fsr2l,c
 34046  006282  6ADA               	clrf	fsr2h,c
 34047  006284  0E05               	movlw	5
 34048  006286  26D9               	addwf	fsr2l,f,c
 34049  006288  50DF               	movf	indf2,w,c
 34050  00628A  6F7D               	movwf	??_canTX& (0+255),b
 34051  00628C  0E06               	movlw	6
 34052  00628E  257D               	addwf	??_canTX& (0+255),w,b
 34053  006290  6F75               	movwf	memcpy@n& (0+255),b
 34054  006292  6B76               	clrf	(memcpy@n+1)& (0+255),b
 34055  006294  0E00               	movlw	0
 34056  006296  2376               	addwfc	(memcpy@n+1)& (0+255),f,b
 34057  006298  EC6B  F04E         	call	_memcpy	;wreg free
 34058                           
 34059                           ; BSR set to: 0
 34060                           ;can18.c: 387: if (++txIndexNextFree == 16U )
 34061  00629C  2A11               	incf	_txIndexNextFree^0,f,c
 34062  00629E  0E10               	movlw	16
 34063  0062A0  1811               	xorwf	_txIndexNextFree^0,w,c
 34064  0062A2  A4D8               	btfss	status,2,c
 34065  0062A4  D002               	goto	l17979
 34066                           
 34067                           ; BSR set to: 0
 34068                           ;can18.c: 388: txIndexNextFree = 0U;
 34069  0062A6  0E00               	movlw	0
 34070  0062A8  6E11               	movwf	_txIndexNextFree^0,c
 34071  0062AA                     l17979:
 34072                           
 34073                           ; BSR set to: 0
 34074                           ;can18.c: 390: if (txIndexNextUsed == txIndexNextFree)
 34075  0062AA  5011               	movf	_txIndexNextFree^0,w,c
 34076  0062AC  1810               	xorwf	_txIndexNextUsed^0,w,c
 34077  0062AE  A4D8               	btfss	status,2,c
 34078  0062B0  D004               	goto	l1592
 34079                           
 34080                           ; BSR set to: 0
 34081                           ;can18.c: 391: txIndexNextFree = 0xFFU;
 34082  0062B2  6811               	setf	_txIndexNextFree^0,c
 34083  0062B4  D002               	goto	l1592
 34084  0062B6                     l17983:
 34085                           
 34086                           ; BSR set to: 0
 34087                           ;can18.c: 393: else;can18.c: 394: txOflowCount++;
 34088  0062B6  0101               	movlb	1	; () banked
 34089  0062B8  2BDB               	incf	_txOflowCount& (0+255),f,b
 34090  0062BA                     l1592:
 34091                           
 34092                           ;can18.c: 398: txFifoUsage++;
 34093  0062BA  0101               	movlb	1	; () banked
 34094  0062BC  2BD9               	incf	_txFifoUsage& (0+255),f,b
 34095                           
 34096                           ; BSR set to: 1
 34097                           ;can18.c: 399: hiIndex = ( txIndexNextFree < txIndexNextUsed ? txIndexNextFree + 16U : t
      +                          xIndexNextFree);
 34098  0062BE  5010               	movf	_txIndexNextUsed^0,w,c
 34099  0062C0  5C11               	subwf	_txIndexNextFree^0,w,c
 34100  0062C2  A0D8               	btfss	status,0,c
 34101  0062C4  D005               	goto	l17989
 34102                           
 34103                           ; BSR set to: 1
 34104  0062C6  C011  F084         	movff	_txIndexNextFree,_canTX$3447
 34105  0062CA  0100               	movlb	0	; () banked
 34106  0062CC  6B85               	clrf	(_canTX$3447+1)& (0+255),b
 34107  0062CE  D007               	goto	l17991
 34108  0062D0                     l17989:
 34109                           
 34110                           ; BSR set to: 1
 34111  0062D0  0E10               	movlw	16
 34112  0062D2  2411               	addwf	_txIndexNextFree^0,w,c
 34113  0062D4  0100               	movlb	0	; () banked
 34114  0062D6  6F84               	movwf	_canTX$3447& (0+255),b
 34115  0062D8  6B85               	clrf	(_canTX$3447+1)& (0+255),b
 34116  0062DA  0E00               	movlw	0
 34117  0062DC  2385               	addwfc	(_canTX$3447+1)& (0+255),f,b
 34118  0062DE                     l17991:
 34119                           
 34120                           ; BSR set to: 0
 34121  0062DE  C084  F087         	movff	_canTX$3447,canTX@hiIndex
 34122                           
 34123                           ;can18.c: 400: if ((hiIndex - txIndexNextUsed) > maxCanTxFifo )
 34124  0062E2  5010               	movf	_txIndexNextUsed^0,w,c
 34125  0062E4  C087  F07D         	movff	canTX@hiIndex,??_canTX
 34126  0062E8  6B7E               	clrf	(??_canTX+1)& (0+255),b
 34127  0062EA  5F7D               	subwf	??_canTX& (0+255),f,b
 34128  0062EC  0E00               	movlw	0
 34129  0062EE  5B7E               	subwfb	(??_canTX+1)& (0+255),f,b
 34130  0062F0  500B               	movf	_maxCanTxFifo^0,w,c
 34131  0062F2  6F7F               	movwf	(??_canTX+2)& (0+255),b
 34132  0062F4  6B80               	clrf	(??_canTX+3)& (0+255),b
 34133  0062F6  517D               	movf	??_canTX& (0+255),w,b
 34134  0062F8  5D7F               	subwf	(??_canTX+2)& (0+255),w,b
 34135  0062FA  5180               	movf	(??_canTX+3)& (0+255),w,b
 34136  0062FC  0A80               	xorlw	128
 34137  0062FE  6F81               	movwf	(??_canTX+4)& (0+255),b
 34138  006300  517E               	movf	(??_canTX+1)& (0+255),w,b
 34139  006302  0A80               	xorlw	128
 34140  006304  5981               	subwfb	(??_canTX+4)& (0+255),w,b
 34141  006306  B0D8               	btfsc	status,0,c
 34142  006308  D003               	goto	l17995
 34143                           
 34144                           ; BSR set to: 0
 34145                           ;can18.c: 401: maxCanTxFifo = (unsigned char)(hiIndex - txIndexNextUsed);
 34146  00630A  5010               	movf	_txIndexNextUsed^0,w,c
 34147  00630C  5D87               	subwf	canTX@hiIndex& (0+255),w,b
 34148  00630E  6E0B               	movwf	_maxCanTxFifo^0,c
 34149  006310                     l17995:
 34150                           
 34151                           ; BSR set to: 0
 34152                           ;can18.c: 402: };can18.c: 404: PIE5bits.TXBnIE = 1;
 34153  006310  8876               	bsf	118,4,c	;volatile
 34154                           
 34155                           ; BSR set to: 0
 34156                           ;can18.c: 406: return (unsigned char)( ! fullUp);
 34157  006312  5186               	movf	canTX@fullUp& (0+255),w,b
 34158  006314  A4D8               	btfss	status,2,c
 34159  006316  D002               	goto	u22050
 34160  006318  0E01               	movlw	1
 34161  00631A  0012               	return	
 34162  00631C                     u22050:
 34163  00631C  0E00               	movlw	0
 34164                           
 34165                           ; BSR set to: 0
 34166  00631E  0012               	return		;funcret
 34167  006320                     __end_of_canTX:
 34168                           	callstack 0
 34169                           
 34170 ;; *************** function _tickGet *****************
 34171 ;; Defined at:
 34172 ;;		line 160 in file "../../github/CBUSlib/ticktime.c"
 34173 ;; Parameters:    Size  Location     Type
 34174 ;;		None
 34175 ;; Auto vars:     Size  Location     Type
 34176 ;;  currentTime     4   23[BANK0 ] struct _TickValue
 34177 ;;  IntFlag1        1   22[BANK0 ] unsigned char 
 34178 ;;  IntFlag2        1   21[BANK0 ] unsigned char 
 34179 ;; Return value:  Size  Location     Type
 34180 ;;                  4   17[BANK0 ] unsigned long 
 34181 ;; Registers used:
 34182 ;;		wreg, status,2, status,0
 34183 ;; Tracked objects:
 34184 ;;		On entry : 0/0
 34185 ;;		On exit  : 3F/0
 34186 ;;		Unchanged: 0/0
 34187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 34188 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 34189 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 34190 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 34191 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 34192 ;;Total ram usage:       10 bytes
 34193 ;; Hardware stack levels used: 1
 34194 ;; Hardware stack levels required when called: 8
 34195 ;; This function calls:
 34196 ;;		Nothing
 34197 ;; This function is called by:
 34198 ;;		_main
 34199 ;;		_doWait
 34200 ;;		_initServos
 34201 ;;		_pollServos
 34202 ;;		_canInit
 34203 ;;		_canTX
 34204 ;;		_processEnumeration
 34205 ;;		_checkIncomingPacket
 34206 ;;		_FLiMSWCheck
 34207 ;;		_doFLiMFlash
 34208 ;;		_checkFlashing
 34209 ;;		_shortFlicker
 34210 ;;		_longFlicker
 34211 ;; This function uses a non-reentrant model
 34212 ;;
 34213                           
 34214                           	psect	text176
 34215  009746                     __ptext176:
 34216                           	callstack 0
 34217  009746                     _tickGet:
 34218                           	callstack 22
 34219                           
 34220                           ;ticktime.c: 162: TickValue currentTime;;ticktime.c: 166: BYTE IntFlag1;;ticktime.c: 167
      +                          : BYTE IntFlag2;;ticktime.c: 170: currentTime.byte.b2 = 0;
 34221                           
 34222                           ; BSR set to: 0
 34223                           ;incstack = 0
 34224  009746  0E00               	movlw	0
 34225  009748  0100               	movlb	0	; () banked
 34226  00974A  6F79               	movwf	(tickGet@currentTime+2)& (0+255),b
 34227                           
 34228                           ;ticktime.c: 171: currentTime.byte.b3 = 0;
 34229  00974C  0E00               	movlw	0
 34230  00974E  6F7A               	movwf	(tickGet@currentTime+3)& (0+255),b
 34231                           
 34232                           ; BSR set to: 0
 34233                           ;ticktime.c: 173: INTCONbits.TMR0IE = 0;
 34234  009750  9AF2               	bcf	242,5,c	;volatile
 34235  009752                     l17793:
 34236                           
 34237                           ; BSR set to: 0
 34238                           ;ticktime.c: 176: {;ticktime.c: 177: IntFlag1 = INTCONbits.TMR0IF;
 34239  009752  0E00               	movlw	0
 34240  009754  B4F2               	btfsc	242,2,c	;volatile
 34241  009756  0E01               	movlw	1
 34242  009758  6F76               	movwf	tickGet@IntFlag1& (0+255),b
 34243                           
 34244                           ; BSR set to: 0
 34245                           ;ticktime.c: 178: currentTime.byte.b0 = TMR0L;
 34246  00975A  CFD6 F077          	movff	4054,tickGet@currentTime	;volatile
 34247                           
 34248                           ; BSR set to: 0
 34249                           ;ticktime.c: 179: currentTime.byte.b1 = TMR0H;
 34250  00975E  CFD7 F078          	movff	4055,tickGet@currentTime+1	;volatile
 34251                           
 34252                           ; BSR set to: 0
 34253                           ;ticktime.c: 180: IntFlag2 = INTCONbits.TMR0IF;
 34254  009762  0E00               	movlw	0
 34255  009764  B4F2               	btfsc	242,2,c	;volatile
 34256  009766  0E01               	movlw	1
 34257  009768  6F75               	movwf	tickGet@IntFlag2& (0+255),b
 34258                           
 34259                           ; BSR set to: 0
 34260                           ;ticktime.c: 181: } while(IntFlag1 != IntFlag2);
 34261  00976A  5175               	movf	tickGet@IntFlag2& (0+255),w,b
 34262  00976C  1976               	xorwf	tickGet@IntFlag1& (0+255),w,b
 34263  00976E  A4D8               	btfss	status,2,c
 34264  009770  D7F0               	goto	l17793
 34265                           
 34266                           ; BSR set to: 0
 34267                           ;ticktime.c: 183: if( IntFlag1 > 0 )
 34268  009772  5176               	movf	tickGet@IntFlag1& (0+255),w,b
 34269  009774  B4D8               	btfsc	status,2,c
 34270  009776  D005               	goto	l17813
 34271                           
 34272                           ; BSR set to: 0
 34273                           ;ticktime.c: 184: {;ticktime.c: 185: INTCONbits.TMR0IF = 0;
 34274  009778  94F2               	bcf	242,2,c	;volatile
 34275                           
 34276                           ; BSR set to: 0
 34277                           ;ticktime.c: 186: timerExtension1++;
 34278  00977A  2A04               	incf	_timerExtension1^0,f,c	;volatile
 34279                           
 34280                           ; BSR set to: 0
 34281                           ;ticktime.c: 187: if(timerExtension1 == 0)
 34282  00977C  5004               	movf	_timerExtension1^0,w,c	;volatile
 34283  00977E  B4D8               	btfsc	status,2,c
 34284                           
 34285                           ; BSR set to: 0
 34286                           ;ticktime.c: 188: {;ticktime.c: 189: timerExtension2++;
 34287  009780  2A03               	incf	_timerExtension2^0,f,c	;volatile
 34288  009782                     l17813:
 34289                           
 34290                           ; BSR set to: 0
 34291                           ;ticktime.c: 190: };ticktime.c: 191: };ticktime.c: 221: currentTime.byte.b2 += timerExte
      +                          nsion1;
 34292  009782  5004               	movf	_timerExtension1^0,w,c	;volatile
 34293  009784  2779               	addwf	(tickGet@currentTime+2)& (0+255),f,b
 34294                           
 34295                           ; BSR set to: 0
 34296                           ;ticktime.c: 222: currentTime.byte.b3 += timerExtension2;
 34297  009786  5003               	movf	_timerExtension2^0,w,c	;volatile
 34298  009788  277A               	addwf	(tickGet@currentTime+3)& (0+255),f,b
 34299                           
 34300                           ; BSR set to: 0
 34301                           ;ticktime.c: 225: INTCONbits.TMR0IE = 1;
 34302  00978A  8AF2               	bsf	242,5,c	;volatile
 34303                           
 34304                           ; BSR set to: 0
 34305                           ;ticktime.c: 238: return currentTime.Val;
 34306  00978C  C077  F071         	movff	tickGet@currentTime,?_tickGet
 34307  009790  C078  F072         	movff	tickGet@currentTime+1,?_tickGet+1
 34308  009794  C079  F073         	movff	tickGet@currentTime+2,?_tickGet+2
 34309  009798  C07A  F074         	movff	tickGet@currentTime+3,?_tickGet+3
 34310                           
 34311                           ; BSR set to: 0
 34312  00979C  0012               	return		;funcret
 34313  00979E                     __end_of_tickGet:
 34314                           	callstack 0
 34315                           
 34316 ;; *************** function _memcpy *****************
 34317 ;; Defined at:
 34318 ;;		line 27 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\memcpy.c"
 34319 ;; Parameters:    Size  Location     Type
 34320 ;;  d1              2   17[BANK0 ] PTR void 
 34321 ;;		 -> canRxFifo(256), canTxFifo(256), TXB0CON(1), checkCBUS@msg(20), 
 34322 ;;  s1              2   19[BANK0 ] PTR const void 
 34323 ;;		 -> cbusMsg.buffer(14), cbusSendMyEvent@msg.buffer(14), cbusSendEvent@msg.buffer(14), cbusSendDataEvent@msg.buffer(1
      +4), 
 34324 ;;		 -> requestNodeNumber@local_cbusMsg.buffer(14), requestNodeNumber@local_cbusMsg(9), cbusSendDataEvent@msg(14), cbusS
      +endEvent@msg(10), 
 34325 ;;		 -> cbusSendMyEvent@msg(10), canRxFifo.buffer(14), canRxFifo(256), canTxFifo(256), 
 34326 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 34327 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 34328 ;;		 -> cbusMsg(16), 
 34329 ;;  n               2   21[BANK0 ] unsigned int 
 34330 ;; Auto vars:     Size  Location     Type
 34331 ;;  s               2   26[BANK0 ] PTR const unsigned char 
 34332 ;;		 -> cbusMsg.buffer(14), cbusSendMyEvent@msg.buffer(14), cbusSendEvent@msg.buffer(14), cbusSendDataEvent@msg.buffer(1
      +4), 
 34333 ;;		 -> requestNodeNumber@local_cbusMsg.buffer(14), requestNodeNumber@local_cbusMsg(9), cbusSendDataEvent@msg(14), cbusS
      +endEvent@msg(10), 
 34334 ;;		 -> cbusSendMyEvent@msg(10), canRxFifo.buffer(14), canRxFifo(256), canTxFifo(256), 
 34335 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 34336 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 34337 ;;		 -> cbusMsg(16), 
 34338 ;;  d               2   24[BANK0 ] PTR unsigned char 
 34339 ;;		 -> canRxFifo(256), canTxFifo(256), TXB0CON(1), checkCBUS@msg(20), 
 34340 ;;  tmp             1   23[BANK0 ] unsigned char 
 34341 ;; Return value:  Size  Location     Type
 34342 ;;                  2   17[BANK0 ] PTR void 
 34343 ;; Registers used:
 34344 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 34345 ;; Tracked objects:
 34346 ;;		On entry : 3F/0
 34347 ;;		On exit  : 3F/0
 34348 ;;		Unchanged: 0/0
 34349 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 34350 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 34351 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 34352 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 34353 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 34354 ;;Total ram usage:       11 bytes
 34355 ;; Hardware stack levels used: 1
 34356 ;; Hardware stack levels required when called: 8
 34357 ;; This function calls:
 34358 ;;		Nothing
 34359 ;; This function is called by:
 34360 ;;		_canTX
 34361 ;;		_canbusRecv
 34362 ;;		_insertIntoRxFifo
 34363 ;; This function uses a non-reentrant model
 34364 ;;
 34365                           
 34366                           	psect	text177
 34367  009CD6                     __ptext177:
 34368                           	callstack 0
 34369  009CD6                     _memcpy:
 34370                           	callstack 13
 34371                           
 34372                           ; BSR set to: 0
 34373                           
 34374                           ; BSR set to: 0
 34375                           ;incstack = 0
 34376  009CD6  C073  F07A         	movff	memcpy@s1,memcpy@s
 34377  009CDA  C074  F07B         	movff	memcpy@s1+1,memcpy@s+1
 34378  009CDE  C071  F078         	movff	memcpy@d1,memcpy@d
 34379  009CE2  C072  F079         	movff	memcpy@d1+1,memcpy@d+1
 34380  009CE6  D010               	goto	l17891
 34381  009CE8                     l17883:
 34382                           
 34383                           ; BSR set to: 0
 34384  009CE8  C07A  FFD9         	movff	memcpy@s,fsr2l
 34385  009CEC  C07B  FFDA         	movff	memcpy@s+1,fsr2h
 34386  009CF0  50DF               	movf	indf2,w,c
 34387  009CF2  6F77               	movwf	memcpy@tmp& (0+255),b
 34388                           
 34389                           ; BSR set to: 0
 34390  009CF4  4B7A               	infsnz	memcpy@s& (0+255),f,b
 34391  009CF6  2B7B               	incf	(memcpy@s+1)& (0+255),f,b
 34392                           
 34393                           ; BSR set to: 0
 34394  009CF8  C078  FFD9         	movff	memcpy@d,fsr2l
 34395  009CFC  C079  FFDA         	movff	memcpy@d+1,fsr2h
 34396  009D00  C077  FFDF         	movff	memcpy@tmp,indf2
 34397                           
 34398                           ; BSR set to: 0
 34399  009D04  4B78               	infsnz	memcpy@d& (0+255),f,b
 34400  009D06  2B79               	incf	(memcpy@d+1)& (0+255),f,b
 34401  009D08                     l17891:
 34402                           
 34403                           ; BSR set to: 0
 34404  009D08  0775               	decf	memcpy@n& (0+255),f,b
 34405  009D0A  A0D8               	btfss	status,0,c
 34406  009D0C  0776               	decf	(memcpy@n+1)& (0+255),f,b
 34407  009D0E  2975               	incf	memcpy@n& (0+255),w,b
 34408  009D10  E1EB               	bnz	l17883
 34409  009D12  2976               	incf	(memcpy@n+1)& (0+255),w,b
 34410  009D14  B4D8               	btfsc	status,2,c
 34411  009D16  0012               	return	
 34412  009D18  D7E7               	goto	l17883
 34413  009D1A                     __end_of_memcpy:
 34414                           	callstack 0
 34415                           
 34416 ;; *************** function _low_isr *****************
 34417 ;; Defined at:
 34418 ;;		line 756 in file "../../github/CANMIOfirmware/main.c"
 34419 ;; Parameters:    Size  Location     Type
 34420 ;;		None
 34421 ;; Auto vars:     Size  Location     Type
 34422 ;;		None
 34423 ;; Return value:  Size  Location     Type
 34424 ;;                  1    wreg      void 
 34425 ;; Registers used:
 34426 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 34427 ;; Tracked objects:
 34428 ;;		On entry : 0/0
 34429 ;;		On exit  : 31/1
 34430 ;;		Unchanged: 0/0
 34431 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 34432 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 34433 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 34434 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 34435 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 34436 ;;Total ram usage:        7 bytes
 34437 ;; Hardware stack levels used: 1
 34438 ;; Hardware stack levels required when called: 7
 34439 ;; This function calls:
 34440 ;;		_canInterruptHandler
 34441 ;;		_tickISR
 34442 ;; This function is called by:
 34443 ;;		Interrupt level 1
 34444 ;; This function uses a non-reentrant model
 34445 ;;
 34446                           
 34447                           	psect	intcodelo
 34448  000858                     __pintcodelo:
 34449                           	callstack 0
 34450  000858                     _low_isr:
 34451                           	callstack 3
 34452                           
 34453                           ; BSR set to: 0
 34454                           ;incstack = 0
 34455  000858  804F               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
 34456  00085A  CFD8 F06A          	movff	status,??_low_isr
 34457  00085E  CFE8 F06B          	movff	wreg,??_low_isr+1
 34458  000862  CFE0 F06C          	movff	bsr,??_low_isr+2
 34459  000866  CFD9 F06D          	movff	fsr2l,??_low_isr+3
 34460  00086A  CFDA F06E          	movff	fsr2h,??_low_isr+4
 34461  00086E  CFF3 F06F          	movff	prodl,??_low_isr+5
 34462  000872  CFF4 F070          	movff	prodh,??_low_isr+6
 34463                           
 34464                           ;main.c: 758: tickISR();
 34465  000876  EC08  F053         	call	_tickISR	;wreg free
 34466                           
 34467                           ;main.c: 759: canInterruptHandler();
 34468  00087A  ECF1  F052         	call	_canInterruptHandler	;wreg free
 34469  00087E  C070  FFF4         	movff	??_low_isr+6,prodh
 34470  000882  C06F  FFF3         	movff	??_low_isr+5,prodl
 34471  000886  C06E  FFDA         	movff	??_low_isr+4,fsr2h
 34472  00088A  C06D  FFD9         	movff	??_low_isr+3,fsr2l
 34473  00088E  C06C  FFE0         	movff	??_low_isr+2,bsr
 34474  000892  C06B  FFE8         	movff	??_low_isr+1,wreg
 34475  000896  C06A  FFD8         	movff	??_low_isr,status
 34476  00089A  904F               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
 34477  00089C  0010               	retfie	
 34478  00089E                     __end_of_low_isr:
 34479                           	callstack 0
 34480                           
 34481 ;; *************** function _tickISR *****************
 34482 ;; Defined at:
 34483 ;;		line 244 in file "../../github/CBUSlib/ticktime.c"
 34484 ;; Parameters:    Size  Location     Type
 34485 ;;		None
 34486 ;; Auto vars:     Size  Location     Type
 34487 ;;		None
 34488 ;; Return value:  Size  Location     Type
 34489 ;;                  1    wreg      void 
 34490 ;; Registers used:
 34491 ;;		wreg, status,2, status,0
 34492 ;; Tracked objects:
 34493 ;;		On entry : 0/0
 34494 ;;		On exit  : 0/0
 34495 ;;		Unchanged: 0/0
 34496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 34497 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 34498 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 34499 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 34500 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 34501 ;;Total ram usage:        0 bytes
 34502 ;; Hardware stack levels used: 1
 34503 ;; Hardware stack levels required when called: 3
 34504 ;; This function calls:
 34505 ;;		Nothing
 34506 ;; This function is called by:
 34507 ;;		_low_isr
 34508 ;; This function uses a non-reentrant model
 34509 ;;
 34510                           
 34511                           	psect	text179
 34512  00A610                     __ptext179:
 34513                           	callstack 0
 34514  00A610                     _tickISR:
 34515                           	callstack 6
 34516                           
 34517                           ;ticktime.c: 247: if(INTCONbits.TMR0IF)
 34518                           
 34519                           ;incstack = 0
 34520  00A610  A4F2               	btfss	242,2,c	;volatile
 34521  00A612  0012               	return	
 34522                           
 34523                           ;ticktime.c: 248: {;ticktime.c: 249: if(INTCONbits.TMR0IE)
 34524  00A614  AAF2               	btfss	242,5,c	;volatile
 34525  00A616  0012               	return	
 34526                           
 34527                           ;ticktime.c: 250: {;ticktime.c: 252: INTCONbits.TMR0IF = 0;
 34528  00A618  94F2               	bcf	242,2,c	;volatile
 34529                           
 34530                           ;ticktime.c: 253: timerExtension1++;
 34531  00A61A  2A04               	incf	_timerExtension1^0,f,c	;volatile
 34532                           
 34533                           ;ticktime.c: 254: if(timerExtension1 == 0) {
 34534  00A61C  5004               	movf	_timerExtension1^0,w,c	;volatile
 34535  00A61E  A4D8               	btfss	status,2,c
 34536  00A620  0012               	return	
 34537                           
 34538                           ;ticktime.c: 255: timerExtension2++;
 34539  00A622  2A03               	incf	_timerExtension2^0,f,c	;volatile
 34540  00A624  0012               	return	
 34541  00A626                     __end_of_tickISR:
 34542                           	callstack 0
 34543                           
 34544 ;; *************** function _canInterruptHandler *****************
 34545 ;; Defined at:
 34546 ;;		line 775 in file "../../github/CBUSlib/can18.c"
 34547 ;; Parameters:    Size  Location     Type
 34548 ;;		None
 34549 ;; Auto vars:     Size  Location     Type
 34550 ;;		None
 34551 ;; Return value:  Size  Location     Type
 34552 ;;                  1    wreg      void 
 34553 ;; Registers used:
 34554 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 34555 ;; Tracked objects:
 34556 ;;		On entry : 0/0
 34557 ;;		On exit  : 31/1
 34558 ;;		Unchanged: 0/0
 34559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 34560 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 34561 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 34562 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 34563 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 34564 ;;Total ram usage:        0 bytes
 34565 ;; Hardware stack levels used: 1
 34566 ;; Hardware stack levels required when called: 6
 34567 ;; This function calls:
 34568 ;;		_canFillRxFifo
 34569 ;;		_canTxError
 34570 ;;		_checkCANTimeout
 34571 ;;		_checkTxFifo
 34572 ;; This function is called by:
 34573 ;;		_low_isr
 34574 ;; This function uses a non-reentrant model
 34575 ;;
 34576                           
 34577                           	psect	text180
 34578  00A5E2                     __ptext180:
 34579                           	callstack 0
 34580  00A5E2                     _canInterruptHandler:
 34581                           	callstack 3
 34582                           
 34583                           ;can18.c: 777: if (PIR5bits.FIFOWMIF)
 34584                           
 34585                           ;incstack = 0
 34586  00A5E2  B077               	btfsc	119,0,c	;volatile
 34587                           
 34588                           ;can18.c: 778: canFillRxFifo();
 34589  00A5E4  EC0A  F043         	call	_canFillRxFifo	;wreg free
 34590                           
 34591                           ;can18.c: 780: if (PIR5bits.ERRIF)
 34592  00A5E8  BA77               	btfsc	119,5,c	;volatile
 34593                           
 34594                           ;can18.c: 781: canTxError();
 34595  00A5EA  EC2E  F049         	call	_canTxError	;wreg free
 34596                           
 34597                           ;can18.c: 783: if (PIR5bits.TXBnIF)
 34598  00A5EE  B877               	btfsc	119,4,c	;volatile
 34599                           
 34600                           ;can18.c: 784: checkTxFifo();
 34601  00A5F0  ECAB  F03E         	call	_checkTxFifo	;wreg free
 34602                           
 34603                           ;can18.c: 786: checkCANTimeout();
 34604  00A5F4  EC44  F04D         	call	_checkCANTimeout	;wreg free
 34605  00A5F8  0012               	return		;funcret
 34606  00A5FA                     __end_of_canInterruptHandler:
 34607                           	callstack 0
 34608                           
 34609 ;; *************** function _checkCANTimeout *****************
 34610 ;; Defined at:
 34611 ;;		line 478 in file "../../github/CBUSlib/can18.c"
 34612 ;; Parameters:    Size  Location     Type
 34613 ;;		None
 34614 ;; Auto vars:     Size  Location     Type
 34615 ;;		None
 34616 ;; Return value:  Size  Location     Type
 34617 ;;                  1    wreg      void 
 34618 ;; Registers used:
 34619 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 34620 ;; Tracked objects:
 34621 ;;		On entry : 0/0
 34622 ;;		On exit  : 31/1
 34623 ;;		Unchanged: 0/0
 34624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 34625 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 34626 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 34627 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 34628 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 34629 ;;Total ram usage:        4 bytes
 34630 ;; Hardware stack levels used: 1
 34631 ;; Hardware stack levels required when called: 5
 34632 ;; This function calls:
 34633 ;;		_checkTxFifo
 34634 ;;		i1_tickGet
 34635 ;; This function is called by:
 34636 ;;		_canInterruptHandler
 34637 ;; This function uses a non-reentrant model
 34638 ;;
 34639                           
 34640                           	psect	text181
 34641  009A88                     __ptext181:
 34642                           	callstack 0
 34643  009A88                     _checkCANTimeout:
 34644                           	callstack 3
 34645                           
 34646                           ;can18.c: 480: if (canTransmitTimeout.Val != 0)
 34647                           
 34648                           ;incstack = 0
 34649  009A88  0101               	movlb	1	; () banked
 34650  009A8A  51B4               	movf	_canTransmitTimeout& (0+255),w,b
 34651  009A8C  11B5               	iorwf	(_canTransmitTimeout+1)& (0+255),w,b
 34652  009A8E  11B6               	iorwf	(_canTransmitTimeout+2)& (0+255),w,b
 34653  009A90  11B7               	iorwf	(_canTransmitTimeout+3)& (0+255),w,b
 34654  009A92  B4D8               	btfsc	status,2,c
 34655  009A94  0012               	return	
 34656                           
 34657                           ; BSR set to: 1
 34658                           ;can18.c: 481: if ((tickGet() - canTransmitTimeout.Val) > 62500)
 34659  009A96  EC26  F04C         	call	i1_tickGet	;wreg free
 34660  009A9A  0101               	movlb	1	; () banked
 34661  009A9C  51B4               	movf	_canTransmitTimeout& (0+255),w,b
 34662  009A9E  5C3D               	subwf	?i1_tickGet^0,w,c
 34663  009AA0  6E4B               	movwf	??_checkCANTimeout^0,c
 34664  009AA2  51B5               	movf	(_canTransmitTimeout+1)& (0+255),w,b
 34665  009AA4  583E               	subwfb	(?i1_tickGet+1)^0,w,c
 34666  009AA6  6E4C               	movwf	(??_checkCANTimeout+1)^0,c
 34667  009AA8  51B6               	movf	(_canTransmitTimeout+2)& (0+255),w,b
 34668  009AAA  583F               	subwfb	(?i1_tickGet+2)^0,w,c
 34669  009AAC  6E4D               	movwf	(??_checkCANTimeout+2)^0,c
 34670  009AAE  51B7               	movf	(_canTransmitTimeout+3)& (0+255),w,b
 34671  009AB0  5840               	subwfb	(?i1_tickGet+3)^0,w,c
 34672  009AB2  6E4E               	movwf	(??_checkCANTimeout+3)^0,c
 34673  009AB4  504E               	movf	(??_checkCANTimeout+3)^0,w,c
 34674  009AB6  104D               	iorwf	(??_checkCANTimeout+2)^0,w,c
 34675  009AB8  E106               	bnz	i1u2641_20
 34676  009ABA  0E25               	movlw	37
 34677  009ABC  5C4B               	subwf	??_checkCANTimeout^0,w,c
 34678  009ABE  0EF4               	movlw	244
 34679  009AC0  584C               	subwfb	(??_checkCANTimeout+1)^0,w,c
 34680  009AC2  A0D8               	btfss	status,0,c
 34681  009AC4  0012               	return	
 34682  009AC6                     i1u2641_20:
 34683                           
 34684                           ; BSR set to: 1
 34685                           ;can18.c: 482: {;can18.c: 483: canTransmitFailed = 1;
 34686  009AC6  0E01               	movlw	1
 34687  009AC8  6E0C               	movwf	_canTransmitFailed^0,c
 34688                           
 34689                           ; BSR set to: 1
 34690                           ;can18.c: 484: txTimeoutCount++;
 34691  009ACA  2BDC               	incf	_txTimeoutCount& (0+255),f,b
 34692                           
 34693                           ; BSR set to: 1
 34694                           ;can18.c: 485: TXB0CONbits.TXREQ = 0;
 34695  009ACC  010F               	movlb	15	; () banked
 34696  009ACE  9720               	bcf	32,3,b	;volatile
 34697                           
 34698                           ; BSR set to: 15
 34699                           ;can18.c: 486: checkTxFifo();
 34700  009AD0  ECAB  F03E         	call	_checkTxFifo	;wreg free
 34701  009AD4  0012               	return		;funcret
 34702  009AD6                     __end_of_checkCANTimeout:
 34703                           	callstack 0
 34704                           
 34705 ;; *************** function _canTxError *****************
 34706 ;; Defined at:
 34707 ;;		line 740 in file "../../github/CBUSlib/can18.c"
 34708 ;; Parameters:    Size  Location     Type
 34709 ;;		None
 34710 ;; Auto vars:     Size  Location     Type
 34711 ;;		None
 34712 ;; Return value:  Size  Location     Type
 34713 ;;                  1    wreg      void 
 34714 ;; Registers used:
 34715 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 34716 ;; Tracked objects:
 34717 ;;		On entry : 0/0
 34718 ;;		On exit  : 31/1
 34719 ;;		Unchanged: 0/0
 34720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 34721 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 34722 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 34723 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 34724 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 34725 ;;Total ram usage:        0 bytes
 34726 ;; Hardware stack levels used: 1
 34727 ;; Hardware stack levels required when called: 5
 34728 ;; This function calls:
 34729 ;;		_checkTxFifo
 34730 ;; This function is called by:
 34731 ;;		_canInterruptHandler
 34732 ;; This function uses a non-reentrant model
 34733 ;;
 34734                           
 34735                           	psect	text182
 34736  00925C                     __ptext182:
 34737                           	callstack 0
 34738  00925C                     _canTxError:
 34739                           	callstack 3
 34740                           
 34741                           ;can18.c: 742: if (TXB0CONbits.TXLARB) {
 34742                           
 34743                           ;incstack = 0
 34744  00925C  010F               	movlb	15	; () banked
 34745  00925E  AB20               	btfss	32,5,b	;volatile
 34746  009260  D019               	goto	i1l20917
 34747                           
 34748                           ; BSR set to: 15
 34749                           ;can18.c: 743: if (larbRetryCount == 0) {
 34750  009262  500D               	movf	_larbRetryCount^0,w,c
 34751  009264  A4D8               	btfss	status,2,c
 34752  009266  D010               	goto	i1l1683
 34753                           
 34754                           ; BSR set to: 15
 34755                           ;can18.c: 744: canTransmitFailed = 1;
 34756  009268  0E01               	movlw	1
 34757  00926A  6E0C               	movwf	_canTransmitFailed^0,c
 34758                           
 34759                           ;can18.c: 745: canTransmitTimeout.Val = 0;
 34760  00926C  0E00               	movlw	0
 34761  00926E  0101               	movlb	1	; () banked
 34762  009270  6FB4               	movwf	_canTransmitTimeout& (0+255),b
 34763  009272  0E00               	movlw	0
 34764  009274  6FB5               	movwf	(_canTransmitTimeout+1)& (0+255),b
 34765  009276  0E00               	movlw	0
 34766  009278  6FB6               	movwf	(_canTransmitTimeout+2)& (0+255),b
 34767  00927A  0E00               	movlw	0
 34768  00927C  6FB7               	movwf	(_canTransmitTimeout+3)& (0+255),b
 34769                           
 34770                           ; BSR set to: 1
 34771                           ;can18.c: 747: TXB0CONbits.TXREQ = 0;
 34772  00927E  010F               	movlb	15	; () banked
 34773  009280  9720               	bcf	32,3,b	;volatile
 34774                           
 34775                           ; BSR set to: 15
 34776                           ;can18.c: 748: larbCount++;
 34777  009282  0101               	movlb	1	; () banked
 34778  009284  2BDE               	incf	_larbCount& (0+255),f,b
 34779                           
 34780                           ;can18.c: 749: }
 34781  009286  D006               	goto	i1l20917
 34782  009288                     i1l1683:
 34783                           
 34784                           ; BSR set to: 15
 34785                           ;can18.c: 750: else if ( --larbRetryCount == 0) {
 34786  009288  2E0D               	decfsz	_larbRetryCount^0,f,c
 34787  00928A  D004               	goto	i1l20917
 34788                           
 34789                           ; BSR set to: 15
 34790                           ;can18.c: 751: TXB0CONbits.TXREQ = 0;
 34791  00928C  9720               	bcf	32,3,b	;volatile
 34792                           
 34793                           ; BSR set to: 15
 34794                           ;can18.c: 752: TXB0SIDH &= 0b00111111;
 34795  00928E  0E3F               	movlw	63
 34796  009290  1721               	andwf	33,f,b	;volatile
 34797                           
 34798                           ; BSR set to: 15
 34799                           ;can18.c: 753: TXB0CONbits.TXREQ = 1;
 34800  009292  8720               	bsf	32,3,b	;volatile
 34801  009294                     i1l20917:
 34802                           
 34803                           ;can18.c: 754: };can18.c: 755: };can18.c: 756: if (TXB0CONbits.TXERR) {
 34804  009294  010F               	movlb	15	; () banked
 34805  009296  A920               	btfss	32,4,b	;volatile
 34806  009298  D00F               	goto	i1l20925
 34807                           
 34808                           ; BSR set to: 15
 34809                           ;can18.c: 757: canTransmitFailed = 1;
 34810  00929A  0E01               	movlw	1
 34811  00929C  6E0C               	movwf	_canTransmitFailed^0,c
 34812                           
 34813                           ;can18.c: 758: canTransmitTimeout.Val = 0;
 34814  00929E  0E00               	movlw	0
 34815  0092A0  0101               	movlb	1	; () banked
 34816  0092A2  6FB4               	movwf	_canTransmitTimeout& (0+255),b
 34817  0092A4  0E00               	movlw	0
 34818  0092A6  6FB5               	movwf	(_canTransmitTimeout+1)& (0+255),b
 34819  0092A8  0E00               	movlw	0
 34820  0092AA  6FB6               	movwf	(_canTransmitTimeout+2)& (0+255),b
 34821  0092AC  0E00               	movlw	0
 34822  0092AE  6FB7               	movwf	(_canTransmitTimeout+3)& (0+255),b
 34823                           
 34824                           ; BSR set to: 1
 34825                           ;can18.c: 759: TXB0CONbits.TXREQ = 0;
 34826  0092B0  010F               	movlb	15	; () banked
 34827  0092B2  9720               	bcf	32,3,b	;volatile
 34828                           
 34829                           ; BSR set to: 15
 34830                           ;can18.c: 760: txErrCount++;
 34831  0092B4  0101               	movlb	1	; () banked
 34832  0092B6  2BDD               	incf	_txErrCount& (0+255),f,b
 34833  0092B8                     i1l20925:
 34834                           
 34835                           ;can18.c: 761: };can18.c: 763: if (canTransmitFailed)
 34836  0092B8  500C               	movf	_canTransmitFailed^0,w,c
 34837  0092BA  A4D8               	btfss	status,2,c
 34838                           
 34839                           ;can18.c: 764: checkTxFifo();
 34840  0092BC  ECAB  F03E         	call	_checkTxFifo	;wreg free
 34841                           
 34842                           ;can18.c: 766: PIR5bits.ERRIF = 0;
 34843  0092C0  9A77               	bcf	119,5,c	;volatile
 34844  0092C2  0012               	return		;funcret
 34845  0092C4                     __end_of_canTxError:
 34846                           	callstack 0
 34847                           
 34848 ;; *************** function _checkTxFifo *****************
 34849 ;; Defined at:
 34850 ;;		line 428 in file "../../github/CBUSlib/can18.c"
 34851 ;; Parameters:    Size  Location     Type
 34852 ;;		None
 34853 ;; Auto vars:     Size  Location     Type
 34854 ;;  ptr             2   28[COMRAM] PTR unsigned char 
 34855 ;;		 -> TXB0CON(1), 
 34856 ;; Return value:  Size  Location     Type
 34857 ;;                  1    wreg      void 
 34858 ;; Registers used:
 34859 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 34860 ;; Tracked objects:
 34861 ;;		On entry : 0/0
 34862 ;;		On exit  : 3F/F
 34863 ;;		Unchanged: 0/0
 34864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 34865 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 34866 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 34867 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 34868 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 34869 ;;Total ram usage:        3 bytes
 34870 ;; Hardware stack levels used: 1
 34871 ;; Hardware stack levels required when called: 4
 34872 ;; This function calls:
 34873 ;;		i1_memcpy
 34874 ;;		i1_tickGet
 34875 ;; This function is called by:
 34876 ;;		_checkCANTimeout
 34877 ;;		_canTxError
 34878 ;;		_canInterruptHandler
 34879 ;; This function uses a non-reentrant model
 34880 ;;
 34881                           
 34882                           	psect	text183
 34883  007D56                     __ptext183:
 34884                           	callstack 0
 34885  007D56                     _checkTxFifo:
 34886                           	callstack 4
 34887                           
 34888                           ;can18.c: 430: BYTE* ptr;;can18.c: 432: canTransmitFailed = 0;
 34889                           
 34890                           ;incstack = 0
 34891  007D56  0E00               	movlw	0
 34892  007D58  6E0C               	movwf	_canTransmitFailed^0,c
 34893                           
 34894                           ;can18.c: 433: PIR5bits.TXBnIF = 0;
 34895  007D5A  9877               	bcf	119,4,c	;volatile
 34896                           
 34897                           ;can18.c: 435: if (!TXB0CONbits.TXREQ)
 34898  007D5C  010F               	movlb	15	; () banked
 34899  007D5E  B720               	btfsc	32,3,b	;volatile
 34900  007D60  D054               	goto	i1l1604
 34901                           
 34902                           ; BSR set to: 15
 34903                           ;can18.c: 436: {;can18.c: 437: canTransmitTimeout.Val = 0;
 34904  007D62  0E00               	movlw	0
 34905  007D64  0101               	movlb	1	; () banked
 34906  007D66  6FB4               	movwf	_canTransmitTimeout& (0+255),b
 34907  007D68  0E00               	movlw	0
 34908  007D6A  6FB5               	movwf	(_canTransmitTimeout+1)& (0+255),b
 34909  007D6C  0E00               	movlw	0
 34910  007D6E  6FB6               	movwf	(_canTransmitTimeout+2)& (0+255),b
 34911  007D70  0E00               	movlw	0
 34912  007D72  6FB7               	movwf	(_canTransmitTimeout+3)& (0+255),b
 34913                           
 34914                           ; BSR set to: 1
 34915                           ;can18.c: 439: if (txIndexNextUsed != txIndexNextFree)
 34916  007D74  5011               	movf	_txIndexNextFree^0,w,c
 34917  007D76  1810               	xorwf	_txIndexNextUsed^0,w,c
 34918  007D78  B4D8               	btfsc	status,2,c
 34919  007D7A  D041               	goto	i1l20093
 34920                           
 34921                           ; BSR set to: 1
 34922                           ;can18.c: 440: {;can18.c: 441: ptr = (BYTE*) & TXB0CON;
 34923  007D7C  0E20               	movlw	32
 34924  007D7E  6E49               	movwf	checkTxFifo@ptr^0,c
 34925  007D80  0E0F               	movlw	15
 34926  007D82  6E4A               	movwf	(checkTxFifo@ptr+1)^0,c
 34927                           
 34928                           ; BSR set to: 1
 34929                           ;can18.c: 442: memcpy(ptr, canTxFifo[txIndexNextUsed].buffer, canTxFifo[txIndexNextUsed]
      +                          .buffer[dlc] + 6U);
 34930  007D84  C049  F03D         	movff	checkTxFifo@ptr,i1memcpy@d1
 34931  007D88  C04A  F03E         	movff	checkTxFifo@ptr+1,i1memcpy@d1+1
 34932  007D8C  5010               	movf	_txIndexNextUsed^0,w,c
 34933  007D8E  0D10               	mullw	16
 34934  007D90  0E00               	movlw	low _canTxFifo
 34935  007D92  24F3               	addwf	243,w,c
 34936  007D94  6E3F               	movwf	i1memcpy@s1^0,c
 34937  007D96  0E06               	movlw	high _canTxFifo
 34938  007D98  20F4               	addwfc	prodh,w,c
 34939  007D9A  6E40               	movwf	(i1memcpy@s1+1)^0,c
 34940  007D9C  5010               	movf	_txIndexNextUsed^0,w,c
 34941  007D9E  0D10               	mullw	16
 34942  007DA0  0E05               	movlw	low (_canTxFifo+5)
 34943  007DA2  24F3               	addwf	243,w,c
 34944  007DA4  6ED9               	movwf	fsr2l,c
 34945  007DA6  0E06               	movlw	high (_canTxFifo+5)
 34946  007DA8  20F4               	addwfc	prodh,w,c
 34947  007DAA  6EDA               	movwf	fsr2h,c
 34948  007DAC  50DF               	movf	indf2,w,c
 34949  007DAE  6E48               	movwf	??_checkTxFifo^0,c
 34950  007DB0  0E06               	movlw	6
 34951  007DB2  2448               	addwf	??_checkTxFifo^0,w,c
 34952  007DB4  6E41               	movwf	i1memcpy@n^0,c
 34953  007DB6  6A42               	clrf	(i1memcpy@n+1)^0,c
 34954  007DB8  0E00               	movlw	0
 34955  007DBA  2242               	addwfc	(i1memcpy@n+1)^0,f,c
 34956  007DBC  EC8D  F04E         	call	i1_memcpy	;wreg free
 34957                           
 34958                           ;can18.c: 443: txFifoUsage--;
 34959  007DC0  0101               	movlb	1	; () banked
 34960  007DC2  07D9               	decf	_txFifoUsage& (0+255),f,b
 34961                           
 34962                           ; BSR set to: 1
 34963                           ;can18.c: 445: larbRetryCount = 10;
 34964  007DC4  0E0A               	movlw	10
 34965  007DC6  6E0D               	movwf	_larbRetryCount^0,c
 34966                           
 34967                           ; BSR set to: 1
 34968                           ;can18.c: 446: canTransmitTimeout.Val = tickGet();
 34969  007DC8  EC26  F04C         	call	i1_tickGet	;wreg free
 34970  007DCC  C03D  F1B4         	movff	?i1_tickGet,_canTransmitTimeout
 34971  007DD0  C03E  F1B5         	movff	?i1_tickGet+1,_canTransmitTimeout+1
 34972  007DD4  C03F  F1B6         	movff	?i1_tickGet+2,_canTransmitTimeout+2
 34973  007DD8  C040  F1B7         	movff	?i1_tickGet+3,_canTransmitTimeout+3
 34974                           
 34975                           ;can18.c: 447: canTransmitFailed = 0;
 34976  007DDC  0E00               	movlw	0
 34977  007DDE  6E0C               	movwf	_canTransmitFailed^0,c
 34978                           
 34979                           ;can18.c: 449: TXB0CONbits.TXREQ = 1;
 34980  007DE0  010F               	movlb	15	; () banked
 34981  007DE2  8720               	bsf	32,3,b	;volatile
 34982                           
 34983                           ; BSR set to: 15
 34984                           ;can18.c: 451: if (txIndexNextFree == 0xFF)
 34985  007DE4  2811               	incf	_txIndexNextFree^0,w,c
 34986  007DE6  B4D8               	btfsc	status,2,c
 34987                           
 34988                           ; BSR set to: 15
 34989                           ;can18.c: 452: txIndexNextFree = txIndexNextUsed;
 34990  007DE8  C010  F011         	movff	_txIndexNextUsed,_txIndexNextFree
 34991                           
 34992                           ; BSR set to: 15
 34993                           ;can18.c: 454: if (++txIndexNextUsed == 16U )
 34994  007DEC  2A10               	incf	_txIndexNextUsed^0,f,c
 34995  007DEE  0E10               	movlw	16
 34996  007DF0  1810               	xorwf	_txIndexNextUsed^0,w,c
 34997  007DF2  A4D8               	btfss	status,2,c
 34998  007DF4  D002               	goto	i1l20091
 34999                           
 35000                           ; BSR set to: 15
 35001                           ;can18.c: 455: txIndexNextUsed = 0;
 35002  007DF6  0E00               	movlw	0
 35003  007DF8  6E10               	movwf	_txIndexNextUsed^0,c
 35004  007DFA                     i1l20091:
 35005                           
 35006                           ; BSR set to: 15
 35007                           ;can18.c: 457: PIE5bits.TXBnIE = 1;
 35008  007DFA  8876               	bsf	118,4,c	;volatile
 35009                           
 35010                           ;can18.c: 458: }
 35011  007DFC  0012               	return	
 35012  007DFE                     i1l20093:
 35013                           
 35014                           ; BSR set to: 1
 35015                           ;can18.c: 459: else;can18.c: 460: {;can18.c: 461: TXB0CON = 0;
 35016  007DFE  0E00               	movlw	0
 35017  007E00  010F               	movlb	15	; () banked
 35018  007E02  6F20               	movwf	32,b	;volatile
 35019                           
 35020                           ; BSR set to: 15
 35021                           ;can18.c: 462: PIR5bits.TXBnIF = 0;
 35022  007E04  9877               	bcf	119,4,c	;volatile
 35023                           
 35024                           ; BSR set to: 15
 35025                           ;can18.c: 463: PIE5bits.TXBnIE = 0;
 35026  007E06  9876               	bcf	118,4,c	;volatile
 35027  007E08  0012               	return	
 35028  007E0A                     i1l1604:
 35029                           
 35030                           ; BSR set to: 15
 35031                           ;can18.c: 466: else;can18.c: 467: {;can18.c: 468: PIR5bits.TXBnIF = 0;
 35032  007E0A  9877               	bcf	119,4,c	;volatile
 35033                           
 35034                           ;can18.c: 469: PIE5bits.TXBnIE = 1;
 35035  007E0C  8876               	bsf	118,4,c	;volatile
 35036                           
 35037                           ; BSR set to: 15
 35038  007E0E  0012               	return		;funcret
 35039  007E10                     __end_of_checkTxFifo:
 35040                           	callstack 0
 35041                           
 35042 ;; *************** function _canFillRxFifo *****************
 35043 ;; Defined at:
 35044 ;;		line 589 in file "../../github/CBUSlib/can18.c"
 35045 ;; Parameters:    Size  Location     Type
 35046 ;;		None
 35047 ;; Auto vars:     Size  Location     Type
 35048 ;;  ptr             2    8[BANK0 ] PTR struct .
 35049 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 35050 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 35051 ;;  hiIndex         1    7[BANK0 ] unsigned char 
 35052 ;; Return value:  Size  Location     Type
 35053 ;;                  1    wreg      void 
 35054 ;; Registers used:
 35055 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 35056 ;; Tracked objects:
 35057 ;;		On entry : 0/0
 35058 ;;		On exit  : 0/0
 35059 ;;		Unchanged: 0/0
 35060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 35061 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 35062 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 35063 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 35064 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 35065 ;;Total ram usage:       10 bytes
 35066 ;; Hardware stack levels used: 1
 35067 ;; Hardware stack levels required when called: 5
 35068 ;; This function calls:
 35069 ;;		i1__PointBuffer
 35070 ;;		i1_checkIncomingPacket
 35071 ;;		i1_insertIntoRxFifo
 35072 ;; This function is called by:
 35073 ;;		_canInterruptHandler
 35074 ;; This function uses a non-reentrant model
 35075 ;;
 35076                           
 35077                           	psect	text184
 35078  008614                     __ptext184:
 35079                           	callstack 0
 35080  008614                     _canFillRxFifo:
 35081                           	callstack 3
 35082                           
 35083                           ;can18.c: 591: CanPacket *ptr;;can18.c: 592: BYTE hiIndex;;can18.c: 595: while (COMSTATb
      +                          its.NOT_FIFOEMPTY)
 35084                           
 35085                           ; BSR set to: 15
 35086                           ;incstack = 0
 35087  008614  D04B               	goto	i1l20899
 35088  008616                     i1l20871:
 35089                           
 35090                           ;can18.c: 596: {;can18.c: 598: ptr = (CanPacket*) _PointBuffer(CANCON & 0x07U);
 35091  008616  506F               	movf	111,w,c	;volatile
 35092  008618  0B07               	andlw	7
 35093  00861A  EC62  F049         	call	i1__PointBuffer
 35094  00861E  C03D  F068         	movff	?i1__PointBuffer,canFillRxFifo@ptr
 35095  008622  C03E  F069         	movff	?i1__PointBuffer+1,canFillRxFifo@ptr+1
 35096                           
 35097                           ;can18.c: 599: PIR5bits.RXBnIF = 0;
 35098  008626  9277               	bcf	119,1,c	;volatile
 35099                           
 35100                           ;can18.c: 600: if (COMSTATbits.RXB1OVFL) {
 35101  008628  BC71               	btfsc	113,6,c	;volatile
 35102                           
 35103                           ;can18.c: 604: COMSTATbits.RXB1OVFL = 0;
 35104  00862A  9C71               	bcf	113,6,c	;volatile
 35105                           
 35106                           ;can18.c: 605: };can18.c: 607: if (checkIncomingPacket(ptr))
 35107  00862C  C068  F047         	movff	canFillRxFifo@ptr,i1checkIncomingPacket@ptr
 35108  008630  C069  F048         	movff	canFillRxFifo@ptr+1,i1checkIncomingPacket@ptr+1
 35109  008634  EC27  F039         	call	i1_checkIncomingPacket	;wreg free
 35110  008638  0900               	iorlw	0
 35111  00863A  B4D8               	btfsc	status,2,c
 35112  00863C  D006               	goto	i1l20883
 35113                           
 35114                           ;can18.c: 608: {;can18.c: 609: insertIntoRxFifo( ptr );
 35115  00863E  C068  F048         	movff	canFillRxFifo@ptr,i1insertIntoRxFifo@ptr
 35116  008642  C069  F049         	movff	canFillRxFifo@ptr+1,i1insertIntoRxFifo@ptr+1
 35117  008646  EC5D  F04A         	call	i1_insertIntoRxFifo	;wreg free
 35118  00864A                     i1l20883:
 35119                           
 35120                           ;can18.c: 613: };can18.c: 616: if (PIR5bits.IRXIF)
 35121  00864A  BE77               	btfsc	119,7,c	;volatile
 35122                           
 35123                           ;can18.c: 617: PIR5bits.IRXIF = 0;
 35124  00864C  9E77               	bcf	119,7,c	;volatile
 35125                           
 35126                           ;can18.c: 620: ptr->buffer[con] &= 0x7f;
 35127  00864E  C068  FFD9         	movff	canFillRxFifo@ptr,fsr2l
 35128  008652  C069  FFDA         	movff	canFillRxFifo@ptr+1,fsr2h
 35129  008656  0E7F               	movlw	127
 35130  008658  16DF               	andwf	indf2,f,c
 35131                           
 35132                           ;can18.c: 625: hiIndex = ( rxIndexNextFree < rxIndexNextUsed ? rxIndexNextFree + 16U : r
      +                          xIndexNextFree);
 35133  00865A  500E               	movf	_rxIndexNextUsed^0,w,c
 35134  00865C  5C0F               	subwf	_rxIndexNextFree^0,w,c
 35135  00865E  A0D8               	btfss	status,0,c
 35136  008660  D005               	goto	i1l20893
 35137  008662  C00F  F065         	movff	_rxIndexNextFree,_canFillRxFifo$3500
 35138  008666  0100               	movlb	0	; () banked
 35139  008668  6B66               	clrf	(_canFillRxFifo$3500+1)& (0+255),b
 35140  00866A  D007               	goto	i1l20895
 35141  00866C                     i1l20893:
 35142  00866C  0E10               	movlw	16
 35143  00866E  240F               	addwf	_rxIndexNextFree^0,w,c
 35144  008670  0100               	movlb	0	; () banked
 35145  008672  6F65               	movwf	_canFillRxFifo$3500& (0+255),b
 35146  008674  6B66               	clrf	(_canFillRxFifo$3500+1)& (0+255),b
 35147  008676  0E00               	movlw	0
 35148  008678  2366               	addwfc	(_canFillRxFifo$3500+1)& (0+255),f,b
 35149  00867A                     i1l20895:
 35150                           
 35151                           ; BSR set to: 0
 35152  00867A  C065  F067         	movff	_canFillRxFifo$3500,canFillRxFifo@hiIndex
 35153                           
 35154                           ;can18.c: 626: if ((hiIndex - rxIndexNextUsed) > maxCanRxFifo )
 35155  00867E  500E               	movf	_rxIndexNextUsed^0,w,c
 35156  008680  C067  F060         	movff	canFillRxFifo@hiIndex,??_canFillRxFifo
 35157  008684  6B61               	clrf	(??_canFillRxFifo+1)& (0+255),b
 35158  008686  5F60               	subwf	??_canFillRxFifo& (0+255),f,b
 35159  008688  0E00               	movlw	0
 35160  00868A  5B61               	subwfb	(??_canFillRxFifo+1)& (0+255),f,b
 35161  00868C  500A               	movf	_maxCanRxFifo^0,w,c
 35162  00868E  6F62               	movwf	(??_canFillRxFifo+2)& (0+255),b
 35163  008690  6B63               	clrf	(??_canFillRxFifo+3)& (0+255),b
 35164  008692  5160               	movf	??_canFillRxFifo& (0+255),w,b
 35165  008694  5D62               	subwf	(??_canFillRxFifo+2)& (0+255),w,b
 35166  008696  5163               	movf	(??_canFillRxFifo+3)& (0+255),w,b
 35167  008698  0A80               	xorlw	128
 35168  00869A  6F64               	movwf	(??_canFillRxFifo+4)& (0+255),b
 35169  00869C  5161               	movf	(??_canFillRxFifo+1)& (0+255),w,b
 35170  00869E  0A80               	xorlw	128
 35171  0086A0  5964               	subwfb	(??_canFillRxFifo+4)& (0+255),w,b
 35172  0086A2  B0D8               	btfsc	status,0,c
 35173  0086A4  D003               	goto	i1l20899
 35174                           
 35175                           ; BSR set to: 0
 35176                           ;can18.c: 627: maxCanRxFifo = (unsigned char)(hiIndex - rxIndexNextUsed);
 35177  0086A6  500E               	movf	_rxIndexNextUsed^0,w,c
 35178  0086A8  5D67               	subwf	canFillRxFifo@hiIndex& (0+255),w,b
 35179  0086AA  6E0A               	movwf	_maxCanRxFifo^0,c
 35180  0086AC                     i1l20899:
 35181  0086AC  BE71               	btfsc	113,7,c	;volatile
 35182  0086AE  D7B3               	goto	i1l20871
 35183                           
 35184                           ;can18.c: 629: };can18.c: 630: PIR5bits.FIFOWMIF = 0;
 35185  0086B0  9077               	bcf	119,0,c	;volatile
 35186  0086B2  0012               	return		;funcret
 35187  0086B4                     __end_of_canFillRxFifo:
 35188                           	callstack 0
 35189                           
 35190 ;; *************** function i1_insertIntoRxFifo *****************
 35191 ;; Defined at:
 35192 ;;		line 561 in file "../../github/CBUSlib/can18.c"
 35193 ;; Parameters:    Size  Location     Type
 35194 ;;  ptr             2   27[COMRAM] PTR struct .
 35195 ;;		 -> cbusSendDataEvent@msg(14), cbusSendEvent@msg(10), cbusSendMyEvent@msg(10), B5CON(1), 
 35196 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 35197 ;;		 -> B0CON(1), RXB1CON(1), RXB0CON(1), 
 35198 ;; Auto vars:     Size  Location     Type
 35199 ;;		None
 35200 ;; Return value:  Size  Location     Type
 35201 ;;                  1    wreg      unsigned char 
 35202 ;; Registers used:
 35203 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 35204 ;; Tracked objects:
 35205 ;;		On entry : 0/0
 35206 ;;		On exit  : 3F/1
 35207 ;;		Unchanged: 0/0
 35208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 35209 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 35210 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 35211 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 35212 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 35213 ;;Total ram usage:        3 bytes
 35214 ;; Hardware stack levels used: 1
 35215 ;; Hardware stack levels required when called: 4
 35216 ;; This function calls:
 35217 ;;		i1_memcpy
 35218 ;; This function is called by:
 35219 ;;		_canFillRxFifo
 35220 ;; This function uses a non-reentrant model
 35221 ;;
 35222                           
 35223                           	psect	text185
 35224  0094BA                     __ptext185:
 35225                           	callstack 0
 35226  0094BA                     i1_insertIntoRxFifo:
 35227                           	callstack 3
 35228                           
 35229                           ;can18.c: 564: memcpy(canRxFifo[rxIndexNextFree].buffer, ptr, ptr->buffer[dlc] + 6U);
 35230                           
 35231                           ;incstack = 0
 35232  0094BA  500F               	movf	_rxIndexNextFree^0,w,c
 35233  0094BC  0D10               	mullw	16
 35234  0094BE  0E00               	movlw	low _canRxFifo
 35235  0094C0  24F3               	addwf	243,w,c
 35236  0094C2  6E3D               	movwf	i1memcpy@d1^0,c
 35237  0094C4  0E05               	movlw	high _canRxFifo
 35238  0094C6  20F4               	addwfc	prodh,w,c
 35239  0094C8  6E3E               	movwf	(i1memcpy@d1+1)^0,c
 35240  0094CA  C048  F03F         	movff	i1insertIntoRxFifo@ptr,i1memcpy@s1
 35241  0094CE  C049  F040         	movff	i1insertIntoRxFifo@ptr+1,i1memcpy@s1+1
 35242  0094D2  EE20 F005          	lfsr	2,5
 35243  0094D6  5048               	movf	i1insertIntoRxFifo@ptr^0,w,c
 35244  0094D8  26D9               	addwf	fsr2l,f,c
 35245  0094DA  5049               	movf	(i1insertIntoRxFifo@ptr+1)^0,w,c
 35246  0094DC  22DA               	addwfc	fsr2h,f,c
 35247  0094DE  50DF               	movf	indf2,w,c
 35248  0094E0  6E4A               	movwf	??i1_insertIntoRxFifo^0,c
 35249  0094E2  0E06               	movlw	6
 35250  0094E4  244A               	addwf	??i1_insertIntoRxFifo^0,w,c
 35251  0094E6  6E41               	movwf	i1memcpy@n^0,c
 35252  0094E8  6A42               	clrf	(i1memcpy@n+1)^0,c
 35253  0094EA  0E00               	movlw	0
 35254  0094EC  2242               	addwfc	(i1memcpy@n+1)^0,f,c
 35255  0094EE  EC8D  F04E         	call	i1_memcpy	;wreg free
 35256                           
 35257                           ;can18.c: 565: rxFifoUsage++;
 35258  0094F2  0101               	movlb	1	; () banked
 35259  0094F4  2BD8               	incf	_rxFifoUsage& (0+255),f,b
 35260                           
 35261                           ; BSR set to: 1
 35262                           ;can18.c: 567: if (++rxIndexNextFree >= 16U)
 35263  0094F6  2A0F               	incf	_rxIndexNextFree^0,f,c
 35264  0094F8  0E0F               	movlw	15
 35265  0094FA  640F               	cpfsgt	_rxIndexNextFree^0,c
 35266  0094FC  D002               	goto	i1l20287
 35267                           
 35268                           ; BSR set to: 1
 35269                           ;can18.c: 568: {;can18.c: 569: rxIndexNextFree = 0;
 35270  0094FE  0E00               	movlw	0
 35271  009500  6E0F               	movwf	_rxIndexNextFree^0,c
 35272  009502                     i1l20287:
 35273                           
 35274                           ; BSR set to: 1
 35275                           ;can18.c: 570: };can18.c: 572: if (rxIndexNextFree == rxIndexNextUsed)
 35276  009502  500E               	movf	_rxIndexNextUsed^0,w,c
 35277  009504  180F               	xorwf	_rxIndexNextFree^0,w,c
 35278  009506  A4D8               	btfss	status,2,c
 35279  009508  0012               	return	
 35280                           
 35281                           ; BSR set to: 1
 35282                           ;can18.c: 573: {;can18.c: 574: rxOflowCount++;
 35283  00950A  2BDA               	incf	_rxOflowCount& (0+255),f,b
 35284                           
 35285                           ; BSR set to: 1
 35286                           ;can18.c: 575: if (rxIndexNextFree == 0)
 35287  00950C  500F               	movf	_rxIndexNextFree^0,w,c
 35288  00950E  A4D8               	btfss	status,2,c
 35289  009510  D003               	goto	i1l20295
 35290                           
 35291                           ; BSR set to: 1
 35292                           ;can18.c: 576: rxIndexNextFree = 16U - 1;
 35293  009512  0E0F               	movlw	15
 35294  009514  6E0F               	movwf	_rxIndexNextFree^0,c
 35295  009516  0012               	return	
 35296  009518                     i1l20295:
 35297                           
 35298                           ; BSR set to: 1
 35299                           ;can18.c: 577: else;can18.c: 578: rxIndexNextFree--;
 35300  009518  060F               	decf	_rxIndexNextFree^0,f,c
 35301                           
 35302                           ; BSR set to: 1
 35303  00951A  0012               	return		;funcret
 35304  00951C                     __end_ofi1_insertIntoRxFifo:
 35305                           	callstack 0
 35306                           
 35307 ;; *************** function i1_memcpy *****************
 35308 ;; Defined at:
 35309 ;;		line 27 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\memcpy.c"
 35310 ;; Parameters:    Size  Location     Type
 35311 ;;  d1              2   16[COMRAM] PTR void 
 35312 ;;		 -> canRxFifo(256), canTxFifo(256), TXB0CON(1), checkCBUS@msg(20), 
 35313 ;;  s1              2   18[COMRAM] PTR const void 
 35314 ;;		 -> requestNodeNumber@local_cbusMsg(9), cbusSendDataEvent@msg(14), cbusSendEvent@msg(10), cbusSendMyEvent@msg(10), 
 35315 ;;		 -> canRxFifo(256), canTxFifo.buffer(14), canTxFifo(256), B5CON(1), 
 35316 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 35317 ;;		 -> B0CON(1), RXB1CON(1), RXB0CON(1), cbusMsg(16), 
 35318 ;;  n               2   20[COMRAM] unsigned int 
 35319 ;; Auto vars:     Size  Location     Type
 35320 ;;  s               2   25[COMRAM] PTR const unsigned char 
 35321 ;;		 -> requestNodeNumber@local_cbusMsg(9), cbusSendDataEvent@msg(14), cbusSendEvent@msg(10), cbusSendMyEvent@msg(10), 
 35322 ;;		 -> canRxFifo(256), canTxFifo.buffer(14), canTxFifo(256), B5CON(1), 
 35323 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 35324 ;;		 -> B0CON(1), RXB1CON(1), RXB0CON(1), cbusMsg(16), 
 35325 ;;  d               2   23[COMRAM] PTR unsigned char 
 35326 ;;		 -> canRxFifo(256), canTxFifo(256), TXB0CON(1), checkCBUS@msg(20), 
 35327 ;;  tmp             1   22[COMRAM] unsigned char 
 35328 ;; Return value:  Size  Location     Type
 35329 ;;                  2   16[COMRAM] PTR void 
 35330 ;; Registers used:
 35331 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 35332 ;; Tracked objects:
 35333 ;;		On entry : 0/1
 35334 ;;		On exit  : 0/0
 35335 ;;		Unchanged: 0/0
 35336 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 35337 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 35338 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 35339 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 35340 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 35341 ;;Total ram usage:       11 bytes
 35342 ;; Hardware stack levels used: 1
 35343 ;; Hardware stack levels required when called: 3
 35344 ;; This function calls:
 35345 ;;		Nothing
 35346 ;; This function is called by:
 35347 ;;		_checkTxFifo
 35348 ;;		i1_insertIntoRxFifo
 35349 ;; This function uses a non-reentrant model
 35350 ;;
 35351                           
 35352                           	psect	text186
 35353  009D1A                     __ptext186:
 35354                           	callstack 0
 35355  009D1A                     i1_memcpy:
 35356                           	callstack 4
 35357                           
 35358                           ; BSR set to: 1
 35359                           ;incstack = 0
 35360  009D1A  C03F  F046         	movff	i1memcpy@s1,i1memcpy@s
 35361  009D1E  C040  F047         	movff	i1memcpy@s1+1,i1memcpy@s+1
 35362  009D22  C03D  F044         	movff	i1memcpy@d1,i1memcpy@d
 35363  009D26  C03E  F045         	movff	i1memcpy@d1+1,i1memcpy@d+1
 35364  009D2A  D010               	goto	i1l19889
 35365  009D2C                     i1l19881:
 35366  009D2C  C046  FFD9         	movff	i1memcpy@s,fsr2l
 35367  009D30  C047  FFDA         	movff	i1memcpy@s+1,fsr2h
 35368  009D34  50DF               	movf	indf2,w,c
 35369  009D36  6E43               	movwf	i1memcpy@tmp^0,c
 35370  009D38  4A46               	infsnz	i1memcpy@s^0,f,c
 35371  009D3A  2A47               	incf	(i1memcpy@s+1)^0,f,c
 35372  009D3C  C044  FFD9         	movff	i1memcpy@d,fsr2l
 35373  009D40  C045  FFDA         	movff	i1memcpy@d+1,fsr2h
 35374  009D44  C043  FFDF         	movff	i1memcpy@tmp,indf2
 35375  009D48  4A44               	infsnz	i1memcpy@d^0,f,c
 35376  009D4A  2A45               	incf	(i1memcpy@d+1)^0,f,c
 35377  009D4C                     i1l19889:
 35378  009D4C  0641               	decf	i1memcpy@n^0,f,c
 35379  009D4E  A0D8               	btfss	status,0,c
 35380  009D50  0642               	decf	(i1memcpy@n+1)^0,f,c
 35381  009D52  2841               	incf	i1memcpy@n^0,w,c
 35382  009D54  E1EB               	bnz	i1l19881
 35383  009D56  2842               	incf	(i1memcpy@n+1)^0,w,c
 35384  009D58  B4D8               	btfsc	status,2,c
 35385  009D5A  0012               	return	
 35386  009D5C  D7E7               	goto	i1l19881
 35387  009D5E                     __end_ofi1_memcpy:
 35388                           	callstack 0
 35389                           
 35390 ;; *************** function i1_checkIncomingPacket *****************
 35391 ;; Defined at:
 35392 ;;		line 700 in file "../../github/CBUSlib/can18.c"
 35393 ;; Parameters:    Size  Location     Type
 35394 ;;  ptr             2   26[COMRAM] PTR struct .
 35395 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 35396 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 35397 ;; Auto vars:     Size  Location     Type
 35398 ;;  incomingCanI    1   33[COMRAM] unsigned char 
 35399 ;;  msgFound        1   32[COMRAM] unsigned char 
 35400 ;; Return value:  Size  Location     Type
 35401 ;;                  1    wreg      unsigned char 
 35402 ;; Registers used:
 35403 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 35404 ;; Tracked objects:
 35405 ;;		On entry : 0/0
 35406 ;;		On exit  : 0/0
 35407 ;;		Unchanged: 0/0
 35408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 35409 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 35410 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 35411 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 35412 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 35413 ;;Total ram usage:        8 bytes
 35414 ;; Hardware stack levels used: 1
 35415 ;; Hardware stack levels required when called: 4
 35416 ;; This function calls:
 35417 ;;		i1_doEnum
 35418 ;;		i1_tickGet
 35419 ;; This function is called by:
 35420 ;;		_canFillRxFifo
 35421 ;; This function uses a non-reentrant model
 35422 ;;
 35423                           
 35424                           	psect	text187
 35425  00724E                     __ptext187:
 35426                           	callstack 0
 35427  00724E                     i1_checkIncomingPacket:
 35428                           	callstack 3
 35429                           
 35430                           ;can18.c: 703: BYTE incomingCanId;;can18.c: 704: BOOL msgFound;;can18.c: 706: msgFound =
      +                           0;
 35431                           
 35432                           ;incstack = 0
 35433  00724E  0E00               	movlw	0
 35434  007250  6E4D               	movwf	i1checkIncomingPacket@msgFound^0,c
 35435                           
 35436                           ;can18.c: 707: incomingCanId = (unsigned char)((unsigned char)((unsigned char)(ptr->buff
      +                          er[(unsigned char)sidh] << 3U) + (unsigned char)(ptr->buffer[(unsigned char)sidl] >> 5U)
      +                          ) & 0x7fU);
 35437  007252  EE20 F002          	lfsr	2,2
 35438  007256  5047               	movf	i1checkIncomingPacket@ptr^0,w,c
 35439  007258  26D9               	addwf	fsr2l,f,c
 35440  00725A  5048               	movf	(i1checkIncomingPacket@ptr+1)^0,w,c
 35441  00725C  22DA               	addwfc	fsr2h,f,c
 35442  00725E  50DF               	movf	indf2,w,c
 35443  007260  6E49               	movwf	??i1_checkIncomingPacket^0,c
 35444  007262  0E05               	movlw	5
 35445  007264  6E4A               	movwf	(??i1_checkIncomingPacket+1)^0,c
 35446  007266                     i1u1847_25:
 35447  007266  90D8               	bcf	status,0,c
 35448  007268  3249               	rrcf	??i1_checkIncomingPacket^0,f,c
 35449  00726A  2E4A               	decfsz	(??i1_checkIncomingPacket+1)^0,f,c
 35450  00726C  D7FC               	goto	i1u1847_25
 35451  00726E  EE20 F001          	lfsr	2,1
 35452  007272  5047               	movf	i1checkIncomingPacket@ptr^0,w,c
 35453  007274  26D9               	addwf	fsr2l,f,c
 35454  007276  5048               	movf	(i1checkIncomingPacket@ptr+1)^0,w,c
 35455  007278  22DA               	addwfc	fsr2h,f,c
 35456  00727A  50DF               	movf	indf2,w,c
 35457  00727C  0D08               	mullw	8
 35458  00727E  50F3               	movf	243,w,c
 35459  007280  2449               	addwf	??i1_checkIncomingPacket^0,w,c
 35460  007282  0B7F               	andlw	127
 35461  007284  6E4E               	movwf	i1checkIncomingPacket@incomingCanId^0,c
 35462                           
 35463                           ;can18.c: 709: if (enumerationInProgress) {
 35464  007286  5007               	movf	_enumerationInProgress^0,w,c
 35465  007288  B4D8               	btfsc	status,2,c
 35466  00728A  D01A               	goto	i1l15915
 35467                           
 35468                           ;can18.c: 710: ( enumerationResults[incomingCanId>>3] |= ( 1<<(incomingCanId & 0x07) ) )
      +                          ;
 35469  00728C  C04E  F049         	movff	i1checkIncomingPacket@incomingCanId,??i1_checkIncomingPacket
 35470  007290  0E07               	movlw	7
 35471  007292  1649               	andwf	??i1_checkIncomingPacket^0,f,c
 35472  007294  0E01               	movlw	1
 35473  007296  6E4A               	movwf	(??i1_checkIncomingPacket+1)^0,c
 35474  007298  2A49               	incf	??i1_checkIncomingPacket^0,f,c
 35475  00729A  D002               	goto	i1u1849_24
 35476  00729C                     i1u1849_25:
 35477  00729C  90D8               	bcf	status,0,c
 35478  00729E  364A               	rlcf	(??i1_checkIncomingPacket+1)^0,f,c
 35479  0072A0                     i1u1849_24:
 35480  0072A0  2E49               	decfsz	??i1_checkIncomingPacket^0,f,c
 35481  0072A2  D7FC               	goto	i1u1849_25
 35482  0072A4  384E               	swapf	i1checkIncomingPacket@incomingCanId^0,w,c
 35483  0072A6  46E8               	rlncf	wreg,f,c
 35484  0072A8  0B1F               	andlw	31
 35485  0072AA  6E4B               	movwf	(??i1_checkIncomingPacket+2)^0,c
 35486  0072AC  6A4C               	clrf	(??i1_checkIncomingPacket+3)^0,c
 35487  0072AE  0E54               	movlw	low _enumerationResults
 35488  0072B0  244B               	addwf	(??i1_checkIncomingPacket+2)^0,w,c
 35489  0072B2  6ED9               	movwf	fsr2l,c
 35490  0072B4  0E02               	movlw	high _enumerationResults
 35491  0072B6  204C               	addwfc	(??i1_checkIncomingPacket+3)^0,w,c
 35492  0072B8  6EDA               	movwf	fsr2h,c
 35493  0072BA  504A               	movf	(??i1_checkIncomingPacket+1)^0,w,c
 35494  0072BC  12DF               	iorwf	indf2,f,c
 35495                           
 35496                           ;can18.c: 711: } else if (!enumerationRequired && (incomingCanId == canID))
 35497  0072BE  D014               	goto	i1l15923
 35498  0072C0                     i1l15915:
 35499  0072C0  5009               	movf	_enumerationRequired^0,w,c
 35500  0072C2  A4D8               	btfss	status,2,c
 35501  0072C4  D011               	goto	i1l15923
 35502  0072C6  502C               	movf	_canID^0,w,c
 35503  0072C8  184E               	xorwf	i1checkIncomingPacket@incomingCanId^0,w,c
 35504  0072CA  A4D8               	btfss	status,2,c
 35505  0072CC  D00D               	goto	i1l15923
 35506                           
 35507                           ;can18.c: 712: {;can18.c: 715: doEnum(0);
 35508  0072CE  0E00               	movlw	0
 35509  0072D0  EC2F  F053         	call	i1_doEnum
 35510                           
 35511                           ;can18.c: 716: enumerationStartTime.Val = tickGet();
 35512  0072D4  EC26  F04C         	call	i1_tickGet	;wreg free
 35513  0072D8  C03D  F1B0         	movff	?i1_tickGet,_enumerationStartTime
 35514  0072DC  C03E  F1B1         	movff	?i1_tickGet+1,_enumerationStartTime+1
 35515  0072E0  C03F  F1B2         	movff	?i1_tickGet+2,_enumerationStartTime+2
 35516  0072E4  C040  F1B3         	movff	?i1_tickGet+3,_enumerationStartTime+3
 35517  0072E8                     i1l15923:
 35518                           
 35519                           ;can18.c: 717: };can18.c: 721: if (ptr->buffer[dlc] & 0x40 )
 35520  0072E8  EE20 F005          	lfsr	2,5
 35521  0072EC  5047               	movf	i1checkIncomingPacket@ptr^0,w,c
 35522  0072EE  26D9               	addwf	fsr2l,f,c
 35523  0072F0  5048               	movf	(i1checkIncomingPacket@ptr+1)^0,w,c
 35524  0072F2  22DA               	addwfc	fsr2h,f,c
 35525  0072F4  ACDF               	btfss	indf2,6,c
 35526  0072F6  D00D               	goto	i1l15929
 35527                           
 35528                           ;can18.c: 722: {;can18.c: 723: TXB2CONbits.TXREQ = 1;
 35529  0072F8  010F               	movlb	15	; () banked
 35530  0072FA  8700               	bsf	0,3,b	;volatile
 35531                           
 35532                           ; BSR set to: 15
 35533                           ;can18.c: 724: enumerationStartTime.Val = tickGet();
 35534  0072FC  EC26  F04C         	call	i1_tickGet	;wreg free
 35535  007300  C03D  F1B0         	movff	?i1_tickGet,_enumerationStartTime
 35536  007304  C03E  F1B1         	movff	?i1_tickGet+1,_enumerationStartTime+1
 35537  007308  C03F  F1B2         	movff	?i1_tickGet+2,_enumerationStartTime+2
 35538  00730C  C040  F1B3         	movff	?i1_tickGet+3,_enumerationStartTime+3
 35539                           
 35540                           ;can18.c: 725: }
 35541  007310  D01A               	goto	i1l15933
 35542  007312                     i1l15929:
 35543                           
 35544                           ;can18.c: 726: else;can18.c: 727: {;can18.c: 728: msgFound = ptr->buffer[dlc] & 0x0FU;
 35545  007312  EE20 F005          	lfsr	2,5
 35546  007316  5047               	movf	i1checkIncomingPacket@ptr^0,w,c
 35547  007318  26D9               	addwf	fsr2l,f,c
 35548  00731A  5048               	movf	(i1checkIncomingPacket@ptr+1)^0,w,c
 35549  00731C  22DA               	addwfc	fsr2h,f,c
 35550  00731E  50DF               	movf	indf2,w,c
 35551  007320  0B0F               	andlw	15
 35552  007322  6E4D               	movwf	i1checkIncomingPacket@msgFound^0,c
 35553                           
 35554                           ;can18.c: 729: if (ptr->buffer[dlc] > 8)
 35555  007324  EE20 F005          	lfsr	2,5
 35556  007328  5047               	movf	i1checkIncomingPacket@ptr^0,w,c
 35557  00732A  26D9               	addwf	fsr2l,f,c
 35558  00732C  5048               	movf	(i1checkIncomingPacket@ptr+1)^0,w,c
 35559  00732E  22DA               	addwfc	fsr2h,f,c
 35560  007330  0E08               	movlw	8
 35561  007332  64DF               	cpfsgt	indf2,c
 35562  007334  D008               	goto	i1l15933
 35563                           
 35564                           ;can18.c: 730: ptr->buffer[dlc] = 8;
 35565  007336  EE20 F005          	lfsr	2,5
 35566  00733A  5047               	movf	i1checkIncomingPacket@ptr^0,w,c
 35567  00733C  26D9               	addwf	fsr2l,f,c
 35568  00733E  5048               	movf	(i1checkIncomingPacket@ptr+1)^0,w,c
 35569  007340  22DA               	addwfc	fsr2h,f,c
 35570  007342  0E08               	movlw	8
 35571  007344  6EDF               	movwf	indf2,c
 35572  007346                     i1l15933:
 35573                           
 35574                           ;can18.c: 731: };can18.c: 733: return( msgFound );
 35575  007346  504D               	movf	i1checkIncomingPacket@msgFound^0,w,c
 35576  007348  0012               	return		;funcret
 35577  00734A                     __end_ofi1_checkIncomingPacket:
 35578                           	callstack 0
 35579                           
 35580 ;; *************** function i1_tickGet *****************
 35581 ;; Defined at:
 35582 ;;		line 160 in file "../../github/CBUSlib/ticktime.c"
 35583 ;; Parameters:    Size  Location     Type
 35584 ;;		None
 35585 ;; Auto vars:     Size  Location     Type
 35586 ;;  currentTime     4   22[COMRAM] struct _TickValue
 35587 ;;  IntFlag1        1   21[COMRAM] unsigned char 
 35588 ;;  IntFlag2        1   20[COMRAM] unsigned char 
 35589 ;; Return value:  Size  Location     Type
 35590 ;;                  4   16[COMRAM] unsigned long 
 35591 ;; Registers used:
 35592 ;;		wreg, status,2, status,0
 35593 ;; Tracked objects:
 35594 ;;		On entry : 0/1
 35595 ;;		On exit  : 0/0
 35596 ;;		Unchanged: 0/0
 35597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 35598 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 35599 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 35600 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 35601 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 35602 ;;Total ram usage:       10 bytes
 35603 ;; Hardware stack levels used: 1
 35604 ;; Hardware stack levels required when called: 3
 35605 ;; This function calls:
 35606 ;;		Nothing
 35607 ;; This function is called by:
 35608 ;;		_checkTxFifo
 35609 ;;		_checkCANTimeout
 35610 ;;		i1_checkIncomingPacket
 35611 ;; This function uses a non-reentrant model
 35612 ;;
 35613                           
 35614                           	psect	text188
 35615  00984C                     __ptext188:
 35616                           	callstack 0
 35617  00984C                     i1_tickGet:
 35618                           	callstack 4
 35619                           
 35620                           ;ticktime.c: 162: TickValue currentTime;;ticktime.c: 166: BYTE IntFlag1;;ticktime.c: 167
      +                          : BYTE IntFlag2;;ticktime.c: 170: currentTime.byte.b2 = 0;
 35621                           
 35622                           ;incstack = 0
 35623  00984C  0E00               	movlw	0
 35624  00984E  6E45               	movwf	(i1tickGet@currentTime+2)^0,c
 35625                           
 35626                           ;ticktime.c: 171: currentTime.byte.b3 = 0;
 35627  009850  0E00               	movlw	0
 35628  009852  6E46               	movwf	(i1tickGet@currentTime+3)^0,c
 35629                           
 35630                           ;ticktime.c: 173: INTCONbits.TMR0IE = 0;
 35631  009854  9AF2               	bcf	242,5,c	;volatile
 35632  009856                     i1l15431:
 35633                           
 35634                           ;ticktime.c: 176: {;ticktime.c: 177: IntFlag1 = INTCONbits.TMR0IF;
 35635  009856  0E00               	movlw	0
 35636  009858  B4F2               	btfsc	242,2,c	;volatile
 35637  00985A  0E01               	movlw	1
 35638  00985C  6E42               	movwf	i1tickGet@IntFlag1^0,c
 35639                           
 35640                           ;ticktime.c: 178: currentTime.byte.b0 = TMR0L;
 35641  00985E  CFD6 F043          	movff	4054,i1tickGet@currentTime	;volatile
 35642                           
 35643                           ;ticktime.c: 179: currentTime.byte.b1 = TMR0H;
 35644  009862  CFD7 F044          	movff	4055,i1tickGet@currentTime+1	;volatile
 35645                           
 35646                           ;ticktime.c: 180: IntFlag2 = INTCONbits.TMR0IF;
 35647  009866  0E00               	movlw	0
 35648  009868  B4F2               	btfsc	242,2,c	;volatile
 35649  00986A  0E01               	movlw	1
 35650  00986C  6E41               	movwf	i1tickGet@IntFlag2^0,c
 35651                           
 35652                           ;ticktime.c: 181: } while(IntFlag1 != IntFlag2);
 35653  00986E  5041               	movf	i1tickGet@IntFlag2^0,w,c
 35654  009870  1842               	xorwf	i1tickGet@IntFlag1^0,w,c
 35655  009872  A4D8               	btfss	status,2,c
 35656  009874  D7F0               	goto	i1l15431
 35657                           
 35658                           ;ticktime.c: 183: if( IntFlag1 > 0 )
 35659  009876  5042               	movf	i1tickGet@IntFlag1^0,w,c
 35660  009878  B4D8               	btfsc	status,2,c
 35661  00987A  D005               	goto	i1l15451
 35662                           
 35663                           ;ticktime.c: 184: {;ticktime.c: 185: INTCONbits.TMR0IF = 0;
 35664  00987C  94F2               	bcf	242,2,c	;volatile
 35665                           
 35666                           ;ticktime.c: 186: timerExtension1++;
 35667  00987E  2A04               	incf	_timerExtension1^0,f,c	;volatile
 35668                           
 35669                           ;ticktime.c: 187: if(timerExtension1 == 0)
 35670  009880  5004               	movf	_timerExtension1^0,w,c	;volatile
 35671  009882  B4D8               	btfsc	status,2,c
 35672                           
 35673                           ;ticktime.c: 188: {;ticktime.c: 189: timerExtension2++;
 35674  009884  2A03               	incf	_timerExtension2^0,f,c	;volatile
 35675  009886                     i1l15451:
 35676                           
 35677                           ;ticktime.c: 190: };ticktime.c: 191: };ticktime.c: 221: currentTime.byte.b2 += timerExte
      +                          nsion1;
 35678  009886  5004               	movf	_timerExtension1^0,w,c	;volatile
 35679  009888  2645               	addwf	(i1tickGet@currentTime+2)^0,f,c
 35680                           
 35681                           ;ticktime.c: 222: currentTime.byte.b3 += timerExtension2;
 35682  00988A  5003               	movf	_timerExtension2^0,w,c	;volatile
 35683  00988C  2646               	addwf	(i1tickGet@currentTime+3)^0,f,c
 35684                           
 35685                           ;ticktime.c: 225: INTCONbits.TMR0IE = 1;
 35686  00988E  8AF2               	bsf	242,5,c	;volatile
 35687                           
 35688                           ;ticktime.c: 238: return currentTime.Val;
 35689  009890  C043  F03D         	movff	i1tickGet@currentTime,?i1_tickGet
 35690  009894  C044  F03E         	movff	i1tickGet@currentTime+1,?i1_tickGet+1
 35691  009898  C045  F03F         	movff	i1tickGet@currentTime+2,?i1_tickGet+2
 35692  00989C  C046  F040         	movff	i1tickGet@currentTime+3,?i1_tickGet+3
 35693  0098A0  0012               	return		;funcret
 35694  0098A2                     __end_ofi1_tickGet:
 35695                           	callstack 0
 35696                           
 35697 ;; *************** function i1_doEnum *****************
 35698 ;; Defined at:
 35699 ;;		line 635 in file "../../github/CBUSlib/can18.c"
 35700 ;; Parameters:    Size  Location     Type
 35701 ;;  sendResult      1    wreg     unsigned char 
 35702 ;; Auto vars:     Size  Location     Type
 35703 ;;  sendResult      1   16[COMRAM] unsigned char 
 35704 ;; Return value:  Size  Location     Type
 35705 ;;                  1    wreg      void 
 35706 ;; Registers used:
 35707 ;;		wreg, status,2
 35708 ;; Tracked objects:
 35709 ;;		On entry : 0/0
 35710 ;;		On exit  : 0/0
 35711 ;;		Unchanged: 0/0
 35712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 35713 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 35714 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 35715 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 35716 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 35717 ;;Total ram usage:        1 bytes
 35718 ;; Hardware stack levels used: 1
 35719 ;; Hardware stack levels required when called: 3
 35720 ;; This function calls:
 35721 ;;		Nothing
 35722 ;; This function is called by:
 35723 ;;		i1_checkIncomingPacket
 35724 ;; This function uses a non-reentrant model
 35725 ;;
 35726                           
 35727                           	psect	text189
 35728  00A65E                     __ptext189:
 35729                           	callstack 0
 35730  00A65E                     i1_doEnum:
 35731                           	callstack 3
 35732                           
 35733                           ;incstack = 0
 35734                           ;i1doEnum@sendResult stored from wreg
 35735  00A65E  6E3D               	movwf	i1doEnum@sendResult^0,c
 35736                           
 35737                           ;can18.c: 636: resultRequired = sendResult;
 35738  00A660  C03D  F008         	movff	i1doEnum@sendResult,_resultRequired
 35739                           
 35740                           ;can18.c: 637: if (! enumerationInProgress) {
 35741  00A664  5007               	movf	_enumerationInProgress^0,w,c
 35742  00A666  A4D8               	btfss	status,2,c
 35743  00A668  0012               	return	
 35744                           
 35745                           ;can18.c: 638: enumerationRequired = 1;
 35746  00A66A  0E01               	movlw	1
 35747  00A66C  6E09               	movwf	_enumerationRequired^0,c
 35748  00A66E  0012               	return		;funcret
 35749  00A670                     __end_ofi1_doEnum:
 35750                           	callstack 0
 35751                           
 35752 ;; *************** function i1__PointBuffer *****************
 35753 ;; Defined at:
 35754 ;;		line 792 in file "../../github/CBUSlib/can18.c"
 35755 ;; Parameters:    Size  Location     Type
 35756 ;;  b               1    wreg     unsigned char 
 35757 ;; Auto vars:     Size  Location     Type
 35758 ;;  b               1   18[COMRAM] unsigned char 
 35759 ;;  pt              2   19[COMRAM] PTR unsigned char 
 35760 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 35761 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 35762 ;; Return value:  Size  Location     Type
 35763 ;;                  2   16[COMRAM] PTR unsigned char 
 35764 ;; Registers used:
 35765 ;;		wreg, status,2, status,0
 35766 ;; Tracked objects:
 35767 ;;		On entry : 0/0
 35768 ;;		On exit  : 0/0
 35769 ;;		Unchanged: 0/0
 35770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 35771 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 35772 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 35773 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 35774 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 35775 ;;Total ram usage:        5 bytes
 35776 ;; Hardware stack levels used: 1
 35777 ;; Hardware stack levels required when called: 3
 35778 ;; This function calls:
 35779 ;;		Nothing
 35780 ;; This function is called by:
 35781 ;;		_canFillRxFifo
 35782 ;; This function uses a non-reentrant model
 35783 ;;
 35784                           
 35785                           	psect	text190
 35786  0092C4                     __ptext190:
 35787                           	callstack 0
 35788  0092C4                     i1__PointBuffer:
 35789                           	callstack 4
 35790                           
 35791                           ;incstack = 0
 35792                           ;i1__PointBuffer@b stored from wreg
 35793  0092C4  6E3F               	movwf	i1__PointBuffer@b^0,c
 35794                           
 35795                           ;can18.c: 793: BYTE* pt;;can18.c: 795: switch (b) {
 35796  0092C6  D016               	goto	i1l15957
 35797  0092C8                     i1l15939:
 35798                           
 35799                           ;can18.c: 797: pt = (BYTE*) & RXB0CON;
 35800  0092C8  0E60               	movlw	96
 35801  0092CA  D001               	goto	L31
 35802  0092CC                     i1l15941:
 35803                           
 35804                           ;can18.c: 800: pt = (BYTE*) & RXB1CON;
 35805  0092CC  0E30               	movlw	48
 35806  0092CE                     L31:
 35807  0092CE  6E40               	movwf	i1__PointBuffer@pt^0,c
 35808  0092D0  0E0F               	movlw	15
 35809  0092D2  D002               	goto	L32
 35810  0092D4                     i1l15943:
 35811                           
 35812                           ;can18.c: 803: pt = (BYTE*) & B0CON;
 35813  0092D4  0E80               	movlw	128
 35814  0092D6  D00B               	goto	L37
 35815  0092D8                     L32:
 35816  0092D8  6E41               	movwf	(i1__PointBuffer@pt+1)^0,c
 35817                           
 35818                           ;can18.c: 804: break;
 35819  0092DA  D023               	goto	i1l1699
 35820  0092DC                     i1l15945:
 35821                           
 35822                           ;can18.c: 806: pt = (BYTE*) & B1CON;
 35823  0092DC  0E90               	movlw	144
 35824  0092DE  D007               	goto	L37
 35825  0092E0                     i1l15947:
 35826                           
 35827                           ;can18.c: 809: pt = (BYTE*) & B2CON;
 35828  0092E0  0EA0               	movlw	160
 35829  0092E2  D005               	goto	L37
 35830  0092E4                     i1l15949:
 35831                           
 35832                           ;can18.c: 812: pt = (BYTE*) & B3CON;
 35833  0092E4  0EB0               	movlw	176
 35834  0092E6  D003               	goto	L37
 35835  0092E8                     i1l15951:
 35836                           
 35837                           ;can18.c: 815: pt = (BYTE*) & B4CON;
 35838  0092E8  0EC0               	movlw	192
 35839  0092EA  D001               	goto	L37
 35840  0092EC                     i1l15953:
 35841                           
 35842                           ;can18.c: 818: pt = (BYTE*) & B5CON;
 35843  0092EC  0ED0               	movlw	208
 35844  0092EE                     L37:
 35845  0092EE  6E40               	movwf	i1__PointBuffer@pt^0,c
 35846  0092F0  0E0E               	movlw	14
 35847  0092F2  D7F2               	goto	L32
 35848  0092F4                     i1l15957:
 35849  0092F4  503F               	movf	i1__PointBuffer@b^0,w,c
 35850                           
 35851                           ; Switch size 1, requested type "simple"
 35852                           ; Number of cases is 7, Range of values is 0 to 6
 35853                           ; switch strategies available:
 35854                           ; Name         Instructions Cycles
 35855                           ; simple_byte           22    12 (average)
 35856                           ;	Chosen strategy is simple_byte
 35857  0092F6  0A00               	xorlw	0	; case 0
 35858  0092F8  B4D8               	btfsc	status,2,c
 35859  0092FA  D7E6               	goto	i1l15939
 35860  0092FC  0A01               	xorlw	1	; case 1
 35861  0092FE  B4D8               	btfsc	status,2,c
 35862  009300  D7E5               	goto	i1l15941
 35863  009302  0A03               	xorlw	3	; case 2
 35864  009304  B4D8               	btfsc	status,2,c
 35865  009306  D7E6               	goto	i1l15943
 35866  009308  0A01               	xorlw	1	; case 3
 35867  00930A  B4D8               	btfsc	status,2,c
 35868  00930C  D7E7               	goto	i1l15945
 35869  00930E  0A07               	xorlw	7	; case 4
 35870  009310  B4D8               	btfsc	status,2,c
 35871  009312  D7E6               	goto	i1l15947
 35872  009314  0A01               	xorlw	1	; case 5
 35873  009316  B4D8               	btfsc	status,2,c
 35874  009318  D7E5               	goto	i1l15949
 35875  00931A  0A03               	xorlw	3	; case 6
 35876  00931C  B4D8               	btfsc	status,2,c
 35877  00931E  D7E4               	goto	i1l15951
 35878  009320  D7E5               	goto	i1l15953
 35879  009322                     i1l1699:
 35880                           
 35881                           ;can18.c: 821: return (pt);
 35882  009322  C040  F03D         	movff	i1__PointBuffer@pt,?i1__PointBuffer
 35883  009326  C041  F03E         	movff	i1__PointBuffer@pt+1,?i1__PointBuffer+1
 35884  00932A  0012               	return		;funcret
 35885  00932C                     __end_ofi1__PointBuffer:
 35886                           	callstack 0
 35887                           
 35888 ;; *************** function _high_isr *****************
 35889 ;; Defined at:
 35890 ;;		line 772 in file "../../github/CANMIOfirmware/main.c"
 35891 ;; Parameters:    Size  Location     Type
 35892 ;;		None
 35893 ;; Auto vars:     Size  Location     Type
 35894 ;;		None
 35895 ;; Return value:  Size  Location     Type
 35896 ;;                  1    wreg      void 
 35897 ;; Registers used:
 35898 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 35899 ;; Tracked objects:
 35900 ;;		On entry : 0/0
 35901 ;;		On exit  : 0/0
 35902 ;;		Unchanged: 0/0
 35903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 35904 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 35905 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 35906 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 35907 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 35908 ;;Total ram usage:        8 bytes
 35909 ;; Hardware stack levels used: 1
 35910 ;; Hardware stack levels required when called: 2
 35911 ;; This function calls:
 35912 ;;		_timer1DoneInterruptHandler
 35913 ;;		_timer3DoneInterruptHandler
 35914 ;; This function is called by:
 35915 ;;		Interrupt level 2
 35916 ;; This function uses a non-reentrant model
 35917 ;;
 35918                           
 35919                           	psect	intcode
 35920  000848                     __pintcode:
 35921                           	callstack 0
 35922  000848                     _high_isr:
 35923                           	callstack 3
 35924                           
 35925                           ;incstack = 0
 35926  000848  824F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 35927  00084A  EFCF  F04B         	goto	int_func
 35928                           
 35929                           	psect	intcode_body
 35930  00979E                     __pintcode_body:
 35931                           	callstack 3
 35932  00979E                     int_func:
 35933                           	callstack 3
 35934  00979E  CFD9 F035          	movff	fsr2l,??_high_isr
 35935  0097A2  CFDA F036          	movff	fsr2h,??_high_isr+1
 35936  0097A6  CFF3 F037          	movff	prodl,??_high_isr+2
 35937  0097AA  CFF4 F038          	movff	prodh,??_high_isr+3
 35938  0097AE  CFF6 F039          	movff	tblptrl,??_high_isr+4
 35939  0097B2  CFF7 F03A          	movff	tblptrh,??_high_isr+5
 35940  0097B6  CFF8 F03B          	movff	tblptru,??_high_isr+6
 35941  0097BA  CFF5 F03C          	movff	tablat,??_high_isr+7
 35942                           
 35943                           ;main.c: 777: if (PIR1bits.TMR1IF) {
 35944  0097BE  A09E               	btfss	158,0,c	;volatile
 35945  0097C0  D003               	goto	i2l12943
 35946                           
 35947                           ;main.c: 778: timer1DoneInterruptHandler();
 35948  0097C2  EC16  F051         	call	_timer1DoneInterruptHandler	;wreg free
 35949                           
 35950                           ;main.c: 779: PIR1bits.TMR1IF = 0;
 35951  0097C6  909E               	bcf	158,0,c	;volatile
 35952  0097C8                     i2l12943:
 35953                           
 35954                           ;main.c: 780: };main.c: 781: if (PIR2bits.TMR3IF) {
 35955  0097C8  A2A1               	btfss	161,1,c	;volatile
 35956  0097CA  D003               	goto	i2l649
 35957                           
 35958                           ;main.c: 782: timer3DoneInterruptHandler();
 35959  0097CC  EC6D  F050         	call	_timer3DoneInterruptHandler	;wreg free
 35960                           
 35961                           ;main.c: 783: PIR2bits.TMR3IF = 0;
 35962  0097D0  92A1               	bcf	161,1,c	;volatile
 35963  0097D2                     i2l649:
 35964  0097D2  C03C  FFF5         	movff	??_high_isr+7,tablat
 35965  0097D6  C03B  FFF8         	movff	??_high_isr+6,tblptru
 35966  0097DA  C03A  FFF7         	movff	??_high_isr+5,tblptrh
 35967  0097DE  C039  FFF6         	movff	??_high_isr+4,tblptrl
 35968  0097E2  C038  FFF4         	movff	??_high_isr+3,prodh
 35969  0097E6  C037  FFF3         	movff	??_high_isr+2,prodl
 35970  0097EA  C036  FFDA         	movff	??_high_isr+1,fsr2h
 35971  0097EE  C035  FFD9         	movff	??_high_isr,fsr2l
 35972  0097F2  924F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 35973  0097F4  0011               	retfie		f
 35974  0097F6                     __end_of_high_isr:
 35975                           	callstack 0
 35976                           
 35977 ;; *************** function _timer3DoneInterruptHandler *****************
 35978 ;; Defined at:
 35979 ;;		line 221 in file "../../github/CANMIOfirmware/servo.c"
 35980 ;; Parameters:    Size  Location     Type
 35981 ;;		None
 35982 ;; Auto vars:     Size  Location     Type
 35983 ;;		None
 35984 ;; Return value:  Size  Location     Type
 35985 ;;                  1    wreg      void 
 35986 ;; Registers used:
 35987 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 35988 ;; Tracked objects:
 35989 ;;		On entry : 0/0
 35990 ;;		On exit  : 0/0
 35991 ;;		Unchanged: 0/0
 35992 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 35993 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 35994 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 35995 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 35996 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 35997 ;;Total ram usage:        2 bytes
 35998 ;; Hardware stack levels used: 1
 35999 ;; Hardware stack levels required when called: 1
 36000 ;; This function calls:
 36001 ;;		i2_setOutputPin
 36002 ;; This function is called by:
 36003 ;;		_high_isr
 36004 ;; This function uses a non-reentrant model
 36005 ;;
 36006                           
 36007                           	psect	text192
 36008  00A0DA                     __ptext192:
 36009                           	callstack 0
 36010  00A0DA                     _timer3DoneInterruptHandler:
 36011                           	callstack 3
 36012                           
 36013                           ;servo.c: 222: T3CONbits.TMR3ON = 0;
 36014                           
 36015                           ;incstack = 0
 36016  00A0DA  90B1               	bcf	177,0,c	;volatile
 36017                           
 36018                           ;servo.c: 223: setOutputPin(servoInBlock+8U, NV->io[servoInBlock+8U].flags & 0x20U);
 36019  00A0DC  5012               	movf	_servoInBlock^0,w,c
 36020  00A0DE  0D07               	mullw	7
 36021  00A0E0  C0EC  F033         	movff	_NV,??_timer3DoneInterruptHandler
 36022  00A0E4  C0ED  F034         	movff	_NV+1,??_timer3DoneInterruptHandler+1
 36023  00A0E8  50F3               	movf	243,w,c
 36024  00A0EA  2633               	addwf	??_timer3DoneInterruptHandler^0,f,c
 36025  00A0EC  50F4               	movf	244,w,c
 36026  00A0EE  2234               	addwfc	(??_timer3DoneInterruptHandler+1)^0,f,c
 36027  00A0F0  0E49               	movlw	73
 36028  00A0F2  2433               	addwf	??_timer3DoneInterruptHandler^0,w,c
 36029  00A0F4  6ED9               	movwf	fsr2l,c
 36030  00A0F6  0E00               	movlw	0
 36031  00A0F8  2034               	addwfc	(??_timer3DoneInterruptHandler+1)^0,w,c
 36032  00A0FA  6EDA               	movwf	fsr2h,c
 36033  00A0FC  50DF               	movf	indf2,w,c
 36034  00A0FE  0B20               	andlw	32
 36035  00A100  6E2D               	movwf	i2setOutputPin@state^0,c
 36036  00A102  5012               	movf	_servoInBlock^0,w,c
 36037  00A104  0F08               	addlw	8
 36038  00A106  EC67  F032         	call	i2_setOutputPin
 36039  00A10A  0012               	return		;funcret
 36040  00A10C                     __end_of_timer3DoneInterruptHandler:
 36041                           	callstack 0
 36042                           
 36043 ;; *************** function _timer1DoneInterruptHandler *****************
 36044 ;; Defined at:
 36045 ;;		line 216 in file "../../github/CANMIOfirmware/servo.c"
 36046 ;; Parameters:    Size  Location     Type
 36047 ;;		None
 36048 ;; Auto vars:     Size  Location     Type
 36049 ;;		None
 36050 ;; Return value:  Size  Location     Type
 36051 ;;                  1    wreg      void 
 36052 ;; Registers used:
 36053 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 36054 ;; Tracked objects:
 36055 ;;		On entry : 0/0
 36056 ;;		On exit  : 0/0
 36057 ;;		Unchanged: 0/0
 36058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 36059 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 36060 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 36061 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 36062 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 36063 ;;Total ram usage:        2 bytes
 36064 ;; Hardware stack levels used: 1
 36065 ;; Hardware stack levels required when called: 1
 36066 ;; This function calls:
 36067 ;;		i2_setOutputPin
 36068 ;; This function is called by:
 36069 ;;		_high_isr
 36070 ;; This function uses a non-reentrant model
 36071 ;;
 36072                           
 36073                           	psect	text193
 36074  00A22C                     __ptext193:
 36075                           	callstack 0
 36076  00A22C                     _timer1DoneInterruptHandler:
 36077                           	callstack 3
 36078                           
 36079                           ;servo.c: 217: T1CONbits.TMR1ON = 0;
 36080                           
 36081                           ;incstack = 0
 36082  00A22C  90CD               	bcf	205,0,c	;volatile
 36083                           
 36084                           ;servo.c: 218: setOutputPin(servoInBlock, NV->io[servoInBlock].flags & 0x20U);
 36085  00A22E  5012               	movf	_servoInBlock^0,w,c
 36086  00A230  0D07               	mullw	7
 36087  00A232  C0EC  F033         	movff	_NV,??_timer1DoneInterruptHandler
 36088  00A236  C0ED  F034         	movff	_NV+1,??_timer1DoneInterruptHandler+1
 36089  00A23A  50F3               	movf	243,w,c
 36090  00A23C  2633               	addwf	??_timer1DoneInterruptHandler^0,f,c
 36091  00A23E  50F4               	movf	244,w,c
 36092  00A240  2234               	addwfc	(??_timer1DoneInterruptHandler+1)^0,f,c
 36093  00A242  0E11               	movlw	17
 36094  00A244  2433               	addwf	??_timer1DoneInterruptHandler^0,w,c
 36095  00A246  6ED9               	movwf	fsr2l,c
 36096  00A248  0E00               	movlw	0
 36097  00A24A  2034               	addwfc	(??_timer1DoneInterruptHandler+1)^0,w,c
 36098  00A24C  6EDA               	movwf	fsr2h,c
 36099  00A24E  50DF               	movf	indf2,w,c
 36100  00A250  0B20               	andlw	32
 36101  00A252  6E2D               	movwf	i2setOutputPin@state^0,c
 36102  00A254  5012               	movf	_servoInBlock^0,w,c
 36103  00A256  EC67  F032         	call	i2_setOutputPin
 36104  00A25A  0012               	return		;funcret
 36105  00A25C                     __end_of_timer1DoneInterruptHandler:
 36106                           	callstack 0
 36107                           
 36108 ;; *************** function i2_setOutputPin *****************
 36109 ;; Defined at:
 36110 ;;		line 257 in file "../../github/CANMIOfirmware/digitalOut.c"
 36111 ;; Parameters:    Size  Location     Type
 36112 ;;  io              1    wreg     unsigned char 
 36113 ;;  state           1    0[COMRAM] unsigned char 
 36114 ;; Auto vars:     Size  Location     Type
 36115 ;;  io              1    5[COMRAM] unsigned char 
 36116 ;; Return value:  Size  Location     Type
 36117 ;;                  1    wreg      void 
 36118 ;; Registers used:
 36119 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 36120 ;; Tracked objects:
 36121 ;;		On entry : 0/0
 36122 ;;		On exit  : 0/0
 36123 ;;		Unchanged: 0/0
 36124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 36125 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 36126 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 36127 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 36128 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 36129 ;;Total ram usage:        6 bytes
 36130 ;; Hardware stack levels used: 1
 36131 ;; This function calls:
 36132 ;;		Nothing
 36133 ;; This function is called by:
 36134 ;;		_timer1DoneInterruptHandler
 36135 ;;		_timer3DoneInterruptHandler
 36136 ;; This function uses a non-reentrant model
 36137 ;;
 36138                           
 36139                           	psect	text194
 36140  0064CE                     __ptext194:
 36141                           	callstack 0
 36142  0064CE                     i2_setOutputPin:
 36143                           	callstack 3
 36144                           
 36145                           ;incstack = 0
 36146                           ;i2setOutputPin@io stored from wreg
 36147  0064CE  6E32               	movwf	i2setOutputPin@io^0,c
 36148                           
 36149                           ;digitalOut.c: 258: switch (configs[io].port) {
 36150  0064D0  D0B4               	goto	i2l12143
 36151  0064D2                     i2l12123:
 36152                           
 36153                           ;digitalOut.c: 260: if (state) {
 36154  0064D2  502D               	movf	i2setOutputPin@state^0,w,c
 36155  0064D4  B4D8               	btfsc	status,2,c
 36156  0064D6  D01C               	goto	i2l12127
 36157                           
 36158                           ;digitalOut.c: 262: LATA |= (1U<<configs[io].no);
 36159  0064D8  5032               	movf	i2setOutputPin@io^0,w,c
 36160  0064DA  0D04               	mullw	4
 36161  0064DC  CFF3 F02E          	movff	prodl,??i2_setOutputPin
 36162  0064E0  0E02               	movlw	2
 36163  0064E2  262E               	addwf	??i2_setOutputPin^0,f,c
 36164  0064E4  502E               	movf	??i2_setOutputPin^0,w,c
 36165  0064E6  0F01               	addlw	low _configs
 36166  0064E8  6E2F               	movwf	(??i2_setOutputPin+1)^0,c
 36167  0064EA  C02F  FFF6         	movff	??i2_setOutputPin+1,tblptrl
 36168  0064EE                     	if	1	;There is more than 1 active tblptr byte
 36169  0064EE  0E0F               	movlw	high __smallconst
 36170  0064F0  6EF7               	movwf	tblptrh,c
 36171  0064F2                     	endif
 36172  0064F2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 36173  0064F2  6AF8               	clrf	tblptru,c
 36174  0064F4                     	endif
 36175  0064F4                     	if	0	;tblptru may be non-zero
 36176  0064F4                     	endif
 36177  0064F4  0008               	tblrd		*
 36178  0064F6  CFF5 F030          	movff	tablat,??i2_setOutputPin+2
 36179  0064FA  0E01               	movlw	1
 36180  0064FC  6E31               	movwf	(??i2_setOutputPin+3)^0,c
 36181  0064FE  2A30               	incf	(??i2_setOutputPin+2)^0,f,c
 36182  006500  D002               	goto	i2u1298_44
 36183  006502                     i2u1298_45:
 36184  006502  90D8               	bcf	status,0,c
 36185  006504  3631               	rlcf	(??i2_setOutputPin+3)^0,f,c
 36186  006506                     i2u1298_44:
 36187  006506  2E30               	decfsz	(??i2_setOutputPin+2)^0,f,c
 36188  006508  D7FC               	goto	i2u1298_45
 36189  00650A  5031               	movf	(??i2_setOutputPin+3)^0,w,c
 36190  00650C  1289               	iorwf	137,f,c	;volatile
 36191                           
 36192                           ;digitalOut.c: 263: } else {
 36193  00650E  0012               	return	
 36194  006510                     i2l12127:
 36195                           
 36196                           ;digitalOut.c: 265: LATA &= ~(1U<<configs[io].no);
 36197  006510  5032               	movf	i2setOutputPin@io^0,w,c
 36198  006512  0D04               	mullw	4
 36199  006514  CFF3 F02E          	movff	prodl,??i2_setOutputPin
 36200  006518  0E02               	movlw	2
 36201  00651A  262E               	addwf	??i2_setOutputPin^0,f,c
 36202  00651C  502E               	movf	??i2_setOutputPin^0,w,c
 36203  00651E  0F01               	addlw	low _configs
 36204  006520  6E2F               	movwf	(??i2_setOutputPin+1)^0,c
 36205  006522  C02F  FFF6         	movff	??i2_setOutputPin+1,tblptrl
 36206  006526                     	if	1	;There is more than 1 active tblptr byte
 36207  006526  0E0F               	movlw	high __smallconst
 36208  006528  6EF7               	movwf	tblptrh,c
 36209  00652A                     	endif
 36210  00652A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 36211  00652A  6AF8               	clrf	tblptru,c
 36212  00652C                     	endif
 36213  00652C                     	if	0	;tblptru may be non-zero
 36214  00652C                     	endif
 36215  00652C  0008               	tblrd		*
 36216  00652E  CFF5 F030          	movff	tablat,??i2_setOutputPin+2
 36217  006532  0E01               	movlw	1
 36218  006534  6E31               	movwf	(??i2_setOutputPin+3)^0,c
 36219  006536  2A30               	incf	(??i2_setOutputPin+2)^0,f,c
 36220  006538  D002               	goto	i2u1299_44
 36221  00653A                     i2u1299_45:
 36222  00653A  90D8               	bcf	status,0,c
 36223  00653C  3631               	rlcf	(??i2_setOutputPin+3)^0,f,c
 36224  00653E                     i2u1299_44:
 36225  00653E  2E30               	decfsz	(??i2_setOutputPin+2)^0,f,c
 36226  006540  D7FC               	goto	i2u1299_45
 36227  006542  5031               	movf	(??i2_setOutputPin+3)^0,w,c
 36228  006544  0AFF               	xorlw	255
 36229  006546  1689               	andwf	137,f,c	;volatile
 36230  006548  0012               	return	
 36231  00654A                     i2l12129:
 36232                           
 36233                           ;digitalOut.c: 269: if (state) {
 36234  00654A  502D               	movf	i2setOutputPin@state^0,w,c
 36235  00654C  B4D8               	btfsc	status,2,c
 36236  00654E  D01C               	goto	i2l12133
 36237                           
 36238                           ;digitalOut.c: 271: LATB |= (1U<<configs[io].no);
 36239  006550  5032               	movf	i2setOutputPin@io^0,w,c
 36240  006552  0D04               	mullw	4
 36241  006554  CFF3 F02E          	movff	prodl,??i2_setOutputPin
 36242  006558  0E02               	movlw	2
 36243  00655A  262E               	addwf	??i2_setOutputPin^0,f,c
 36244  00655C  502E               	movf	??i2_setOutputPin^0,w,c
 36245  00655E  0F01               	addlw	low _configs
 36246  006560  6E2F               	movwf	(??i2_setOutputPin+1)^0,c
 36247  006562  C02F  FFF6         	movff	??i2_setOutputPin+1,tblptrl
 36248  006566                     	if	1	;There is more than 1 active tblptr byte
 36249  006566  0E0F               	movlw	high __smallconst
 36250  006568  6EF7               	movwf	tblptrh,c
 36251  00656A                     	endif
 36252  00656A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 36253  00656A  6AF8               	clrf	tblptru,c
 36254  00656C                     	endif
 36255  00656C                     	if	0	;tblptru may be non-zero
 36256  00656C                     	endif
 36257  00656C  0008               	tblrd		*
 36258  00656E  CFF5 F030          	movff	tablat,??i2_setOutputPin+2
 36259  006572  0E01               	movlw	1
 36260  006574  6E31               	movwf	(??i2_setOutputPin+3)^0,c
 36261  006576  2A30               	incf	(??i2_setOutputPin+2)^0,f,c
 36262  006578  D002               	goto	i2u1301_44
 36263  00657A                     i2u1301_45:
 36264  00657A  90D8               	bcf	status,0,c
 36265  00657C  3631               	rlcf	(??i2_setOutputPin+3)^0,f,c
 36266  00657E                     i2u1301_44:
 36267  00657E  2E30               	decfsz	(??i2_setOutputPin+2)^0,f,c
 36268  006580  D7FC               	goto	i2u1301_45
 36269  006582  5031               	movf	(??i2_setOutputPin+3)^0,w,c
 36270  006584  128A               	iorwf	138,f,c	;volatile
 36271                           
 36272                           ;digitalOut.c: 272: } else {
 36273  006586  0012               	return	
 36274  006588                     i2l12133:
 36275                           
 36276                           ;digitalOut.c: 274: LATB &= ~(1U<<configs[io].no);
 36277  006588  5032               	movf	i2setOutputPin@io^0,w,c
 36278  00658A  0D04               	mullw	4
 36279  00658C  CFF3 F02E          	movff	prodl,??i2_setOutputPin
 36280  006590  0E02               	movlw	2
 36281  006592  262E               	addwf	??i2_setOutputPin^0,f,c
 36282  006594  502E               	movf	??i2_setOutputPin^0,w,c
 36283  006596  0F01               	addlw	low _configs
 36284  006598  6E2F               	movwf	(??i2_setOutputPin+1)^0,c
 36285  00659A  C02F  FFF6         	movff	??i2_setOutputPin+1,tblptrl
 36286  00659E                     	if	1	;There is more than 1 active tblptr byte
 36287  00659E  0E0F               	movlw	high __smallconst
 36288  0065A0  6EF7               	movwf	tblptrh,c
 36289  0065A2                     	endif
 36290  0065A2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 36291  0065A2  6AF8               	clrf	tblptru,c
 36292  0065A4                     	endif
 36293  0065A4                     	if	0	;tblptru may be non-zero
 36294  0065A4                     	endif
 36295  0065A4  0008               	tblrd		*
 36296  0065A6  CFF5 F030          	movff	tablat,??i2_setOutputPin+2
 36297  0065AA  0E01               	movlw	1
 36298  0065AC  6E31               	movwf	(??i2_setOutputPin+3)^0,c
 36299  0065AE  2A30               	incf	(??i2_setOutputPin+2)^0,f,c
 36300  0065B0  D002               	goto	i2u1302_44
 36301  0065B2                     i2u1302_45:
 36302  0065B2  90D8               	bcf	status,0,c
 36303  0065B4  3631               	rlcf	(??i2_setOutputPin+3)^0,f,c
 36304  0065B6                     i2u1302_44:
 36305  0065B6  2E30               	decfsz	(??i2_setOutputPin+2)^0,f,c
 36306  0065B8  D7FC               	goto	i2u1302_45
 36307  0065BA  5031               	movf	(??i2_setOutputPin+3)^0,w,c
 36308  0065BC  0AFF               	xorlw	255
 36309  0065BE  168A               	andwf	138,f,c	;volatile
 36310  0065C0  0012               	return	
 36311  0065C2                     i2l12135:
 36312                           
 36313                           ;digitalOut.c: 278: if (state) {
 36314  0065C2  502D               	movf	i2setOutputPin@state^0,w,c
 36315  0065C4  B4D8               	btfsc	status,2,c
 36316  0065C6  D01C               	goto	i2l12139
 36317                           
 36318                           ;digitalOut.c: 280: LATC |= (1U<<configs[io].no);
 36319  0065C8  5032               	movf	i2setOutputPin@io^0,w,c
 36320  0065CA  0D04               	mullw	4
 36321  0065CC  CFF3 F02E          	movff	prodl,??i2_setOutputPin
 36322  0065D0  0E02               	movlw	2
 36323  0065D2  262E               	addwf	??i2_setOutputPin^0,f,c
 36324  0065D4  502E               	movf	??i2_setOutputPin^0,w,c
 36325  0065D6  0F01               	addlw	low _configs
 36326  0065D8  6E2F               	movwf	(??i2_setOutputPin+1)^0,c
 36327  0065DA  C02F  FFF6         	movff	??i2_setOutputPin+1,tblptrl
 36328  0065DE                     	if	1	;There is more than 1 active tblptr byte
 36329  0065DE  0E0F               	movlw	high __smallconst
 36330  0065E0  6EF7               	movwf	tblptrh,c
 36331  0065E2                     	endif
 36332  0065E2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 36333  0065E2  6AF8               	clrf	tblptru,c
 36334  0065E4                     	endif
 36335  0065E4                     	if	0	;tblptru may be non-zero
 36336  0065E4                     	endif
 36337  0065E4  0008               	tblrd		*
 36338  0065E6  CFF5 F030          	movff	tablat,??i2_setOutputPin+2
 36339  0065EA  0E01               	movlw	1
 36340  0065EC  6E31               	movwf	(??i2_setOutputPin+3)^0,c
 36341  0065EE  2A30               	incf	(??i2_setOutputPin+2)^0,f,c
 36342  0065F0  D002               	goto	i2u1304_44
 36343  0065F2                     i2u1304_45:
 36344  0065F2  90D8               	bcf	status,0,c
 36345  0065F4  3631               	rlcf	(??i2_setOutputPin+3)^0,f,c
 36346  0065F6                     i2u1304_44:
 36347  0065F6  2E30               	decfsz	(??i2_setOutputPin+2)^0,f,c
 36348  0065F8  D7FC               	goto	i2u1304_45
 36349  0065FA  5031               	movf	(??i2_setOutputPin+3)^0,w,c
 36350  0065FC  128B               	iorwf	139,f,c	;volatile
 36351                           
 36352                           ;digitalOut.c: 281: } else {
 36353  0065FE  0012               	return	
 36354  006600                     i2l12139:
 36355                           
 36356                           ;digitalOut.c: 283: LATC &= ~(1U<<configs[io].no);
 36357  006600  5032               	movf	i2setOutputPin@io^0,w,c
 36358  006602  0D04               	mullw	4
 36359  006604  CFF3 F02E          	movff	prodl,??i2_setOutputPin
 36360  006608  0E02               	movlw	2
 36361  00660A  262E               	addwf	??i2_setOutputPin^0,f,c
 36362  00660C  502E               	movf	??i2_setOutputPin^0,w,c
 36363  00660E  0F01               	addlw	low _configs
 36364  006610  6E2F               	movwf	(??i2_setOutputPin+1)^0,c
 36365  006612  C02F  FFF6         	movff	??i2_setOutputPin+1,tblptrl
 36366  006616                     	if	1	;There is more than 1 active tblptr byte
 36367  006616  0E0F               	movlw	high __smallconst
 36368  006618  6EF7               	movwf	tblptrh,c
 36369  00661A                     	endif
 36370  00661A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 36371  00661A  6AF8               	clrf	tblptru,c
 36372  00661C                     	endif
 36373  00661C                     	if	0	;tblptru may be non-zero
 36374  00661C                     	endif
 36375  00661C  0008               	tblrd		*
 36376  00661E  CFF5 F030          	movff	tablat,??i2_setOutputPin+2
 36377  006622  0E01               	movlw	1
 36378  006624  6E31               	movwf	(??i2_setOutputPin+3)^0,c
 36379  006626  2A30               	incf	(??i2_setOutputPin+2)^0,f,c
 36380  006628  D002               	goto	i2u1305_44
 36381  00662A                     i2u1305_45:
 36382  00662A  90D8               	bcf	status,0,c
 36383  00662C  3631               	rlcf	(??i2_setOutputPin+3)^0,f,c
 36384  00662E                     i2u1305_44:
 36385  00662E  2E30               	decfsz	(??i2_setOutputPin+2)^0,f,c
 36386  006630  D7FC               	goto	i2u1305_45
 36387  006632  5031               	movf	(??i2_setOutputPin+3)^0,w,c
 36388  006634  0AFF               	xorlw	255
 36389  006636  168B               	andwf	139,f,c	;volatile
 36390  006638  0012               	return	
 36391  00663A                     i2l12143:
 36392  00663A  5032               	movf	i2setOutputPin@io^0,w,c
 36393  00663C  0D04               	mullw	4
 36394  00663E  CFF3 F02E          	movff	prodl,??i2_setOutputPin
 36395  006642  0E01               	movlw	1
 36396  006644  262E               	addwf	??i2_setOutputPin^0,f,c
 36397  006646  502E               	movf	??i2_setOutputPin^0,w,c
 36398  006648  0F01               	addlw	low _configs
 36399  00664A  6E2F               	movwf	(??i2_setOutputPin+1)^0,c
 36400  00664C  C02F  FFF6         	movff	??i2_setOutputPin+1,tblptrl
 36401  006650                     	if	1	;There is more than 1 active tblptr byte
 36402  006650  0E0F               	movlw	high __smallconst
 36403  006652  6EF7               	movwf	tblptrh,c
 36404  006654                     	endif
 36405  006654                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 36406  006654  6AF8               	clrf	tblptru,c
 36407  006656                     	endif
 36408  006656                     	if	0	;tblptru may be non-zero
 36409  006656                     	endif
 36410  006656  0008               	tblrd		*
 36411  006658  50F5               	movf	tablat,w,c
 36412                           
 36413                           ; Switch size 1, requested type "simple"
 36414                           ; Number of cases is 3, Range of values is 65 to 67
 36415                           ; switch strategies available:
 36416                           ; Name         Instructions Cycles
 36417                           ; simple_byte           10     6 (average)
 36418                           ;	Chosen strategy is simple_byte
 36419  00665A  0A41               	xorlw	65	; case 65
 36420  00665C  B4D8               	btfsc	status,2,c
 36421  00665E  D739               	goto	i2l12123
 36422  006660  0A03               	xorlw	3	; case 66
 36423  006662  B4D8               	btfsc	status,2,c
 36424  006664  D772               	goto	i2l12129
 36425  006666  0A01               	xorlw	1	; case 67
 36426  006668  A4D8               	btfss	status,2,c
 36427  00666A  0012               	return	
 36428  00666C  D7AA               	goto	i2l12135
 36429  00666E                     __end_ofi2_setOutputPin:
 36430                           	callstack 0
 36431                           
 36432                           	psect	rparam
 36433  0000                     
 36434                           	psect	temp
 36435  00004F                     btemp:
 36436                           	callstack 0
 36437  00004F                     	ds	1
 36438  0000                     int$flags	set	btemp
 36439  0000                     wtemp8	set	btemp+1
 36440  0000                     ttemp5	set	btemp+1
 36441  0000                     ttemp6	set	btemp+4
 36442  0000                     ttemp7	set	btemp+8
 36443                           
 36444                           	psect	idloc
 36445                           
 36446                           ;Config register IDLOC0 @ 0x200000
 36447                           ;	unspecified, using default values
 36448  200000                     	org	2097152
 36449  200000  FF                 	db	255
 36450                           
 36451                           ;Config register IDLOC1 @ 0x200001
 36452                           ;	unspecified, using default values
 36453  200001                     	org	2097153
 36454  200001  FF                 	db	255
 36455                           
 36456                           ;Config register IDLOC2 @ 0x200002
 36457                           ;	unspecified, using default values
 36458  200002                     	org	2097154
 36459  200002  FF                 	db	255
 36460                           
 36461                           ;Config register IDLOC3 @ 0x200003
 36462                           ;	unspecified, using default values
 36463  200003                     	org	2097155
 36464  200003  FF                 	db	255
 36465                           
 36466                           ;Config register IDLOC4 @ 0x200004
 36467                           ;	unspecified, using default values
 36468  200004                     	org	2097156
 36469  200004  FF                 	db	255
 36470                           
 36471                           ;Config register IDLOC5 @ 0x200005
 36472                           ;	unspecified, using default values
 36473  200005                     	org	2097157
 36474  200005  FF                 	db	255
 36475                           
 36476                           ;Config register IDLOC6 @ 0x200006
 36477                           ;	unspecified, using default values
 36478  200006                     	org	2097158
 36479  200006  FF                 	db	255
 36480                           
 36481                           ;Config register IDLOC7 @ 0x200007
 36482                           ;	unspecified, using default values
 36483  200007                     	org	2097159
 36484  200007  FF                 	db	255
 36485                           
 36486                           	psect	config
 36487                           
 36488                           ;Config register CONFIG1L @ 0x300000
 36489                           ;	VREG Sleep Enable bit
 36490                           ;	RETEN = OFF, Ultra low-power regulator is Disabled (Controlled by REGSLP bit)
 36491                           ;	LF-INTOSC Low-power Enable bit
 36492                           ;	INTOSCSEL = HIGH, LF-INTOSC in High-power mode during Sleep
 36493                           ;	SOSC Power Selection and mode Configuration bits
 36494                           ;	SOSCSEL = DIG, Digital (SCLKI) mode
 36495                           ;	Extended Instruction Set
 36496                           ;	XINST = OFF, Disabled
 36497  300000                     	org	3145728
 36498  300000  15                 	db	21
 36499                           
 36500                           ;Config register CONFIG1H @ 0x300001
 36501                           ;	Oscillator
 36502                           ;	FOSC = HS1, HS oscillator (Medium power, 4 MHz - 16 MHz)
 36503                           ;	PLL x4 Enable bit
 36504                           ;	PLLCFG = OFF, Disabled
 36505                           ;	Fail-Safe Clock Monitor
 36506                           ;	FCMEN = OFF, Disabled
 36507                           ;	Internal External Oscillator Switch Over Mode
 36508                           ;	IESO = OFF, Disabled
 36509  300001                     	org	3145729
 36510  300001  03                 	db	3
 36511                           
 36512                           ;Config register CONFIG2L @ 0x300002
 36513                           ;	Power Up Timer
 36514                           ;	PWRTEN = ON, Enabled
 36515                           ;	Brown Out Detect
 36516                           ;	BOREN = SBORDIS, Enabled in hardware, SBOREN disabled
 36517                           ;	Brown-out Reset Voltage bits
 36518                           ;	BORV = 0, 3.0V
 36519                           ;	BORMV Power level
 36520                           ;	BORPWR = ZPBORMV, ZPBORMV instead of BORMV is selected
 36521  300002                     	org	3145730
 36522  300002  66                 	db	102
 36523                           
 36524                           ;Config register CONFIG2H @ 0x300003
 36525                           ;	Watchdog Timer
 36526                           ;	WDTEN = OFF, WDT disabled in hardware; SWDTEN bit disabled
 36527                           ;	Watchdog Postscaler
 36528                           ;	WDTPS = 1048576, 1:1048576
 36529  300003                     	org	3145731
 36530  300003  7C                 	db	124
 36531                           
 36532                           ; Padding undefined space
 36533  300004                     	org	3145732
 36534  300004  FF                 	db	255
 36535                           
 36536                           ;Config register CONFIG3H @ 0x300005
 36537                           ;	ECAN Mux bit
 36538                           ;	CANMX = PORTB, ECAN TX and RX pins are located on RB2 and RB3, respectively
 36539                           ;	MSSP address masking
 36540                           ;	MSSPMSK = MSK7, 7 Bit address masking mode
 36541                           ;	Master Clear Enable
 36542                           ;	MCLRE = ON, MCLR Enabled, RE3 Disabled
 36543  300005                     	org	3145733
 36544  300005  89                 	db	137
 36545                           
 36546                           ;Config register CONFIG4L @ 0x300006
 36547                           ;	Stack Overflow Reset
 36548                           ;	STVREN = ON, Enabled
 36549                           ;	Boot Block Size
 36550                           ;	BBSIZ = BB1K, 1K word Boot Block size
 36551  300006                     	org	3145734
 36552  300006  81                 	db	129
 36553                           
 36554                           ; Padding undefined space
 36555  300007                     	org	3145735
 36556  300007  FF                 	db	255
 36557                           
 36558                           ;Config register CONFIG5L @ 0x300008
 36559                           ;	Code Protect 00800-03FFF
 36560                           ;	CP0 = OFF, Disabled
 36561                           ;	Code Protect 04000-07FFF
 36562                           ;	CP1 = OFF, Disabled
 36563                           ;	Code Protect 08000-0BFFF
 36564                           ;	CP2 = OFF, Disabled
 36565                           ;	Code Protect 0C000-0FFFF
 36566                           ;	CP3 = OFF, Disabled
 36567  300008                     	org	3145736
 36568  300008  0F                 	db	15
 36569                           
 36570                           ;Config register CONFIG5H @ 0x300009
 36571                           ;	Code Protect Boot
 36572                           ;	CPB = OFF, Disabled
 36573                           ;	Data EE Read Protect
 36574                           ;	CPD = OFF, Disabled
 36575  300009                     	org	3145737
 36576  300009  C0                 	db	192
 36577                           
 36578                           ;Config register CONFIG6L @ 0x30000A
 36579                           ;	Table Write Protect 00800-03FFF
 36580                           ;	WRT0 = OFF, Disabled
 36581                           ;	Table Write Protect 04000-07FFF
 36582                           ;	WRT1 = OFF, Disabled
 36583                           ;	Table Write Protect 08000-0BFFF
 36584                           ;	WRT2 = OFF, Disabled
 36585                           ;	Table Write Protect 0C000-0FFFF
 36586                           ;	WRT3 = OFF, Disabled
 36587  30000A                     	org	3145738
 36588  30000A  0F                 	db	15
 36589                           
 36590                           ;Config register CONFIG6H @ 0x30000B
 36591                           ;	Config. Write Protect
 36592                           ;	WRTC = OFF, Disabled
 36593                           ;	Table Write Protect Boot
 36594                           ;	WRTB = OFF, Disabled
 36595                           ;	Data EE Write Protect
 36596                           ;	WRTD = OFF, Disabled
 36597  30000B                     	org	3145739
 36598  30000B  E0                 	db	224
 36599                           
 36600                           ;Config register CONFIG7L @ 0x30000C
 36601                           ;	Table Read Protect 00800-03FFF
 36602                           ;	EBTR0 = OFF, Disabled
 36603                           ;	Table Read Protect 04000-07FFF
 36604                           ;	EBTR1 = OFF, Disabled
 36605                           ;	Table Read Protect 08000-0BFFF
 36606                           ;	EBTR2 = OFF, Disabled
 36607                           ;	Table Read Protect 0C000-0FFFF
 36608                           ;	EBTR3 = OFF, Disabled
 36609  30000C                     	org	3145740
 36610  30000C  0F                 	db	15
 36611                           
 36612                           ;Config register CONFIG7H @ 0x30000D
 36613                           ;	Table Read Protect Boot
 36614                           ;	EBTRB = OFF, Disabled
 36615  30000D                     	org	3145741
 36616  30000D  40                 	db	64
 36617                           tosu	equ	0xFFF
 36618                           tosh	equ	0xFFE
 36619                           tosl	equ	0xFFD
 36620                           stkptr	equ	0xFFC
 36621                           pclatu	equ	0xFFB
 36622                           pclath	equ	0xFFA
 36623                           pcl	equ	0xFF9
 36624                           tblptru	equ	0xFF8
 36625                           tblptrh	equ	0xFF7
 36626                           tblptrl	equ	0xFF6
 36627                           tablat	equ	0xFF5
 36628                           prodh	equ	0xFF4
 36629                           prodl	equ	0xFF3
 36630                           indf0	equ	0xFEF
 36631                           postinc0	equ	0xFEE
 36632                           postdec0	equ	0xFED
 36633                           preinc0	equ	0xFEC
 36634                           plusw0	equ	0xFEB
 36635                           fsr0h	equ	0xFEA
 36636                           fsr0l	equ	0xFE9
 36637                           wreg	equ	0xFE8
 36638                           indf1	equ	0xFE7
 36639                           postinc1	equ	0xFE6
 36640                           postdec1	equ	0xFE5
 36641                           preinc1	equ	0xFE4
 36642                           plusw1	equ	0xFE3
 36643                           fsr1h	equ	0xFE2
 36644                           fsr1l	equ	0xFE1
 36645                           bsr	equ	0xFE0
 36646                           indf2	equ	0xFDF
 36647                           postinc2	equ	0xFDE
 36648                           postdec2	equ	0xFDD
 36649                           preinc2	equ	0xFDC
 36650                           plusw2	equ	0xFDB
 36651                           fsr2h	equ	0xFDA
 36652                           fsr2l	equ	0xFD9
 36653                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    76
    Data        6
    BSS         1968
    Persistent  4
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     34      78
    BANK0           160    134     142
    BANK1           256      6     248
    BANK2           256     29     233
    BANK3           256      0     200
    BANK4           256      0     128
    BANK5           256      0     256
    BANK6           256      0     256
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14           65      0       0

Pointer List with Targets:

    memcpy@d1	PTR void  size(2) Largest target is 256
		 -> canRxFifo(BANK5[256]), canTxFifo(BANK6[256]), TXB0CON(BITBIGSFRllllhhllll[1]), checkCBUS@msg(BANK2[20]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 256
		 -> canRxFifo(BANK5[256]), canTxFifo(BANK6[256]), TXB0CON(BITBIGSFRllllhhllll[1]), checkCBUS@msg(BANK2[20]), 

    memcpy@s1	PTR const void  size(2) Largest target is 256
		 -> cbusMsg.buffer(UNKNOWN), cbusSendMyEvent@msg.buffer(COMRAM[14]), cbusSendEvent@msg.buffer(COMRAM[14]), cbusSendDataEvent@msg.buffer(COMRAM[14]), 
		 -> requestNodeNumber@local_cbusMsg.buffer(COMRAM[14]), requestNodeNumber@local_cbusMsg(BANK0[9]), cbusSendDataEvent@msg(COMRAM[14]), cbusSendEvent@msg(BANK0[10]), 
		 -> cbusSendMyEvent@msg(COMRAM[10]), canRxFifo.buffer(BANK5[14]), canRxFifo(BANK5[256]), canTxFifo(BANK6[256]), 
		 -> B5CON(BITBIGSFRllllhllhhhhhl[1]), B4CON(BITBIGSFRllllhllhhhhl[1]), B3CON(BITBIGSFRllllhllhhhl[1]), B2CON(BITBIGSFRllllhllhhl[1]), 
		 -> B1CON(BITBIGSFRllllhllhl[1]), B0CON(ABS[1]), RXB1CON(BITBIGSFRllllhhllll[1]), RXB0CON(BITBIGSFRlllhhlll[1]), 
		 -> cbusMsg(COMRAM[16]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 256
		 -> cbusMsg.buffer(UNKNOWN), cbusSendMyEvent@msg.buffer(COMRAM[14]), cbusSendEvent@msg.buffer(COMRAM[14]), cbusSendDataEvent@msg.buffer(COMRAM[14]), 
		 -> requestNodeNumber@local_cbusMsg.buffer(COMRAM[14]), requestNodeNumber@local_cbusMsg(BANK0[9]), cbusSendDataEvent@msg(COMRAM[14]), cbusSendEvent@msg(BANK0[10]), 
		 -> cbusSendMyEvent@msg(COMRAM[10]), canRxFifo.buffer(BANK5[14]), canRxFifo(BANK5[256]), canTxFifo(BANK6[256]), 
		 -> B5CON(BITBIGSFRllllhllhhhhhl[1]), B4CON(BITBIGSFRllllhllhhhhl[1]), B3CON(BITBIGSFRllllhllhhhl[1]), B2CON(BITBIGSFRllllhllhhl[1]), 
		 -> B1CON(BITBIGSFRllllhllhl[1]), B0CON(ABS[1]), RXB1CON(BITBIGSFRllllhhllll[1]), RXB0CON(BITBIGSFRlllhhlll[1]), 
		 -> cbusMsg(COMRAM[16]), 

    setFlashWord@flashAddr	PTR unsigned int  size(3) Largest target is 0
		 -> ROM(CODE[65535]), NULL(NULL[0]), 

    writeFlashByte@flashAddr	PTR unsigned char  size(3) Largest target is 65535
		 -> ROM(CODE[65535]), NULL(NULL[0]), RAM(DATA[3648]), 

    writeFlashImage@offset	PTR unsigned char  size(2) Largest target is 64
		 -> flashbuf(BANK3[64]), 

    writeFlashImage@addr	PTR unsigned char  size(3) Largest target is 65535
		 -> ROM(CODE[65535]), NULL(NULL[0]), RAM(DATA[3648]), 

    thisNN@rx_ptr	PTR unsigned char  size(2) Largest target is 20
		 -> checkCBUS@msg(BANK2[20]), 

    doSnn@rx_ptr	PTR unsigned char  size(2) Largest target is 20
		 -> checkCBUS@msg(BANK2[20]), 

    doRqmn@namptr	PTR const unsigned char  size(3) Largest target is 65535
		 -> ROM(CODE[65535]), 

    doRqnp@paramptr	PTR struct . size(3) Largest target is 20
		 -> FLiMparams(CODE[20]), 

    doRqnpn@paramptr	PTR struct . size(3) Largest target is 20
		 -> FLiMparams(CODE[20]), 

    QNNrespond@paramptr	PTR struct . size(3) Largest target is 20
		 -> FLiMparams(CODE[20]), 

    getParFlags@paramptr	PTR struct . size(3) Largest target is 20
		 -> FLiMparams(CODE[20]), 

    parseFLiMCmd@rx_ptr	PTR unsigned char  size(2) Largest target is 20
		 -> checkCBUS@msg(BANK2[20]), 

    parseCBUSMsg@msg	PTR unsigned char  size(2) Largest target is 20
		 -> checkCBUS@msg(BANK2[20]), 

    parseCbusEvent@msg	PTR unsigned char  size(2) Largest target is 20
		 -> checkCBUS@msg(BANK2[20]), 

    cbusSendMsg@msg	PTR unsigned char  size(1) Largest target is 16
		 -> requestNodeNumber@local_cbusMsg(BANK0[9]), cbusSendDataEvent@msg(COMRAM[14]), cbusSendEvent@msg(BANK0[10]), cbusSendMyEvent@msg(COMRAM[10]), 
		 -> cbusMsg(COMRAM[16]), 

    cbusSendMsgNN@msg	PTR unsigned char  size(1) Largest target is 16
		 -> requestNodeNumber@local_cbusMsg(BANK0[9]), cbusSendDataEvent@msg(COMRAM[14]), cbusSendEvent@msg(BANK0[10]), cbusSendMyEvent@msg(COMRAM[10]), 
		 -> cbusMsg(COMRAM[16]), 

    cbusSendMsgMyNN@msg	PTR unsigned char  size(1) Largest target is 16
		 -> cbusMsg(COMRAM[16]), 

    cbusSendEventWithData@msg	PTR unsigned char  size(1) Largest target is 10
		 -> cbusSendEvent@msg(BANK0[10]), cbusSendMyEvent@msg(COMRAM[10]), 

    cbusSendOpcNN@msg	PTR unsigned char  size(1) Largest target is 16
		 -> requestNodeNumber@local_cbusMsg(BANK0[9]), cbusMsg(COMRAM[16]), 

    cbusSendOpcMyNN@msg	PTR unsigned char  size(1) Largest target is 16
		 -> cbusMsg(COMRAM[16]), 

    cbusMsgReceived@msg	PTR unsigned char  size(2) Largest target is 20
		 -> checkCBUS@msg(BANK2[20]), 

    _PointBuffer@pt	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(BITBIGSFRllllhllhhhhhl[1]), B4CON(BITBIGSFRllllhllhhhhl[1]), B3CON(BITBIGSFRllllhllhhhl[1]), B2CON(BITBIGSFRllllhllhhl[1]), 
		 -> B1CON(BITBIGSFRllllhllhl[1]), B0CON(ABS[1]), RXB1CON(BITBIGSFRllllhhllll[1]), RXB0CON(BITBIGSFRlllhhlll[1]), 

    checkIncomingPacket@ptr	PTR struct . size(2) Largest target is 1
		 -> B5CON(BITBIGSFRllllhllhhhhhl[1]), B4CON(BITBIGSFRllllhllhhhhl[1]), B3CON(BITBIGSFRllllhllhhhl[1]), B2CON(BITBIGSFRllllhllhhl[1]), 
		 -> B1CON(BITBIGSFRllllhllhl[1]), B0CON(ABS[1]), RXB1CON(BITBIGSFRllllhhllll[1]), RXB0CON(BITBIGSFRlllhhlll[1]), 

    canFillRxFifo@ptr	PTR struct . size(2) Largest target is 1
		 -> B5CON(BITBIGSFRllllhllhhhhhl[1]), B4CON(BITBIGSFRllllhllhhhhl[1]), B3CON(BITBIGSFRllllhllhhhl[1]), B2CON(BITBIGSFRllllhllhhl[1]), 
		 -> B1CON(BITBIGSFRllllhllhl[1]), B0CON(ABS[1]), RXB1CON(BITBIGSFRllllhhllll[1]), RXB0CON(BITBIGSFRlllhhlll[1]), 

    insertIntoRxFifo@ptr	PTR struct . size(2) Largest target is 14
		 -> cbusSendDataEvent@msg(COMRAM[14]), cbusSendEvent@msg(BANK0[10]), cbusSendMyEvent@msg(COMRAM[10]), B5CON(BITBIGSFRllllhllhhhhhl[1]), 
		 -> B4CON(BITBIGSFRllllhllhhhhl[1]), B3CON(BITBIGSFRllllhllhhhl[1]), B2CON(BITBIGSFRllllhllhhl[1]), B1CON(BITBIGSFRllllhllhl[1]), 
		 -> B0CON(ABS[1]), RXB1CON(BITBIGSFRllllhhllll[1]), RXB0CON(BITBIGSFRlllhhlll[1]), 

    sp___PointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(BITBIGSFRllllhllhhhhhl[1]), B4CON(BITBIGSFRllllhllhhhhl[1]), B3CON(BITBIGSFRllllhllhhhl[1]), B2CON(BITBIGSFRllllhllhhl[1]), 
		 -> B1CON(BITBIGSFRllllhllhl[1]), B0CON(ABS[1]), RXB1CON(BITBIGSFRllllhhllll[1]), RXB0CON(BITBIGSFRlllhhlll[1]), 

    canbusRecv@ptr	PTR struct . size(2) Largest target is 1
		 -> B5CON(BITBIGSFRllllhllhhhhhl[1]), B4CON(BITBIGSFRllllhllhhhhl[1]), B3CON(BITBIGSFRllllhllhhhl[1]), B2CON(BITBIGSFRllllhllhhl[1]), 
		 -> B1CON(BITBIGSFRllllhllhl[1]), B0CON(ABS[1]), RXB1CON(BITBIGSFRllllhhllll[1]), RXB0CON(BITBIGSFRlllhhlll[1]), 

    canbusRecv@msg	PTR struct . size(2) Largest target is 20
		 -> checkCBUS@msg(BANK2[20]), 

    checkTxFifo@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB0CON(BITBIGSFRllllhhllll[1]), 

    canQueueRx@msg	PTR struct . size(1) Largest target is 14
		 -> cbusSendDataEvent@msg(COMRAM[14]), cbusSendEvent@msg(BANK0[10]), cbusSendMyEvent@msg(COMRAM[10]), 

    sp__memcpy	PTR void  size(2) Largest target is 256
		 -> canRxFifo(BANK5[256]), canTxFifo(BANK6[256]), TXB0CON(BITBIGSFRllllhhllll[1]), checkCBUS@msg(BANK2[20]), 

    canTX@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB0CON(BITBIGSFRllllhhllll[1]), 

    canTX@msg	PTR struct . size(1) Largest target is 16
		 -> requestNodeNumber@local_cbusMsg(BANK0[9]), cbusSendDataEvent@msg(COMRAM[14]), cbusSendEvent@msg(BANK0[10]), cbusSendMyEvent@msg(COMRAM[10]), 
		 -> cbusMsg(COMRAM[16]), 

    canSend@msg	PTR unsigned char  size(1) Largest target is 16
		 -> requestNodeNumber@local_cbusMsg(BANK0[9]), cbusSendDataEvent@msg(COMRAM[14]), cbusSendEvent@msg(BANK0[10]), cbusSendMyEvent@msg(COMRAM[10]), 
		 -> cbusMsg(COMRAM[16]), 

    delete@q.queue	PTR unsigned char  size(2) Largest target is 64
		 -> expeditedQueueBuf(BANK2[8]), normalQueueBuf(BANK3[64]), 

    delete@q	PTR struct Queue size(2) Largest target is 6
		 -> expeditedQueue(BANK1[5]), normalQueue(BANK1[5]), 

    quantity@q.queue	PTR unsigned char  size(2) Largest target is 64
		 -> expeditedQueueBuf(BANK2[8]), normalQueueBuf(BANK3[64]), 

    quantity@q	PTR struct Queue size(2) Largest target is 6
		 -> expeditedQueue(BANK1[5]), normalQueue(BANK1[5]), 

    peek@q.queue	PTR unsigned char  size(2) Largest target is 64
		 -> expeditedQueueBuf(BANK2[8]), normalQueueBuf(BANK3[64]), 

    peek@q	PTR struct Queue size(2) Largest target is 6
		 -> expeditedQueue(BANK1[5]), normalQueue(BANK1[5]), 

    pop@q.queue	PTR unsigned char  size(2) Largest target is 64
		 -> expeditedQueueBuf(BANK2[8]), normalQueueBuf(BANK3[64]), 

    pop@q	PTR struct Queue size(2) Largest target is 6
		 -> expeditedQueue(BANK1[5]), normalQueue(BANK1[5]), 

    push@q.queue	PTR unsigned char  size(2) Largest target is 64
		 -> expeditedQueueBuf(BANK2[8]), normalQueueBuf(BANK3[64]), 

    push@q	PTR struct Queue size(2) Largest target is 6
		 -> expeditedQueue(BANK1[5]), normalQueue(BANK1[5]), 

    NvBytePtr	PTR const unsigned char  size(3) Largest target is 128
		 -> nodeVarTable(CODE[128]), 

    loadNvCache@np	PTR unsigned char  size(2) Largest target is 128
		 -> nvCache(BANK4[128]), 

    processEvent@msg	PTR unsigned char  size(2) Largest target is 20
		 -> checkCBUS@msg(BANK2[20]), 

    sp__loadNvCache	PTR struct . size(2) Largest target is 128
		 -> nvCache(BANK4[128]), 

    eventTable	PTR const struct . size(3) Largest target is 65535
		 -> ROM(CODE[65535]), NULL(NULL[0]), 

    NV	PTR struct . size(2) Largest target is 128
		 -> nvCache(BANK4[128]), NULL(NULL[0]), 

    expeditedQueue.queue	PTR unsigned char  size(2) Largest target is 64
		 -> expeditedQueueBuf(BANK2[8]), normalQueueBuf(BANK3[64]), 

    S41Queue$queue	PTR unsigned char  size(2) Largest target is 64
		 -> expeditedQueueBuf(BANK2[8]), normalQueueBuf(BANK3[64]), 

    normalQueue.queue	PTR unsigned char  size(2) Largest target is 64
		 -> expeditedQueueBuf(BANK2[8]), normalQueueBuf(BANK3[64]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _low_isr in COMRAM

    _canInterruptHandler->_checkCANTimeout
    _checkCANTimeout->_checkTxFifo
    _canTxError->_checkTxFifo
    _checkTxFifo->i1_memcpy
    _canFillRxFifo->i1_checkIncomingPacket
    i1_insertIntoRxFifo->i1_memcpy
    i1_checkIncomingPacket->i1_tickGet

Critical Paths under _high_isr in COMRAM

    _high_isr->_timer1DoneInterruptHandler
    _high_isr->_timer3DoneInterruptHandler
    _timer3DoneInterruptHandler->i2_setOutputPin
    _timer1DoneInterruptHandler->i2_setOutputPin

Critical Paths under _main in BANK0

    _startServos->_pollServos
    _setupTimer3->_setOutputPin
    _setupTimer1->_setOutputPin
    _pollServos->_sendProducedEvent
    _bounceDown->___awdiv
    ___awdiv->___wmul
    _processOutputs->_sendProducedEvent
    _processActions->_startOutput
    _startOutput->_startDigitalOutput
    _startDigitalOutput->_sendInvertedProducedEvent
    _setOutputState->_setMultiState
    _getAction->_peekActionQueue
    _peekActionQueue->_quantity
    _doWait->___lmul
    _doneAction->_popAction
    _popAction->_pop
    _deleteActionQueue->_quantity
    _pollAnalogue->_sendProducedEvent
    _inputScan->_sendProducedEvent
    _eventsInit->_rebuildHashtable
    _cbusInit->_canInit
    _ee_read_short->_ee_read
    _canInit->_tickGet
    _initServos->_setOutputPosition
    _setOutputPosition->_setDigitalOutput
    _initInputScan->_readInput
    _doTimedResponse->_APP_doSOD
    _APP_doSOD->_sendInvertedProducedEvent
    _sendInvertedProducedEvent->_sendProducedEvent
    _sendProducedEvent->_cbusSendEvent
    _getProducedEvent->_getNN
    _cbusSendEvent->_cbusSendEventWithData
    _cbusSendEventWithData->_cbusSendMsgNN
    _canQueueRx->_insertIntoRxFifo
    _insertIntoRxFifo->_memcpy
    _checkFlashing->_doFLiMFlash
    _checkCBUS->_parseCBUSMsg
    _shortFlicker->_tickGet
    _parseCBUSMsg->_parseFLiMCmd
    _parseFLiMCmd->_doNvset
    _doSnn->_SaveNodeDetails
    _doRqnpn->_doError
    _doRqnp->_cbusSendMsg
    _doRqmn->_cbusSendMsg
    _doRqevn->_cbusSendOpcMyNN
    _doReval->_cbusSendOpcMyNN
    _doReqev->_findEvent
    _numEv->_validStart
    _doNvset->_actUponNVchange
    _validateNV->___lwdiv
    _actUponNVchange->_setType
    _doNvrd->_doError
    _doNnevn->_cbusSendOpcMyNN
    _doNnclr->_clearAllEvents
    _doNenrd->_cbusSendOpcMyNN
    _doNenrd->_doError
    _doEvuln->_removeEvent
    _removeEvent->_removeTableEntry
    _doEvlrn->_APP_addEvent
    _APP_addEvent->_addEvent
    _doAreq->_findEvent
    _QNNrespond->_cbusSendMsgNN
    _parseCbusEvent->_findEvent
    _processEvent->_getEVs
    _pushAction->_push
    _longFlicker->_tickGet
    _factoryResetFlash->_setType
    _setType->_defaultEvents
    _defaultNVs->_writeFlashByte
    _defaultEvents->_addEvent
    _clearEvents->_deleteActionRange
    _deleteHappeningRange->_writeEv
    _deleteActionRange->_writeEv
    _addEvent->_writeEv
    _writeEv->_checkRemoveTableEntry
    _setFlashWord->_writeFlashImage
    _checkRemoveTableEntry->_removeTableEntry
    _removeTableEntry->_rebuildHashtable
    _getEVs->_validStart
    _findEvent->_getHash
    _configIO->_setDigitalOutput
    _setDigitalOutput->_setOutputPin
    _factoryResetGlobalNv->_writeFlashByte
    _loadNvCache->_readFlashBlock
    _clearAllEvents->_rebuildHashtable
    _writeFlashByte->_writeFlashImage
    _writeFlashImage->_readFlashBlock
    _factoryResetEE->_ee_write_short
    _cbusMsgReceived->_canbusRecv
    _canbusRecv->_processEnumeration
    _processEnumeration->_cbusSendOpcMyNN
    _processEnumeration->_doError
    _setNewCanId->_ee_write
    _doError->_cbusSendMsgNN
    _cbusSendOpcMyNN->_cbusSendMsgMyNN
    _cbusSendMsgMyNN->_cbusSendMsg
    _checkIncomingPacket->_tickGet
    _FLiMSWCheck->_requestNodeNumber
    _startFLiMFlash->_doFLiMFlash
    _doFLiMFlash->_tickGet
    _requestNodeNumber->_cbusSendOpcNN
    _SaveNodeDetails->_rebuildHashtable
    _rebuildHashtable->_getHash
    _getNN->_readFlashBlock
    _getHash->_getNN
    _getEv->_validStart
    _validStart->_readFlashBlock
    _getEN->_readFlashBlock
    _flushFlashImage->_writeFlashShort
    _writeFlashWithErase->_writeFlashShort
    _ee_write_short->_ee_write
    _ee_write->_ee_read
    _SLiMRevert->_cbusSendOpcNN
    _cbusSendOpcNN->_cbusSendMsgNN
    _cbusSendMsgNN->_cbusSendMsg
    _cbusSendMsg->_canSend
    _canSend->_canTX
    _canTX->_memcpy

Critical Paths under _low_isr in BANK0

    _canInterruptHandler->_canFillRxFifo

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _main in BANK1

    _parseCBUSMsg->_parseFLiMCmd

Critical Paths under _low_isr in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_checkCBUS

Critical Paths under _low_isr in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _low_isr in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _low_isr in BANK4

    None.

Critical Paths under _high_isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _low_isr in BANK5

    None.

Critical Paths under _high_isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _low_isr in BANK6

    None.

Critical Paths under _high_isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _low_isr in BANK7

    None.

Critical Paths under _high_isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _low_isr in BANK8

    None.

Critical Paths under _high_isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _low_isr in BANK9

    None.

Critical Paths under _high_isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _low_isr in BANK10

    None.

Critical Paths under _high_isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _low_isr in BANK11

    None.

Critical Paths under _high_isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _low_isr in BANK12

    None.

Critical Paths under _high_isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _low_isr in BANK13

    None.

Critical Paths under _high_isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _low_isr in BANK14

    None.

Critical Paths under _high_isr in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 9     9      0 3398745
                                             20 BANK2      9     9      0
                        _FLiMSWCheck
                             ___lmul
                          _checkCBUS
                      _checkFlashing
                    _doTimedResponse
                         _initRomOps
                     _initStatusLeds
                         _initialise
                          _inputScan
                        _loadNvCache
                       _pollAnalogue
                     _processActions
                     _processOutputs
                  _sendProducedEvent
                        _startServos
                            _tickGet
 ---------------------------------------------------------------------------------
 (1) _startServos                                          3     3      0   56763
                                             97 BANK0      3     3      0
                         _pollServos
                        _setupTimer1
                        _setupTimer3
 ---------------------------------------------------------------------------------
 (2) _setupTimer3                                          6     6      0    1938
                                             23 BANK0      6     6      0
                       _setOutputPin
 ---------------------------------------------------------------------------------
 (2) _setupTimer1                                          6     6      0    1938
                                             23 BANK0      6     6      0
                       _setOutputPin
 ---------------------------------------------------------------------------------
 (2) _pollServos                                          12    12      0   52623
                                             85 BANK0     12    12      0
                         _bounceDown
                           _bounceUp
                           _ee_write
                         _initBounce
                  _sendProducedEvent
                            _tickGet
 ---------------------------------------------------------------------------------
 (3) _initBounce                                           1     1      0      44
                                             17 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _bounceUp                                            10    10      0     750
                                             17 BANK0     10    10      0
 ---------------------------------------------------------------------------------
 (3) _bounceDown                                          11    11      0    6320
                                             31 BANK0     11    11      0
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1516
                                             23 BANK0      8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _processOutputs                                       5     5      0   34360
                                             85 BANK0      4     4      0
                         _doneAction
                  _sendProducedEvent
                       _setOutputPin
 ---------------------------------------------------------------------------------
 (1) _processActions                                      11    11      0   62124
                                            104 BANK0     11    11      0
                            ___lwdiv
                            ___lwmod
                          _completed
                  _deleteActionQueue
                              _doSOD
                             _doWait
                         _doneAction
                          _getAction
                      _needsStarting
                    _peekActionQueue
                     _setOutputState
                        _startOutput
 ---------------------------------------------------------------------------------
 (2) _startOutput                                          3     1      2   45817
                                            101 BANK0      3     1      2
                  _startBounceOutput
                 _startDigitalOutput
                   _startMultiOutput
                   _startServoOutput
 ---------------------------------------------------------------------------------
 (3) _startDigitalOutput                                   8     7      1   42715
                                             93 BANK0      8     7      1
                           _ee_write
          _sendInvertedProducedEvent
                       _setOutputPin
 ---------------------------------------------------------------------------------
 (2) _setOutputState                                       3     1      2    3270
                                             22 BANK0      3     1      2
                     _setBounceState
                      _setMultiState
                      _setServoState
 ---------------------------------------------------------------------------------
 (2) _needsStarting                                        5     3      2     515
                                             17 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (2) _getAction                                            0     0      0    1346
                    _peekActionQueue
 ---------------------------------------------------------------------------------
 (2) _peekActionQueue                                      1     1      0    1346
                                             23 BANK0      1     1      0
                               _peek
                           _quantity
 ---------------------------------------------------------------------------------
 (3) _peek                                                 5     2      3     676
                                             17 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 (2) _doWait                                               6     4      2    2001
                                             29 BANK0      6     4      2
                             ___lmul
                         _doneAction
                            _tickGet
 ---------------------------------------------------------------------------------
 (2) _doneAction                                           0     0      0     513
                          _popAction
 ---------------------------------------------------------------------------------
 (3) _popAction                                            1     1      0     513
                                             23 BANK0      1     1      0
                                _pop
 ---------------------------------------------------------------------------------
 (4) _pop                                                  6     4      2     462
                                             17 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     566
                                             17 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (2) _doSOD                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _deleteActionQueue                                    2     2      0    1253
                                             23 BANK0      2     2      0
                             _delete
                           _quantity
 ---------------------------------------------------------------------------------
 (3) _quantity                                             6     4      2     543
                                             17 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _delete                                               5     2      3     614
                                             17 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 (2) _completed                                            6     4      2     583
                                             17 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (1) _pollAnalogue                                        13    13      0   57318
                                             85 BANK0     13    13      0
                             ___wmul
                      _cbusSendOpcNN
                  _sendProducedEvent
                     _writeFlashByte
 ---------------------------------------------------------------------------------
 (1) _inputScan                                            6     6      0   37423
                                             85 BANK0      6     6      0
                           _ee_write
                          _readInput
                  _sendProducedEvent
 ---------------------------------------------------------------------------------
 (1) _initialise                                          13    13      0  981092
                                            114 BANK0     13    13      0
                    _actionQueueInit
                           _addEvent
                           _configIO
                            _ee_read
                           _ee_write
                     _factoryResetEE
                  _factoryResetFlash
                              _getEv
                   _getProducedEvent
                       _initAnalogue
                      _initInputScan
                        _initOutputs
                         _initServos
                         _initTicker
                  _initTimedResponse
                        _loadNvCache
                      _mioEventsInit
                        _mioFlimInit
                            _writeEv
                     _writeFlashByte
 ---------------------------------------------------------------------------------
 (2) _mioFlimInit                                          0     0      0   34306
                           _flimInit
                          _mioNvInit
 ---------------------------------------------------------------------------------
 (3) _mioNvInit                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _flimInit                                             0     0      0   34306
                           _cbusInit
                            _ee_read
                         _eventsInit
                       _setStatusLed
 ---------------------------------------------------------------------------------
 (4) _eventsInit                                           0     0      0   22542
                   _rebuildHashtable
 ---------------------------------------------------------------------------------
 (4) _cbusInit                                             2     0      2   10254
                                             30 BANK0      2     0      2
                            _canInit
                      _ee_read_short
 ---------------------------------------------------------------------------------
 (5) _ee_read_short                                        9     7      2    1808
                                             19 BANK0      9     7      2
                            _ee_read
 ---------------------------------------------------------------------------------
 (5) _canInit                                              4     3      1    8298
                                             27 BANK0      3     2      1
                            _ee_read
                           _ee_write
                            _tickGet
 ---------------------------------------------------------------------------------
 (2) _mioEventsInit                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _initTimedResponse                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _initTicker                                           3     3      0      92
                                             17 BANK0      3     3      0
                          _setclkMHz
 ---------------------------------------------------------------------------------
 (3) _setclkMHz                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _initServos                                           5     5      0    8054
                                             33 BANK0      5     5      0
                            _ee_read
                  _setOutputPosition
                            _tickGet
 ---------------------------------------------------------------------------------
 (3) _setOutputPosition                                    5     3      2    5362
                                             28 BANK0      5     3      2
                            _ee_read (ARG)
                   _setDigitalOutput
                       _setOutputPin
                   _setServoPosition
 ---------------------------------------------------------------------------------
 (4) _setServoPosition                                     2     1      1     164
                                             17 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (2) _initOutputs                                          1     1      0     130
                                             17 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _initInputScan                                        3     3      0    1716
                                             22 BANK0      3     3      0
                            _ee_read
                          _readInput
 ---------------------------------------------------------------------------------
 (2) _readInput                                            5     5      0     110
                                             17 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (2) _initAnalogue                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _actionQueueInit                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initStatusLeds                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initRomOps                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _doTimedResponse                                      2     2      0   58398
                                            115 BANK0      2     2      0
                          _APP_doSOD
                    _cbusSendOpcMyNN
                              _getEN
                              _getNN
                 _tableIndexToEvtIdx
                         _validStart
 ---------------------------------------------------------------------------------
 (2) _tableIndexToEvtIdx                                   1     1      0      22
                                             17 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _APP_doSOD                                           22    22      0   36867
                                             93 BANK0     22    22      0
                            _ee_read
          _sendInvertedProducedEvent
 ---------------------------------------------------------------------------------
 (4) _sendInvertedProducedEvent                            8     4      4   32981
                                             85 BANK0      8     4      4
                  _sendProducedEvent
 ---------------------------------------------------------------------------------
 (3) _sendProducedEvent                                    7     6      1   30847
                                             78 BANK0      7     6      1
                      _cbusSendEvent
                            _ee_read
                           _ee_write
            _getDefaultProducedEvent
                   _getProducedEvent
 ---------------------------------------------------------------------------------
 (4) _getProducedEvent                                     2     2      0    8184
                                             40 BANK0      2     2      0
                              _getEN
                              _getNN
 ---------------------------------------------------------------------------------
 (4) _getDefaultProducedEvent                              1     1      0       0
 ---------------------------------------------------------------------------------
 (4) _cbusSendEvent                                       16    11      5   11297
                                             62 BANK0     16    11      5
              _cbusSendEventWithData
 ---------------------------------------------------------------------------------
 (5) _cbusSendEventWithData                               11     4      7   10235
                                             51 BANK0     11     4      7
                         _canQueueRx
                      _cbusSendMsgNN
 ---------------------------------------------------------------------------------
 (6) _canQueueRx                                           1     0      1    2535
                                             31 BANK0      1     0      1
                   _insertIntoRxFifo
 ---------------------------------------------------------------------------------
 (7) _insertIntoRxFifo                                     3     1      2    2310
                                             28 BANK0      3     1      2
                             _memcpy
 ---------------------------------------------------------------------------------
 (1) _checkFlashing                                        4     4      0     912
                                             28 BANK0      4     4      0
                        _doFLiMFlash
                            _tickGet
 ---------------------------------------------------------------------------------
 (1) _checkCBUS                                           20    20      0 2022924
                                              0 BANK2     20    20      0
                    _cbusMsgReceived
                    _cbusSendOpcMyNN
                       _factoryReset
                        _longFlicker
                       _parseCBUSMsg
                       _shortFlicker
                             _thisNN
 ---------------------------------------------------------------------------------
 (2) _shortFlicker                                         4     4      0     456
                                             27 BANK0      4     4      0
                            _tickGet
 ---------------------------------------------------------------------------------
 (2) _parseCBUSMsg                                         2     0      2 1347761
                                            132 BANK0      2     0      2
                     _parseCbusEvent
                       _parseFLiMCmd
 ---------------------------------------------------------------------------------
 (3) _parseFLiMCmd                                         9     7      2 1321557
                                            129 BANK0      3     1      2
                                              0 BANK1      6     6      0
                         _QNNrespond
                             _doAreq
                             _doEnum
                            _doError
                            _doEvlrn
                            _doEvuln
                            _doNenrd
                             _doNerd
                            _doNnclr
                            _doNnevn
                             _doNvrd
                            _doNvset
                            _doReqev
                            _doReval
                            _doRqevn
                             _doRqmn
                             _doRqnp
                            _doRqnpn
                              _doSnn
                           _ee_write
                        _setNewCanId
                             _thisNN
 ---------------------------------------------------------------------------------
 (2) _thisNN                                               6     4      2     444
                                             17 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (4) _doSnn                                                3     1      2   45709
                                             59 BANK0      3     1      2
                    _SaveNodeDetails
                    _cbusSendOpcMyNN
                         _setFLiMLed
 ---------------------------------------------------------------------------------
 (4) _doRqnpn                                             11    11      0   12364
                                             52 BANK0     11    11      0
                      _cbusSendMsgNN
                            _doError
                        _readCPUType
 ---------------------------------------------------------------------------------
 (5) _readCPUType                                          2     0      2       0
                                             17 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) _doRqnp                                              10    10      0    4767
                                             47 BANK0     10    10      0
                        _cbusSendMsg
                        _getParFlags
 ---------------------------------------------------------------------------------
 (4) _doRqmn                                               9     9      0    4689
                                             47 BANK0      8     8      0
                        _cbusSendMsg
 ---------------------------------------------------------------------------------
 (4) _doRqevn                                              2     2      0   13535
                                             52 BANK0      2     2      0
                    _cbusSendOpcMyNN
                         _validStart
 ---------------------------------------------------------------------------------
 (4) _doReval                                              7     6      1   30845
                                             52 BANK0      7     6      1
                    _cbusSendOpcMyNN
                 _evtIdxToTableIndex
                              _getEv
                              _numEv
                         _validStart
 ---------------------------------------------------------------------------------
 (4) _doReqev                                              9     4      5   37491
                                             59 BANK0      9     4      5
                    _cbusSendOpcMyNN
                          _findEvent
                              _getEv
                              _numEv
 ---------------------------------------------------------------------------------
 (5) _numEv                                                5     5      0    8028
                                             33 BANK0      5     5      0
                     _readFlashBlock
                         _validStart
 ---------------------------------------------------------------------------------
 (4) _doNvset                                              7     6      1  616364
                                            122 BANK0      7     6      1
                    _actUponNVchange
                    _cbusSendOpcMyNN
                            _doError
                        _loadNvCache
                         _validateNV
                     _writeFlashByte
 ---------------------------------------------------------------------------------
 (5) _validateNV                                           6     4      2    3850
                                             24 BANK0      6     4      2
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (5) _actUponNVchange                                      9     7      2  577134
                                            114 BANK0      8     6      2
                            ___lbdiv
                            ___lwdiv
                            ___lwmod
                     _setBounceState
                      _setMultiState
                      _setServoState
                            _setType
                  _startBounceOutput
                   _startMultiOutput
                   _startServoOutput
 ---------------------------------------------------------------------------------
 (3) _startServoOutput                                     4     3      1     864
                                             17 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (3) _startMultiOutput                                     3     2      1     908
                                             17 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _startBounceOutput                                    2     1      1     528
                                             17 BANK0      2     1      1
 ---------------------------------------------------------------------------------
 (3) _setServoState                                        4     3      1     780
                                             17 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (3) _setMultiState                                        5     4      1     992
                                             17 BANK0      5     4      1
 ---------------------------------------------------------------------------------
 (3) _setBounceState                                       4     3      1     780
                                             17 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (6) ___lbdiv                                              4     3      1     448
                                             17 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (4) _doNvrd                                               3     3      0   14824
                                             52 BANK0      3     3      0
                    _cbusSendMsgMyNN
                            _doError
                     _readFlashBlock
 ---------------------------------------------------------------------------------
 (4) _doNnevn                                              5     5      0   13451
                                             52 BANK0      5     5      0
                    _cbusSendOpcMyNN
                     _readFlashBlock
 ---------------------------------------------------------------------------------
 (4) _doNnclr                                              0     0      0   47707
                    _cbusSendOpcMyNN
                     _clearAllEvents
 ---------------------------------------------------------------------------------
 (4) _doNerd                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _doNenrd                                              4     4      0   27778
                                             52 BANK0      4     4      0
                    _cbusSendOpcMyNN
                            _doError
                 _evtIdxToTableIndex
                              _getEN
                              _getNN
                         _validStart
 ---------------------------------------------------------------------------------
 (5) _evtIdxToTableIndex                                   1     1      0      42
                                             17 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _doEvuln                                              4     0      4   57176
                                             68 BANK0      4     0      4
                        _removeEvent
 ---------------------------------------------------------------------------------
 (5) _removeEvent                                          5     1      4   56880
                                             63 BANK0      5     1      4
                          _findEvent
                   _removeTableEntry
 ---------------------------------------------------------------------------------
 (4) _doEvlrn                                              7     1      6  334941
                                            112 BANK0      7     1      6
                       _APP_addEvent
                    _cbusSendOpcMyNN
 ---------------------------------------------------------------------------------
 (5) _APP_addEvent                                         8     1      7  324338
                                            104 BANK0      8     1      7
                           _addEvent
              _checkRemoveTableEntry
                   _rebuildHashtable
                            _writeEv
 ---------------------------------------------------------------------------------
 (4) _doAreq                                              19    15      4   32468
                                             59 BANK0     19    15      4
                        _cbusSendMsg
                            _doError
                            _ee_read
                          _findEvent
                              _getEv
 ---------------------------------------------------------------------------------
 (4) _QNNrespond                                           3     3      0    6149
                                             51 BANK0      3     3      0
                      _cbusSendMsgNN
                        _getParFlags
 ---------------------------------------------------------------------------------
 (5) _getParFlags                                          3     3      0      90
                                             17 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _parseCbusEvent                                       8     6      2   25930
                                             59 BANK0      8     6      2
                          _findEvent
                       _processEvent
 ---------------------------------------------------------------------------------
 (4) _processEvent                                        16    14      2   14908
                                             40 BANK0     15    13      2
                            ___lwdiv
                            ___lwmod
                             _getEVs
                         _pushAction
                _setExpeditedActions
                   _setNormalActions
 ---------------------------------------------------------------------------------
 (5) _setNormalActions                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _setExpeditedActions                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _pushAction                                           1     1      0     928
                                             28 BANK0      1     1      0
                               _push
 ---------------------------------------------------------------------------------
 (6) _push                                                11     8      3     844
                                             17 BANK0     11     8      3
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4    1808
                                             17 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4    1614
                                             17 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) _longFlicker                                          0     0      0     456
                            _tickGet
 ---------------------------------------------------------------------------------
 (2) _factoryReset                                         0     0      0  636964
                     _factoryResetEE
                  _factoryResetFlash
 ---------------------------------------------------------------------------------
 (2) _factoryResetFlash                                    2     2      0  623944
                     _clearAllEvents
           _factoryResetGlobalEvents
               _factoryResetGlobalNv
                    _flushFlashImage
                            _setType
 ---------------------------------------------------------------------------------
 (3) _setType                                              6     5      1  566064
                                            108 BANK0      6     5      1
                           _configIO
                      _defaultEvents
                         _defaultNVs
                   _initAnaloguePort
                     _writeFlashByte
 ---------------------------------------------------------------------------------
 (4) _initAnaloguePort                                     1     1      0      84
                                             17 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _defaultNVs                                           4     3      1   23722
                                             43 BANK0      4     3      1
                             ___wmul
                        _loadNvCache
                     _writeFlashByte
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    3232
                                             17 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _defaultEvents                                        4     3      1  514048
                                            104 BANK0      4     3      1
                           _addEvent
                        _clearEvents
 ---------------------------------------------------------------------------------
 (5) _clearEvents                                          1     1      0  357192
                                             93 BANK0      1     1      0
                  _deleteActionRange
               _deleteHappeningRange
 ---------------------------------------------------------------------------------
 (6) _deleteHappeningRange                                10     9      1  176128
                                             83 BANK0      9     8      1
              _checkRemoveTableEntry
                    _flushFlashImage
                     _readFlashBlock
                   _rebuildHashtable
                         _validStart
                            _writeEv
 ---------------------------------------------------------------------------------
 (6) _deleteActionRange                                   10     9      1  180938
                                             83 BANK0     10     9      1
              _checkRemoveTableEntry
                    _flushFlashImage
                             _getEVs
                   _rebuildHashtable
                         _validStart
                            _writeEv
 ---------------------------------------------------------------------------------
 (5) _addEvent                                            21    14      7  155778
                                             83 BANK0     21    14      7
                          _findEvent
                    _flushFlashImage
                     _readFlashBlock
                   _rebuildHashtable
                       _setFlashWord
                            _writeEv
                     _writeFlashByte
 ---------------------------------------------------------------------------------
 (2) _writeEv                                             18    16      2   86404
                                             65 BANK0     18    16      2
              _checkRemoveTableEntry
                     _readFlashBlock
                       _setFlashWord
                     _writeFlashByte
 ---------------------------------------------------------------------------------
 (3) _setFlashWord                                         7     2      5    6032
                                             39 BANK0      7     2      5
                    _writeFlashImage
 ---------------------------------------------------------------------------------
 (3) _checkRemoveTableEntry                                2     2      0   58616
                                             63 BANK0      2     2      0
                             _getEVs
                   _removeTableEntry
                         _validStart
 ---------------------------------------------------------------------------------
 (4) _removeTableEntry                                     7     7      0   46130
                                             56 BANK0      7     7      0
                    _flushFlashImage
                     _readFlashBlock
                   _rebuildHashtable
                         _validStart
                     _writeFlashByte
 ---------------------------------------------------------------------------------
 (4) _getEVs                                               7     7      0    8328
                                             33 BANK0      7     7      0
                     _readFlashBlock
                         _validStart
 ---------------------------------------------------------------------------------
 (6) _findEvent                                           13     9      4   10364
                                             46 BANK0     13     9      4
                              _getEN
                            _getHash
                              _getNN
 ---------------------------------------------------------------------------------
 (4) _configIO                                             8     8      0   11976
                                             28 BANK0      8     8      0
                            _ee_read
                           _ee_write
                   _setDigitalOutput
 ---------------------------------------------------------------------------------
 (4) _setDigitalOutput                                     5     4      1    2668
                                             23 BANK0      5     4      1
                            _ee_read (ARG)
                       _setOutputPin
 ---------------------------------------------------------------------------------
 (3) _setOutputPin                                         6     5      1    1812
                                             17 BANK0      6     5      1
 ---------------------------------------------------------------------------------
 (3) _factoryResetGlobalNv                                 0     0      0   19292
                        _loadNvCache
                     _writeFlashByte
 ---------------------------------------------------------------------------------
 (1) _loadNvCache                                          6     4      2    3990
                                             29 BANK0      6     4      2
                     _readFlashBlock
 ---------------------------------------------------------------------------------
 (3) _factoryResetGlobalEvents                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _clearAllEvents                                       6     6      0   38258
                                             56 BANK0      6     6      0
                    _flushFlashImage
                   _rebuildHashtable
                     _writeFlashByte
 ---------------------------------------------------------------------------------
 (2) _writeFlashByte                                       4     0      4   15302
                                             39 BANK0      4     0      4
                             ___wmul (ARG)
                    _flushFlashImage
                    _writeFlashImage
 ---------------------------------------------------------------------------------
 (3) _writeFlashImage                                     10     6      4    4978
                                             29 BANK0     10     6      4
                     _readFlashBlock
 ---------------------------------------------------------------------------------
 (2) _factoryResetEE                                       0     0      0   13020
                           _ee_write
                     _ee_write_short
 ---------------------------------------------------------------------------------
 (2) _cbusMsgReceived                                      3     1      2   26854
                                             65 BANK0      3     1      2
                         _canbusRecv
 ---------------------------------------------------------------------------------
 (3) _canbusRecv                                           6     4      2   26664
                                             59 BANK0      6     4      2
                       __PointBuffer
                _checkIncomingPacket
                             _memcpy
                 _processEnumeration
 ---------------------------------------------------------------------------------
 (4) _processEnumeration                                   7     7      0   22946
                                             52 BANK0      7     7      0
                    _cbusSendOpcMyNN
                            _doError
                        _setNewCanId
                            _tickGet
 ---------------------------------------------------------------------------------
 (4) _setNewCanId                                          3     3      0    6520
                                             23 BANK0      3     3      0
                           _ee_write
 ---------------------------------------------------------------------------------
 (5) _doError                                              1     1      0    6011
                                             51 BANK0      1     1      0
                      _cbusSendMsgNN
 ---------------------------------------------------------------------------------
 (2) _cbusSendOpcMyNN                                      3     1      2    9449
                                             49 BANK0      3     1      2
                    _cbusSendMsgMyNN
 ---------------------------------------------------------------------------------
 (3) _cbusSendMsgMyNN                                      2     1      1    4829
                                             47 BANK0      2     1      1
                        _cbusSendMsg
 ---------------------------------------------------------------------------------
 (4) _checkIncomingPacket                                  8     6      2    1102
                                             27 BANK0      8     6      2
                             _doEnum
                            _tickGet
 ---------------------------------------------------------------------------------
 (4) _doEnum                                               1     1      0      42
                                             17 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) __PointBuffer                                         5     3      2     132
                                             17 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (1) _FLiMSWCheck                                          4     4      0   51572
                                             65 BANK0      4     4      0
                         _SLiMRevert
                    _SaveNodeDetails
                  _requestNodeNumber
                         _setSLiMLed
                       _setStatusLed
                     _startFLiMFlash
                            _tickGet
 ---------------------------------------------------------------------------------
 (2) _startFLiMFlash                                       3     3      0     552
                                             28 BANK0      3     3      0
                        _doFLiMFlash
 ---------------------------------------------------------------------------------
 (2) _doFLiMFlash                                          1     1      0     456
                                             27 BANK0      1     1      0
                            _tickGet
 ---------------------------------------------------------------------------------
 (4) _setStatusLed                                         1     1      0      42
                                             17 BANK0      1     1      0
                         _setFLiMLed
                         _setSLiMLed
 ---------------------------------------------------------------------------------
 (5) _setSLiMLed                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _setFLiMLed                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _requestNodeNumber                                    9     9      0    7319
                                             56 BANK0      9     9      0
                      _cbusSendOpcNN
 ---------------------------------------------------------------------------------
 (5) _SaveNodeDetails                                      3     0      3   36070
                                             56 BANK0      3     0      3
                           _ee_write
                     _ee_write_short
                   _rebuildHashtable
 ---------------------------------------------------------------------------------
 (5) _rebuildHashtable                                    11    11      0   22542
                                             46 BANK0     10    10      0
                              _getEN
                              _getEv
                            _getHash
                              _getNN
                         _validStart
 ---------------------------------------------------------------------------------
 (5) _getNN                                               11     9      2    4032
                                             29 BANK0     11     9      2
                     _readFlashBlock
 ---------------------------------------------------------------------------------
 (6) _getHash                                              6     2      4     706
                                             40 BANK0      6     2      4
                              _getEN (ARG)
                              _getNN (ARG)
 ---------------------------------------------------------------------------------
 (6) _getEv                                                9     7      2    8714
                                             33 BANK0      9     7      2
                     _readFlashBlock
                         _validStart
 ---------------------------------------------------------------------------------
 (4) _validStart                                           4     4      0    3894
                                             29 BANK0      4     4      0
                     _readFlashBlock
 ---------------------------------------------------------------------------------
 (5) _getEN                                               10     8      2    3942
                                             29 BANK0     10     8      2
                     _readFlashBlock
 ---------------------------------------------------------------------------------
 (6) _readFlashBlock                                       9     7      2    3762
                                             22 BANK0      7     5      2
                    _flushFlashImage
 ---------------------------------------------------------------------------------
 (7) _flushFlashImage                                      0     0      0     276
                    _writeFlashShort
                _writeFlashWithErase
 ---------------------------------------------------------------------------------
 (8) _writeFlashWithErase                                  0     0      0     138
         _isSuitableTimeToWriteFlash
                    _writeFlashShort
 ---------------------------------------------------------------------------------
 (9) _writeFlashShort                                      5     5      0     138
                                             17 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (9) _isSuitableTimeToWriteFlash                           0     0      0       0
                    _isNoServoPulses
 ---------------------------------------------------------------------------------
 (10) _isNoServoPulses                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ee_write_short                                       6     2      4    6836
                                             23 BANK0      6     2      4
                           _ee_write
 ---------------------------------------------------------------------------------
 (4) _ee_write                                             4     1      3    6184
                                             19 BANK0      4     1      3
                            _ee_read
 ---------------------------------------------------------------------------------
 (5) _ee_read                                              2     0      2    1468
                                             17 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _SLiMRevert                                           0     0      0    7133
                      _cbusSendOpcNN
 ---------------------------------------------------------------------------------
 (2) _cbusSendOpcNN                                        5     1      4    7133
                                             51 BANK0      5     1      4
                      _cbusSendMsgNN
 ---------------------------------------------------------------------------------
 (6) _cbusSendMsgNN                                        4     1      3    5969
                                             47 BANK0      4     1      3
                        _cbusSendMsg
 ---------------------------------------------------------------------------------
 (7) _cbusSendMsg                                          4     3      1    4449
                                             43 BANK0      4     3      1
                            _canSend
 ---------------------------------------------------------------------------------
 (8) _canSend                                              3     1      2    3674
                                             40 BANK0      3     1      2
                              _canTX
 ---------------------------------------------------------------------------------
 (9) _canTX                                               12    11      1    3288
                                             28 BANK0     12    11      1
                             _memcpy
                            _tickGet
 ---------------------------------------------------------------------------------
 (1) _tickGet                                             10     6      4     456
                                             17 BANK0     10     6      4
 ---------------------------------------------------------------------------------
 (10) _memcpy                                             11     5      6    2060
                                             17 BANK0     11     5      6
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (21) _low_isr                                             7     7      0    4875
                                             10 BANK0      7     7      0
                _canInterruptHandler
                            _tickISR
 ---------------------------------------------------------------------------------
 (22) _tickISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (22) _canInterruptHandler                                 0     0      0    4875
                      _canFillRxFifo
                         _canTxError
                    _checkCANTimeout
                        _checkTxFifo
 ---------------------------------------------------------------------------------
 (23) _checkCANTimeout                                     4     4      0    1250
                                             30 COMRAM     4     4      0
                        _checkTxFifo
                          i1_tickGet
 ---------------------------------------------------------------------------------
 (23) _canTxError                                          0     0      0     932
                        _checkTxFifo
 ---------------------------------------------------------------------------------
 (23) _checkTxFifo                                         3     3      0     932
                                             27 COMRAM     3     3      0
                           i1_memcpy
                          i1_tickGet
 ---------------------------------------------------------------------------------
 (23) _canFillRxFifo                                      10    10      0    1761
                                              0 BANK0     10    10      0
                     i1__PointBuffer
              i1_checkIncomingPacket
                 i1_insertIntoRxFifo
 ---------------------------------------------------------------------------------
 (24) i1_insertIntoRxFifo                                  3     1      2     696
                                             27 COMRAM     3     1      2
                           i1_memcpy
 ---------------------------------------------------------------------------------
 (24) i1_memcpy                                           11     5      6     566
                                             16 COMRAM    11     5      6
 ---------------------------------------------------------------------------------
 (24) i1_checkIncomingPacket                               8     6      2     703
                                             26 COMRAM     8     6      2
                           i1_doEnum
                          i1_tickGet
 ---------------------------------------------------------------------------------
 (24) i1_tickGet                                          10     6      4     318
                                             16 COMRAM    10     6      4
 ---------------------------------------------------------------------------------
 (25) i1_doEnum                                            1     1      0      31
                                             16 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (24) i1__PointBuffer                                      5     3      2      86
                                             16 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 25
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (26) _high_isr                                            8     8      0     544
                                              8 COMRAM     8     8      0
         _timer1DoneInterruptHandler
         _timer3DoneInterruptHandler
 ---------------------------------------------------------------------------------
 (27) _timer3DoneInterruptHandler                          2     2      0     272
                                              6 COMRAM     2     2      0
                     i2_setOutputPin
 ---------------------------------------------------------------------------------
 (27) _timer1DoneInterruptHandler                          2     2      0     272
                                              6 COMRAM     2     2      0
                     i2_setOutputPin
 ---------------------------------------------------------------------------------
 (28) i2_setOutputPin                                      6     5      1     272
                                              0 COMRAM     6     5      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 28
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _FLiMSWCheck
     _SLiMRevert
       _cbusSendOpcNN
         _cbusSendMsgNN
           _cbusSendMsg
             _canSend
               _canTX
                 _memcpy
                 _tickGet
     _SaveNodeDetails
       _ee_write
         _ee_read
       _ee_write_short
         _ee_write
       _rebuildHashtable
         _getEN
           _readFlashBlock
             _flushFlashImage
               _writeFlashShort
               _writeFlashWithErase
                 _isSuitableTimeToWriteFlash
                   _isNoServoPulses
                 _writeFlashShort
         _getEv
           _readFlashBlock
           _validStart
             _readFlashBlock
         _getHash
           _getEN (ARG)
           _getNN (ARG)
             _readFlashBlock
         _getNN
         _validStart
     _requestNodeNumber
       _cbusSendOpcNN
     _setSLiMLed
     _setStatusLed
       _setFLiMLed
       _setSLiMLed
     _startFLiMFlash
       _doFLiMFlash
         _tickGet
     _tickGet
   ___lmul
   _checkCBUS
     _cbusMsgReceived
       _canbusRecv
         __PointBuffer
         _checkIncomingPacket
           _doEnum
           _tickGet
         _memcpy
         _processEnumeration
           _cbusSendOpcMyNN
             _cbusSendMsgMyNN
               _cbusSendMsg
           _doError
             _cbusSendMsgNN
           _setNewCanId
             _ee_write
           _tickGet
     _cbusSendOpcMyNN
     _factoryReset
       _factoryResetEE
         _ee_write
         _ee_write_short
       _factoryResetFlash
         _clearAllEvents
           _flushFlashImage
           _rebuildHashtable
           _writeFlashByte
             ___wmul (ARG)
             _flushFlashImage (ARG)
             _writeFlashImage (ARG)
               _readFlashBlock
         _factoryResetGlobalEvents
         _factoryResetGlobalNv
           _loadNvCache
             _readFlashBlock
           _writeFlashByte
         _flushFlashImage
         _setType
           _configIO
             _ee_read
             _ee_write
             _setDigitalOutput
               _ee_read (ARG)
               _setOutputPin (ARG)
           _defaultEvents
             _addEvent
               _findEvent
                 _getEN
                 _getHash
                 _getNN
               _flushFlashImage
               _readFlashBlock
               _rebuildHashtable
               _setFlashWord
                 _writeFlashImage
               _writeEv
                 _checkRemoveTableEntry
                   _getEVs
                     _readFlashBlock
                     _validStart
                   _removeTableEntry
                     _flushFlashImage
                     _readFlashBlock
                     _rebuildHashtable
                     _validStart
                     _writeFlashByte
                   _validStart
                 _readFlashBlock
                 _setFlashWord
                 _writeFlashByte
               _writeFlashByte
             _clearEvents
               _deleteActionRange
                 _checkRemoveTableEntry
                 _flushFlashImage
                 _getEVs
                 _rebuildHashtable
                 _validStart
                 _writeEv
               _deleteHappeningRange
                 _checkRemoveTableEntry
                 _flushFlashImage
                 _readFlashBlock
                 _rebuildHashtable
                 _validStart
                 _writeEv
           _defaultNVs
             ___wmul
             _loadNvCache
             _writeFlashByte
           _initAnaloguePort
           _writeFlashByte
     _longFlicker
       _tickGet
     _parseCBUSMsg
       _parseCbusEvent
         _findEvent
         _processEvent
           ___lwdiv
           ___lwmod
           _getEVs
           _pushAction
             _push
           _setExpeditedActions
           _setNormalActions
       _parseFLiMCmd
         _QNNrespond
           _cbusSendMsgNN
           _getParFlags
         _doAreq
           _cbusSendMsg
           _doError
           _ee_read
           _findEvent
           _getEv
         _doEnum
         _doError
         _doEvlrn
           _APP_addEvent
             _addEvent
             _checkRemoveTableEntry
             _rebuildHashtable
             _writeEv
           _cbusSendOpcMyNN
         _doEvuln
           _removeEvent
             _findEvent
             _removeTableEntry
         _doNenrd
           _cbusSendOpcMyNN
           _doError
           _evtIdxToTableIndex
           _getEN
           _getNN
           _validStart
         _doNerd
         _doNnclr
           _cbusSendOpcMyNN
           _clearAllEvents
         _doNnevn
           _cbusSendOpcMyNN
           _readFlashBlock
         _doNvrd
           _cbusSendMsgMyNN
           _doError
           _readFlashBlock
         _doNvset
           _actUponNVchange
             ___lbdiv
             ___lwdiv
             ___lwmod
             _setBounceState
             _setMultiState
             _setServoState
             _setType
             _startBounceOutput
             _startMultiOutput
             _startServoOutput
           _cbusSendOpcMyNN
           _doError
           _loadNvCache
           _validateNV
             ___lwdiv
             ___lwmod
           _writeFlashByte
         _doReqev
           _cbusSendOpcMyNN
           _findEvent
           _getEv
           _numEv
             _readFlashBlock
             _validStart
         _doReval
           _cbusSendOpcMyNN
           _evtIdxToTableIndex
           _getEv
           _numEv
           _validStart
         _doRqevn
           _cbusSendOpcMyNN
           _validStart
         _doRqmn
           _cbusSendMsg
         _doRqnp
           _cbusSendMsg
           _getParFlags
         _doRqnpn
           _cbusSendMsgNN
           _doError
           _readCPUType
         _doSnn
           _SaveNodeDetails
           _cbusSendOpcMyNN
           _setFLiMLed
         _ee_write
         _setNewCanId
         _thisNN
     _shortFlicker
       _tickGet
     _thisNN
   _checkFlashing
     _doFLiMFlash
     _tickGet
   _doTimedResponse
     _APP_doSOD
       _ee_read
       _sendInvertedProducedEvent
         _sendProducedEvent
           _cbusSendEvent
             _cbusSendEventWithData
               _canQueueRx
                 _insertIntoRxFifo
                   _memcpy
               _cbusSendMsgNN
           _ee_read
           _ee_write
           _getDefaultProducedEvent
           _getProducedEvent
             _getEN
             _getNN
     _cbusSendOpcMyNN
     _getEN
     _getNN
     _tableIndexToEvtIdx
     _validStart
   _initRomOps
   _initStatusLeds
   _initialise
     _actionQueueInit
     _addEvent
     _configIO
     _ee_read
     _ee_write
     _factoryResetEE
     _factoryResetFlash
     _getEv
     _getProducedEvent
     _initAnalogue
     _initInputScan
       _ee_read
       _readInput
     _initOutputs
     _initServos
       _ee_read
       _setOutputPosition
         _ee_read (ARG)
         _setDigitalOutput (ARG)
         _setOutputPin (ARG)
         _setServoPosition (ARG)
       _tickGet
     _initTicker
       _setclkMHz
     _initTimedResponse
     _loadNvCache
     _mioEventsInit
     _mioFlimInit
       _flimInit
         _cbusInit
           _canInit
             _ee_read
             _ee_write
             _tickGet
           _ee_read_short
             _ee_read
         _ee_read
         _eventsInit
           _rebuildHashtable
         _setStatusLed
       _mioNvInit
     _writeEv
     _writeFlashByte
   _inputScan
     _ee_write
     _readInput
     _sendProducedEvent
   _loadNvCache
   _pollAnalogue
     ___wmul
     _cbusSendOpcNN
     _sendProducedEvent
     _writeFlashByte
   _processActions
     ___lwdiv
     ___lwmod
     _completed
     _deleteActionQueue
       _delete
       _quantity
     _doSOD
     _doWait
       ___lmul
       _doneAction
         _popAction
           _pop
       _tickGet
     _doneAction
     _getAction
       _peekActionQueue
         _peek
         _quantity
     _needsStarting
     _peekActionQueue
     _setOutputState
       _setBounceState
       _setMultiState
       _setServoState
     _startOutput
       _startBounceOutput
       _startDigitalOutput
         _ee_write
         _sendInvertedProducedEvent
         _setOutputPin
       _startMultiOutput
       _startServoOutput
   _processOutputs
     _doneAction
     _sendProducedEvent
     _setOutputPin
   _sendProducedEvent
   _startServos
     _pollServos
       _bounceDown
         ___awdiv
           ___wmul (ARG)
         ___wmul
       _bounceUp
       _ee_write
       _initBounce
       _sendProducedEvent
       _tickGet
     _setupTimer1
       _setOutputPin
     _setupTimer3
       _setOutputPin
   _tickGet

 _low_isr (ROOT)
   _canInterruptHandler
     _canFillRxFifo
       i1__PointBuffer
       i1_checkIncomingPacket
         i1_doEnum
         i1_tickGet
       i1_insertIntoRxFifo
         i1_memcpy
     _canTxError
       _checkTxFifo
         i1_memcpy
         i1_tickGet
     _checkCANTimeout
       _checkTxFifo
       i1_tickGet
     _checkTxFifo
   _tickISR

 _high_isr (ROOT)
   _timer1DoneInterruptHandler
     i2_setOutputPin
   _timer3DoneInterruptHandler
     i2_setOutputPin

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             E40      0     280      68       17.5%
EEDATA             400      0       0       0        0.0%
BITBANK13          100      0       0      66        0.0%
BANK13             100      0       0      22        0.0%
BITBANK12          100      0       0      65        0.0%
BANK12             100      0       0      21        0.0%
BITBANK11          100      0       0      64        0.0%
BANK11             100      0       0      20        0.0%
BITBANK10          100      0       0      63        0.0%
BANK10             100      0       0      19        0.0%
BITBANK9           100      0       0      62        0.0%
BANK9              100      0       0      18        0.0%
BITBANK8           100      0       0      61        0.0%
BANK8              100      0       0      17        0.0%
BITBANK7           100      0       0      60        0.0%
BANK7              100      0       0      16        0.0%
BITBANK6           100      0       0      59        0.0%
BANK6              100      0     100      15      100.0%
BITBANK5           100      0       0      58        0.0%
BANK5              100      0     100      14      100.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0      80      13       50.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0      C8      11       78.1%
BITBANK2           100      0       0       8        0.0%
BANK2              100     1D      E9       9       91.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      6      F8       7       96.9%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     86      8E       5       88.8%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     22      4E       1       83.0%
BITBANK14           41      0       0      67        0.0%
BANK14              41      0       0      23        0.0%
BITBIGSFRlllllh     2B      0       0      55        0.0%
BITBIGSFRllllhh     2A      0       0      41        0.0%
BITBIGSFRhhhlh      19      0       0      26        0.0%
BITBIGSFRllllhl     16      0       0      48        0.0%
BITBIGSFRllllhl     10      0       0      49        0.0%
BITBIGSFRllllhl      F      0       0      50        0.0%
BITBIGSFRllllhl      F      0       0      51        0.0%
BITBIGSFRllllhl      F      0       0      52        0.0%
BITBIGSFRllllhl      F      0       0      53        0.0%
BITBIGSFRllllhl      F      0       0      54        0.0%
BITBIGSFRlllhhl      D      0       0      39        0.0%
BITBIGSFRllllhh      A      0       0      46        0.0%
BITBIGSFRllllhh      A      0       0      44        0.0%
BITBIGSFRllllhh      A      0       0      42        0.0%
BITBIGSFRlhhhhh      8      0       0      29        0.0%
BITBIGSFRlhhhhl      8      0       0      32        0.0%
BITBIGSFRhhll        8      0       0      28        0.0%
BITBIGSFRlhlh        6      0       0      35        0.0%
BITBIGSFRllh         6      0       0      37        0.0%
BITBIGSFRlhll        6      0       0      36        0.0%
BITBIGSFRlllhhh      5      0       0      38        0.0%
BITBIGSFRlhhhhh      5      0       0      31        0.0%
BITBIGSFRhhhhh       4      0       0      24        0.0%
BITBIGSFRhhhll       4      0       0      27        0.0%
BITBIGSFRlhhhhh      3      0       0      30        0.0%
BITBIGSFRllllhh      2      0       0      45        0.0%
BITBIGSFRllllhh      2      0       0      43        0.0%
BITBIGSFRllllhh      2      0       0      47        0.0%
BITBIGSFRlllhhl      2      0       0      40        0.0%
BITBIGSFRhhhhl       2      0       0      25        0.0%
BITBIGSFRllllll      2      0       0      56        0.0%
BITBIGSFRlhhhl       1      0       0      33        0.0%
BITBIGSFRlhhl        1      0       0      34        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     605      57        0.0%
DATA                 0      0     885       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Sat Apr 09 19:17:48 2022

                   findEvent@tableIndex 009A                      cbusMsgReceived@msg 00A1  
                        _txTimeoutCount 01DC                          doNvset@NVindex 00E0  
                       parseCBUSMsg@msg 00E4                          doNvset@NVvalue 00DA  
                   findEvent@nodeNumber 008E                          _startFLiMFlash A474  
                        _completed$2368 0075                           ?_APP_addEvent 00C8  
                                    _NV 00EC                            ___awdiv@sign 007C  
                                    _io 00E7                                      bsr 000FE0  
                   ___wmul@multiplicand 0073          _sendInvertedProducedEvent$1832 00BA  
       __end_of_getDefaultProducedEvent A722                        ?_flushFlashImage 002D  
                           _startServos 7BDA            processEvent@nextSimultaneous 0090  
                                   l216 4EE8               __end_of_deleteActionRange 8384  
                                   l316 4582                                     l236 5764  
                           _startOutput 96EE                                     l732 5FFA  
                                   l742 96CC                                     l753 549A  
                                   l594 8DD4                                     l757 5490  
                                   l778 55E4                                     l962 5178  
                                   l947 856E                                     l788 5582  
                            _QNNrespond 98F6                      _enumerationResults 0254  
                    processEvent@action 0095               __end_of_deleteActionQueue 9B22  
                cbusMsgReceived@cbusNum 00A3                   setFlashWord@flashAddr 0087  
                 setFlashWord@flashData 008A                                     _evs 0240  
                                   _pop 87EC                          cbusSendMsg@msg 008B  
                        doRqnp@paramptr 0095                                     prod 000FF3  
                                   wreg 000FE8            tableIndexToEvtIdx@tableIndex 0071  
  sendInvertedProducedEvent@can_send_on 00B7                    _moduleNvDefs_absaddr 00FF80  
                       ?i1__PointBuffer 003D                              _SLiMRevert A5CA  
                        _larbRetryCount 000D                                    l1100 88F0  
                                  l1118 8C28                                    l1127 9432  
                                  l2141 669A                                    l2151 677C  
                                  l2153 6786                                    l2145 673E  
                                  l1370 A688                                    l2138 6670  
                                  l2147 6744                                    l2502 9A6A  
                                  l1288 1B42                                    l1570 5F14  
                                  l1619 782A                                    l3139 99E2  
                                  l3149 9DD8                                    l2373 7042  
                                  l2462 7B9C                                    l2374 6F70  
                                  l2606 9E86                                    l1567 5E42  
                                  l1592 62BA                                    l2376 6FE8  
                                  l2377 6FF0                                    l2298 8120  
                                  l2491 A540                                    l1915 708E  
                                  l2573 7426                                    l1757 7F2E  
                                  l2568 73EC                                    l2498 9A60  
                                  l1699 91EA                                    _BIE0 000E7E  
                    doEvuln@eventNumber 00A6                                    ?_pop 0071  
                   _enumerationRequired 0009                        setOutputState@io 0078  
                                  _LATA 000F89                                    _LATB 000F8A  
                                  _LATC 000F8B                                    _IPR5 000F78  
                     doEvuln@nodeNumber 00A4                  cbusSendMsgNN@eventNode 008F  
                        configIO@action 0082                                    _TMR1 000FCE  
                                  _TMR3 000FB2                  deleteHappeningRange@pa 00BA  
                            _NV_changed 01D5                       _FCUparams_absaddr 000838  
                                  _WPUB 000F5B                             APP_doSOD@io 00D2  
                     setOutputPin@state 0071                          i2_setOutputPin 64CE  
                           _outputState 0150                            ?_readCPUType 0071  
        getDefaultProducedEvent@paction 002D                    _actUponNVchange$2139 00D6  
                                  _main 47B2                                    _peek 8BD8  
                                  fsr1h 000FE2                                    fsr2h 000FDA  
                                  indf1 000FE7                        ??_writeFlashByte 008B  
                                  indf2 000FDF                                    fsr1l 000FE1  
                                  fsr2l 000FD9                                    _push 797E  
                   setMultiState@action 0071                                    btemp 004F  
                     ?_removeTableEntry 002D                            ?_mioFlimInit 002D  
                                  pop@q 0071                                    prodh 000FF4  
                                  prodl 000FF3                                    start 089E  
                          ?_loadNvCache 007D                      bounceDown@reversed 0086  
                deleteActionQueue@index 0078                           setupTimer1@io 007C  
                   _setExpeditedActions A712                           setupTimer3@io 007C  
                      ?_peekActionQueue 002D              __end_of_startDigitalOutput 50AC  
                        _setBounceState 6CFE                      ??_removeTableEntry 0098  
                __end_of_startFLiMFlash A498                   _enumerationInProgress 0007  
                       getEN@tableIndex 0086                            ___param_bank 000000  
                      doAreq@tableIndex 00AA                          ??_APP_addEvent 00CF  
                      doAreq@nodeNumber 009B                   __end_of_ee_read_short 9A3A  
                    canbusRecv@msgFound 009E                   __end_of_defaultEvents 6170  
                           completed@io 0076                                   ??_pop 0073  
                                 l20011 A2C8                                   l20015 A2D0  
                                 _B0CON 000E80                                   l20113 7832  
                                 l20201 32C6                                   l20131 78A2  
                                 l20027 A2E0                                   l20211 32F2  
                                 l21003 274C                                   l21011 27DA  
                                 l20125 7892                                   l20141 819E  
                                 l20221 3366                                   l20213 32F8  
                                 l20205 32D2                                   l20301 7C9C  
                                 l20045 8F5C                                   l11421 9E78  
                                 l21021 2868                                   l21005 2760  
                                 l20231 33F6                                   l20215 330C  
                                 l20207 32D8                                   l21031 28FC  
                                 l11271 981A                                   l21103 57A6  
                                 l21111 5810                                   l10703 8CCC  
                                 _B1CON 000E90                                   l20161 822C  
                                 l20225 3386                                   l20217 3330  
                                 l20209 32DE                                   l20241 349E  
                                 l20313 7CEE                                   l20305 7CA4  
                                 l20049 8F68                                   l20057 8FA0  
                                 l21121 44A0                                   l21033 2910  
                                 l21105 57B0                                   l20147 81CE  
                                 l20251 34B2                                   l20235 3434  
                                 l20227 338E                                   l20219 3354  
                                 l20171 304E                                   l21051 29BC  
                                 l21019 2850                                   l11267 9806  
                                 l21115 5830                                   l10707 8CDA  
                                 l20261 34E0                                   l20245 34A8  
                                 l20253 34C6                                   l20229 33F2  
                                 l20181 30D2                                   l20501 3E36  
                                 l21221 3A68                                   l21205 3A40  
                                 l21125 44A8                                   l21053 29CC  
                                 l21109 580C                                   l20263 34E6  
                                 l20271 351C                                   l20239 343A  
                                 l20183 3158                                   l20175 3060  
                                 l20191 325A                                   l20407 9BAA  
                                 l20511 3E48                                   l20319 7D40  
                                 l20335 5A46                                   l21303 3CE4  
                                 l21311 3D38                                   l21215 3A64  
                                 l21151 45DA                                   l20423 86D8  
                                 _B2CON 000EA0                                   l20265 34F4  
                                 l20185 31DE                                   l20177 3066  
                                 l20193 3294                                   l20521 3E84  
                                 l20513 3E58                                   l20505 3E3E  
                                 l20353 5B8A                                   l21305 3D30  
                                 l21233 3B06                                   l21161 465C  
                                 l21049 29B8                                   l20441 98BE  
                                 l20433 98A6                                   l10681 8C84  
                                 l10841 4B16                                   l20601 0F58  
                                 l20259 34DA                                   l20187 3254  
                                 l20179 306C                                   l20531 3F00  
                                 l20355 5BD8                                   l20339 5A7A  
                                 l21251 3B2E                                   l21315 3D56  
                                 l21171 46DA                                   l21139 4538  
                                 l21059 29DA                                   l20451 96F2  
                                 l21091 571A                                   l21075 55F4  
                                 l10675 8C74                                   l20611 104C  
                                 l20269 34FA                                   l20525 3EA4  
                                 l21253 3B3C                                   l21237 3B12  
                                 l21309 3D34                                   l21181 476E  
                                 l20437 98B2                                   l21501 5884  
                                 l21085 56A6                                   l10861 4C4E  
                                 l10853 4BB6                                   l20613 105E  
                                 l20605 0FB2                                   l21415 6754  
                                 l21407 6738                                   l20199 32B2  
                                 l20551 3FE8                                   l20543 3FAE  
                                 l20535 3F7C                                   l20527 3EAE  
                                 l20519 3E74                                   l21343 3DA0  
                                 l21271 3BE8                                   l21247 3B26  
                                 l21175 4710                                   l21159 464C  
                                 l21183 478C                                   l20447 98CA  
                                 l20463 9716                                   l20455 96FE  
                                 l21095 5740                                   l10687 8C9A  
                                 l20711 15B8                                   _B3CON 000EB0  
                                 l20561 4088                                   l20529 3ECA  
                                 l20537 3F90                                   l21265 3BAE  
                                 l21169 46C8                                   l21177 4722  
                                 l21185 479C                                   l21513 58B0  
                                 l10689 8CA2                                   l10865 4C76  
                                 l20633 1176                                   l20625 110A  
                                 l20609 101A                                   l21435 67DE  
                                 l21611 734C                                   l20571 40AC  
                                 l20555 402A                                   l20547 3FB8  
                                 l20539 3F9A                                   l10971 6EC4  
                                 l10963 6E50                                   l21339 3D98  
                                 l21283 3C60                                   l21259 3B74  
                                 l21187 47AC                                   l14323 8810  
                                 l20459 970A                                   l21507 589A  
                                 l10699 8CC2                                   l10867 4C8E  
                                 l10891 4DA2                                   l20627 112C  
                                 l20619 1096                                   l20643 1206  
                                 l20389 A52A                                   l21373 8DBE  
                                 l21365 8D9C                                   l21613 738A  
                                 l21621 73D0                                   l20573 40C4  
                                 l20565 40A4                                   l20549 3FD0  
                                 l20581 40EC                                   l20477 3DCE  
                                 l21605 8AB2                                   l21349 3DAC  
                                 l21277 3C24                                   l20469 9722  
                                 l10893 4DC2                                   l20813 1C70  
                                 l20741 1718                                   l20637 11B2  
                                 l21461 7C40                                   l21701 49B0  
                                 l21391 6684                                   l21439 67E4  
                                 l21623 73E2                                   l21615 7390  
                                 l20583 4138                                   l20495 3E1E  
                                 l21607 8AC0                                   l10967 6E8A  
                                 l21295 3CCC                                   l21527 5954  
                                 l10879 4D24                                   l20831 1DA6  
                                 l20751 1802                                   l20743 1734  
                                 l20727 1688                                   l20663 131E  
                                 l20655 12B2                                   _B4CON 000EC0  
                                 l21369 8DB0                                   l20577 40DC  
                                 l10977 6EFE                                   l21289 3C96  
                                 l14329 887E                                   l21529 595C  
                                 l21561 5A24                                   l21481 584C  
                                 l20841 1E44                                   l20825 1D52  
                                 l20817 1CDE                                   l20809 1C02  
                                 l20761 18E4                                   l20657 12D4  
                                 l20649 123E                                   l20673 13A6  
                                 l21449 7BEA                                   l21713 4AB6  
                                 l21379 8DD8                                   l21635 7428  
                                 l21627 73EE                                   l21571 8A3C  
                                 l10979 6F30                                   l21555 5A06  
                                 l20771 199A                                   l20755 186A  
                                 l20747 179A                                   l20691 14E8  
                                 l20683 146C                                   l20667 135A  
                                 l21707 4A12                                   l21715 4ABA  
                                 l21629 73F4                                   l16205 88F4  
                                 l16141 8D06                                   l16133 8CE8  
                                 l20781 1A22                                   l20685 14A4  
                                 l20829 1D6E                                   l20935 A486  
                                 l21399 66EA                                   l21639 7430  
                                 l21559 5A22                                   l21495 586E  
                                 l20791 1AD8                                   l20759 18D2  
                                 l20839 1E2A                                   _B5CON 000ED0  
                                 l21577 8A46                                   l16137 8CEC  
                                 l16153 8D42                                   l21489 5858  
                                 l20777 19E4                                   l20769 1978  
                                 l20697 150E                                   l20689 14CA  
                                 l18011 4178                                   l21579 8A5A  
                                 l21683 48E8                                   l21675 4830  
                                 l18101 6364                                   l20797 1B22  
                                 l20789 1AB6                                   l21693 494C  
                                 l18103 63A0                                   l18031 41D8  
                                 l20991 26A0                                   l16191 88A4  
                                 l16183 8886                                   l18113 645C  
                                 l18025 41CE                                   l18201 94A0  
                                 l20993 26B8                                   l18107 63E0  
                                 l18035 41DE                                   l18131 82E4  
                                 l16187 888A                                   l18221 9F92  
                                 l18109 641C                                   l18117 6498  
                                 l18061 43B4                                   l15485 9632  
                                 l18047 42D2                                   l14783 8BFC  
                                 l15479 9602                                   l18305 8010  
                                 l18241 89F4                                   l18233 89C6  
                                 l18153 835E                                   l18145 8304  
                                 l18161 8372                                   l19201 8930  
                                 l18209 94B6                                   l18315 9E32  
                                 l18251 8A30                                   l18059 43B2  
                                 l19203 8950                                   l18261 9A42  
                                 l17613 A228                                   l17701 83E0  
                                 l18069 43C4                                   l18341 5C4C  
                                 l18501 1E90                                   l18407 9EBA  
                                 l17623 705E                                   l19151 8BD4  
                                 l18079 448C                                   l18335 5C44  
                                 l18175 8238                                   l18511 2296  
                                 l18503 1F0A                                   l19215 899E  
                                 l17553 A634                                   l17561 7B2A  
                                 l17721 6968                                   l18097 6324  
                                 l18441 2B06                                   l18433 2ADA  
                                 l18425 2A6E                                   l18185 82CA  
                                 l18513 2310                                   l18505 1F84  
                                 l19321 5402                                   l19305 5388  
                                 l19241 9996                                   l17635 709C  
                                 l18291 7F80                                   l18443 2B34  
                                 l18507 2076                                   l19403 55AA  
                                 l19235 9976                                   l17813 9782  
                                 l17573 7B72                                   l17565 7B38  
                                 l17629 706E                                   l17733 6984  
                                 l19501 71C4                                   l18453 2C1A  
                                 l18445 2B6A                                   l18429 2AAE  
                                 l18357 5D54                                   l18533 60F0  
                                 l18525 5FD0                                   l18509 21A4  
                                 l18517 243E                                   l19333 5442  
                                 l19325 5428                                   l19341 5456  
                                 l17647 70EA                                   l19431 6894  
                                 l18463 2D06                                   l18455 2C56  
                                 l18527 6022                                   l18519 246A  
                                 l19351 54A4                                   l19319 53C8  
                                 l18711 6AD8                                   l18703 93C4  
                                 l18551 7F0A                                   l15975 A28E  
                                 l19087 5F28                                   l15967 9B02  
                                 l17489 8E14                                   l17665 8780  
                                 l18297 7FC8                                   l18289 7F7C  
                                 l18473 2DF2                                   l18465 2D42  
                                 l17841 7710                                   l17905 74F2  
                                 l17913 7530                                   l18385 5DE6  
                                 l18369 5DBC                                   l18529 604A  
                                 l18537 6142                                   l18801 9DAE  
                                 l19361 54CE                                   l19337 544E  
                                 l19329 5432                                   l18713 6B0A  
                                 l18705 93D4                                   l19273 9B6A  
                                 l19257 9B32                                   l17755 69C0  
                                 l17739 6988                                   l19515 7216  
                                 l19451 691E                                   l19419 6854  
                                 l18299 7FD4                                   l18491 2F74  
                                 l17835 770C                                   l17907 7524  
                                 l18379 5DCE                                   l18803 9DB6  
                                 l18723 6BBA                                   l18643 6C32  
                                 l18731 85C0                                   l18563 7F72  
                                 l18547 7EF6                                   l17597 7BBE  
                                 l17781 6A90                                   l19509 71EC  
                                 l19437 68DE                                   l18477 2E2E  
                                 l17829 7708                                   l18629 7EA4  
                                 l18573 79E2                                   l19381 5540  
                                 l19621 924C                                   l18717 6B62  
                                 l18709 6AA6                                   l18645 6C64  
                                 l18653 6CEC                                   l18901 84FA  
                                 l17951 61DE                                   l19519 724A  
                                 l19447 6918                                   l19439 68E0  
                                 l17695 83A2                                   l18495 2FD6  
                                 l18487 2F10                                   l18479 2E60  
                                 l17863 7796                                   l18639 6BDC  
                                 l18663 7662                                   l18591 9590  
                                 l17793 9752                                   l17777 6A44  
                                 l17769 6A1E                                   l19481 91A6  
                                 l19473 918E                                   l19465 694E  
                                 l17857 7782                                   l17929 9E02  
                                 l18809 9DCE                                   l19801 700E  
                                 l19609 920E                                   l18649 6CBA  
                                 l18665 7672                                   l18657 7618  
                                 l19289 938E                                   l19529 A0CE  
                                 l17883 9CE8                                   l17891 9D08  
                                 l17971 6252                                   l19483 91AA  
                                 l19475 9192                                   l19491 91BA  
                                 l17867 779A                                   l18579 7A50  
                                 l18819 A1B8                                   l19395 5592  
                                 l19379 5506                                   l19539 9C52  
                                 l18755 9EF6                                   l18771 9F1A  
                                 l18683 6D58                                   l18659 7630  
                                 l18931 50F4                                   l18915 8540  
                                 l19715 8442                                   l19651 8156  
                                 l19635 8106                                   l18835 78F0  
                                 l19485 91AE                                   l19477 919A  
                                 l19469 695A                                   l18781 99B0  
                                 l19389 5574                                   l19813 7038  
                                 l19805 701C                                   l18685 6D8A  
                                 l18693 6E12                                   l18669 76A0  
                                 l19741 804E                                   l18853 797A  
                                 l18845 7948                                   l18837 790C  
                                 l17991 62DE                                   l17983 62B6  
                                 l19487 91B2                                   l19479 91A2  
                                 l18783 99B8                                   l19399 55A0  
                                 l19559 953C                                   l18767 9F12  
                                 l18759 9EFC                                   l18679 6D02  
                                 l19647 8142                                   l19751 808C  
                                 l17897 74A4                                   l18793 99D8  
                                 l19809 702C                                   l18689 6DE0  
                                 l18697 9396                                   l18953 51B0  
                                 l18945 516C                                   l19729 84C6  
                                 l19577 A144                                   l19681 75EC  
                                 l19673 7582                                   l19905 35F4  
                                 l17979 62AA                                   l17995 6310  
                                 l18867 9C06                                   l19595 A188  
                                 l18699 93AA                                   l18963 521C  
                                 l18939 513C                                   l19659 816E  
                                 l19835 9130                                   l19915 37CE  
                                 l17989 62D0                                   l19589 A5AC  
                                 l18981 52BE                                   l18957 51E6  
                                 l18949 517A                                   l19749 807A  
                                 l19765 80C2                                   l19925 399A  
                                 l19933 39EE                                   l18975 5288  
                                 l19759 80AC                                   l19687 75FA  
                                 l19679 75B2                                   l19951 4E98  
                                 l19919 3820                                   l19697 9BD0  
                                 l18969 5252                                   l19857 9004  
                                 l19689 760C                                   l19929 39EA  
                                 l18987 52F4                                   l18995 532A  
                                 l19963 4F14                                   l19981 4FC2  
                                 l19973 4F98                                   l19977 4FA6  
                                 l19995 506C                                   l19987 4FF8  
                                 ?_main 002D                            ?_initOutputs 002D  
                                 ?_peek 0071                     processEnumeration@i 009A  
                       __end_of___awdiv 8CE4                         __end_of___lbdiv 9F1E  
                                 _EEADR 000F74                                   ?_push 0071  
                                 _BSEL0 000E7D                                   u11124 6E7E  
                                 u11125 6E7A                                   u11134 6EB8  
                                 u11135 6EB4                                   u11144 6EF2  
                                 _T0CON 000FD5                                   u11145 6EEE  
                                 u10620 8CA6                         ___awdiv@divisor 0079  
                                 u22100 41D4                                   u10900 4D10  
                                 u11605 9E92                                   u11606 9E94  
                                 u10830 4B10                                   u10840 4B12  
                                 u22050 631C                                   u22204 6358  
                                 u22140 43BA                                   u22205 6354  
                                 u22214 6392                                   u23110 7E94  
                                 u23030 7F6A                                   u22215 638E  
                                 u23015 7F18                                   u21530 7054  
                                 u22234 63D4                                   u23130 7EBE  
                                 u22235 63D0                                   u22244 640E  
                                 u22245 640A                                   u21390 A684  
                                 u21550 7092                                   u21630 83D4  
                                 u23230 9F00                                   u23070 958C  
                                 u21480 7B6A                                   u24040 6850  
                                 u22264 6450                                   u22265 644C  
                                 u22450 9F6A                                   u22274 648A  
                                 u21810 777A                                   u22275 6486  
                                 u21740 6A98                                   u22620 5C40  
                                 u23260 99BC                                   u24070 68D8  
                                 u22550 7F8A                                   u22470 89F0  
                                 u23334 78E4                                   u23335 78E0  
                                 u22560 7F8C                                   u22800 2CCC  
                                 u23440 853C                                   u23344 7900  
                                 u26000 15A8                                   u22465 9F80  
                                 u23345 78FC                                   u24090 68F8  
                                 u23290 9DBA                                   u22580 7FBC  
                                 u22660 5DC4                                   u25300 5B26  
                                 u24165 7168                                   u22645 5D1A  
                                 u22590 7FBE                                   u22814 2CFA  
                                 u22750 2BE0                                   u21790 7704  
                                 u22646 5D1E                                   u24414 75A6  
                                 u26030 1676                                   u21935 61B4  
                                 u22815 2CF6                                   u24415 75A0  
                                 u21960 61EE                                   u24184 71A2  
                                 u22824 2D34                                   u25240 7CEA  
                                 u26040 1678                                   u24185 719E  
                                 u22825 2D30                                   u23625 5F50  
                                 u25170 A048                                   u22914 2F02  
                                 u22850 2DB8                                   u24450 9BC8  
                                 u25250 7CEC                                   u22915 2EFE  
                                 u23491 515A                                   u21980 625C  
                                 u22764 2C0E                                   u23740 9B3C  
                                 u27100 4626                                   u24700 3640  
                                 u26220 1BF2                                   u26140 1A04  
                                 u22765 2C0A                                   u23581 5312  
                                 u23805 9340                                   u21990 625E  
                                 u22934 2F66                                   u22774 2C48  
                                 u24470 843A                                   u23750 9B3E  
                                 u25510 3EC6                                   u27110 4628  
                                 u24710 3642                                   u26310 1D3E  
                                 u26230 1BF4                                   u23655 8B84  
                                 u22935 2F62                                   u22775 2C44  
                                 u22864 2DE6                                   u23680 892C  
                                 u25440 3E44                                   u26320 1D40  
                                 u22865 2DE2                                   u22954 2FC6  
                                 u22890 2EB0                                   u22874 2E20  
                                 u23770 9B52                                   u24810 4EE4  
                                 u26250 1C60                                   u22955 2FC2  
                                 u22875 2E1C                                   u25611 4026  
                                 u25188 A04C                                   u27220 3A88  
                                 u27060 45D6                                   u24900 4FF4  
                                 u24820 4EE6                                   u26340 1E18  
                                 u26260 1C62                                   u22974 302C  
                                 u23790 9B5E                                   u27070 45D8  
                                 u24910 4FF6                                   u22975 3028  
                                 u24584 6FBA                                   u25640 4084  
                                 u25480 3E9E                                   u27320 3C3A  
                                 u24760 4E3A                                   u24680 35D2  
                                 u26280 1CCE                                   u26360 8F4A  
                                 u24585 6FB6                                   u25490 3EA0  
                                 u27250 3B1A                                   u27170 475C  
                                 u24770 4E3C                                   u24690 35F4  
                                 u26290 1CD0                                   u26370 8F4C  
                       __end_of___lwdiv 99EC                                   u27500 67C8  
                                 u27180 475E                                   u24780 4EB2  
                                 u25820 11F4                                   u26380 8ED4  
                                 u27510 67D6                                   u27430 66DE  
                                 u24950 9D94                                   u26630 2690  
                                 u26550 24C4                                   u16870 8BF8  
                                 u24790 4EB4                                   u25830 11F6  
                                 u26390 8ED6                                   u27520 67D8  
                                 u25680 40C0                                   u24960 9D96  
                                 u26640 2692                                   u27600 7C7C  
                                 u27450 672E                                   u26730 2840  
                                 u18730 8D02                                   u25691 40D8  
                                 u26820 2A2A                                   u26740 2842  
                                 u26580 24E8                                   u18820 88EC  
                                 u27620 5846                                   u25940 145A  
                                 u25950 145C                                   u27800 738A  
                                 u18760 8D3E                                   u25960 1494  
                                 u27560 7C28                                   u26930 57FC  
                                 u25970 1496                    __end_of_factoryReset A6DC  
                                 u18780 88A0                                   u26940 57FE  
                                 u26860 56E0                                   u27900 4934  
                                 u27750 5A2A                                   u26870 56E2  
                                 u25990 15A6                                   u26695 276C  
                                 u27920 4998                         __end_of_canInit 5FB8  
                                 u27930 49F6                       _initTimedResponse A700  
                       __end_of___lwmod 9DE2                              i1memcpy@d1 003D  
                     rebuildHashtable@a 0092                         __end_of_canSend A566  
                            i1memcpy@s1 003F                                   i2l649 97D2  
                       ___awdiv@counter 007B                                   _MSEL0 000E79  
                                 _MSEL1 000E7A                                   _MSEL2 000E7B  
                                 _MSEL3 000E7C                         doNvset@oldValue 00DF  
      __end_of_factoryResetGlobalEvents A72C                                   _TMR0H 000FD7  
                                 _TMR0L 000FD6                                   _PORTA 000F80  
                                 _PORTB 000F81                                   _PORTC 000F82  
                      i2setOutputPin@io 0032                                   _TRISA 000F92  
                                 _TRISB 000F93                                   _TRISC 000F94  
                       __end_of_doError A4D6                         __end_of_doEvlrn 925C  
                       __end_of_doNenrd 957C                    ?_setExpeditedActions 002D  
                       __end_of_doEvuln A610                           processEvent@e 0094  
                       __end_of_doNnclr A19C                         __end_of_ee_read A54A  
                       __end_of_doNnevn 9C90      sendInvertedProducedEvent@happening 00B9  
                       __end_of_doReqev 8184                         __end_of_doReval 80D6  
                          ?_FLiMSWCheck 002D                         __end_of_doRqevn A16C  
                       __end_of_doNvset 84CE                         __end_of_doRqnpn 7614  
                     ??_doTimedResponse 00D3                         __end_of_getHash A512  
                   ___lmul@multiplicand 0075                      _canTransmitTimeout 01B4  
                    ?_initTimedResponse 002D                       doAreq@eventNumber 009D  
                       __end_of_configs 0F41                                   _canID 002C  
                                 _doSOD A6B4                                   _canTX 6170  
           ??_sendInvertedProducedEvent 00B9                                   _devId 3FFFFE  
                                 _getEN 903E                                   _doSnn 9636  
                                 _getNN 8750                                   _getEv 7044  
                   _checkIncomingPacket 7150                    _enumerationStartTime 01B0  
             parseCbusEvent@eventNumber 009F                  __end_ofi2_setOutputPin 666E  
                      cbusSendEvent@msg 00A3                                   _numEv 8918  
                      cbusSendOpcNN@opc 0093                        cbusSendOpcNN@msg 0096  
                     ??_writeFlashImage 0081                                   _speed 0100  
                     startOutput@action 00C5                         __end_of_tickISR A626  
                      cbusSendMsgNN@msg 0091                   _lastTimedResponseTime 01BC  
                      _expeditedReadIdx 01E0                         __end_of_tickGet 979E  
                                 peek@q 0071                       ??_writeFlashShort 0071  
                       __end_of_low_isr 089E                         __end_of_setType 7EC6  
                                 tablat 000FF5                     ??_initTimedResponse 0071  
                      __end_ofi1_doEnum A670            cbusSendEventWithData@datalen 0099  
          cbusSendEventWithData@cbusNum 009D                      _canFillRxFifo$3500 0065  
                                 plusw2 000FDB                                   push@a 0073  
                                 push@q 0071                                   ttemp5 0050  
                                 ttemp6 0053                                   ttemp7 0057  
                          ?_longFlicker 002D                        _setServoPosition A394  
                                 status 000FD8            __end_of_factoryResetGlobalNv 8B4E  
                                 wtemp8 0050                  __end_of_setBounceState 6E24  
                      __end_ofi1_memcpy 9D5E             __end_of_writeFlashWithErase A0A8  
                       ___lbdiv@divisor 0071                           ?_initAnalogue 002D  
                       __end_of_writeEv 449A            cbusSendEventWithData@onEvent 0097  
                       ___lbdiv@counter 0073                            bounceDown@io 0089  
                     ?_startMultiOutput 0071                        bounceUp@reversed 0078  
                   setStatusLed@FLiMLED 0071                       ?_startServoOutput 0071  
          processEnumeration@enumResult 0098                       doRqnp@copyCounter 0098  
                       __initialization 7A54                         ?_startFLiMFlash 002D  
                    ??_startMultiOutput 0072                    ?_checkIncomingPacket 007B  
                    ??_startServoOutput 0072                            __end_of_main 4AC0  
                          __end_of_peek 8C60                            __end_of_push 7A54  
             __end_of_initTimedResponse A706                   __end_of_cbusSendEvent A36A  
                 __end_of_cbusSendOpcNN A42C                   __end_of_cbusSendMsgNN 9EE2  
                          ?_setNewCanId 002D                                  ??_main 02E0  
                                ??_peek 0074                                  ??_push 0074  
                           ?_QNNrespond 002D                       __end_of_APP_doSOD 4166  
                         __activetblptr 000003                   ??_setExpeditedActions 0071  
                     _pollsPerStepSpeed 0274                       __end_of_FCUparams 0840  
                       _actionQueueInit A10C                   __end_of_setMultiState 6BD8  
                           ?_SLiMRevert 002D                                  ?_doSOD 002D  
                                ?_canTX 007C                   __end_of_setServoState 6CFE  
                                ?_getEN 007D                                  ?_doSnn 009B  
                                ?_getNN 007D                                  ?_getEv 0081  
                    _lastServoStartTime 01C8                                  _CANCON 000F6F  
                                _ADRESH 000FC4                                  _EEADRH 000F75  
                                _ADRESL 000FC3                        __end_of_addEvent 5DF0  
                                _EEDATA 000F73                                  _EECON1 000F7F  
                                _EECON2 000F7E                                  ?_numEv 002D  
                                _ANCON0 000F5D                                  _ANCON1 000F5C  
                      ___awdiv@dividend 0077                         ?i2_setOutputPin 002D  
                                _CIOCON 000F70                    __p_moduleNvDefs_text FF80  
                   insertIntoRxFifo@ptr 007C                      setOutputState@type 0077  
                                i1l1604 7E0A                                  i1l1683 9288  
                                i1l1699 9322                                  _TABLAT 000FF5  
                           _FlashStatus 01D6                                  _TBLPTR 000FF6  
                           i1memcpy@tmp 0043                           _needsStarting 8CE4  
                        ??_initAnalogue 0071                            ?_removeEvent 009F  
                        processEvent@ca 0093                         ?_setBounceState 0071  
                   setServoPosition@pos 0071                          _clearAllEvents 9C02  
                        processEvent@io 0091                     setServoState@action 0071  
                       setMultiState@io 0075                        __end_of_cbusInit A0DA  
                         _canFillRxFifo 8614                             initTicker@i 0073  
                      _rebuildHashtable 6964                        ??_processActions 00C8  
                         APP_doSOD@step 00C9                        __end_of_ee_write 9A88  
                     ?_getProducedEvent 002D                   _cbusSendEventWithData 7EC6  
                       completed@action 0071                         setServoState@io 0074  
                 ??_checkIncomingPacket 007D                        __end_of_configIO 303C  
             _sendInvertedProducedEvent 9B22                      _processEnumeration 680C  
                      __end_of_flimInit 9DA0                             readInput@io 0075  
                      pollServos@midway 00BF              startDigitalOutput@pinState 00C2  
                      __end_of_high_isr 97F6                      ??_getProducedEvent 0088  
          ??_timer3DoneInterruptHandler 0033                        __end_of_bounceUp 4DC6  
                      pollServos@target 00BD                                  ___lmul 97F6  
       checkRemoveTableEntry@tableIndex 009F                                  _doAreq 6F34  
                                ___wmul A3E0                                  _doEnum A64C  
                             ??___awdiv 007B                                  _clkMHz 0017  
                             ??___lbdiv 0072                                  _doNerd A6C8  
                                _doWait 86B4                                  _doNvrd 9BB8  
                                _getEVs 76F4                                  _doRqmn 8FCC  
                                _doRqnp 911C                                  _delete 93F6  
                         _mioEventsInit A63A                               ??___lwdiv 0075  
                             ??_canInit 007C                               ??___lwmod 0075  
                             ??_canSend 008A                       needsStarting@type 0072  
                                _nodeID 0001                                  _memcpy 9CD6  
                             ??_doError 0093                               ??_doEvlrn 00D6  
                             ??_doNenrd 0094                               ??_doEvuln 00A8  
                                getNN@f 0086                               ??_doNnclr 009E  
                         ?_parseCBUSMsg 00E4                               ??_ee_read 0073  
                                clear_0 7A98                                  clear_1 7AAC  
                                clear_2 7AC0                               ??_doNnevn 0094  
                                clear_3 7AD2                                  clear_4 7ADE  
                                clear_5 7AEA                                  clear_6 7AF6  
                                clear_7 7B0A                               ??_doReqev 00A0  
                             ??_doReval 0095                        ___awdiv@quotient 007D  
                                getEv@f 0088                __end_of_setDigitalOutput 8028  
                             ??_doRqevn 0094                               ??_doNvset 00DB  
                     ??_cbusMsgReceived 00A3                                  _thisNN 932C  
                             ??_doRqnpn 0094                     ?_processEnumeration 002D  
                             ??_getHash 008C                                  isa$std 000001  
                      ??_processOutputs 00B5             ?_isSuitableTimeToWriteFlash 002D  
               pollAnalogue@hhysteresis 00B8                           canbusRecv@msg 009B  
                         canbusRecv@ptr 009F                __end_of_setNormalActions A712  
                         ?_parseFLiMCmd 00E1           __end_ofi1_checkIncomingPacket 734A  
                      ??_parseCbusEvent 009D                                  numEv@f 0084  
                                pop@ret 0076                               ??_tickISR 003D  
                      canFillRxFifo@ptr 0068                            __mediumconst 0000  
                             ??_tickGet 0075                      _tableIndexToEvtIdx A6E4  
                             ??_low_isr 006A                               ??_setType 00CD  
                                tblptrh 000FF7                                  tblptrl 000FF6  
                     doEvlrn@nodeNumber 00D0                                  tblptru 000FF8  
                           initialise@i 00D8                           _initInputScan 7C98  
                      __end_of_quantity 9FCE                         _txIndexNextFree 0011  
                          ?_setupTimer1 002D                            ?_setupTimer3 002D  
                   _startFLiMFlash$4937 007D                         _txIndexNextUsed 0010  
                      ___lbdiv@dividend 0072                    __end_of_APP_addEvent 96EE  
                             ??_writeEv 00A3                   _checkRemoveTableEntry 9DE2  
                   addEvent@eventNumber 00B5                       _expeditedQueueBuf 02C4  
                     ??_cbusSendOpcMyNN 0093                       ??_cbusSendMsgMyNN 0090  
                        ?_needsStarting 0071                     ?_tableIndexToEvtIdx 002D  
                __end_of_clearAllEvents 9C4A                       __end_ofi1_tickGet 98A2  
                startServoOutput@action 0071                    ??_processEnumeration 0094  
                            _canTX$3447 0084                              __accesstop 0060  
               __end_of__initialization 7B10                           bounceDown@tmp 0087  
                 writeFlashImage@offset 0085                cbusSendEventWithData@msg 0098  
              cbusSendEventWithData@ret 009C                          ?_canFillRxFifo 002D  
                        setOutputPin@io 0076                  checkRemoveTableEntry@e 00A0  
                     _expeditedWriteIdx 01DF                           ___rparam_used 000001  
            __end_ofi1_insertIntoRxFifo 951C                       i1tickGet@IntFlag1 0042  
                     i1tickGet@IntFlag2 0041               ?_factoryResetGlobalEvents 002D  
                       doRqnpn@paramptr 009B                          __pcstackCOMRAM 002D  
                        ?_mioEventsInit 002D                       i1__PointBuffer@pt 0040  
                          __pidataBANK0 A722                            __pidataBANK1 A725  
                         __end_of_doSOD A6BE                           __end_of_canTX 6320  
                         __end_of_getEN 90AE                           __end_of_doSnn 9692  
                         __end_of_getNN 87EC                           __end_of_getEv 7150  
         APP_doSOD@disable_SOD_response 00CC                          ??_parseCBUSMsg 00E6  
                         __end_of_numEv 89AC                     _canInterruptHandler A5E2  
                  ??_tableIndexToEvtIdx 0071                            canTX@hiIndex 0087  
                      ___lbdiv@quotient 0074                 __end_of_actionQueueInit A13C  
                          ?_startServos 002D                        ??i1__PointBuffer 003F  
                             ?i1_doEnum 002D                            ?_startOutput 00C5  
               pollAnalogue@lhysteresis 00BA                          ??_parseFLiMCmd 01ED  
                            _canTxError 925C                       ??_actUponNVchange 00D4  
                         ?_setFlashWord 0087                    _factoryResetGlobalNv 8AC4  
                            _canQueueRx A670                               ?i1_memcpy 003D  
        requestNodeNumber@local_cbusMsg 0098                          ?_initInputScan 002D  
            rebuildHashtable@tableIndex 0097            __end_of_deleteHappeningRange 82DC  
                        _factoryResetEE 9C90                           ??_doFLiMFlash 007B  
                               ??_doSOD 0071                                 ??_canTX 007D  
                         completed@type 0072                                 ??_getEN 007F  
                               ??_doSnn 009D                                 ??_getNN 007F  
                               ??_getEv 0083           i1checkIncomingPacket@msgFound 004D  
               startDigitalOutput@state 00BD                ?_getDefaultProducedEvent 002D  
                               ??_numEv 0081               processEvent@masked_action 0092  
                     doNvset@flashIndex 00DD                              _canbusRecv 77CE  
                  ?_canInterruptHandler 002D                       initTicker@divider 0072  
                            __pbssBANK0 00E6                              __pbssBANK1 0100  
                            __pbssBANK2 0200                              __pbssBANK3 0300  
                            __pbssBANK4 0400                              __pbssBANK5 0500  
                            __pbssBANK6 0600                            loadNvCache@i 0082  
                       ?_clearAllEvents 002D                 writeFlashByte@flashAddr 0087  
               writeFlashByte@flashData 008A                              _defaultNVs 1E4E  
                   getParFlags@paramptr 0071                       ??_SaveNodeDetails 009B  
                   setNewCanId@newCanId 0079                       ??_checkCANTimeout 004B  
                ?_cbusSendEventWithData 0093                              _delayCount 0284  
                          _factoryReset A6D2                      initAnaloguePort@io 0071  
                         addEvent@evVal 00B8                           addEvent@evNum 00B7  
                         addEvent@error 00C4                  processActions@ioAction 00D1  
                   APP_doSOD@send_on_ok 00CA                                 ?___lmul 0071  
                               ?_doAreq 009B                                 ?___wmul 0071  
                        __PointBuffer@b 0073                            initBounce@io 0071  
                               ?_doEnum 002D                                 ?_doNerd 002D  
                               ?_doWait 007D                         _doTimedResponse 8A3A  
                               ?_doNvrd 002D                                 ?_getEVs 002D  
                               ?_doRqmn 002D                                 ?_doRqnp 002D  
                               ?_delete 0071                   SaveNodeDetails@nodeID 0098  
                               ?_memcpy 0071                               ?_addEvent 00B3  
                               _ECANCON 000F72                          _ee_write_short A2E6  
                        ___lmul@product 0079                     setOutputPosition@io 0080  
                               ?_thisNN 0071                                 _BRGCON1 000E43  
                               _BRGCON2 000E44                                 _BRGCON3 000E45  
                            canSend@msg 0088                  processActions@peekItem 00CB  
                       _writeFlashImage 8384                __end_of_setServoPosition A3BA  
                        ??_setFlashWord 008C                              _doneAction A6F4  
                            ??i1_doEnum 003D                   ?_factoryResetGlobalNv 002D  
                    _startDigitalOutput 4DC6                    __end_of_initAnalogue A03C  
                       _writeFlashShort 8DEA                              _flashFlags 0005  
                               i1l20091 7DFA                                 i1l20093 7DFE  
                               i1l20295 9518                                 i1l20287 9502  
                               i1l20925 92B8                                 i1l20917 9294  
                               i1l15431 9856                                 i1l20871 8616  
                               i1l15451 9886                                 i1l20883 864A  
                               i1l20893 866C                                 i1l20895 867A  
                               i1l20899 86AC                                 i1l15923 72E8  
                               i1l15915 72C0                                 i1l15941 92CC  
                               i1l15933 7346                                 i1l15951 92E8  
                               i1l15943 92D4                                 i1l15953 92EC  
                               i1l15945 92DC                                 i1l15929 7312  
                               i2l12123 64D2                                 i1l15947 92E0  
                               i1l15939 92C8                  __end_of_factoryResetEE 9CD6  
                               i2l12133 6588                                 i1l15949 92E4  
                               i1l15957 92F4                                 i2l12135 65C2  
                               i2l12127 6510                                 i2l12143 663A  
                               i2l12129 654A                                 i2l12139 6600  
                               i1l19881 9D2C                                 i2l12943 97C8  
                               i1l19889 9D4C                     sendProducedEvent@on 00AE  
                        _setOutputState 98A2                              ??i1_memcpy 0043  
                            _flashState 01D3                  processActions@nextType 00CD  
                            _flashblock 01F6                               ?_cbusInit 007E  
                         ?__PointBuffer 0071                               ?_ee_write 0073  
                               _TBLPTRU 000FF8                           ?_setStatusLed 002D  
                               _RXB0CON 000F60                                 _RXB1CON 000F30  
                         ?_pollAnalogue 002D                        _insertIntoRxFifo 9458  
                               _TXB0DLC 000F25                                 _TXB1DLC 000F15  
                               _TXB0CON 000F20                       __end_of_checkCBUS 8DEA  
                               _TXB2DLC 000F05                                 _TXB1CON 000F10  
                               _TXB2CON 000F00                           ?_setOutputPin 0071  
                   ?_startDigitalOutput 00BD                  ?_checkRemoveTableEntry 002D  
                       ??_needsStarting 0073                               ?_configIO 002D  
                             ?_flimInit 002D                              _bounceDown 3522  
                 ??_canInterruptHandler 004F                               ?_high_isr 002D  
                        inputScan@input 00BA                               ?_bounceUp 002D  
                       processEvent@opc 008D                         processEvent@msg 0088  
                    __end_of_FLiMparams 0834                         ??_canFillRxFifo 0060  
              ee_write@interruptEnabled 0076                          APP_doSOD@flags 00CF  
                     _sendProducedEvent 78A8                     __end_of_doFLiMFlash A072  
                       _timerExtension1 0004                          APP_doSOD@value 00D0  
                       _timerExtension2 0003                        ??_startFLiMFlash 007C  
                     __end_of_getAction A6E4                      ?_sendProducedEvent 00AE  
                     __end_of_findEvent 8A3A                                 __Hparam 0000  
                          initServos@io 0085                   setOutputPosition@type 007D  
                       ??_mioEventsInit 0071                                 __Lparam 0000  
    __end_of_timer3DoneInterruptHandler A10C              _timer3DoneInterruptHandler A0DA  
                            _initBounce A25C                              _eventTable 00E9  
                  ??_startDigitalOutput 00BE                           doNvrd@NVindex 0096  
                __end_of_ee_write_short A314                              _initTicker 9E66  
                               ___awdiv 8C60                              _initRomOps A690  
                               ___lbdiv 9EE2                              _initServos 5A40  
                            _eventsInit A6FA                               ?_quantity 0071  
                   ??_sendProducedEvent 00AF                       __end_of_completed 8918  
                               ___lwdiv 999A                             validStart@f 0080  
                               _canInit 5DF0                                 ___lwmod 9DA0  
                               _canSend A54A                       _factoryResetFlash A2B8  
                          __psmallconst 0F00                             setType@addr 00CF  
                  startDigitalOutput@io 00C4                              ??_addEvent 00BA  
                            _currentPos 0180                                 _doError A4B8  
                               _doEvlrn 91F4                                 _doNenrd 951C  
                               _doEvuln A5FA                                 _doNnclr A16C  
                               _ee_read A52E                                 _doNnevn 9C4A  
                               _doReqev 80D6                                 _doReval 8028  
                               __pcinit 7A54                             setType@type 00CC  
                               _cbusMsg 001C                                 _doRqevn A13C  
                               _doNvset 842A                                 _doRqnpn 7534  
                               __ramtop 0F00                              _initialise 39F2  
                               _getHash A4F4                              _setFLiMLed A6A8  
                    doEvlrn@eventNumber 00D2                      ?_factoryResetFlash 002D  
                         ??_checkTxFifo 0048                                 __ptext0 47B2  
                      ?_actionQueueInit 002D                                 __ptext1 7BDA  
                               __ptext2 8E6C                                 __ptext3 8EE2  
                               __ptext4 0F4E                                 __ptext5 A25C  
                               __ptext6 4AC0                                 __ptext7 3522  
                               __ptext8 8C60                                 __ptext9 55EE  
                __end_of_setOutputState 98F6                                 _configs 0F01  
                          ??_QNNrespond 0093                               _T0CONbits 000FD5  
                     __end_of_mioNvInit A72A                         getEv@tableIndex 0089  
                           ?_canTxError 002D                    peekActionQueue@index 0077  
                               _nvCache 0400                         ??_initInputScan 0076  
                             _T1CONbits 000FCD                             ?_canQueueRx 007F  
                     __end_of_readInput 6F34                                 getEN@hi 0082  
                               getEN@lo 0084                         ?_factoryResetEE 002D  
              __end_of_rebuildHashtable 6AA2                        ??i2_setOutputPin 002E  
                             _T3CONbits 000FB1                                 getNN@hi 0082  
                               getNN@lo 0084                                 getEVs@f 0084  
                    doReqev@eventNumber 009D                          ??__PointBuffer 0073  
                               delete@q 0071                                 _tickISR A610  
                        ??_setStatusLed 0071                              ??_cbusInit 0080  
                               _tickGet 9746                          ??_pollAnalogue 00B5  
                     doNenrd@tableIndex 0095                              _setSLiMLed A69C  
                               _low_isr 0858                                 _setType 7E10  
                            ??_ee_write 0076                          ??_setOutputPin 0072  
                          ??_SLiMRevert 0098                     ??_factoryResetFlash 00D2  
                             _APP_doSOD 3DB8                              _inputState 0294  
                               _setupIo 001A                processActions@nextAction 00D2  
                     __end_of_inputScan 47B2                         defaultEvents@en 00C9  
                 cbusSendEvent@eventNum 00A0                         defaultEvents@io 00CB  
                               _started 0015                              ??_configIO 007C  
                            ??_flimInit 0098                        ??_setBounceState 0072  
                            ??_high_isr 0035                       __end_of_popAction A450  
                        __pintcode_body 979E                             ?_canbusRecv 009B  
                               _writeEv 4166               __end_of_sendProducedEvent 797E  
                            ??_bounceUp 0071                    end_of_initialization 7B10  
                         startOutput@io 00C7                              doRqnpn@idx 009E  
                             _FCUparams 0838                    __end_of_parseCBUSMsg 9BB8  
                          doAreq@status 00A5                              getEv@evNum 0081  
                               memcpy@d 0078                                 memcpy@n 0075  
                               memcpy@s 007A                             ?_defaultNVs 008B  
                         ??_clearEvents 00BD                           ??_cbusSendMsg 008C  
                               int_func 979E                      cbusSendMsg@cbusNum 008E  
                     __end_of_setclkMHz A70C                               i1u2641_20 9AC6  
                             i2u1301_44 657E                               i2u1301_45 657A  
                             i2u1302_44 65B6                               i2u1302_45 65B2  
                             i1u1847_25 7266                               i2u1304_44 65F6  
                             i2u1304_45 65F2                               i1u1849_24 72A0  
                             i1u1849_25 729C                               i2u1305_44 662E  
                             i2u1305_45 662A                 __end_of_doTimedResponse 8AC4  
                             i2u1298_44 6506                               i2u1298_45 6502  
                             i2u1299_44 653E                               i2u1299_45 653A  
                             _FLiMFlash 01D7                    __end_of_parseFLiMCmd 3522  
                       _cbusMsgReceived A512                          _readFlashBlock 7B1A  
                      _initAnaloguePort A3BA                              _validStart A1FC  
                         _checkFlashing 734A                            writeEv@evVal 00A2  
                          writeEv@evNum 00A1                              _validateNV 84CE  
                    __end_of_QNNrespond 9948                         pollAnalogue@adc 00C0  
                          writeEv@nextF 00AE                            _flickerState 01D2  
                          initialise@en 00DC                            initialise@ev 00DA  
                  APP_doSOD@disable_off 00CD                              _pollServos 0F4E  
             __end_of_factoryResetFlash A2E6                  pollServos@beforeMidway 00BE  
               __end_of_writeFlashImage 842A                      cbusSendOpcMyNN@opc 0091  
                    cbusSendOpcMyNN@msg 0092                    _deleteHappeningRange 8230  
                      initialise@action 00D6                           ?_shortFlicker 002D  
                               postdec1 000FE5                                 postdec2 000FDD  
                            _txErrCount 01DD                                 postinc0 000FEE  
                               postinc1 000FE6                                 postinc2 000FDE  
               __end_of_writeFlashShort 8E6C                         ?_ee_write_short 0077  
                            ??_quantity 0073                      _FLiMparams_absaddr 000820  
           __end_of_setExpeditedActions A718                      __end_of_SLiMRevert A5E2  
                          _APP_addEvent 9692                       ??_isNoServoPulses 0071  
                    cbusSendMsgMyNN@msg 008F                           ??_getParFlags 0071  
                ??_factoryResetGlobalNv 008B                          checkTxFifo@ptr 0049  
                          _maxCanRxFifo 000A                  processEvent@tableIndex 008C  
                            _servoState 0140                            _maxCanTxFifo 000B  
                             _PORTAbits 000F80                       ?_setDigitalOutput 0077  
                       ?_setOutputState 0076                             ?_doneAction 002D  
                         ?_processEvent 0088                              _setupState 0019  
                       _cbusSendOpcMyNN A4D6                         _cbusSendMsgMyNN A314  
        deleteHappeningRange@tableIndex 00BB                       ?_setNormalActions 002D  
                    setDigitalOutput@io 007B                      ??_setDigitalOutput 0078  
                processEvent@nextAction 008E                              _pushAction A19C  
                    deleteActionRange@e 00BB                      _lastActionPollTime 01C0  
     __end_of_sendInvertedProducedEvent 9B6E                               _TRISBbits 000F93  
                             _TXBIEbits 000E7F                      ??_setNormalActions 0071  
                            ?_APP_doSOD 002D                             _doFLiMFlash A03C  
                   __end_of_checkTxFifo 7E10                         doAreq@happening 00AD  
                      doNvrd@flashIndex 0094                  cbusSendOpcMyNN@cbusNum 0093  
                           ?_bounceDown 002D                           clearEvents@io 00BD  
            deleteHappeningRange@action 00B9             __end_of_checkIncomingPacket 724E  
                __end_of_readFlashBlock 7BDA                       ??_flushFlashImage 0076  
sendInvertedProducedEvent@state_to_send 00BC              deleteHappeningRange@number 00B3  
                  __end_of_setFlashWord 9F5A                        doTimedResponse@n 00D3  
                        ?_checkFlashing 002D                            checkCBUS@msg 02CC  
              parseFLiMCmd@cmdProcessed 00E3                               i1_tickGet 984C  
                     removeTableEntry@f 009D                          bounceUp@midway 0079  
                        _normalQueueBuf 0388                              bounceUp@io 007A  
              sendProducedEvent@thisBit 00B2                             ?_initBounce 002D  
                       _actUponNVchange 50AC                          ??_shortFlicker 007B  
                 ?_deleteHappeningRange 00B3                              _switchTime 01AC  
          ??_timer1DoneInterruptHandler 0033                     __end_of_clearEvents A006  
                   __end_of_cbusSendMsg 9F96                    __end_of_moduleNvDefs 0000  
                     _canTransmitFailed 000C                           _io@main$F1444 00E6  
                           ?_initTicker 002D                             ?_initRomOps 002D  
                        _normalWriteIdx 01E1                             ?_initServos 002D  
                           ?_eventsInit 002D                           _ee_read_short 99EC  
                           pushAction@a 007C                          __end_of___lmul 984C  
                         _defaultEvents 5FB8                               i1memcpy@d 0044  
                             i1memcpy@n 0041                          __end_of_doAreq 7044  
                             i1memcpy@s 0046                          __end_of___wmul A406  
                        __end_of_doEnum A65E                          __end_of_doNerd A6D2  
            removeTableEntry@tableIndex 009E                          __end_of_doWait 8750  
                        __end_of_doNvrd 9C02                          __end_of_getEVs 77CE  
                        __end_of_doRqmn 903E                          __end_of_doRqnp 918A  
                        __end_of_delete 9458                             ?_initialise 002D  
                        ??_processEvent 008A                             ?_setFLiMLed 002D  
                    i1_insertIntoRxFifo 94BA                        _removeTableEntry 7442  
                       needsStarting@io 0075                          _initStatusLeds A498  
                        __end_of_memcpy 9D1A                             _doAreq$4582 00A6  
                           _doAreq$4583 00A8                          __end_of_thisNN 9392  
                   writeFlashImage@addr 007D                     writeFlashImage@data 0080  
                   start_initialization 7A54                         _SaveNodeDetails A36A  
                           ?_setSLiMLed 002D                     __end_of_getParFlags 999A  
                     ??_peekActionQueue 0077                        ??_clearAllEvents 0098  
                       _checkCANTimeout 9A88                     ?i1_insertIntoRxFifo 0048  
                 i1_checkIncomingPacket 724E                             __end_of_pop 8882  
                             _NvBytePtr 01F3                 __end_of_cbusMsgReceived A52E  
                  setBounceState@action 0071                setDigitalOutput@pinState 007A  
               ??_cbusSendEventWithData 009A                             _CANSTATbits 000F6E  
                         ??_readCPUType 0073                        doEnum@sendResult 0071  
                    parseFLiMCmd@rx_ptr 00E1                        writeFlashShort@i 0075  
                       ?_readFlashBlock 0076                           ??_mioFlimInit 0098  
                     actUponNVchange@io 00D9                            _initAnalogue A006  
                         ??_loadNvCache 007F                        ?_doTimedResponse 002D  
                            ?i1_tickGet 003D                             ?_validStart 002D  
                    setServoPosition@io 0072                             ?_validateNV 0078  
                          doEvlrn@evVal 00D5                            doEvlrn@evNum 00D4  
                       numEv@tableIndex 0085                    ??i1_insertIntoRxFifo 004A  
                  __end_of__PointBuffer 91F4                    __end_of_setStatusLed A5B2  
                          doEvlrn@error 00D6                    __end_of_pollAnalogue 2A62  
                           ?_pollServos 002D                __end_of_insertIntoRxFifo 94BA  
            __end_of_evtIdxToTableIndex A6F4                rebuildHashtable@chainIdx 0096  
                  __end_of_setOutputPin 64CE                                ??___lmul 0079  
                      ?_writeFlashImage 007D                                ??_doAreq 009F  
                              ??___wmul 0075                                ??_doEnum 0071  
                          doNenrd@index 0094                 __end_of_cbusSendOpcMyNN A4F4  
                        ?_ee_read_short 0073                                ??_doNerd 0071  
               __end_of_cbusSendMsgMyNN A340                                ??_doWait 007F  
                              ??_doNvrd 0094                                ??_getEVs 0081  
                        ?_defaultEvents 00C8                                ??_doRqmn 008F  
                              ??_doRqnp 008F                                ??_delete 0074  
                      ?_writeFlashShort 002D                      addEvent@forceOwnNN 00B9  
                           __pdataBANK0 00E9                             __pdataBANK1 01F3  
                __end_of_initStatusLeds A4B8                                ??_memcpy 0077  
                              ??_thisNN 0073                           ??_initOutputs 0071  
                pollAnalogue@hthreshold 00BC                             _checkTxFifo 7D56  
                         _cbusSendEvent A340                           _cbusSendOpcNN A406  
                         _cbusSendMsgNN 9EA4                        _startMultiOutput 8572  
                     ?_setServoPosition 0071                      startMultiOutput@io 0073  
                      _startServoOutput 7614                             __pbssBIGRAM 0700  
                         loadNvCache@np 0080                 ??_checkRemoveTableEntry 009F  
                           ?_pushAction 002D                           ??_FLiMSWCheck 00A1  
                         _analogueState 0190                             __pbssCOMRAM 0001  
                    ??_setServoPosition 0072                           __pcstackBANK0 0060  
                         __pcstackBANK1 01ED                           __pcstackBANK2 02CC  
             getProducedEvent@happening 0089                             ??_APP_doSOD 00BD  
                      i1__PointBuffer@b 003F                           _setMultiState 6AA2  
                       _happening2Event 0300                           _setServoState 6BD8  
                    startServoOutput@io 0074                      addEvent@tableIndex 00C7  
                cbusSendMsgMyNN@cbusNum 0090                   i1insertIntoRxFifo@ptr 0048  
                             _canRxFifo 0500                          canSend@success 008A  
               APP_doSOD@event_inverted 00CE                               _canTxFifo 0600  
                             addEvent@e 00C6                               addEvent@f 00C5  
                    addEvent@nodeNumber 00B3                             canTX@fullUp 0086  
              _factoryResetGlobalEvents A72A                               _checkCBUS 8D68  
                       ??_checkFlashing 007C                           ??_longFlicker 007B  
               __end_of_actUponNVchange 5366                      initInputScan@input 0078  
                pollAnalogue@lthreshold 00BE   sendInvertedProducedEvent@can_send_off 00B8  
                    initTicker@priority 0071                             _clearEvents 9FCE  
                           _cbusSendMsg 9F5A                    canFillRxFifo@hiIndex 0067  
                             __pnvBANK0 00EC                               __pnvBANK1 01F6  
             sendProducedEvent@thisByte 00B3                        setBounceState@io 0074  
                ??_deleteHappeningRange 00B4                            doNnevn@count 0097  
                  ee_read_short@ee_addr 0078                        ___lwdiv@dividend 0071  
                    validateNV@oldValue 0078                               _getAction A6DC  
              i1checkIncomingPacket@ptr 0047             ?_timer3DoneInterruptHandler 002D  
                   __end_of_readCPUType A580                         tickGet@IntFlag1 0076  
                       tickGet@IntFlag2 0075                               __pintcode 0848  
                     _lastInputScanTime 01C4                    i1tickGet@currentTime 0043  
                      getEVs@tableIndex 0086                     __end_of_mioFlimInit A6C8  
                  APP_doSOD@send_off_ok 00CB                                ?___awdiv 0077  
                             __ptext100 9948                               __ptext101 8184  
                              ?___lbdiv 0071                               __ptext110 A6D2  
                             __ptext102 5366                               __ptext111 A2B8  
                             __ptext103 A70C                               __ptext120 5C1E  
                             __ptext112 7E10                               __ptext104 A712  
                             __ptext121 4166                               __ptext113 A3BA  
                             __ptext105 A19C                               __ptext130 8AC4  
                             __ptext122 9F1E                               __ptext114 1E4E  
                             __ptext106 797E                               __ptext131 9E24  
                             __ptext123 9DE2                               __ptext115 A3E0  
                             __ptext107 9DA0                               __ptext140 8B4E  
                             __ptext132 A72A                               __ptext124 7442  
                             __ptext116 5FB8                               __ptext108 999A  
                             __ptext141 A4B8                               __ptext133 9C02  
                             __ptext125 76F4                               __ptext117 9FCE  
                             __ptext109 A1CC                            popAction@ret 0077  
                             __ptext150 A59A                               __ptext142 A4D6  
                             __ptext134 A580                               __ptext126 89AC  
                             __ptext118 8230                               __ptext151 A69C  
                             __ptext143 A314                               __ptext135 8384  
                             __ptext127 2A62                               __ptext119 82DC  
                             __ptext160 903E                               __ptext152 A6A8  
                             __ptext144 7150                               __ptext136 9C90  
                             __ptext128 7F78                               __ptext161 7B1A  
                             __ptext153 A5B2                               __ptext145 A64C  
                             __ptext137 A512                               __ptext129 6320  
                             __ptext170 A5CA                               __ptext162 A626  
                             __ptext154 A36A                               __ptext146 918A  
                             __ptext138 77CE                               __ptext171 A406  
                             __ptext163 A072                               __ptext155 6964  
                             __ptext147 666E                               __ptext139 680C  
                             __ptext180 A5E2                               __ptext172 9EA4  
                             __ptext164 8DEA                               __ptext156 8750  
                             __ptext148 A474                               __ptext181 9A88  
                             __ptext173 9F5A                               __ptext165 A718  
                             __ptext157 A4F4                               __ptext149 A03C  
                             __ptext190 92C4                               __ptext182 925C  
                             __ptext174 A54A                               __ptext166 A680  
                             __ptext158 7044                               __ptext183 7D56  
                             __ptext175 6170                               __ptext167 A2E6  
                             __ptext159 A1FC                               __ptext192 A0DA  
                             __ptext184 8614                               __ptext176 9746  
                             __ptext168 9A3A                               __ptext193 A22C  
                             __ptext185 94BA                               __ptext177 9CD6  
                             __ptext169 A52E                               __ptext194 64CE  
                             __ptext186 9D1A                               __ptext187 724E  
                             __ptext179 A610                               __ptext188 984C  
                             __ptext189 A65E                               _findEvent 89AC  
                _startDigitalOutput$680 00C0                                ?___lwdiv 0071  
                              ?_canInit 007B                          _writeFlashByte A580  
                              ?___lwmod 0071                     __end_of_loadNvCache 9E66  
                          doReqev@evVal 00A2                            doReqev@evNum 009F  
                      processActions@io 00CE                         getNN@tableIndex 0087  
                              ?_canSend 0088                            doReval@enNum 0097  
                      ??_factoryResetEE 007D                         ?_initStatusLeds 002D  
                             doAreq@ev0 00AB                            doReval@evVal 0098  
                          doReval@evNum 0094                         __PointBuffer@pt 0074  
                             _flashTime 01A4                                ?_doError 002D  
                              ?_doEvlrn 00D0                                ?_doNenrd 002D  
                              ?_doEvuln 00A4                             __pintcodelo 0858  
        cbusSendEventWithData@eventNode 0093                                ?_doNnclr 002D  
                              ?_ee_read 0071                                ?_doNnevn 002D  
               __end_of_SaveNodeDetails A394                                ?_doReqev 009B  
                              ?_doReval 0094                                ?_doRqevn 002D  
                              ?_doNvset 00DA                            _parseCBUSMsg 9B6E  
                              ?_doRqnpn 002D                                ?_getHash 0088  
              deleteActionRange@updated 00B9                               _flimState 0016  
                           _getParFlags 9948                 __end_of_checkCANTimeout 9AD6  
                         ??_setNewCanId 0077                          _resultRequired 0008  
                        ?_cbusSendEvent 009E                          ?_cbusSendOpcNN 0093  
                        ?_cbusSendMsgNN 008F                               _larbCount 01DE  
                     __p_FCUparams_text 0838                            ??_canTxError 004B  
                             _completed 8882                        _getProducedEvent 957C  
                          ??_canQueueRx 0080                             __smallconst 0F00  
           __end_of_canInterruptHandler A5FA                             _COMSTATbits 000F71  
              __end_of_initAnaloguePort A3E0                            _parseFLiMCmd 303C  
                     ?_rebuildHashtable 002D                                ?_tickISR 002D  
                ?i1_checkIncomingPacket 0047                    setOutputPosition@pos 007C  
                              ?_tickGet 0071                         _rxIndexNextFree 000F  
                              ?_low_isr 002D                    setOutputState@action 0076  
                              ?_setType 00CC                         _rxIndexNextUsed 000E  
                             _mioNvInit A728                          defaultNVs@type 008B  
                        ?_setMultiState 0071                 startBounceOutput@action 0071  
                          _nodeVarTable 00FF80                     __end_of_initOutputs A2B8  
                        ?_setServoState 0071                    __end_of_shortFlicker 911C  
                             _readInput 6E24                      ??_rebuildHashtable 008E  
                      ___lwdiv@quotient 0076                         validateNV@index 007D  
                   _writeFlashWithErase A072                       ee_read_short@addr 0073  
                          ??_canbusRecv 009D                                ?_writeEv 00A1  
                       validateNV@value 0079                    cbusSendEvent@cbusNum 00AD  
                       startServos@type 00C3                             _flashDelays 0160  
                    processActions@type 00CC                               _expedited 001B  
                      ?_cbusMsgReceived 00A1                     __end_of_FLiMSWCheck 680C  
                 __end_of_needsStarting 8D68                          doReval@evIndex 0096  
                            ?_checkCBUS 002D                    actUponNVchange@index 00D8  
                          ??_defaultNVs 008C                               _inputScan 449A  
                  cbusSendEvent@onEvent 00A2                    cbusSendOpcNN@cbusNum 0097  
                  actUponNVchange@value 00D3                          ___wmul@product 0075  
                             _loopCount 0264                           ??_removeEvent 00A3  
                              _LATBbits 000F8A                    __end_of_processEvent 55EE  
                 __end_of_canFillRxFifo 86B4                               _popAction A42C  
                     findEvent@chainIdx 0099                         _isNoServoPulses A680  
                        _portInProgress 00E8                                _PIE1bits 000F9D  
                      ??_ee_write_short 007B                                _PIE2bits 000FA0  
                  rebuildHashtable@hash 0094                                _PIE5bits 000F76  
                           ??i1_tickGet 0041                               getHash@en 008A  
                             getHash@nn 0088                SaveNodeDetails@flimState 009A  
                      _haveRequestedAdc 0018                               _targetPos 0170  
    __end_of_timer1DoneInterruptHandler A25C              _timer1DoneInterruptHandler A22C  
                    __end_of_canTxError 92C4                               _pollCount 0120  
                              _PIR1bits 000F9E                                _PIR2bits 000FA1  
                           _flickerTime 01A0                         ??_ee_read_short 0075  
                            ?_getAction 002D                                _PIR4bits 000FB7  
                              _PIR5bits 000F77                      __end_of_canQueueRx A680  
                         canInit@busNum 002D                               _setclkMHz A706  
                     doReqev@tableIndex 00A1                         ??_defaultEvents 00C9  
               actUponNVchange@oldValue 00D2                  __end_of_writeFlashByte A59A  
                   __end_of_longFlicker A1FC                                _RCONbits 000FD0  
                 __end_of_mioEventsInit A64C                       doReqev@nodeNumber 009B  
                      ??_setOutputState 0078                                _RXF0SIDL 000EE1  
                  ?_writeFlashWithErase 002D           startDigitalOutput@actionState 00C3  
                              _RXM0EIDH 000EFA                                _RXM0EIDL 000EFB  
                            ?_findEvent 008E                                _TXB0SIDH 000F21  
                              _RXM1EIDH 000EFE                        ?_cbusSendOpcMyNN 0091  
                              _TXB0SIDL 000F22                                _RXM1EIDL 000EFF  
                              _TXB1SIDH 000F11                                _TXB1SIDL 000F12  
                              _TXB2SIDH 000F01                        ?_cbusSendMsgMyNN 008F  
                              _TXB2SIDL 000F02                                _RXFBCON0 000E71  
                              _RXFBCON1 000E72                                _RXFBCON2 000E73  
                              _RXFBCON3 000E74                                _RXFBCON4 000E75  
                              _RXFBCON5 000E76                                _RXFBCON6 000E77  
                              _RXFBCON7 000E78                                _RXM0SIDH 000EF8  
                              _RXM0SIDL 000EF9                                _RXM1SIDH 000EFC  
                              _RXM1SIDL 000EFD                         inputScan@change 00B9  
                     _requestNodeNumber A5B2                            doRqmn@namadr 008F  
                   i2setOutputPin@state 002D                       _stepsPerPollSpeed 0130  
                          doRqmn@namptr 0093                      ee_write_short@addr 0077  
                    ee_write_short@data 0079                      __end_of_canbusRecv 78A8  
                             configIO@i 0083                             _bounceState 02B4  
                  cbusSendMsgNN@cbusNum 0092                            ??_doneAction 0078  
                            _ADCON0bits 000FC2                              _ADCON1bits 000FC1  
                         _normalReadIdx 01E2                              _ADCON2bits 000FC0  
                     ___wmul@multiplier 0071                       _timedResponseStep 0013  
                    ?_requestNodeNumber 002D                                i1_doEnum A65E  
                             _startWait 01B8                               _startTime 01CC  
                            ?_completed 0071            ??_isSuitableTimeToWriteFlash 0071  
                          doRqevn@count 0094                       defaultEvents@type 00C8  
                    __end_of_defaultNVs 2470                            _setFlashWord 9F1E  
                         _prevFlimState 0006                                i1_memcpy 9D1A  
                 __end_of_initInputScan 7D56                         _flushFlashImage A626  
                    i1doEnum@sendResult 003D              processActions@simultaneous 00CA  
                            ?_mioNvInit 002D                     __end_of_setNewCanId 8BD8  
                          ?_doFLiMFlash 002D                 sendProducedEvent@status 00B1  
                   ??_requestNodeNumber 0098                              ?_readInput 002D  
                        doWait@duration 007D                           ??_setupTimer1 0077  
                         ??_setupTimer3 0077                            ??_bounceDown 007F  
                          _moduleNvDefs FF80                       ___lmul@multiplier 0071  
                           _INTCON2bits 000FF1                     __end_of_module_type 0F4D  
              parseCbusEvent@tableIndex 009E                          doAreq@thisByte 00A4  
                        _expeditedQueue 01E3                         startOutput@type 00C6  
              parseCbusEvent@nodeNumber 00A1                              ?_inputScan 002D  
                           _readCPUType A566                        ?_actUponNVchange 00D2  
              __end_of_removeTableEntry 7534                              ?_popAction 002D  
                           _mioFlimInit A6BE                              _EECON1bits 000F7F  
                             peek@index 0073                             doError@code 0093  
                   startBounceOutput@io 0072                             _loadNvCache 9E24  
                    __end_of_doneAction A6FA                 _getDefaultProducedEvent A71E  
                              __Hrparam 0000                           _timedResponse 0014  
                          ee_write@addr 0073                             _eventChains 0700  
                          ee_write@data 0075                evtIdxToTableIndex@evtIdx 0071  
                          ??_initBounce 0071                 APP_addEvent@eventNumber 00CA  
                            ?_setclkMHz 002D                               memcpy@tmp 0077  
                              __Lrparam 0000                       doReval@tableIndex 009A  
                       ?_writeFlashByte 0087                   ??_writeFlashWithErase 0076  
             __end_of_requestNodeNumber A5CA                            ??_initTicker 0071  
                   __end_of_removeEvent A474                            ??_initRomOps 0071  
                removeEvent@eventNumber 00A1                            ??_initServos 0081  
                          ??_eventsInit 0098                            thisNN@rx_ptr 0071  
                       _peekActionQueue 95DA                         ??_cbusSendEvent 00A3  
                       ??_cbusSendOpcNN 0097                         ??_cbusSendMsgNN 0092  
                              _addEvent 5C1E                       _startBounceOutput 9392  
                        _processActions 583A                      __end_of_bounceDown 39F2  
                          ??_initialise 00D2                        ?_SaveNodeDetails 0098  
                         canSend@msgLen 0089                            ??_setFLiMLed 0071  
                         ??_startServos 00C1                        ?_checkCANTimeout 002D  
                         ??_startOutput 00C7                             _initOutputs A28A  
                    ?_startBounceOutput 0071               rebuildHashtable@happening 0095  
                           ee_read@addr 0071                         ??_setMultiState 0072  
                       ??_setServoState 0072                             _FLiMSWCheck 666E  
               deleteActionRange@action 00BA                            ??_setSLiMLed 0071  
    i1checkIncomingPacket@incomingCanId 004E        checkIncomingPacket@incomingCanId 0082  
                              canTX@msg 007C                                _cbusInit A0A8  
                              canTX@ptr 0082                           initOutputs@io 0071  
                  processActions@action 00D0                                _ee_write 9A3A  
                       ___lwdiv@divisor 0073              ?_sendInvertedProducedEvent 00B5  
                          __PointBuffer 918A                            _setStatusLed A59A  
                       ___lwdiv@counter 0075                     needsStarting@action 0071  
                          _pollAnalogue 2470                                __ptext10 583A  
                              _deviceid 01D0                                __ptext11 96EE  
                              __ptext20 A42C                                __ptext12 4DC6  
                              __ptext21 87EC                                __ptext13 98A2  
                            _T1GCONbits 000FAA                                __ptext30 39F2  
                              __ptext22 97F6                                __ptext14 8CE4  
                              __ptext31 A6BE                                __ptext23 A6B4  
                              __ptext15 A6DC                             defaultNVs@i 008E  
                              __ptext40 9E66                                __ptext32 A728  
                              __ptext24 9AD6                                __ptext16 95DA  
                              __ptext41 A706                                __ptext33 9D5E  
                              __ptext25 9F96                                __ptext17 8BD8  
                              __ptext50 A498                                __ptext42 5A40  
                              __ptext34 A6FA                                __ptext26 93F6  
                              __ptext18 86B4                                __ptext51 A690  
                              __ptext43 8F58                                __ptext35 A0A8  
                              __ptext27 8882                                __ptext19 A6F4  
                              __ptext60 7EC6                                __ptext52 8A3A  
                              __ptext44 A394                                __ptext36 99EC  
                              __ptext28 2470                                __ptext61 A670  
                              __ptext53 A6E4                                __ptext45 A28A  
                              __ptext37 5DF0                                __ptext29 449A  
                              __ptext70 7534                                __ptext62 9458  
                              __ptext54 3DB8                                __ptext46 7C98  
                              __ptext38 A63A                                __ptext71 A566  
                              __ptext63 734A                                __ptext55 9B22  
                              __ptext47 6E24                                __ptext39 A700  
                              __ptext80 50AC                                __ptext72 911C  
                              __ptext64 8D68                                __ptext56 78A8  
                              __ptext48 A006                                __ptext81 7614  
                              __ptext73 8FCC                                __ptext65 90AE  
                              __ptext57 957C                                __ptext49 A10C  
                              __ptext90 A16C                                __ptext82 8572  
                              __ptext74 A13C                                __ptext66 9B6E  
                              __ptext58 A71E                                __ptext91 A6C8  
                              __ptext83 9392                                __ptext75 8028  
                              __ptext67 303C                                __ptext59 A340  
                              __ptext92 951C                                __ptext84 6BD8  
                              __ptext76 80D6                                __ptext68 932C  
                              __ptext93 A6EC                                __ptext85 6AA2  
                              __ptext77 8918                                __ptext69 9636  
                              __ptext94 A5FA                                __ptext86 6CFE  
                              __ptext78 842A                                __ptext95 A450  
                              __ptext87 9EE2                                __ptext79 84CE  
                              __ptext96 91F4                                __ptext88 9BB8  
                              __ptext97 9692                                __ptext89 9C4A  
                              __ptext98 6F34                                __ptext99 98F6  
                   ??_startBounceOutput 0072                            validateNV@io 007C  
                      ??_readFlashBlock 0078                 __end_of_isNoServoPulses A690  
                          _setOutputPin 6320                    processActions@nextIo 00CF  
                              _configIO 2A62                                _flimInit 9D5E  
               deleteActionRange@number 00B3                          _processOutputs 55EE  
         cbusSendEventWithData@eventNum 0095                                _flashbuf 0348  
                              _flashidx 01D4                      __end_of_initBounce A28A  
                              _high_isr 0848                                _bounceUp 4AC0  
                            _T3GCONbits 000FB0                  initialise@simultaneous 00D7  
                    __end_of_initTicker 9EA4                      __end_of_initRomOps A69C  
                           ??_checkCBUS 00E6                      __end_of_initServos 5C1E  
                        _parseCbusEvent 8184                      __end_of_eventsInit A700  
                              doNenrd@n 0096                             doSnn@rx_ptr 009B  
                             setType@io 00D1                             _longFlicker A1CC  
         __end_of_cbusSendEventWithData 7F78                                doNnevn@f 0096  
                              doNnevn@i 0098              sendProducedEvent@happening 00B4  
                      ee_read_short@ret 007A                           _configIO$1531 0080  
                   __end_of_setupTimer1 8F58                     __end_of_setupTimer3 8EE2  
                         ?_factoryReset 002D                __end_of_startMultiOutput 8614  
                    __end_of_initialise 3DB8                           findEvent@hash 0098  
              __end_of_startServoOutput 76F4                      __end_of_setFLiMLed A6B4  
                          ??_validStart 007D                                doRqevn@i 0095  
                     doRqmn@copyCounter 0096                            ??_validateNV 007A  
                        writeEv@nextIdx 00B2                             getEVs@evIdx 0085  
                           getEVs@evNum 0087                     cbusSendOpcNN@nodeID 0094  
                   __end_of_spareparams 0F45                             ??_getAction 0078  
                          ??_pollServos 00B5                                isa$xinst 000000  
               readFlashBlock@flashAddr 0076               __end_of_startBounceOutput 93F6  
                     ?_insertIntoRxFifo 007C                      __end_of_setSLiMLed A6A8  
                __end_of_processActions 5A40                clearAllEvents@tableIndex 009D  
                              int$flags 004F                             ??_findEvent 0092  
                              _quantity 9F96                        canInit@initCanID 007B  
                cbusSendEvent@eventNode 009E                             delete@index 0073  
                          _rxOflowCount 01DA                      ??_insertIntoRxFifo 007E  
                     writeEv@tableIndex 00B1                 __end_of_flushFlashImage A63A  
                     _setOutputPosition 8F58                        processOutputs@io 00B8  
            processEnumeration@newCanId 0099                  APP_addEvent@forceOwnNN 00CE  
                           _setNewCanId 8B4E                            ?_checkTxFifo 002D  
                          pollServos@io 00C0                             ??_completed 0073  
                         doAreq@thisBit 00A3                      ?_setOutputPosition 007C  
                             quantity@q 0071                            ??_pushAction 007C  
                           _OSCTUNEbits 000F9B                              _INTCONbits 000FF2  
                           _module_type 0F45              ??_factoryResetGlobalEvents 0071  
                    _evtIdxToTableIndex A6EC                             _rxFifoUsage 01D8  
                              memcpy@d1 0071                                memcpy@s1 0073  
                __end_of_processOutputs 583A                             ??_mioNvInit 0071  
                        _APP_doSOD$1818 00C7                          _APP_doSOD$1819 00C8  
                     APP_addEvent@evVal 00CD           __end_of_checkRemoveTableEntry 9E24  
                     APP_addEvent@evNum 00CC                      __end_of_validStart A22C  
                   __end_of_startServos 7C98                      startFLiMFlash@fast 007C  
                           ??_readInput 0071                      __end_of_validateNV 8572  
                   __end_of_startOutput 9746                       parseCbusEvent@msg 009B  
                   ??_setOutputPosition 007E                  __end_of_parseCbusEvent 8230  
            __end_of_processEnumeration 6964                          i1__PointBuffer 92C4  
                           getHash@hash 008D                      __end_of_pollServos 1E4E  
                              intlevel1 0000                                intlevel2 0000  
                   ?_evtIdxToTableIndex 002D                             ??_inputScan 00B5  
                          _servoInBlock 0012             checkIncomingPacket@msgFound 0081  
                    __p_FLiMparams_text 0820               ??_getDefaultProducedEvent 0071  
                      ___lwmod@dividend 0071                  APP_addEvent@tableIndex 00CF  
                              numEv@num 0083         sendInvertedProducedEvent@invert 00B6  
                        ??_factoryReset 00D2                             ??_popAction 0077  
                          ?_clearEvents 002D                         readFlashBlock@i 007C  
                          ?_cbusSendMsg 008B                   removeEvent@tableIndex 00A3  
                           _removeEvent A450                       ??_actionQueueInit 0071  
                APP_addEvent@nodeNumber 00C8                             _TXB0CONbits 000F20  
              __end_of_getProducedEvent 95DA                   removeEvent@nodeNumber 009F  
                           _TXB1CONbits 000F10                 __end_of_peekActionQueue 9636  
                           _TXB2CONbits 000F00                        ??_initStatusLeds 0071  
                           _txFifoUsage 01D9                             ??_setclkMHz 0071  
           deleteActionRange@tableIndex 00BC                      __end_of_pushAction A1CC  
            __end_of_tableIndexToEvtIdx A6EC                              _FLiMparams 0820  
                          _shortFlicker 90AE                           canQueueRx@msg 007F  
                    tickGet@currentTime 0077                         ?_processActions 002D  
                           _normalQueue 01E8               __end_of_setOutputPosition 8FCC  
                  ??_evtIdxToTableIndex 0071                       initialise@evIndex 00D9  
                         _producedEvent 01A8                            _txOflowCount 01DB  
                 setDigitalOutput@state 0077                            ?_getParFlags 002D  
                checkIncomingPacket@ptr 007B      __end_of_isSuitableTimeToWriteFlash A71E  
            _isSuitableTimeToWriteFlash A718                 ??i1_checkIncomingPacket 0049  
                     initialise@paction 00DE                 APP_doSOD@happeningIndex 00D1  
                          _processEvent 5366                        _ticksWhenStopped 0200  
                       ___lwmod@divisor 0073          sendInvertedProducedEvent@state 00B5  
                       ___lwmod@counter 0075                       _deleteActionRange 82DC  
                           findEvent@en 0096                       ?_initAnaloguePort 002D  
                           findEvent@nn 0094                       writeEv@startIndex 00AD  
                     _deleteActionQueue 9AD6                    findEvent@eventNumber 0090  
                              writeEv@e 00AF                                writeEv@f 00B0  
                       ?_processOutputs 002D                  __end_ofi1__PointBuffer 932C  
                    ?_deleteActionRange 00B3                      ??_initAnaloguePort 0071  
                    QNNrespond@paramptr 0093                      ?_deleteActionQueue 002D  
                           _setupTimer1 8EE2                             _setupTimer3 8E6C  
                      ?_isNoServoPulses 002D                         ?_parseCbusEvent 009B  
                startMultiOutput@action 0071                        _setDigitalOutput 7F78  
                    cbusInit@initNodeID 007E                             _spareparams 0F41  
                   ??_deleteActionRange 00B4                        _setNormalActions A70C  
                   ??_deleteActionQueue 0077                   __end_of_checkFlashing 7442  
                 ee_write_short@ee_addr 007B                    validStart@tableIndex 007F  
           ?_timer1DoneInterruptHandler 002D                             _pulseDelays 02A4  
